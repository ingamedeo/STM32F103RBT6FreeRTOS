ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"port.c"
  14              	@ GNU C (GNU Tools for ARM Embedded Processors) version 4.9.3 20150529 (release) [ARM/embedded-4_9-
  15              	@	compiled by GNU C version 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.9.00), GMP vers
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./Libraries/CMSIS/CM3/CoreSupport
  18              	@ -I ./Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x
  19              	@ -I ./Libraries/STM32F10x_StdPeriph_Driver/inc -I ./Libraries/Drivers/Leds
  20              	@ -I ./Libraries/Drivers/Buttons -I ./Libraries/Drivers/Usart
  21              	@ -I ./Libraries/Drivers/i2c -I ./Libraries/Drivers/BH1750
  22              	@ -I ./Libraries/Drivers/Utilities -I ./FreeRTOS/Source/include
  23              	@ -I ./FreeRTOS/Source/portable/GCC/ARM_CM3 -imultilib armv7-m
  24              	@ -iprefix /usr/local/Cellar/arm-none-eabi-gcc/20150921/bin/../lib/gcc/arm-none-eabi/4.9.3/
  25              	@ -isysroot /usr/local/Cellar/arm-none-eabi-gcc/20150921/bin/../arm-none-eabi
  26              	@ -MD FreeRTOS/Source/portable/GCC/ARM_CM3/port.d -MF .dep/port.o.d -MP
  27              	@ -MQ FreeRTOS/Source/portable/GCC/ARM_CM3/port.o -D__USES_INITFINI__
  28              	@ -D STM32F10X_MD -D USE_STDPERIPH_DRIVER -D GCC_ARMCM3 -D RUN_FROM_FLASH=1
  29              	@ FreeRTOS/Source/portable/GCC/ARM_CM3/port.c -mcpu=cortex-m3 -mthumb
  30              	@ -auxbase-strip FreeRTOS/Source/portable/GCC/ARM_CM3/port.o -gdwarf-2 -Os
  31              	@ -Wall -Wstrict-prototypes -fomit-frame-pointer -fverbose-asm
  32              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  33              	@ -fbranch-count-reg -fcaller-saves -fcombine-stack-adjustments -fcommon
  34              	@ -fcompare-elim -fcprop-registers -fcrossjumping -fcse-follow-jumps
  35              	@ -fdefer-pop -fdelete-null-pointer-checks -fdevirtualize
  36              	@ -fdevirtualize-speculatively -fdwarf2-cfi-asm -fearly-inlining
  37              	@ -feliminate-unused-debug-types -fexpensive-optimizations
  38              	@ -fforward-propagate -ffunction-cse -fgcse -fgcse-lm -fgnu-runtime
  39              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  40              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  41              	@ -finline-atomics -finline-functions -finline-functions-called-once
  42              	@ -finline-small-functions -fipa-cp -fipa-profile -fipa-pure-const
  43              	@ -fipa-reference -fipa-sra -fira-hoist-pressure -fira-share-save-slots
  44              	@ -fira-share-spill-slots -fisolate-erroneous-paths-dereference -fivopts
  45              	@ -fkeep-static-consts -fleading-underscore -flifetime-dse -fmath-errno
  46              	@ -fmerge-constants -fmerge-debug-strings -fomit-frame-pointer
  47              	@ -foptimize-sibling-calls -fpartial-inlining -fpeephole -fpeephole2
  48              	@ -fprefetch-loop-arrays -freg-struct-return -freorder-blocks
  49              	@ -freorder-functions -frerun-cse-after-loop
  50              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  51              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  52              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  53              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns2
  54              	@ -fsection-anchors -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller
  55              	@ -fsplit-wide-types -fstrict-aliasing -fstrict-overflow
  56              	@ -fstrict-volatile-bitfields -fsync-libcalls -fthread-jumps
  57              	@ -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 2


  58              	@ -ftree-ccp -ftree-ch -ftree-coalesce-vars -ftree-copy-prop
  59              	@ -ftree-copyrename -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  61              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  62              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  63              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  64              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  65              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  66              	@ -fzero-initialized-in-bss -mfix-cortex-m3-ldrd -mlittle-endian -mlra
  67              	@ -mpic-data-is-text-relative -msched-prolog -mthumb -munaligned-access
  68              	@ -mvectorize-with-neon-quad
  69              	
  70              		.text
  71              	.Ltext0:
  72              		.cfi_sections	.debug_frame
  73              		.align	1
  74              		.thumb
  75              		.thumb_func
  76              		.type	prvTaskExitError, %function
  77              	prvTaskExitError:
  78              	.LFB6:
  79              		.file 1 "FreeRTOS/Source/portable/GCC/ARM_CM3/port.c"
   1:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
   2:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     All rights reserved
   4:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
   5:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
   7:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
   9:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  13:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     ***************************************************************************
  14:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     ***************************************************************************
  19:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  20:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  25:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     ***************************************************************************
  26:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *                                                                       *
  27:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *                                                                       *
  32:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 3


  36:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****      *                                                                       *
  37:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     ***************************************************************************
  38:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  39:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     defined configASSERT()?
  42:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  43:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     participating in the support forum.
  46:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  47:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  52:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  56:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  59:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  63:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     mission critical applications that require provable dependability.
  66:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  67:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****     1 tab == 4 spaces!
  68:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** */
  69:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  70:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------
  71:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  72:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  *----------------------------------------------------------*/
  73:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  74:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Scheduler includes. */
  75:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #include "FreeRTOS.h"
  76:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #include "task.h"
  77:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  78:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  79:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  80:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  81:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  82:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  83:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif
  84:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  85:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  86:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  87:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  88:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  89:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #else
  90:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  91:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	as the core. */
  92:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 4


  93:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif
  94:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
  95:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Constants required to manipulate the core.  Registers first... */
  96:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  97:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  98:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  99:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
 100:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* ...then bits in the registers. */
 101:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
 102:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
 103:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
 104:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
 105:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
 106:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 107:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
 108:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
 109:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 110:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Constants required to check the validity of an interrupt priority. */
 111:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 112:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 113:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
 114:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
 115:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
 116:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
 117:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 118:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 119:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 120:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
 121:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
 122:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 123:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
 124:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portINITIAL_XPSR					( 0x01000000UL )
 125:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 126:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* The systick is a 24-bit counter. */
 127:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 128:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 129:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 130:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** occurred while the SysTick counter is stopped during tickless idle
 131:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** calculations. */
 132:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 133:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 134:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
 135:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
 136:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #define portSTART_ADDRESS_MASK				( ( StackType_t ) 0xfffffffeUL )
 137:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 138:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 139:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 140:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** debugger. */
 141:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #ifdef configTASK_RETURN_ADDRESS
 142:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 143:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #else
 144:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 145:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif
 146:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 147:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 148:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** variable. */
 149:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 5


 150:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 151:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 152:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 153:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * file is weak to allow application writers to change the timer used to
 154:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * generate the tick interrupt.
 155:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 156:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortSetupTimerInterrupt( void );
 157:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 158:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 159:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Exception handlers.
 160:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 161:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 162:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void );
 163:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 164:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 165:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 166:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 167:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 168:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 169:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 170:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 171:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 172:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 173:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** static void prvTaskExitError( void );
 174:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 175:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 176:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 177:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 178:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * The number of SysTick increments that make up one tick period.
 179:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 180:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 181:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 182:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 183:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 184:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 185:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 186:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * 24 bit resolution of the SysTick timer.
 187:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 188:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 189:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 190:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 191:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 192:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 193:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 194:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * power functionality only.
 195:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 196:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 197:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 198:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 199:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 200:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 201:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 202:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 203:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 204:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 205:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #if ( configASSERT_DEFINED == 1 )
 206:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 6


 207:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 208:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 209:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif /* configASSERT_DEFINED */
 210:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 211:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 212:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 213:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 214:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 215:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 216:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 217:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 218:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 219:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	interrupt. */
 220:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
 221:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 222:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
 223:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 224:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
 225:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 226:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 227:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 228:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 229:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 230:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	return pxTopOfStack;
 231:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 232:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 233:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 234:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** static void prvTaskExitError( void )
 235:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
  80              		.loc 1 235 0
  81              		.cfi_startproc
  82              		@ Volatile: function does not return.
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86              	.LBB12:
  87              	.LBB13:
  88              		.file 2 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h"
   1:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     All rights reserved
   4:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
   5:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
   7:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
   9:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  13:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  14:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  19:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 7


  20:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  25:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  26:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  27:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  32:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  37:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  38:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  39:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  43:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     participating in the support forum.
  46:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  47:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  52:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  56:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  63:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  66:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  67:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** */
  69:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  70:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  71:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  73:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  74:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  76:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 8


  77:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  79:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  81:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  84:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  85:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  87:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  88:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  89:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  90:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  91:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  92:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  93:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  94:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  96:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  97:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 101:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #else
 105:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 112:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 114:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 120:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 121:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
 122:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
 123:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
 126:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
 130:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** }
 131:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 132:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 9


 134:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 137:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 139:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 140:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 141:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 148:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 149:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 150:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 153:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 157:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 158:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 162:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 163:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 164:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 165:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 171:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 172:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 174:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 175:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 176:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 178:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 179:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 180:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 181:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 184:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 185:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 10


 191:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 193:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 196:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 197:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 198:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 201:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 202:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 203:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 204:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 206:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 208:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 210:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {
 213:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 215:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 216:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 219:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 221:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 222:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 223:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 224:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 225:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 226:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 227:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 228:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 229:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** }
 230:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 231:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 232:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 233:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {
 235:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 236:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 237:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
  89              		.loc 2 237 0
  90              	@ 237 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
  91 0000 4FF0BF03 			mov r3, #191													@ ulNewBASEPRI,
  92 0004 83F31188 		msr basepri, r3												@ ulNewBASEPRI
  93 0008 BFF36F8F 		isb														
  94 000c BFF34F8F 		dsb														
  95              	
  96              	@ 0 "" 2
  97              	.LVL0:
  98              		.thumb
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 11


  99              	.L2:
 100              	.LBE13:
 101              	.LBE12:
 236:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 237:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 238:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	should instead call vTaskDelete( NULL ).
 239:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 240:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 241:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	defined, then stop here so application writers can catch the error. */
 242:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 243:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 244:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	for( ;; );
 102              		.loc 1 244 0 discriminator 1
 103 0010 FEE7     		b	.L2	@
 104              		.cfi_endproc
 105              	.LFE6:
 106              		.size	prvTaskExitError, .-prvTaskExitError
 107              		.align	1
 108              		.thumb
 109              		.thumb_func
 110              		.type	prvPortStartFirstTask, %function
 111              	prvPortStartFirstTask:
 112              	.LFB8:
 245:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 246:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 247:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 248:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void )
 249:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 250:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile (
 251:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 252:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 253:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 254:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 255:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 256:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	isb								\n"
 257:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 258:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 259:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 260:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	bx r14							\n"
 261:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"									\n"
 262:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	.align 4						\n"
 263:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 264:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				);
 265:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 266:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 267:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 268:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** static void prvPortStartFirstTask( void )
 269:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 113              		.loc 1 269 0
 114              		.cfi_startproc
 115              		@ Naked Function: prologue and epilogue provided by programmer.
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 270:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile(
 118              		.loc 1 270 0
 119              	@ 270 "FreeRTOS/Source/portable/GCC/ARM_CM3/port.c" 1
 120 0012 5548     		 ldr r0, =0xE000ED08 	
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 12


 121 0014 0068     	 ldr r0, [r0] 			
 122 0016 0068     	 ldr r0, [r0] 			
 123 0018 80F30888 	 msr msp, r0			
 124 001c 62B6     	 cpsie i				
 125 001e 61B6     	 cpsie f				
 126 0020 BFF34F8F 	 dsb					
 127 0024 BFF36F8F 	 isb					
 128 0028 00DF     	 svc 0					
 129 002a 00BF     	 nop					
 130              	
 131              	@ 0 "" 2
 271:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 272:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 273:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 274:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 275:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 276:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" cpsie f				\n"
 277:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" dsb					\n"
 278:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" isb					\n"
 279:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 280:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					" nop					\n"
 281:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				);
 282:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 132              		.loc 1 282 0
 133              		.thumb
 134              		.cfi_endproc
 135              	.LFE8:
 136              		.size	prvPortStartFirstTask, .-prvPortStartFirstTask
 137              		.align	1
 138              		.global	pxPortInitialiseStack
 139              		.thumb
 140              		.thumb_func
 141              		.type	pxPortInitialiseStack, %function
 142              	pxPortInitialiseStack:
 143              	.LFB5:
 217:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 144              		.loc 1 217 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 149              	.LVL1:
 221:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
 150              		.loc 1 221 0
 151 002c 4FF08073 		mov	r3, #16777216	@ tmp119,
 152 0030 40F8043C 		str	r3, [r0, #-4]	@ tmp119, MEM[(StackType_t *)pxTopOfStack_1(D) + 4294967292B]
 153              	.LVL2:
 225:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 154              		.loc 1 225 0
 155 0034 054B     		ldr	r3, .L6	@ tmp121,
 223:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
 156              		.loc 1 223 0
 157 0036 21F00101 		bic	r1, r1, #1	@ D.4568, pxCode,
 158              	.LVL3:
 159 003a 40F8081C 		str	r1, [r0, #-8]	@ D.4568, MEM[(StackType_t *)pxTopOfStack_1(D) + 4294967288B]
 160              	.LVL4:
 225:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 13


 161              		.loc 1 225 0
 162 003e 40F80C3C 		str	r3, [r0, #-12]	@ tmp121, MEM[(StackType_t *)pxTopOfStack_1(D) + 4294967284B]
 163              	.LVL5:
 227:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 164              		.loc 1 227 0
 165 0042 40F8202C 		str	r2, [r0, #-32]	@ pvParameters, MEM[(StackType_t *)pxTopOfStack_1(D) + 4294967264B]
 166              	.LVL6:
 231:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 167              		.loc 1 231 0
 168 0046 4038     		subs	r0, r0, #64	@, pxTopOfStack,
 169              	.LVL7:
 170 0048 7047     		bx	lr	@
 171              	.L7:
 172 004a 00BF     		.align	2
 173              	.L6:
 174 004c 00000000 		.word	prvTaskExitError
 175              		.cfi_endproc
 176              	.LFE5:
 177              		.size	pxPortInitialiseStack, .-pxPortInitialiseStack
 178              		.align	1
 179              		.global	vPortSVCHandler
 180              		.thumb
 181              		.thumb_func
 182              		.type	vPortSVCHandler, %function
 183              	vPortSVCHandler:
 184              	.LFB7:
 249:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile (
 185              		.loc 1 249 0
 186              		.cfi_startproc
 187              		@ Naked Function: prologue and epilogue provided by programmer.
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 250:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 190              		.loc 1 250 0
 191              	@ 250 "FreeRTOS/Source/portable/GCC/ARM_CM3/port.c" 1
 192 0050 074B     			ldr	r3, pxCurrentTCBConst2		
 193 0052 1968     		ldr r1, [r3]					
 194 0054 0868     		ldr r0, [r1]					
 195 0056 B0E8F00F 		ldmia r0!, {r4-r11}				
 196 005a 80F30988 		msr psp, r0						
 197 005e BFF36F8F 		isb								
 198 0062 4FF00000 		mov r0, #0 						
 199 0066 80F31188 		msr	basepri, r0					
 200 006a 4EF00D0E 		orr r14, #0xd					
 201 006e 7047     		bx r14							
 202              										
 203              		.align 4						
 204 0070 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 205              	
 206              	@ 0 "" 2
 265:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 207              		.loc 1 265 0
 208              		.thumb
 209              		.cfi_endproc
 210              	.LFE7:
 211              		.size	vPortSVCHandler, .-vPortSVCHandler
 212              		.align	1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 14


 213              		.global	vPortEndScheduler
 214              		.thumb
 215              		.thumb_func
 216              		.type	vPortEndScheduler, %function
 217              	vPortEndScheduler:
 218              	.LFB10:
 283:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 284:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 285:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 286:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 287:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 288:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** BaseType_t xPortStartScheduler( void )
 289:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 290:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 291:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 292:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 293:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 294:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#if( configASSERT_DEFINED == 1 )
 295:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 296:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		volatile uint32_t ulOriginalPriority;
 297:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 298:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 299:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 300:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 301:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		functions can be called.  ISR safe functions are those that end in
 302:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 303:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 304:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 305:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 306:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 307:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 308:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Determine the number of priority bits available.  First write to all
 309:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		possible bits. */
 310:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 311:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 312:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Read the value back to see how many bits stuck. */
 313:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 314:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 315:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Use the same mask on the maximum system call priority. */
 316:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 317:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 318:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 319:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		of bits read back. */
 320:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 321:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 322:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 323:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			ulMaxPRIGROUPValue--;
 324:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 325:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 326:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 327:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 328:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		register. */
 329:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 330:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 331:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 332:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 333:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		value. */
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 15


 334:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 335:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 336:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#endif /* conifgASSERT_DEFINED */
 337:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 338:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 339:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 340:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 341:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 342:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 343:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	here already. */
 344:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	vPortSetupTimerInterrupt();
 345:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 346:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 347:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 348:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 349:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Start the first task. */
 350:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	prvPortStartFirstTask();
 351:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 352:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 353:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	exit error function to prevent compiler warnings about a static function
 354:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	not being called in the case that the application writer overrides this
 355:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS. */
 356:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	prvTaskExitError();
 357:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 358:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Should not get here! */
 359:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	return 0;
 360:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 361:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 362:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 363:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortEndScheduler( void )
 364:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 219              		.loc 1 364 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              		@ link register save eliminated.
 224 0074 7047     		bx	lr	@
 225              		.cfi_endproc
 226              	.LFE10:
 227              		.size	vPortEndScheduler, .-vPortEndScheduler
 228              		.align	1
 229              		.global	vPortEnterCritical
 230              		.thumb
 231              		.thumb_func
 232              		.type	vPortEnterCritical, %function
 233              	vPortEnterCritical:
 234              	.LFB11:
 365:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 366:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	Artificially force an assert. */
 367:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 368:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 369:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 370:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 371:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortEnterCritical( void )
 372:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 235              		.loc 1 372 0
 236              		.cfi_startproc
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 16


 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 240              	.LBB14:
 241              	.LBB15:
 242              		.loc 2 237 0
 243              	@ 237 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 244 0076 4FF0BF03 			mov r3, #191													@ ulNewBASEPRI,
 245 007a 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 246 007e BFF36F8F 		isb														
 247 0082 BFF34F8F 		dsb														
 248              	
 249              	@ 0 "" 2
 250              	.LVL8:
 251              		.thumb
 252              	.LBE15:
 253              	.LBE14:
 373:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 374:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting++;
 254              		.loc 1 374 0
 255 0086 024A     		ldr	r2, .L11	@ tmp114,
 256 0088 1368     		ldr	r3, [r2]	@ uxCriticalNesting, uxCriticalNesting
 257 008a 0133     		adds	r3, r3, #1	@ D.4575, uxCriticalNesting,
 258 008c 1360     		str	r3, [r2]	@ D.4575, uxCriticalNesting
 259 008e 7047     		bx	lr	@
 260              	.L12:
 261              		.align	2
 262              	.L11:
 263 0090 00000000 		.word	.LANCHOR0
 264              		.cfi_endproc
 265              	.LFE11:
 266              		.size	vPortEnterCritical, .-vPortEnterCritical
 267              		.align	1
 268              		.global	vPortExitCritical
 269              		.thumb
 270              		.thumb_func
 271              		.type	vPortExitCritical, %function
 272              	vPortExitCritical:
 273              	.LFB12:
 375:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 376:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 377:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 378:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 379:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 380:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	assert function also uses a critical section. */
 381:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	if( uxCriticalNesting == 1 )
 382:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 383:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 384:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 385:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 386:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 387:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 388:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void vPortExitCritical( void )
 389:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 274              		.loc 1 389 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 17


 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
 390:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting );
 391:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting--;
 279              		.loc 1 391 0
 280 0094 034A     		ldr	r2, .L15	@ tmp112,
 281 0096 1368     		ldr	r3, [r2]	@ uxCriticalNesting, uxCriticalNesting
 282 0098 013B     		subs	r3, r3, #1	@ D.4579, uxCriticalNesting,
 283 009a 1360     		str	r3, [r2]	@ D.4579, uxCriticalNesting
 392:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 284              		.loc 1 392 0
 285 009c 0BB9     		cbnz	r3, .L13	@ D.4579,
 286              	.LVL9:
 287              	.LBB16:
 288              	.LBB17:
 238:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 239:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 242:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 243:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 245:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** }
 246:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 247:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 248:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 249:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {
 251:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 253:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 254:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 255:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 259:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 260:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 262:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 263:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 265:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 266:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** }
 267:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 268:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 269:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {
 271:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 289              		.loc 2 271 0
 290              	@ 271 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 291 009e 83F31188 			msr basepri, r3		@ D.4579
 292              	@ 0 "" 2
 293              	.LVL10:
 294              		.thumb
 295              	.L13:
 296 00a2 7047     		bx	lr	@
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 18


 297              	.L16:
 298              		.align	2
 299              	.L15:
 300 00a4 00000000 		.word	.LANCHOR0
 301              	.LBE17:
 302              	.LBE16:
 303              		.cfi_endproc
 304              	.LFE12:
 305              		.size	vPortExitCritical, .-vPortExitCritical
 306              		.align	1
 307              		.global	xPortPendSVHandler
 308              		.thumb
 309              		.thumb_func
 310              		.type	xPortPendSVHandler, %function
 311              	xPortPendSVHandler:
 312              	.LFB13:
 393:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 394:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 395:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 396:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 397:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 398:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 399:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void )
 400:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 313              		.loc 1 400 0
 314              		.cfi_startproc
 315              		@ Naked Function: prologue and epilogue provided by programmer.
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 401:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* This is a naked function. */
 402:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 403:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	__asm volatile
 318              		.loc 1 403 0
 319              	@ 403 "FreeRTOS/Source/portable/GCC/ARM_CM3/port.c" 1
 320 00a8 EFF30980 			mrs r0, psp							
 321 00ac BFF36F8F 		isb									
 322              											
 323 00b0 0F4B     		ldr	r3, pxCurrentTCBConst			
 324 00b2 1A68     		ldr	r2, [r3]						
 325              											
 326 00b4 20E9F00F 		stmdb r0!, {r4-r11}					
 327 00b8 1060     		str r0, [r2]						
 328              											
 329 00ba 2DE90840 		stmdb sp!, {r3, r14}				
 330 00be 4FF0BF00 		mov r0, #191								@
 331 00c2 80F31188 		msr basepri, r0						
 332 00c6 FFF7FEFF 		bl vTaskSwitchContext				
 333 00ca 4FF00000 		mov r0, #0							
 334 00ce 80F31188 		msr basepri, r0						
 335 00d2 BDE80840 		ldmia sp!, {r3, r14}				
 336              											
 337 00d6 1968     		ldr r1, [r3]						
 338 00d8 0868     		ldr r0, [r1]						
 339 00da B0E8F00F 		ldmia r0!, {r4-r11}					
 340 00de 80F30988 		msr psp, r0							
 341 00e2 BFF36F8F 		isb									
 342 00e6 7047     		bx r14								
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 19


 343              											
 344 00e8 AFF30080 		.align 4							
 344      AFF30080 
 345 00f0 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 346              	
 347              	@ 0 "" 2
 404:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	(
 405:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 406:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	isb									\n"
 407:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 408:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 409:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 410:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 411:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 412:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 413:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 414:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 415:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 416:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 417:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 418:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	mov r0, #0							\n"
 419:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 420:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 421:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 422:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 423:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 424:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 425:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 426:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	isb									\n"
 427:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	bx r14								\n"
 428:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 429:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"	.align 4							\n"
 430:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 431:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 432:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	);
 433:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 348              		.loc 1 433 0
 349              		.thumb
 350              		.cfi_endproc
 351              	.LFE13:
 352              		.size	xPortPendSVHandler, .-xPortPendSVHandler
 353              		.align	1
 354              		.global	xPortSysTickHandler
 355              		.thumb
 356              		.thumb_func
 357              		.type	xPortSysTickHandler, %function
 358              	xPortSysTickHandler:
 359              	.LFB14:
 434:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 435:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 436:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void )
 437:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 360              		.loc 1 437 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364 00f4 08B5     		push	{r3, lr}	@
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 20


 365              	.LCFI0:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 3, -8
 368              		.cfi_offset 14, -4
 369              	.LBB18:
 370              	.LBB19:
 237:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 371              		.loc 2 237 0
 372              	@ 237 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 373 00f6 4FF0BF03 			mov r3, #191													@ ulNewBASEPRI,
 374 00fa 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 375 00fe BFF36F8F 		isb														
 376 0102 BFF34F8F 		dsb														
 377              	
 378              	@ 0 "" 2
 379              	.LVL11:
 380              		.thumb
 381              	.LBE19:
 382              	.LBE18:
 438:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 439:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 440:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	save and then restore the interrupt mask value as its value is already
 441:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	known. */
 442:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 443:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 444:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Increment the RTOS tick. */
 445:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 383              		.loc 1 445 0
 384 0106 FFF7FEFF 		bl	xTaskIncrementTick	@
 385              	.LVL12:
 386 010a 18B1     		cbz	r0, .L19	@,
 446:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 447:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* A context switch is required.  Context switching is performed in
 448:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 449:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 387              		.loc 1 449 0
 388 010c 034B     		ldr	r3, .L23	@ tmp113,
 389 010e 4FF08052 		mov	r2, #268435456	@ tmp114,
 390 0112 1A60     		str	r2, [r3]	@ tmp114, MEM[(volatile uint32_t *)3758157060B]
 391              	.L19:
 392              	.LVL13:
 393              	.LBB20:
 394              	.LBB21:
 395              		.loc 2 271 0
 396 0114 0023     		movs	r3, #0	@ tmp115,
 397              	@ 271 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 398 0116 83F31188 			msr basepri, r3		@ tmp115
 399              	@ 0 "" 2
 400              		.thumb
 401 011a 08BD     		pop	{r3, pc}	@
 402              	.L24:
 403              		.align	2
 404              	.L23:
 405 011c 04ED00E0 		.word	-536810236
 406              	.LBE21:
 407              	.LBE20:
 408              		.cfi_endproc
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 21


 409              	.LFE14:
 410              		.size	xPortSysTickHandler, .-xPortSysTickHandler
 411              		.align	1
 412              		.weak	vPortSetupTimerInterrupt
 413              		.thumb
 414              		.thumb_func
 415              		.type	vPortSetupTimerInterrupt, %function
 416              	vPortSetupTimerInterrupt:
 417              	.LFB15:
 450:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 451:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 452:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portENABLE_INTERRUPTS();
 453:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** }
 454:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 455:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 456:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 457:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 458:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 459:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 460:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
 461:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	TickType_t xModifiableIdleTime;
 462:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 463:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 464:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 465:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 466:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 467:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 468:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 469:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 470:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 471:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 472:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		kernel with respect to calendar time. */
 473:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 474:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 475:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 476:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		tick periods.  -1 is used because this code will execute part way
 477:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		through one of the tick periods. */
 478:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 479:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 480:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 481:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 482:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 483:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 484:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 485:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 486:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		__asm volatile( "cpsid i" );
 487:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		__asm volatile( "dsb" );
 488:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		__asm volatile( "isb" );
 489:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 490:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 491:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		to be unsuspended then abandon the low power entry. */
 492:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 493:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 494:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Restart from whatever is left in the count register to complete
 495:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			this tick period. */
 496:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 497:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 22


 498:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Restart SysTick. */
 499:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 500:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 501:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Reset the reload register to the value required for normal tick
 502:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			periods. */
 503:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 504:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 505:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 506:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			above. */
 507:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			__asm volatile( "cpsie i" );
 508:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 509:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		else
 510:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		{
 511:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Set the new reload value. */
 512:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 513:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 514:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 515:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			zero. */
 516:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 517:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 518:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Restart SysTick. */
 519:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 520:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 521:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 522:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 523:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 524:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			should not be executed again.  However, the original expected idle
 525:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 526:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 527:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 528:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			if( xModifiableIdleTime > 0 )
 529:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			{
 530:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				__asm volatile( "dsb" );
 531:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				__asm volatile( "wfi" );
 532:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				__asm volatile( "isb" );
 533:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			}
 534:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 535:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 536:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 537:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			accounted for as best it can be, but using the tickless mode will
 538:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 539:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			kernel with respect to calendar time. */
 540:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 541:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 542:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 543:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 544:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			above. */
 545:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			__asm volatile( "cpsie i" );
 546:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 547:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 548:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			{
 549:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				uint32_t ulCalculatedLoadValue;
 550:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 551:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 552:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				count reloaded with ulReloadValue.  Reset the
 553:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 554:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				period. */
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 23


 555:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 556:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 557:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 558:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				underflowed because the post sleep hook did something
 559:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				that took too long. */
 560:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 561:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				{
 562:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 563:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				}
 564:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 565:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 566:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 567:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				/* The tick interrupt handler will already have pended the tick
 568:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				processing in the kernel.  As the pending tick will be
 569:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				processed as soon as this function exits, the tick value
 570:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				maintained by the tick is stepped forward by one less than the
 571:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				time spent waiting. */
 572:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 573:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			}
 574:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			else
 575:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			{
 576:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 577:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 578:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				periods (not the ulReload value which accounted for part
 579:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				ticks). */
 580:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 581:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 582:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				/* How many complete tick periods passed while the processor
 583:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				was waiting? */
 584:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 585:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 586:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 587:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				period remains. */
 588:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 589:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			}
 590:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 591:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 592:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 593:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 594:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			can only execute once in the case that the reload register is near
 595:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			zero. */
 596:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 597:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portENTER_CRITICAL();
 598:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			{
 599:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 600:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 601:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 602:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			}
 603:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 			portEXIT_CRITICAL();
 604:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		}
 605:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 606:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 607:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 608:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 609:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 610:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** /*
 611:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 24


 612:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  * frequency.
 613:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c ****  */
 614:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 615:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** {
 418              		.loc 1 615 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422              		@ link register save eliminated.
 616:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 617:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 618:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	{
 619:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 620:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 621:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 622:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	}
 623:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 624:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 625:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 626:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 423              		.loc 1 626 0
 424 0120 034A     		ldr	r2, .L26	@ tmp111,
 425 0122 044B     		ldr	r3, .L26+4	@ tmp110,
 426 0124 1A60     		str	r2, [r3]	@ tmp111, MEM[(volatile uint32_t *)3758153748B]
 627:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 427              		.loc 1 627 0
 428 0126 0722     		movs	r2, #7	@ tmp113,
 429 0128 43F8042C 		str	r2, [r3, #-4]	@ tmp113, MEM[(volatile uint32_t *)3758153744B]
 430 012c 7047     		bx	lr	@
 431              	.L27:
 432 012e 00BF     		.align	2
 433              	.L26:
 434 0130 3F190100 		.word	71999
 435 0134 14E000E0 		.word	-536813548
 436              		.cfi_endproc
 437              	.LFE15:
 438              		.size	vPortSetupTimerInterrupt, .-vPortSetupTimerInterrupt
 439              		.align	1
 440              		.global	xPortStartScheduler
 441              		.thumb
 442              		.thumb_func
 443              		.type	xPortStartScheduler, %function
 444              	xPortStartScheduler:
 445              	.LFB9:
 289:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 446              		.loc 1 289 0
 447              		.cfi_startproc
 448              		@ Volatile: function does not return.
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451 0138 08B5     		push	{r3, lr}	@
 452              	.LCFI1:
 453              		.cfi_def_cfa_offset 8
 454              		.cfi_offset 3, -8
 455              		.cfi_offset 14, -4
 339:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 456              		.loc 1 339 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 25


 457 013a 094B     		ldr	r3, .L29	@ tmp115,
 458 013c 1A68     		ldr	r2, [r3]	@ D.4590, MEM[(volatile uint32_t *)3758157088B]
 459 013e 42F47F02 		orr	r2, r2, #16711680	@ D.4590, D.4590,
 460 0142 1A60     		str	r2, [r3]	@ D.4590, MEM[(volatile uint32_t *)3758157088B]
 340:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 461              		.loc 1 340 0
 462 0144 1A68     		ldr	r2, [r3]	@ D.4590, MEM[(volatile uint32_t *)3758157088B]
 463 0146 42F07F42 		orr	r2, r2, #-16777216	@ D.4590, D.4590,
 464 014a 1A60     		str	r2, [r3]	@ D.4590, MEM[(volatile uint32_t *)3758157088B]
 344:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 465              		.loc 1 344 0
 466 014c FFF7FEFF 		bl	vPortSetupTimerInterrupt	@
 467              	.LVL14:
 347:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 468              		.loc 1 347 0
 469 0150 044B     		ldr	r3, .L29+4	@ tmp119,
 470 0152 0022     		movs	r2, #0	@ tmp120,
 471 0154 1A60     		str	r2, [r3]	@ tmp120, uxCriticalNesting
 350:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 472              		.loc 1 350 0
 473 0156 FFF75CFF 		bl	prvPortStartFirstTask	@
 474              	.LVL15:
 356:FreeRTOS/Source/portable/GCC/ARM_CM3/port.c **** 
 475              		.loc 1 356 0
 476 015a FFF751FF 		bl	prvTaskExitError	@
 477              	.LVL16:
 478              	.L30:
 479 015e 00BF     		.align	2
 480              	.L29:
 481 0160 20ED00E0 		.word	-536810208
 482 0164 00000000 		.word	.LANCHOR0
 483              		.cfi_endproc
 484              	.LFE9:
 485              		.size	xPortStartScheduler, .-xPortStartScheduler
 486              		.data
 487              		.align	2
 488              		.set	.LANCHOR0,. + 0
 489              		.type	uxCriticalNesting, %object
 490              		.size	uxCriticalNesting, 4
 491              	uxCriticalNesting:
 492 0000 AAAAAAAA 		.word	-1431655766
 493              		.text
 494              	.Letext0:
 495              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 496              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 497              		.file 5 "./FreeRTOS/Source/include/projdefs.h"
 498              		.file 6 "./FreeRTOS/Source/include/task.h"
 499              		.section	.debug_info,"",%progbits
 500              	.Ldebug_info0:
 501 0000 2D030000 		.4byte	0x32d
 502 0004 0200     		.2byte	0x2
 503 0006 00000000 		.4byte	.Ldebug_abbrev0
 504 000a 04       		.byte	0x4
 505 000b 01       		.uleb128 0x1
 506 000c 00000000 		.4byte	.LASF32
 507 0010 01       		.byte	0x1
 508 0011 BC010000 		.4byte	.LASF33
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 26


 509 0015 BA020000 		.4byte	.LASF34
 510 0019 00000000 		.4byte	.Ltext0
 511 001d 68010000 		.4byte	.Letext0
 512 0021 00000000 		.4byte	.Ldebug_line0
 513 0025 02       		.uleb128 0x2
 514 0026 04       		.byte	0x4
 515 0027 05       		.byte	0x5
 516 0028 696E7400 		.ascii	"int\000"
 517 002c 03       		.uleb128 0x3
 518 002d 04       		.byte	0x4
 519 002e 07       		.byte	0x7
 520 002f A4010000 		.4byte	.LASF0
 521 0033 03       		.uleb128 0x3
 522 0034 01       		.byte	0x1
 523 0035 06       		.byte	0x6
 524 0036 78010000 		.4byte	.LASF1
 525 003a 03       		.uleb128 0x3
 526 003b 01       		.byte	0x1
 527 003c 08       		.byte	0x8
 528 003d 6A010000 		.4byte	.LASF2
 529 0041 03       		.uleb128 0x3
 530 0042 02       		.byte	0x2
 531 0043 05       		.byte	0x5
 532 0044 93000000 		.4byte	.LASF3
 533 0048 03       		.uleb128 0x3
 534 0049 02       		.byte	0x2
 535 004a 07       		.byte	0x7
 536 004b 0E020000 		.4byte	.LASF4
 537 004f 03       		.uleb128 0x3
 538 0050 04       		.byte	0x4
 539 0051 05       		.byte	0x5
 540 0052 4F010000 		.4byte	.LASF5
 541 0056 04       		.uleb128 0x4
 542 0057 CE000000 		.4byte	.LASF9
 543 005b 03       		.byte	0x3
 544 005c 41       		.byte	0x41
 545 005d 61000000 		.4byte	0x61
 546 0061 03       		.uleb128 0x3
 547 0062 04       		.byte	0x4
 548 0063 07       		.byte	0x7
 549 0064 81020000 		.4byte	.LASF6
 550 0068 03       		.uleb128 0x3
 551 0069 08       		.byte	0x8
 552 006a 05       		.byte	0x5
 553 006b 36010000 		.4byte	.LASF7
 554 006f 03       		.uleb128 0x3
 555 0070 08       		.byte	0x8
 556 0071 07       		.byte	0x7
 557 0072 84010000 		.4byte	.LASF8
 558 0076 04       		.uleb128 0x4
 559 0077 9B010000 		.4byte	.LASF10
 560 007b 04       		.byte	0x4
 561 007c 20       		.byte	0x20
 562 007d 56000000 		.4byte	0x56
 563 0081 04       		.uleb128 0x4
 564 0082 84000000 		.4byte	.LASF11
 565 0086 05       		.byte	0x5
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 27


 566 0087 4D       		.byte	0x4d
 567 0088 8C000000 		.4byte	0x8c
 568 008c 05       		.uleb128 0x5
 569 008d 04       		.byte	0x4
 570 008e 92000000 		.4byte	0x92
 571 0092 06       		.uleb128 0x6
 572 0093 01       		.byte	0x1
 573 0094 9E000000 		.4byte	0x9e
 574 0098 07       		.uleb128 0x7
 575 0099 9E000000 		.4byte	0x9e
 576 009d 00       		.byte	0
 577 009e 08       		.uleb128 0x8
 578 009f 04       		.byte	0x4
 579 00a0 04       		.uleb128 0x4
 580 00a1 AE020000 		.4byte	.LASF12
 581 00a5 02       		.byte	0x2
 582 00a6 61       		.byte	0x61
 583 00a7 76000000 		.4byte	0x76
 584 00ab 04       		.uleb128 0x4
 585 00ac B1010000 		.4byte	.LASF13
 586 00b0 02       		.byte	0x2
 587 00b1 62       		.byte	0x62
 588 00b2 4F000000 		.4byte	0x4f
 589 00b6 04       		.uleb128 0x4
 590 00b7 93020000 		.4byte	.LASF14
 591 00bb 02       		.byte	0x2
 592 00bc 63       		.byte	0x63
 593 00bd 61000000 		.4byte	0x61
 594 00c1 04       		.uleb128 0x4
 595 00c2 44010000 		.4byte	.LASF15
 596 00c6 02       		.byte	0x2
 597 00c7 69       		.byte	0x69
 598 00c8 76000000 		.4byte	0x76
 599 00cc 03       		.uleb128 0x3
 600 00cd 04       		.byte	0x4
 601 00ce 07       		.byte	0x7
 602 00cf B1000000 		.4byte	.LASF16
 603 00d3 03       		.uleb128 0x3
 604 00d4 01       		.byte	0x1
 605 00d5 08       		.byte	0x8
 606 00d6 44020000 		.4byte	.LASF17
 607 00da 05       		.uleb128 0x5
 608 00db 04       		.byte	0x4
 609 00dc A0000000 		.4byte	0xa0
 610 00e0 09       		.uleb128 0x9
 611 00e1 01030000 		.4byte	.LASF18
 612 00e5 02       		.byte	0x2
 613 00e6 E9       		.byte	0xe9
 614 00e7 01       		.byte	0x1
 615 00e8 03       		.byte	0x3
 616 00e9 F9000000 		.4byte	0xf9
 617 00ed 0A       		.uleb128 0xa
 618 00ee 13030000 		.4byte	.LASF35
 619 00f2 02       		.byte	0x2
 620 00f3 EB       		.byte	0xeb
 621 00f4 76000000 		.4byte	0x76
 622 00f8 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 28


 623 00f9 0B       		.uleb128 0xb
 624 00fa 34020000 		.4byte	.LASF19
 625 00fe 02       		.byte	0x2
 626 00ff 0D01     		.2byte	0x10d
 627 0101 01       		.byte	0x1
 628 0102 03       		.byte	0x3
 629 0103 14010000 		.4byte	0x114
 630 0107 0C       		.uleb128 0xc
 631 0108 9F020000 		.4byte	.LASF36
 632 010c 02       		.byte	0x2
 633 010d 0D01     		.2byte	0x10d
 634 010f 76000000 		.4byte	0x76
 635 0113 00       		.byte	0
 636 0114 0D       		.uleb128 0xd
 637 0115 E6000000 		.4byte	.LASF37
 638 0119 01       		.byte	0x1
 639 011a EA       		.byte	0xea
 640 011b 01       		.byte	0x1
 641 011c 00000000 		.4byte	.LFB6
 642 0120 12000000 		.4byte	.LFE6
 643 0124 02       		.byte	0x2
 644 0125 7D       		.byte	0x7d
 645 0126 00       		.sleb128 0
 646 0127 01       		.byte	0x1
 647 0128 4C010000 		.4byte	0x14c
 648 012c 0E       		.uleb128 0xe
 649 012d E0000000 		.4byte	0xe0
 650 0131 00000000 		.4byte	.LBB12
 651 0135 10000000 		.4byte	.LBE12
 652 0139 01       		.byte	0x1
 653 013a F3       		.byte	0xf3
 654 013b 0F       		.uleb128 0xf
 655 013c 00000000 		.4byte	.LBB13
 656 0140 10000000 		.4byte	.LBE13
 657 0144 10       		.uleb128 0x10
 658 0145 ED000000 		.4byte	0xed
 659 0149 00       		.byte	0
 660 014a 00       		.byte	0
 661 014b 00       		.byte	0
 662 014c 11       		.uleb128 0x11
 663 014d 20010000 		.4byte	.LASF38
 664 0151 01       		.byte	0x1
 665 0152 0C01     		.2byte	0x10c
 666 0154 01       		.byte	0x1
 667 0155 12000000 		.4byte	.LFB8
 668 0159 2C000000 		.4byte	.LFE8
 669 015d 02       		.byte	0x2
 670 015e 7D       		.byte	0x7d
 671 015f 00       		.sleb128 0
 672 0160 01       		.byte	0x1
 673 0161 12       		.uleb128 0x12
 674 0162 01       		.byte	0x1
 675 0163 EB020000 		.4byte	.LASF30
 676 0167 01       		.byte	0x1
 677 0168 D8       		.byte	0xd8
 678 0169 01       		.byte	0x1
 679 016a DA000000 		.4byte	0xda
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 29


 680 016e 2C000000 		.4byte	.LFB5
 681 0172 50000000 		.4byte	.LFE5
 682 0176 02       		.byte	0x2
 683 0177 7D       		.byte	0x7d
 684 0178 00       		.sleb128 0
 685 0179 01       		.byte	0x1
 686 017a AA010000 		.4byte	0x1aa
 687 017e 13       		.uleb128 0x13
 688 017f D9000000 		.4byte	.LASF20
 689 0183 01       		.byte	0x1
 690 0184 D8       		.byte	0xd8
 691 0185 DA000000 		.4byte	0xda
 692 0189 00000000 		.4byte	.LLST0
 693 018d 13       		.uleb128 0x13
 694 018e F7000000 		.4byte	.LASF21
 695 0192 01       		.byte	0x1
 696 0193 D8       		.byte	0xd8
 697 0194 81000000 		.4byte	0x81
 698 0198 5F000000 		.4byte	.LLST1
 699 019c 14       		.uleb128 0x14
 700 019d E8010000 		.4byte	.LASF22
 701 01a1 01       		.byte	0x1
 702 01a2 D8       		.byte	0xd8
 703 01a3 9E000000 		.4byte	0x9e
 704 01a7 01       		.byte	0x1
 705 01a8 52       		.byte	0x52
 706 01a9 00       		.byte	0
 707 01aa 15       		.uleb128 0x15
 708 01ab 01       		.byte	0x1
 709 01ac FE000000 		.4byte	.LASF23
 710 01b0 01       		.byte	0x1
 711 01b1 F8       		.byte	0xf8
 712 01b2 01       		.byte	0x1
 713 01b3 50000000 		.4byte	.LFB7
 714 01b7 74000000 		.4byte	.LFE7
 715 01bb 02       		.byte	0x2
 716 01bc 7D       		.byte	0x7d
 717 01bd 00       		.sleb128 0
 718 01be 01       		.byte	0x1
 719 01bf 16       		.uleb128 0x16
 720 01c0 01       		.byte	0x1
 721 01c1 0E010000 		.4byte	.LASF24
 722 01c5 01       		.byte	0x1
 723 01c6 6B01     		.2byte	0x16b
 724 01c8 01       		.byte	0x1
 725 01c9 74000000 		.4byte	.LFB10
 726 01cd 76000000 		.4byte	.LFE10
 727 01d1 02       		.byte	0x2
 728 01d2 7D       		.byte	0x7d
 729 01d3 00       		.sleb128 0
 730 01d4 01       		.byte	0x1
 731 01d5 17       		.uleb128 0x17
 732 01d6 01       		.byte	0x1
 733 01d7 21020000 		.4byte	.LASF25
 734 01db 01       		.byte	0x1
 735 01dc 7301     		.2byte	0x173
 736 01de 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 30


 737 01df 76000000 		.4byte	.LFB11
 738 01e3 94000000 		.4byte	.LFE11
 739 01e7 02       		.byte	0x2
 740 01e8 7D       		.byte	0x7d
 741 01e9 00       		.sleb128 0
 742 01ea 01       		.byte	0x1
 743 01eb 10020000 		.4byte	0x210
 744 01ef 18       		.uleb128 0x18
 745 01f0 E0000000 		.4byte	0xe0
 746 01f4 76000000 		.4byte	.LBB14
 747 01f8 86000000 		.4byte	.LBE14
 748 01fc 01       		.byte	0x1
 749 01fd 7501     		.2byte	0x175
 750 01ff 0F       		.uleb128 0xf
 751 0200 76000000 		.4byte	.LBB15
 752 0204 86000000 		.4byte	.LBE15
 753 0208 10       		.uleb128 0x10
 754 0209 ED000000 		.4byte	0xed
 755 020d 00       		.byte	0
 756 020e 00       		.byte	0
 757 020f 00       		.byte	0
 758 0210 17       		.uleb128 0x17
 759 0211 01       		.byte	0x1
 760 0212 5C020000 		.4byte	.LASF26
 761 0216 01       		.byte	0x1
 762 0217 8401     		.2byte	0x184
 763 0219 01       		.byte	0x1
 764 021a 94000000 		.4byte	.LFB12
 765 021e A8000000 		.4byte	.LFE12
 766 0222 02       		.byte	0x2
 767 0223 7D       		.byte	0x7d
 768 0224 00       		.sleb128 0
 769 0225 01       		.byte	0x1
 770 0226 45020000 		.4byte	0x245
 771 022a 18       		.uleb128 0x18
 772 022b F9000000 		.4byte	0xf9
 773 022f 9E000000 		.4byte	.LBB16
 774 0233 A8000000 		.4byte	.LBE16
 775 0237 01       		.byte	0x1
 776 0238 8A01     		.2byte	0x18a
 777 023a 19       		.uleb128 0x19
 778 023b 07010000 		.4byte	0x107
 779 023f 80000000 		.4byte	.LLST2
 780 0243 00       		.byte	0
 781 0244 00       		.byte	0
 782 0245 16       		.uleb128 0x16
 783 0246 01       		.byte	0x1
 784 0247 49020000 		.4byte	.LASF27
 785 024b 01       		.byte	0x1
 786 024c 8F01     		.2byte	0x18f
 787 024e 01       		.byte	0x1
 788 024f A8000000 		.4byte	.LFB13
 789 0253 F4000000 		.4byte	.LFE13
 790 0257 02       		.byte	0x2
 791 0258 7D       		.byte	0x7d
 792 0259 00       		.sleb128 0
 793 025a 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 31


 794 025b 1A       		.uleb128 0x1a
 795 025c 01       		.byte	0x1
 796 025d BA000000 		.4byte	.LASF28
 797 0261 01       		.byte	0x1
 798 0262 B401     		.2byte	0x1b4
 799 0264 01       		.byte	0x1
 800 0265 F4000000 		.4byte	.LFB14
 801 0269 20010000 		.4byte	.LFE14
 802 026d 94000000 		.4byte	.LLST3
 803 0271 01       		.byte	0x1
 804 0272 BF020000 		.4byte	0x2bf
 805 0276 1B       		.uleb128 0x1b
 806 0277 E0000000 		.4byte	0xe0
 807 027b F6000000 		.4byte	.LBB18
 808 027f 06010000 		.4byte	.LBE18
 809 0283 01       		.byte	0x1
 810 0284 BA01     		.2byte	0x1ba
 811 0286 9A020000 		.4byte	0x29a
 812 028a 0F       		.uleb128 0xf
 813 028b F6000000 		.4byte	.LBB19
 814 028f 06010000 		.4byte	.LBE19
 815 0293 10       		.uleb128 0x10
 816 0294 ED000000 		.4byte	0xed
 817 0298 00       		.byte	0
 818 0299 00       		.byte	0
 819 029a 1B       		.uleb128 0x1b
 820 029b F9000000 		.4byte	0xf9
 821 029f 14010000 		.4byte	.LBB20
 822 02a3 20010000 		.4byte	.LBE20
 823 02a7 01       		.byte	0x1
 824 02a8 C401     		.2byte	0x1c4
 825 02aa B5020000 		.4byte	0x2b5
 826 02ae 1C       		.uleb128 0x1c
 827 02af 07010000 		.4byte	0x107
 828 02b3 00       		.byte	0
 829 02b4 00       		.byte	0
 830 02b5 1D       		.uleb128 0x1d
 831 02b6 0A010000 		.4byte	.LVL12
 832 02ba 21030000 		.4byte	0x321
 833 02be 00       		.byte	0
 834 02bf 16       		.uleb128 0x16
 835 02c0 01       		.byte	0x1
 836 02c1 F5010000 		.4byte	.LASF29
 837 02c5 01       		.byte	0x1
 838 02c6 6602     		.2byte	0x266
 839 02c8 01       		.byte	0x1
 840 02c9 20010000 		.4byte	.LFB15
 841 02cd 38010000 		.4byte	.LFE15
 842 02d1 02       		.byte	0x2
 843 02d2 7D       		.byte	0x7d
 844 02d3 00       		.sleb128 0
 845 02d4 01       		.byte	0x1
 846 02d5 1E       		.uleb128 0x1e
 847 02d6 01       		.byte	0x1
 848 02d7 9D000000 		.4byte	.LASF31
 849 02db 01       		.byte	0x1
 850 02dc 2001     		.2byte	0x120
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 32


 851 02de 01       		.byte	0x1
 852 02df AB000000 		.4byte	0xab
 853 02e3 38010000 		.4byte	.LFB9
 854 02e7 68010000 		.4byte	.LFE9
 855 02eb B4000000 		.4byte	.LLST4
 856 02ef 01       		.byte	0x1
 857 02f0 10030000 		.4byte	0x310
 858 02f4 1D       		.uleb128 0x1d
 859 02f5 50010000 		.4byte	.LVL14
 860 02f9 BF020000 		.4byte	0x2bf
 861 02fd 1D       		.uleb128 0x1d
 862 02fe 5A010000 		.4byte	.LVL15
 863 0302 4C010000 		.4byte	0x14c
 864 0306 1D       		.uleb128 0x1d
 865 0307 5E010000 		.4byte	.LVL16
 866 030b 14010000 		.4byte	0x114
 867 030f 00       		.byte	0
 868 0310 1F       		.uleb128 0x1f
 869 0311 58010000 		.4byte	.LASF39
 870 0315 01       		.byte	0x1
 871 0316 95       		.byte	0x95
 872 0317 B6000000 		.4byte	0xb6
 873 031b 05       		.byte	0x5
 874 031c 03       		.byte	0x3
 875 031d 00000000 		.4byte	uxCriticalNesting
 876 0321 20       		.uleb128 0x20
 877 0322 01       		.byte	0x1
 878 0323 6E020000 		.4byte	.LASF40
 879 0327 06       		.byte	0x6
 880 0328 2608     		.2byte	0x826
 881 032a 01       		.byte	0x1
 882 032b AB000000 		.4byte	0xab
 883 032f 01       		.byte	0x1
 884 0330 00       		.byte	0
 885              		.section	.debug_abbrev,"",%progbits
 886              	.Ldebug_abbrev0:
 887 0000 01       		.uleb128 0x1
 888 0001 11       		.uleb128 0x11
 889 0002 01       		.byte	0x1
 890 0003 25       		.uleb128 0x25
 891 0004 0E       		.uleb128 0xe
 892 0005 13       		.uleb128 0x13
 893 0006 0B       		.uleb128 0xb
 894 0007 03       		.uleb128 0x3
 895 0008 0E       		.uleb128 0xe
 896 0009 1B       		.uleb128 0x1b
 897 000a 0E       		.uleb128 0xe
 898 000b 11       		.uleb128 0x11
 899 000c 01       		.uleb128 0x1
 900 000d 12       		.uleb128 0x12
 901 000e 01       		.uleb128 0x1
 902 000f 10       		.uleb128 0x10
 903 0010 06       		.uleb128 0x6
 904 0011 00       		.byte	0
 905 0012 00       		.byte	0
 906 0013 02       		.uleb128 0x2
 907 0014 24       		.uleb128 0x24
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 33


 908 0015 00       		.byte	0
 909 0016 0B       		.uleb128 0xb
 910 0017 0B       		.uleb128 0xb
 911 0018 3E       		.uleb128 0x3e
 912 0019 0B       		.uleb128 0xb
 913 001a 03       		.uleb128 0x3
 914 001b 08       		.uleb128 0x8
 915 001c 00       		.byte	0
 916 001d 00       		.byte	0
 917 001e 03       		.uleb128 0x3
 918 001f 24       		.uleb128 0x24
 919 0020 00       		.byte	0
 920 0021 0B       		.uleb128 0xb
 921 0022 0B       		.uleb128 0xb
 922 0023 3E       		.uleb128 0x3e
 923 0024 0B       		.uleb128 0xb
 924 0025 03       		.uleb128 0x3
 925 0026 0E       		.uleb128 0xe
 926 0027 00       		.byte	0
 927 0028 00       		.byte	0
 928 0029 04       		.uleb128 0x4
 929 002a 16       		.uleb128 0x16
 930 002b 00       		.byte	0
 931 002c 03       		.uleb128 0x3
 932 002d 0E       		.uleb128 0xe
 933 002e 3A       		.uleb128 0x3a
 934 002f 0B       		.uleb128 0xb
 935 0030 3B       		.uleb128 0x3b
 936 0031 0B       		.uleb128 0xb
 937 0032 49       		.uleb128 0x49
 938 0033 13       		.uleb128 0x13
 939 0034 00       		.byte	0
 940 0035 00       		.byte	0
 941 0036 05       		.uleb128 0x5
 942 0037 0F       		.uleb128 0xf
 943 0038 00       		.byte	0
 944 0039 0B       		.uleb128 0xb
 945 003a 0B       		.uleb128 0xb
 946 003b 49       		.uleb128 0x49
 947 003c 13       		.uleb128 0x13
 948 003d 00       		.byte	0
 949 003e 00       		.byte	0
 950 003f 06       		.uleb128 0x6
 951 0040 15       		.uleb128 0x15
 952 0041 01       		.byte	0x1
 953 0042 27       		.uleb128 0x27
 954 0043 0C       		.uleb128 0xc
 955 0044 01       		.uleb128 0x1
 956 0045 13       		.uleb128 0x13
 957 0046 00       		.byte	0
 958 0047 00       		.byte	0
 959 0048 07       		.uleb128 0x7
 960 0049 05       		.uleb128 0x5
 961 004a 00       		.byte	0
 962 004b 49       		.uleb128 0x49
 963 004c 13       		.uleb128 0x13
 964 004d 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 34


 965 004e 00       		.byte	0
 966 004f 08       		.uleb128 0x8
 967 0050 0F       		.uleb128 0xf
 968 0051 00       		.byte	0
 969 0052 0B       		.uleb128 0xb
 970 0053 0B       		.uleb128 0xb
 971 0054 00       		.byte	0
 972 0055 00       		.byte	0
 973 0056 09       		.uleb128 0x9
 974 0057 2E       		.uleb128 0x2e
 975 0058 01       		.byte	0x1
 976 0059 03       		.uleb128 0x3
 977 005a 0E       		.uleb128 0xe
 978 005b 3A       		.uleb128 0x3a
 979 005c 0B       		.uleb128 0xb
 980 005d 3B       		.uleb128 0x3b
 981 005e 0B       		.uleb128 0xb
 982 005f 27       		.uleb128 0x27
 983 0060 0C       		.uleb128 0xc
 984 0061 20       		.uleb128 0x20
 985 0062 0B       		.uleb128 0xb
 986 0063 01       		.uleb128 0x1
 987 0064 13       		.uleb128 0x13
 988 0065 00       		.byte	0
 989 0066 00       		.byte	0
 990 0067 0A       		.uleb128 0xa
 991 0068 34       		.uleb128 0x34
 992 0069 00       		.byte	0
 993 006a 03       		.uleb128 0x3
 994 006b 0E       		.uleb128 0xe
 995 006c 3A       		.uleb128 0x3a
 996 006d 0B       		.uleb128 0xb
 997 006e 3B       		.uleb128 0x3b
 998 006f 0B       		.uleb128 0xb
 999 0070 49       		.uleb128 0x49
 1000 0071 13       		.uleb128 0x13
 1001 0072 00       		.byte	0
 1002 0073 00       		.byte	0
 1003 0074 0B       		.uleb128 0xb
 1004 0075 2E       		.uleb128 0x2e
 1005 0076 01       		.byte	0x1
 1006 0077 03       		.uleb128 0x3
 1007 0078 0E       		.uleb128 0xe
 1008 0079 3A       		.uleb128 0x3a
 1009 007a 0B       		.uleb128 0xb
 1010 007b 3B       		.uleb128 0x3b
 1011 007c 05       		.uleb128 0x5
 1012 007d 27       		.uleb128 0x27
 1013 007e 0C       		.uleb128 0xc
 1014 007f 20       		.uleb128 0x20
 1015 0080 0B       		.uleb128 0xb
 1016 0081 01       		.uleb128 0x1
 1017 0082 13       		.uleb128 0x13
 1018 0083 00       		.byte	0
 1019 0084 00       		.byte	0
 1020 0085 0C       		.uleb128 0xc
 1021 0086 05       		.uleb128 0x5
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 35


 1022 0087 00       		.byte	0
 1023 0088 03       		.uleb128 0x3
 1024 0089 0E       		.uleb128 0xe
 1025 008a 3A       		.uleb128 0x3a
 1026 008b 0B       		.uleb128 0xb
 1027 008c 3B       		.uleb128 0x3b
 1028 008d 05       		.uleb128 0x5
 1029 008e 49       		.uleb128 0x49
 1030 008f 13       		.uleb128 0x13
 1031 0090 00       		.byte	0
 1032 0091 00       		.byte	0
 1033 0092 0D       		.uleb128 0xd
 1034 0093 2E       		.uleb128 0x2e
 1035 0094 01       		.byte	0x1
 1036 0095 03       		.uleb128 0x3
 1037 0096 0E       		.uleb128 0xe
 1038 0097 3A       		.uleb128 0x3a
 1039 0098 0B       		.uleb128 0xb
 1040 0099 3B       		.uleb128 0x3b
 1041 009a 0B       		.uleb128 0xb
 1042 009b 27       		.uleb128 0x27
 1043 009c 0C       		.uleb128 0xc
 1044 009d 11       		.uleb128 0x11
 1045 009e 01       		.uleb128 0x1
 1046 009f 12       		.uleb128 0x12
 1047 00a0 01       		.uleb128 0x1
 1048 00a1 40       		.uleb128 0x40
 1049 00a2 0A       		.uleb128 0xa
 1050 00a3 9742     		.uleb128 0x2117
 1051 00a5 0C       		.uleb128 0xc
 1052 00a6 01       		.uleb128 0x1
 1053 00a7 13       		.uleb128 0x13
 1054 00a8 00       		.byte	0
 1055 00a9 00       		.byte	0
 1056 00aa 0E       		.uleb128 0xe
 1057 00ab 1D       		.uleb128 0x1d
 1058 00ac 01       		.byte	0x1
 1059 00ad 31       		.uleb128 0x31
 1060 00ae 13       		.uleb128 0x13
 1061 00af 11       		.uleb128 0x11
 1062 00b0 01       		.uleb128 0x1
 1063 00b1 12       		.uleb128 0x12
 1064 00b2 01       		.uleb128 0x1
 1065 00b3 58       		.uleb128 0x58
 1066 00b4 0B       		.uleb128 0xb
 1067 00b5 59       		.uleb128 0x59
 1068 00b6 0B       		.uleb128 0xb
 1069 00b7 00       		.byte	0
 1070 00b8 00       		.byte	0
 1071 00b9 0F       		.uleb128 0xf
 1072 00ba 0B       		.uleb128 0xb
 1073 00bb 01       		.byte	0x1
 1074 00bc 11       		.uleb128 0x11
 1075 00bd 01       		.uleb128 0x1
 1076 00be 12       		.uleb128 0x12
 1077 00bf 01       		.uleb128 0x1
 1078 00c0 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 36


 1079 00c1 00       		.byte	0
 1080 00c2 10       		.uleb128 0x10
 1081 00c3 34       		.uleb128 0x34
 1082 00c4 00       		.byte	0
 1083 00c5 31       		.uleb128 0x31
 1084 00c6 13       		.uleb128 0x13
 1085 00c7 00       		.byte	0
 1086 00c8 00       		.byte	0
 1087 00c9 11       		.uleb128 0x11
 1088 00ca 2E       		.uleb128 0x2e
 1089 00cb 00       		.byte	0
 1090 00cc 03       		.uleb128 0x3
 1091 00cd 0E       		.uleb128 0xe
 1092 00ce 3A       		.uleb128 0x3a
 1093 00cf 0B       		.uleb128 0xb
 1094 00d0 3B       		.uleb128 0x3b
 1095 00d1 05       		.uleb128 0x5
 1096 00d2 27       		.uleb128 0x27
 1097 00d3 0C       		.uleb128 0xc
 1098 00d4 11       		.uleb128 0x11
 1099 00d5 01       		.uleb128 0x1
 1100 00d6 12       		.uleb128 0x12
 1101 00d7 01       		.uleb128 0x1
 1102 00d8 40       		.uleb128 0x40
 1103 00d9 0A       		.uleb128 0xa
 1104 00da 9742     		.uleb128 0x2117
 1105 00dc 0C       		.uleb128 0xc
 1106 00dd 00       		.byte	0
 1107 00de 00       		.byte	0
 1108 00df 12       		.uleb128 0x12
 1109 00e0 2E       		.uleb128 0x2e
 1110 00e1 01       		.byte	0x1
 1111 00e2 3F       		.uleb128 0x3f
 1112 00e3 0C       		.uleb128 0xc
 1113 00e4 03       		.uleb128 0x3
 1114 00e5 0E       		.uleb128 0xe
 1115 00e6 3A       		.uleb128 0x3a
 1116 00e7 0B       		.uleb128 0xb
 1117 00e8 3B       		.uleb128 0x3b
 1118 00e9 0B       		.uleb128 0xb
 1119 00ea 27       		.uleb128 0x27
 1120 00eb 0C       		.uleb128 0xc
 1121 00ec 49       		.uleb128 0x49
 1122 00ed 13       		.uleb128 0x13
 1123 00ee 11       		.uleb128 0x11
 1124 00ef 01       		.uleb128 0x1
 1125 00f0 12       		.uleb128 0x12
 1126 00f1 01       		.uleb128 0x1
 1127 00f2 40       		.uleb128 0x40
 1128 00f3 0A       		.uleb128 0xa
 1129 00f4 9742     		.uleb128 0x2117
 1130 00f6 0C       		.uleb128 0xc
 1131 00f7 01       		.uleb128 0x1
 1132 00f8 13       		.uleb128 0x13
 1133 00f9 00       		.byte	0
 1134 00fa 00       		.byte	0
 1135 00fb 13       		.uleb128 0x13
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 37


 1136 00fc 05       		.uleb128 0x5
 1137 00fd 00       		.byte	0
 1138 00fe 03       		.uleb128 0x3
 1139 00ff 0E       		.uleb128 0xe
 1140 0100 3A       		.uleb128 0x3a
 1141 0101 0B       		.uleb128 0xb
 1142 0102 3B       		.uleb128 0x3b
 1143 0103 0B       		.uleb128 0xb
 1144 0104 49       		.uleb128 0x49
 1145 0105 13       		.uleb128 0x13
 1146 0106 02       		.uleb128 0x2
 1147 0107 06       		.uleb128 0x6
 1148 0108 00       		.byte	0
 1149 0109 00       		.byte	0
 1150 010a 14       		.uleb128 0x14
 1151 010b 05       		.uleb128 0x5
 1152 010c 00       		.byte	0
 1153 010d 03       		.uleb128 0x3
 1154 010e 0E       		.uleb128 0xe
 1155 010f 3A       		.uleb128 0x3a
 1156 0110 0B       		.uleb128 0xb
 1157 0111 3B       		.uleb128 0x3b
 1158 0112 0B       		.uleb128 0xb
 1159 0113 49       		.uleb128 0x49
 1160 0114 13       		.uleb128 0x13
 1161 0115 02       		.uleb128 0x2
 1162 0116 0A       		.uleb128 0xa
 1163 0117 00       		.byte	0
 1164 0118 00       		.byte	0
 1165 0119 15       		.uleb128 0x15
 1166 011a 2E       		.uleb128 0x2e
 1167 011b 00       		.byte	0
 1168 011c 3F       		.uleb128 0x3f
 1169 011d 0C       		.uleb128 0xc
 1170 011e 03       		.uleb128 0x3
 1171 011f 0E       		.uleb128 0xe
 1172 0120 3A       		.uleb128 0x3a
 1173 0121 0B       		.uleb128 0xb
 1174 0122 3B       		.uleb128 0x3b
 1175 0123 0B       		.uleb128 0xb
 1176 0124 27       		.uleb128 0x27
 1177 0125 0C       		.uleb128 0xc
 1178 0126 11       		.uleb128 0x11
 1179 0127 01       		.uleb128 0x1
 1180 0128 12       		.uleb128 0x12
 1181 0129 01       		.uleb128 0x1
 1182 012a 40       		.uleb128 0x40
 1183 012b 0A       		.uleb128 0xa
 1184 012c 9742     		.uleb128 0x2117
 1185 012e 0C       		.uleb128 0xc
 1186 012f 00       		.byte	0
 1187 0130 00       		.byte	0
 1188 0131 16       		.uleb128 0x16
 1189 0132 2E       		.uleb128 0x2e
 1190 0133 00       		.byte	0
 1191 0134 3F       		.uleb128 0x3f
 1192 0135 0C       		.uleb128 0xc
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 38


 1193 0136 03       		.uleb128 0x3
 1194 0137 0E       		.uleb128 0xe
 1195 0138 3A       		.uleb128 0x3a
 1196 0139 0B       		.uleb128 0xb
 1197 013a 3B       		.uleb128 0x3b
 1198 013b 05       		.uleb128 0x5
 1199 013c 27       		.uleb128 0x27
 1200 013d 0C       		.uleb128 0xc
 1201 013e 11       		.uleb128 0x11
 1202 013f 01       		.uleb128 0x1
 1203 0140 12       		.uleb128 0x12
 1204 0141 01       		.uleb128 0x1
 1205 0142 40       		.uleb128 0x40
 1206 0143 0A       		.uleb128 0xa
 1207 0144 9742     		.uleb128 0x2117
 1208 0146 0C       		.uleb128 0xc
 1209 0147 00       		.byte	0
 1210 0148 00       		.byte	0
 1211 0149 17       		.uleb128 0x17
 1212 014a 2E       		.uleb128 0x2e
 1213 014b 01       		.byte	0x1
 1214 014c 3F       		.uleb128 0x3f
 1215 014d 0C       		.uleb128 0xc
 1216 014e 03       		.uleb128 0x3
 1217 014f 0E       		.uleb128 0xe
 1218 0150 3A       		.uleb128 0x3a
 1219 0151 0B       		.uleb128 0xb
 1220 0152 3B       		.uleb128 0x3b
 1221 0153 05       		.uleb128 0x5
 1222 0154 27       		.uleb128 0x27
 1223 0155 0C       		.uleb128 0xc
 1224 0156 11       		.uleb128 0x11
 1225 0157 01       		.uleb128 0x1
 1226 0158 12       		.uleb128 0x12
 1227 0159 01       		.uleb128 0x1
 1228 015a 40       		.uleb128 0x40
 1229 015b 0A       		.uleb128 0xa
 1230 015c 9742     		.uleb128 0x2117
 1231 015e 0C       		.uleb128 0xc
 1232 015f 01       		.uleb128 0x1
 1233 0160 13       		.uleb128 0x13
 1234 0161 00       		.byte	0
 1235 0162 00       		.byte	0
 1236 0163 18       		.uleb128 0x18
 1237 0164 1D       		.uleb128 0x1d
 1238 0165 01       		.byte	0x1
 1239 0166 31       		.uleb128 0x31
 1240 0167 13       		.uleb128 0x13
 1241 0168 11       		.uleb128 0x11
 1242 0169 01       		.uleb128 0x1
 1243 016a 12       		.uleb128 0x12
 1244 016b 01       		.uleb128 0x1
 1245 016c 58       		.uleb128 0x58
 1246 016d 0B       		.uleb128 0xb
 1247 016e 59       		.uleb128 0x59
 1248 016f 05       		.uleb128 0x5
 1249 0170 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 39


 1250 0171 00       		.byte	0
 1251 0172 19       		.uleb128 0x19
 1252 0173 05       		.uleb128 0x5
 1253 0174 00       		.byte	0
 1254 0175 31       		.uleb128 0x31
 1255 0176 13       		.uleb128 0x13
 1256 0177 02       		.uleb128 0x2
 1257 0178 06       		.uleb128 0x6
 1258 0179 00       		.byte	0
 1259 017a 00       		.byte	0
 1260 017b 1A       		.uleb128 0x1a
 1261 017c 2E       		.uleb128 0x2e
 1262 017d 01       		.byte	0x1
 1263 017e 3F       		.uleb128 0x3f
 1264 017f 0C       		.uleb128 0xc
 1265 0180 03       		.uleb128 0x3
 1266 0181 0E       		.uleb128 0xe
 1267 0182 3A       		.uleb128 0x3a
 1268 0183 0B       		.uleb128 0xb
 1269 0184 3B       		.uleb128 0x3b
 1270 0185 05       		.uleb128 0x5
 1271 0186 27       		.uleb128 0x27
 1272 0187 0C       		.uleb128 0xc
 1273 0188 11       		.uleb128 0x11
 1274 0189 01       		.uleb128 0x1
 1275 018a 12       		.uleb128 0x12
 1276 018b 01       		.uleb128 0x1
 1277 018c 40       		.uleb128 0x40
 1278 018d 06       		.uleb128 0x6
 1279 018e 9742     		.uleb128 0x2117
 1280 0190 0C       		.uleb128 0xc
 1281 0191 01       		.uleb128 0x1
 1282 0192 13       		.uleb128 0x13
 1283 0193 00       		.byte	0
 1284 0194 00       		.byte	0
 1285 0195 1B       		.uleb128 0x1b
 1286 0196 1D       		.uleb128 0x1d
 1287 0197 01       		.byte	0x1
 1288 0198 31       		.uleb128 0x31
 1289 0199 13       		.uleb128 0x13
 1290 019a 11       		.uleb128 0x11
 1291 019b 01       		.uleb128 0x1
 1292 019c 12       		.uleb128 0x12
 1293 019d 01       		.uleb128 0x1
 1294 019e 58       		.uleb128 0x58
 1295 019f 0B       		.uleb128 0xb
 1296 01a0 59       		.uleb128 0x59
 1297 01a1 05       		.uleb128 0x5
 1298 01a2 01       		.uleb128 0x1
 1299 01a3 13       		.uleb128 0x13
 1300 01a4 00       		.byte	0
 1301 01a5 00       		.byte	0
 1302 01a6 1C       		.uleb128 0x1c
 1303 01a7 05       		.uleb128 0x5
 1304 01a8 00       		.byte	0
 1305 01a9 31       		.uleb128 0x31
 1306 01aa 13       		.uleb128 0x13
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 40


 1307 01ab 1C       		.uleb128 0x1c
 1308 01ac 0B       		.uleb128 0xb
 1309 01ad 00       		.byte	0
 1310 01ae 00       		.byte	0
 1311 01af 1D       		.uleb128 0x1d
 1312 01b0 898201   		.uleb128 0x4109
 1313 01b3 00       		.byte	0
 1314 01b4 11       		.uleb128 0x11
 1315 01b5 01       		.uleb128 0x1
 1316 01b6 31       		.uleb128 0x31
 1317 01b7 13       		.uleb128 0x13
 1318 01b8 00       		.byte	0
 1319 01b9 00       		.byte	0
 1320 01ba 1E       		.uleb128 0x1e
 1321 01bb 2E       		.uleb128 0x2e
 1322 01bc 01       		.byte	0x1
 1323 01bd 3F       		.uleb128 0x3f
 1324 01be 0C       		.uleb128 0xc
 1325 01bf 03       		.uleb128 0x3
 1326 01c0 0E       		.uleb128 0xe
 1327 01c1 3A       		.uleb128 0x3a
 1328 01c2 0B       		.uleb128 0xb
 1329 01c3 3B       		.uleb128 0x3b
 1330 01c4 05       		.uleb128 0x5
 1331 01c5 27       		.uleb128 0x27
 1332 01c6 0C       		.uleb128 0xc
 1333 01c7 49       		.uleb128 0x49
 1334 01c8 13       		.uleb128 0x13
 1335 01c9 11       		.uleb128 0x11
 1336 01ca 01       		.uleb128 0x1
 1337 01cb 12       		.uleb128 0x12
 1338 01cc 01       		.uleb128 0x1
 1339 01cd 40       		.uleb128 0x40
 1340 01ce 06       		.uleb128 0x6
 1341 01cf 9742     		.uleb128 0x2117
 1342 01d1 0C       		.uleb128 0xc
 1343 01d2 01       		.uleb128 0x1
 1344 01d3 13       		.uleb128 0x13
 1345 01d4 00       		.byte	0
 1346 01d5 00       		.byte	0
 1347 01d6 1F       		.uleb128 0x1f
 1348 01d7 34       		.uleb128 0x34
 1349 01d8 00       		.byte	0
 1350 01d9 03       		.uleb128 0x3
 1351 01da 0E       		.uleb128 0xe
 1352 01db 3A       		.uleb128 0x3a
 1353 01dc 0B       		.uleb128 0xb
 1354 01dd 3B       		.uleb128 0x3b
 1355 01de 0B       		.uleb128 0xb
 1356 01df 49       		.uleb128 0x49
 1357 01e0 13       		.uleb128 0x13
 1358 01e1 02       		.uleb128 0x2
 1359 01e2 0A       		.uleb128 0xa
 1360 01e3 00       		.byte	0
 1361 01e4 00       		.byte	0
 1362 01e5 20       		.uleb128 0x20
 1363 01e6 2E       		.uleb128 0x2e
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 41


 1364 01e7 00       		.byte	0
 1365 01e8 3F       		.uleb128 0x3f
 1366 01e9 0C       		.uleb128 0xc
 1367 01ea 03       		.uleb128 0x3
 1368 01eb 0E       		.uleb128 0xe
 1369 01ec 3A       		.uleb128 0x3a
 1370 01ed 0B       		.uleb128 0xb
 1371 01ee 3B       		.uleb128 0x3b
 1372 01ef 05       		.uleb128 0x5
 1373 01f0 27       		.uleb128 0x27
 1374 01f1 0C       		.uleb128 0xc
 1375 01f2 49       		.uleb128 0x49
 1376 01f3 13       		.uleb128 0x13
 1377 01f4 3C       		.uleb128 0x3c
 1378 01f5 0C       		.uleb128 0xc
 1379 01f6 00       		.byte	0
 1380 01f7 00       		.byte	0
 1381 01f8 00       		.byte	0
 1382              		.section	.debug_loc,"",%progbits
 1383              	.Ldebug_loc0:
 1384              	.LLST0:
 1385 0000 2C000000 		.4byte	.LVL1-.Ltext0
 1386 0004 2C000000 		.4byte	.LVL1-.Ltext0
 1387 0008 0100     		.2byte	0x1
 1388 000a 50       		.byte	0x50
 1389 000b 2C000000 		.4byte	.LVL1-.Ltext0
 1390 000f 34000000 		.4byte	.LVL2-.Ltext0
 1391 0013 0300     		.2byte	0x3
 1392 0015 70       		.byte	0x70
 1393 0016 7C       		.sleb128 -4
 1394 0017 9F       		.byte	0x9f
 1395 0018 34000000 		.4byte	.LVL2-.Ltext0
 1396 001c 3E000000 		.4byte	.LVL4-.Ltext0
 1397 0020 0300     		.2byte	0x3
 1398 0022 70       		.byte	0x70
 1399 0023 78       		.sleb128 -8
 1400 0024 9F       		.byte	0x9f
 1401 0025 3E000000 		.4byte	.LVL4-.Ltext0
 1402 0029 42000000 		.4byte	.LVL5-.Ltext0
 1403 002d 0300     		.2byte	0x3
 1404 002f 70       		.byte	0x70
 1405 0030 74       		.sleb128 -12
 1406 0031 9F       		.byte	0x9f
 1407 0032 42000000 		.4byte	.LVL5-.Ltext0
 1408 0036 46000000 		.4byte	.LVL6-.Ltext0
 1409 003a 0300     		.2byte	0x3
 1410 003c 70       		.byte	0x70
 1411 003d 60       		.sleb128 -32
 1412 003e 9F       		.byte	0x9f
 1413 003f 46000000 		.4byte	.LVL6-.Ltext0
 1414 0043 48000000 		.4byte	.LVL7-.Ltext0
 1415 0047 0300     		.2byte	0x3
 1416 0049 70       		.byte	0x70
 1417 004a 40       		.sleb128 -64
 1418 004b 9F       		.byte	0x9f
 1419 004c 48000000 		.4byte	.LVL7-.Ltext0
 1420 0050 50000000 		.4byte	.LFE5-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 42


 1421 0054 0100     		.2byte	0x1
 1422 0056 50       		.byte	0x50
 1423 0057 00000000 		.4byte	0
 1424 005b 00000000 		.4byte	0
 1425              	.LLST1:
 1426 005f 2C000000 		.4byte	.LVL1-.Ltext0
 1427 0063 3A000000 		.4byte	.LVL3-.Ltext0
 1428 0067 0100     		.2byte	0x1
 1429 0069 51       		.byte	0x51
 1430 006a 3A000000 		.4byte	.LVL3-.Ltext0
 1431 006e 50000000 		.4byte	.LFE5-.Ltext0
 1432 0072 0400     		.2byte	0x4
 1433 0074 F3       		.byte	0xf3
 1434 0075 01       		.uleb128 0x1
 1435 0076 51       		.byte	0x51
 1436 0077 9F       		.byte	0x9f
 1437 0078 00000000 		.4byte	0
 1438 007c 00000000 		.4byte	0
 1439              	.LLST2:
 1440 0080 9E000000 		.4byte	.LVL9-.Ltext0
 1441 0084 A2000000 		.4byte	.LVL10-.Ltext0
 1442 0088 0200     		.2byte	0x2
 1443 008a 30       		.byte	0x30
 1444 008b 9F       		.byte	0x9f
 1445 008c 00000000 		.4byte	0
 1446 0090 00000000 		.4byte	0
 1447              	.LLST3:
 1448 0094 F4000000 		.4byte	.LFB14-.Ltext0
 1449 0098 F6000000 		.4byte	.LCFI0-.Ltext0
 1450 009c 0200     		.2byte	0x2
 1451 009e 7D       		.byte	0x7d
 1452 009f 00       		.sleb128 0
 1453 00a0 F6000000 		.4byte	.LCFI0-.Ltext0
 1454 00a4 20010000 		.4byte	.LFE14-.Ltext0
 1455 00a8 0200     		.2byte	0x2
 1456 00aa 7D       		.byte	0x7d
 1457 00ab 08       		.sleb128 8
 1458 00ac 00000000 		.4byte	0
 1459 00b0 00000000 		.4byte	0
 1460              	.LLST4:
 1461 00b4 38010000 		.4byte	.LFB9-.Ltext0
 1462 00b8 3A010000 		.4byte	.LCFI1-.Ltext0
 1463 00bc 0200     		.2byte	0x2
 1464 00be 7D       		.byte	0x7d
 1465 00bf 00       		.sleb128 0
 1466 00c0 3A010000 		.4byte	.LCFI1-.Ltext0
 1467 00c4 68010000 		.4byte	.LFE9-.Ltext0
 1468 00c8 0200     		.2byte	0x2
 1469 00ca 7D       		.byte	0x7d
 1470 00cb 08       		.sleb128 8
 1471 00cc 00000000 		.4byte	0
 1472 00d0 00000000 		.4byte	0
 1473              		.section	.debug_aranges,"",%progbits
 1474 0000 1C000000 		.4byte	0x1c
 1475 0004 0200     		.2byte	0x2
 1476 0006 00000000 		.4byte	.Ldebug_info0
 1477 000a 04       		.byte	0x4
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 43


 1478 000b 00       		.byte	0
 1479 000c 0000     		.2byte	0
 1480 000e 0000     		.2byte	0
 1481 0010 00000000 		.4byte	.Ltext0
 1482 0014 68010000 		.4byte	.Letext0-.Ltext0
 1483 0018 00000000 		.4byte	0
 1484 001c 00000000 		.4byte	0
 1485              		.section	.debug_line,"",%progbits
 1486              	.Ldebug_line0:
 1487 0000 FD010000 		.section	.debug_str,"MS",%progbits,1
 1487      02007201 
 1487      00000201 
 1487      FB0E0D00 
 1487      01010101 
 1488              	.LASF32:
 1489 0000 474E5520 		.ascii	"GNU C 4.9.3 20150529 (release) [ARM/embedded-4_9-br"
 1489      4320342E 
 1489      392E3320 
 1489      32303135 
 1489      30353239 
 1490 0033 616E6368 		.ascii	"anch revision 227977] -mcpu=cortex-m3 -mthumb -gdwa"
 1490      20726576 
 1490      6973696F 
 1490      6E203232 
 1490      37393737 
 1491 0066 72662D32 		.ascii	"rf-2 -Os -fomit-frame-pointer\000"
 1491      202D4F73 
 1491      202D666F 
 1491      6D69742D 
 1491      6672616D 
 1492              	.LASF11:
 1493 0084 5461736B 		.ascii	"TaskFunction_t\000"
 1493      46756E63 
 1493      74696F6E 
 1493      5F7400
 1494              	.LASF3:
 1495 0093 73686F72 		.ascii	"short int\000"
 1495      7420696E 
 1495      7400
 1496              	.LASF31:
 1497 009d 78506F72 		.ascii	"xPortStartScheduler\000"
 1497      74537461 
 1497      72745363 
 1497      68656475 
 1497      6C657200 
 1498              	.LASF16:
 1499 00b1 73697A65 		.ascii	"sizetype\000"
 1499      74797065 
 1499      00
 1500              	.LASF28:
 1501 00ba 78506F72 		.ascii	"xPortSysTickHandler\000"
 1501      74537973 
 1501      5469636B 
 1501      48616E64 
 1501      6C657200 
 1502              	.LASF9:
 1503 00ce 5F5F7569 		.ascii	"__uint32_t\000"
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 44


 1503      6E743332 
 1503      5F7400
 1504              	.LASF20:
 1505 00d9 7078546F 		.ascii	"pxTopOfStack\000"
 1505      704F6653 
 1505      7461636B 
 1505      00
 1506              	.LASF37:
 1507 00e6 70727654 		.ascii	"prvTaskExitError\000"
 1507      61736B45 
 1507      78697445 
 1507      72726F72 
 1507      00
 1508              	.LASF21:
 1509 00f7 7078436F 		.ascii	"pxCode\000"
 1509      646500
 1510              	.LASF23:
 1511 00fe 76506F72 		.ascii	"vPortSVCHandler\000"
 1511      74535643 
 1511      48616E64 
 1511      6C657200 
 1512              	.LASF24:
 1513 010e 76506F72 		.ascii	"vPortEndScheduler\000"
 1513      74456E64 
 1513      53636865 
 1513      64756C65 
 1513      7200
 1514              	.LASF38:
 1515 0120 70727650 		.ascii	"prvPortStartFirstTask\000"
 1515      6F727453 
 1515      74617274 
 1515      46697273 
 1515      74546173 
 1516              	.LASF7:
 1517 0136 6C6F6E67 		.ascii	"long long int\000"
 1517      206C6F6E 
 1517      6720696E 
 1517      7400
 1518              	.LASF15:
 1519 0144 5469636B 		.ascii	"TickType_t\000"
 1519      54797065 
 1519      5F7400
 1520              	.LASF5:
 1521 014f 6C6F6E67 		.ascii	"long int\000"
 1521      20696E74 
 1521      00
 1522              	.LASF39:
 1523 0158 75784372 		.ascii	"uxCriticalNesting\000"
 1523      69746963 
 1523      616C4E65 
 1523      7374696E 
 1523      6700
 1524              	.LASF2:
 1525 016a 756E7369 		.ascii	"unsigned char\000"
 1525      676E6564 
 1525      20636861 
 1525      7200
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 45


 1526              	.LASF1:
 1527 0178 7369676E 		.ascii	"signed char\000"
 1527      65642063 
 1527      68617200 
 1528              	.LASF8:
 1529 0184 6C6F6E67 		.ascii	"long long unsigned int\000"
 1529      206C6F6E 
 1529      6720756E 
 1529      7369676E 
 1529      65642069 
 1530              	.LASF10:
 1531 019b 75696E74 		.ascii	"uint32_t\000"
 1531      33325F74 
 1531      00
 1532              	.LASF0:
 1533 01a4 756E7369 		.ascii	"unsigned int\000"
 1533      676E6564 
 1533      20696E74 
 1533      00
 1534              	.LASF13:
 1535 01b1 42617365 		.ascii	"BaseType_t\000"
 1535      54797065 
 1535      5F7400
 1536              	.LASF33:
 1537 01bc 46726565 		.ascii	"FreeRTOS/Source/portable/GCC/ARM_CM3/port.c\000"
 1537      52544F53 
 1537      2F536F75 
 1537      7263652F 
 1537      706F7274 
 1538              	.LASF22:
 1539 01e8 70765061 		.ascii	"pvParameters\000"
 1539      72616D65 
 1539      74657273 
 1539      00
 1540              	.LASF29:
 1541 01f5 76506F72 		.ascii	"vPortSetupTimerInterrupt\000"
 1541      74536574 
 1541      75705469 
 1541      6D657249 
 1541      6E746572 
 1542              	.LASF4:
 1543 020e 73686F72 		.ascii	"short unsigned int\000"
 1543      7420756E 
 1543      7369676E 
 1543      65642069 
 1543      6E7400
 1544              	.LASF25:
 1545 0221 76506F72 		.ascii	"vPortEnterCritical\000"
 1545      74456E74 
 1545      65724372 
 1545      69746963 
 1545      616C00
 1546              	.LASF19:
 1547 0234 76506F72 		.ascii	"vPortSetBASEPRI\000"
 1547      74536574 
 1547      42415345 
 1547      50524900 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 46


 1548              	.LASF17:
 1549 0244 63686172 		.ascii	"char\000"
 1549      00
 1550              	.LASF27:
 1551 0249 78506F72 		.ascii	"xPortPendSVHandler\000"
 1551      7450656E 
 1551      64535648 
 1551      616E646C 
 1551      657200
 1552              	.LASF26:
 1553 025c 76506F72 		.ascii	"vPortExitCritical\000"
 1553      74457869 
 1553      74437269 
 1553      74696361 
 1553      6C00
 1554              	.LASF40:
 1555 026e 78546173 		.ascii	"xTaskIncrementTick\000"
 1555      6B496E63 
 1555      72656D65 
 1555      6E745469 
 1555      636B00
 1556              	.LASF6:
 1557 0281 6C6F6E67 		.ascii	"long unsigned int\000"
 1557      20756E73 
 1557      69676E65 
 1557      6420696E 
 1557      7400
 1558              	.LASF14:
 1559 0293 55426173 		.ascii	"UBaseType_t\000"
 1559      65547970 
 1559      655F7400 
 1560              	.LASF36:
 1561 029f 756C4E65 		.ascii	"ulNewMaskValue\000"
 1561      774D6173 
 1561      6B56616C 
 1561      756500
 1562              	.LASF12:
 1563 02ae 53746163 		.ascii	"StackType_t\000"
 1563      6B547970 
 1563      655F7400 
 1564              	.LASF34:
 1565 02ba 2F557365 		.ascii	"/Users/ingamedeo/Downloads/STM32F103RBT6FreeRTOS\000"
 1565      72732F69 
 1565      6E67616D 
 1565      6564656F 
 1565      2F446F77 
 1566              	.LASF30:
 1567 02eb 7078506F 		.ascii	"pxPortInitialiseStack\000"
 1567      7274496E 
 1567      69746961 
 1567      6C697365 
 1567      53746163 
 1568              	.LASF18:
 1569 0301 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 1569      74526169 
 1569      73654241 
 1569      53455052 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 47


 1569      4900
 1570              	.LASF35:
 1571 0313 756C4E65 		.ascii	"ulNewBASEPRI\000"
 1571      77424153 
 1571      45505249 
 1571      00
 1572              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150529 (release) [ARM/embedded-4_9-br
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s 			page 48


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:73     .text:0000000000000000 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:77     .text:0000000000000000 prvTaskExitError
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:111    .text:0000000000000012 prvPortStartFirstTask
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:142    .text:000000000000002c pxPortInitialiseStack
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:174    .text:000000000000004c $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:178    .text:0000000000000050 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:183    .text:0000000000000050 vPortSVCHandler
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:204    .text:0000000000000070 pxCurrentTCBConst2
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:204    .text:0000000000000070 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:212    .text:0000000000000074 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:217    .text:0000000000000074 vPortEndScheduler
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:233    .text:0000000000000076 vPortEnterCritical
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:263    .text:0000000000000090 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:267    .text:0000000000000094 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:272    .text:0000000000000094 vPortExitCritical
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:300    .text:00000000000000a4 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:306    .text:00000000000000a8 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:311    .text:00000000000000a8 xPortPendSVHandler
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:345    .text:00000000000000f0 pxCurrentTCBConst
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:345    .text:00000000000000f0 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:353    .text:00000000000000f4 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:358    .text:00000000000000f4 xPortSysTickHandler
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:405    .text:000000000000011c $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:411    .text:0000000000000120 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:416    .text:0000000000000120 vPortSetupTimerInterrupt
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:434    .text:0000000000000130 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:439    .text:0000000000000138 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:444    .text:0000000000000138 xPortStartScheduler
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:481    .text:0000000000000160 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:487    .data:0000000000000000 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccs8ocL0.s:491    .data:0000000000000000 uxCriticalNesting
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
