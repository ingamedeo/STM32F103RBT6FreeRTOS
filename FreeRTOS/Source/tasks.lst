ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"tasks.c"
  14              	@ GNU C (GNU Tools for ARM Embedded Processors) version 4.9.3 20150529 (release) [ARM/embedded-4_9-
  15              	@	compiled by GNU C version 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.9.00), GMP vers
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./Libraries/CMSIS/CM3/CoreSupport
  18              	@ -I ./Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x
  19              	@ -I ./Libraries/STM32F10x_StdPeriph_Driver/inc -I ./Libraries/Drivers/Leds
  20              	@ -I ./Libraries/Drivers/Buttons -I ./Libraries/Drivers/Usart
  21              	@ -I ./Libraries/Drivers/i2c -I ./Libraries/Drivers/BH1750
  22              	@ -I ./Libraries/Drivers/Utilities -I ./FreeRTOS/Source/include
  23              	@ -I ./FreeRTOS/Source/portable/GCC/ARM_CM3 -imultilib armv7-m
  24              	@ -iprefix /usr/local/Cellar/arm-none-eabi-gcc/20150921/bin/../lib/gcc/arm-none-eabi/4.9.3/
  25              	@ -isysroot /usr/local/Cellar/arm-none-eabi-gcc/20150921/bin/../arm-none-eabi
  26              	@ -MD FreeRTOS/Source/tasks.d -MF .dep/tasks.o.d -MP
  27              	@ -MQ FreeRTOS/Source/tasks.o -D__USES_INITFINI__ -D STM32F10X_MD
  28              	@ -D USE_STDPERIPH_DRIVER -D GCC_ARMCM3 -D RUN_FROM_FLASH=1
  29              	@ FreeRTOS/Source/tasks.c -mcpu=cortex-m3 -mthumb
  30              	@ -auxbase-strip FreeRTOS/Source/tasks.o -gdwarf-2 -Os -Wall
  31              	@ -Wstrict-prototypes -fomit-frame-pointer -fverbose-asm
  32              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  33              	@ -fbranch-count-reg -fcaller-saves -fcombine-stack-adjustments -fcommon
  34              	@ -fcompare-elim -fcprop-registers -fcrossjumping -fcse-follow-jumps
  35              	@ -fdefer-pop -fdelete-null-pointer-checks -fdevirtualize
  36              	@ -fdevirtualize-speculatively -fdwarf2-cfi-asm -fearly-inlining
  37              	@ -feliminate-unused-debug-types -fexpensive-optimizations
  38              	@ -fforward-propagate -ffunction-cse -fgcse -fgcse-lm -fgnu-runtime
  39              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  40              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  41              	@ -finline-atomics -finline-functions -finline-functions-called-once
  42              	@ -finline-small-functions -fipa-cp -fipa-profile -fipa-pure-const
  43              	@ -fipa-reference -fipa-sra -fira-hoist-pressure -fira-share-save-slots
  44              	@ -fira-share-spill-slots -fisolate-erroneous-paths-dereference -fivopts
  45              	@ -fkeep-static-consts -fleading-underscore -flifetime-dse -fmath-errno
  46              	@ -fmerge-constants -fmerge-debug-strings -fomit-frame-pointer
  47              	@ -foptimize-sibling-calls -fpartial-inlining -fpeephole -fpeephole2
  48              	@ -fprefetch-loop-arrays -freg-struct-return -freorder-blocks
  49              	@ -freorder-functions -frerun-cse-after-loop
  50              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  51              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  52              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  53              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns2
  54              	@ -fsection-anchors -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller
  55              	@ -fsplit-wide-types -fstrict-aliasing -fstrict-overflow
  56              	@ -fstrict-volatile-bitfields -fsync-libcalls -fthread-jumps
  57              	@ -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 2


  58              	@ -ftree-ccp -ftree-ch -ftree-coalesce-vars -ftree-copy-prop
  59              	@ -ftree-copyrename -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  61              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  62              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  63              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  64              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  65              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  66              	@ -fzero-initialized-in-bss -mfix-cortex-m3-ldrd -mlittle-endian -mlra
  67              	@ -mpic-data-is-text-relative -msched-prolog -mthumb -munaligned-access
  68              	@ -mvectorize-with-neon-quad
  69              	
  70              		.text
  71              	.Ltext0:
  72              		.cfi_sections	.debug_frame
  73              		.align	1
  74              		.thumb
  75              		.thumb_func
  76              		.type	prvTaskIsTaskSuspended, %function
  77              	prvTaskIsTaskSuspended:
  78              	.LFB15:
  79              		.file 1 "FreeRTOS/Source/tasks.c"
   1:FreeRTOS/Source/tasks.c **** /*
   2:FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:FreeRTOS/Source/tasks.c ****     All rights reserved
   4:FreeRTOS/Source/tasks.c **** 
   5:FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/Source/tasks.c **** 
   7:FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/Source/tasks.c **** 
   9:FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/Source/tasks.c **** 
  13:FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:FreeRTOS/Source/tasks.c **** 
  20:FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/Source/tasks.c **** 
  25:FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 3


  36:FreeRTOS/Source/tasks.c ****      *                                                                       *
  37:FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:FreeRTOS/Source/tasks.c **** 
  39:FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:FreeRTOS/Source/tasks.c **** 
  43:FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:FreeRTOS/Source/tasks.c **** 
  47:FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/Source/tasks.c **** 
  52:FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/Source/tasks.c **** 
  56:FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/Source/tasks.c **** 
  59:FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/Source/tasks.c **** 
  63:FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:FreeRTOS/Source/tasks.c **** 
  67:FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:FreeRTOS/Source/tasks.c **** */
  69:FreeRTOS/Source/tasks.c **** 
  70:FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:FreeRTOS/Source/tasks.c **** #include <string.h>
  73:FreeRTOS/Source/tasks.c **** 
  74:FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:FreeRTOS/Source/tasks.c **** 
  79:FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:FreeRTOS/Source/tasks.c **** #include "task.h"
  82:FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:FreeRTOS/Source/tasks.c **** 
  85:FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:FreeRTOS/Source/tasks.c **** 
  91:FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 4


  93:FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:FreeRTOS/Source/tasks.c **** 
 101:FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:FreeRTOS/Source/tasks.c **** #else
 106:FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:FreeRTOS/Source/tasks.c **** #endif
 108:FreeRTOS/Source/tasks.c **** 
 109:FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:FreeRTOS/Source/tasks.c **** 
 114:FreeRTOS/Source/tasks.c **** /*
 115:FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:FreeRTOS/Source/tasks.c ****  */
 118:FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:FreeRTOS/Source/tasks.c **** 
 120:FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:FreeRTOS/Source/tasks.c **** 
 140:FreeRTOS/Source/tasks.c **** /*
 141:FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:FreeRTOS/Source/tasks.c ****  */
 143:FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:FreeRTOS/Source/tasks.c **** 
 148:FreeRTOS/Source/tasks.c **** /*
 149:FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 5


 150:FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 151:FreeRTOS/Source/tasks.c ****  */
 152:FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:FreeRTOS/Source/tasks.c **** 	#define static
 154:FreeRTOS/Source/tasks.c **** #endif
 155:FreeRTOS/Source/tasks.c **** 
 156:FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:FreeRTOS/Source/tasks.c **** 
 158:FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:FreeRTOS/Source/tasks.c **** 
 162:FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:FreeRTOS/Source/tasks.c **** 	state task. */
 164:FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:FreeRTOS/Source/tasks.c **** 	{																									\
 166:FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:FreeRTOS/Source/tasks.c **** 		{																								\
 168:FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:FreeRTOS/Source/tasks.c **** 		}																								\
 170:FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:FreeRTOS/Source/tasks.c **** 
 172:FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:FreeRTOS/Source/tasks.c **** 
 174:FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:FreeRTOS/Source/tasks.c **** 	{																									\
 176:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:FreeRTOS/Source/tasks.c **** 																										\
 178:FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:FreeRTOS/Source/tasks.c **** 		{																								\
 181:FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:FreeRTOS/Source/tasks.c **** 		}																								\
 184:FreeRTOS/Source/tasks.c **** 																										\
 185:FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:FreeRTOS/Source/tasks.c **** 
 191:FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:FreeRTOS/Source/tasks.c **** 
 193:FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:FreeRTOS/Source/tasks.c **** 	being used. */
 196:FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:FreeRTOS/Source/tasks.c **** 
 199:FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:FreeRTOS/Source/tasks.c **** 
 201:FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:FreeRTOS/Source/tasks.c **** 	architecture being used. */
 204:FreeRTOS/Source/tasks.c **** 
 205:FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 6


 207:FreeRTOS/Source/tasks.c **** 
 208:FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:FreeRTOS/Source/tasks.c **** 
 210:FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:FreeRTOS/Source/tasks.c **** 	{																								\
 212:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:FreeRTOS/Source/tasks.c **** 																									\
 214:FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:FreeRTOS/Source/tasks.c **** 
 220:FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:FreeRTOS/Source/tasks.c **** 
 222:FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:FreeRTOS/Source/tasks.c **** 	{																									\
 227:FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:FreeRTOS/Source/tasks.c **** 		{																								\
 229:FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:FreeRTOS/Source/tasks.c **** 		}																								\
 231:FreeRTOS/Source/tasks.c **** 	}
 232:FreeRTOS/Source/tasks.c **** 
 233:FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:FreeRTOS/Source/tasks.c **** 
 235:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:FreeRTOS/Source/tasks.c **** 
 237:FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:FreeRTOS/Source/tasks.c **** count overflows. */
 239:FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:FreeRTOS/Source/tasks.c **** {																									\
 241:FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:FreeRTOS/Source/tasks.c **** 																									\
 243:FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:FreeRTOS/Source/tasks.c **** 																									\
 246:FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:FreeRTOS/Source/tasks.c **** }
 252:FreeRTOS/Source/tasks.c **** 
 253:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:FreeRTOS/Source/tasks.c **** 
 255:FreeRTOS/Source/tasks.c **** /*
 256:FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:FreeRTOS/Source/tasks.c ****  */
 259:FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 7


 264:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:FreeRTOS/Source/tasks.c **** 
 266:FreeRTOS/Source/tasks.c **** /*
 267:FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:FreeRTOS/Source/tasks.c ****  */
 272:FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:FreeRTOS/Source/tasks.c **** 
 274:FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:FreeRTOS/Source/tasks.c **** #else
 285:FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:FreeRTOS/Source/tasks.c **** #endif
 287:FreeRTOS/Source/tasks.c **** 
 288:FreeRTOS/Source/tasks.c **** /*
 289:FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:FreeRTOS/Source/tasks.c ****  */
 293:FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:FreeRTOS/Source/tasks.c **** {
 295:FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:FreeRTOS/Source/tasks.c **** 
 297:FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:FreeRTOS/Source/tasks.c **** 	#endif
 300:FreeRTOS/Source/tasks.c **** 
 301:FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:FreeRTOS/Source/tasks.c **** 
 307:FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:FreeRTOS/Source/tasks.c **** 	#endif
 310:FreeRTOS/Source/tasks.c **** 
 311:FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:FreeRTOS/Source/tasks.c **** 	#endif
 314:FreeRTOS/Source/tasks.c **** 
 315:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:FreeRTOS/Source/tasks.c **** 	#endif
 319:FreeRTOS/Source/tasks.c **** 
 320:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 8


 321:FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:FreeRTOS/Source/tasks.c **** 	#endif
 324:FreeRTOS/Source/tasks.c **** 
 325:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:FreeRTOS/Source/tasks.c **** 	#endif
 328:FreeRTOS/Source/tasks.c **** 
 329:FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:FreeRTOS/Source/tasks.c **** 	#endif
 332:FreeRTOS/Source/tasks.c **** 
 333:FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:FreeRTOS/Source/tasks.c **** 	#endif
 336:FreeRTOS/Source/tasks.c **** 
 337:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:FreeRTOS/Source/tasks.c **** 	#endif
 347:FreeRTOS/Source/tasks.c **** 
 348:FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:FreeRTOS/Source/tasks.c **** 	#endif
 352:FreeRTOS/Source/tasks.c **** 
 353:FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:FreeRTOS/Source/tasks.c **** 	#endif
 358:FreeRTOS/Source/tasks.c **** 
 359:FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:FreeRTOS/Source/tasks.c **** 	#endif
 362:FreeRTOS/Source/tasks.c **** 
 363:FreeRTOS/Source/tasks.c **** } tskTCB;
 364:FreeRTOS/Source/tasks.c **** 
 365:FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:FreeRTOS/Source/tasks.c **** 
 369:FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:FreeRTOS/Source/tasks.c **** 
 372:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:FreeRTOS/Source/tasks.c **** 
 374:FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 9


 378:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:FreeRTOS/Source/tasks.c **** 
 382:FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:FreeRTOS/Source/tasks.c **** 
 384:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:FreeRTOS/Source/tasks.c **** 
 387:FreeRTOS/Source/tasks.c **** #endif
 388:FreeRTOS/Source/tasks.c **** 
 389:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:FreeRTOS/Source/tasks.c **** 
 391:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:FreeRTOS/Source/tasks.c **** 
 393:FreeRTOS/Source/tasks.c **** #endif
 394:FreeRTOS/Source/tasks.c **** 
 395:FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:FreeRTOS/Source/tasks.c **** 
 407:FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:FreeRTOS/Source/tasks.c **** 
 417:FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:FreeRTOS/Source/tasks.c **** 
 419:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:FreeRTOS/Source/tasks.c **** 
 422:FreeRTOS/Source/tasks.c **** #endif
 423:FreeRTOS/Source/tasks.c **** 
 424:FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:FreeRTOS/Source/tasks.c **** 
 426:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:FreeRTOS/Source/tasks.c **** 
 428:FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:FreeRTOS/Source/tasks.c **** #endif
 432:FreeRTOS/Source/tasks.c **** 
 433:FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 10


 435:FreeRTOS/Source/tasks.c **** #endif
 436:FreeRTOS/Source/tasks.c **** 
 437:FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:FreeRTOS/Source/tasks.c **** #endif
 440:FreeRTOS/Source/tasks.c **** 
 441:FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:FreeRTOS/Source/tasks.c **** 
 443:FreeRTOS/Source/tasks.c **** /**
 444:FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:FreeRTOS/Source/tasks.c ****  */
 448:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:FreeRTOS/Source/tasks.c **** 
 452:FreeRTOS/Source/tasks.c **** /*
 453:FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:FreeRTOS/Source/tasks.c ****  */
 456:FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:FreeRTOS/Source/tasks.c **** 
 458:FreeRTOS/Source/tasks.c **** /*
 459:FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:FreeRTOS/Source/tasks.c ****  *
 463:FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:FreeRTOS/Source/tasks.c ****  *
 466:FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:FreeRTOS/Source/tasks.c ****  *
 468:FreeRTOS/Source/tasks.c ****  */
 469:FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:FreeRTOS/Source/tasks.c **** 
 471:FreeRTOS/Source/tasks.c **** /*
 472:FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:FreeRTOS/Source/tasks.c ****  *
 475:FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:FreeRTOS/Source/tasks.c ****  */
 478:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:FreeRTOS/Source/tasks.c **** 
 480:FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:FreeRTOS/Source/tasks.c **** 
 482:FreeRTOS/Source/tasks.c **** #endif
 483:FreeRTOS/Source/tasks.c **** 
 484:FreeRTOS/Source/tasks.c **** /*
 485:FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 488:FreeRTOS/Source/tasks.c ****  */
 489:FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:FreeRTOS/Source/tasks.c **** 
 491:FreeRTOS/Source/tasks.c **** /*
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 11


 492:FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:FreeRTOS/Source/tasks.c ****  */
 495:FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:FreeRTOS/Source/tasks.c **** 
 497:FreeRTOS/Source/tasks.c **** /*
 498:FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:FreeRTOS/Source/tasks.c ****  *
 502:FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:FreeRTOS/Source/tasks.c ****  */
 505:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:FreeRTOS/Source/tasks.c **** 
 507:FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:FreeRTOS/Source/tasks.c **** 
 509:FreeRTOS/Source/tasks.c **** #endif
 510:FreeRTOS/Source/tasks.c **** 
 511:FreeRTOS/Source/tasks.c **** /*
 512:FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:FreeRTOS/Source/tasks.c ****  */
 515:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:FreeRTOS/Source/tasks.c **** 
 517:FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:FreeRTOS/Source/tasks.c **** 
 519:FreeRTOS/Source/tasks.c **** #endif
 520:FreeRTOS/Source/tasks.c **** 
 521:FreeRTOS/Source/tasks.c **** /*
 522:FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:FreeRTOS/Source/tasks.c ****  */
 526:FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:FreeRTOS/Source/tasks.c **** 
 528:FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:FreeRTOS/Source/tasks.c **** 
 530:FreeRTOS/Source/tasks.c **** #endif
 531:FreeRTOS/Source/tasks.c **** 
 532:FreeRTOS/Source/tasks.c **** /*
 533:FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:FreeRTOS/Source/tasks.c ****  *
 536:FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:FreeRTOS/Source/tasks.c ****  */
 541:FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:FreeRTOS/Source/tasks.c **** 
 543:FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:FreeRTOS/Source/tasks.c **** 
 545:FreeRTOS/Source/tasks.c **** #endif
 546:FreeRTOS/Source/tasks.c **** 
 547:FreeRTOS/Source/tasks.c **** /*
 548:FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 12


 549:FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 550:FreeRTOS/Source/tasks.c ****  */
 551:FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:FreeRTOS/Source/tasks.c **** 
 553:FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:FreeRTOS/Source/tasks.c **** 
 555:FreeRTOS/Source/tasks.c **** 	/*
 556:FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:FreeRTOS/Source/tasks.c **** 	 */
 559:FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:FreeRTOS/Source/tasks.c **** 
 561:FreeRTOS/Source/tasks.c **** #endif
 562:FreeRTOS/Source/tasks.c **** 
 563:FreeRTOS/Source/tasks.c **** /*
 564:FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:FreeRTOS/Source/tasks.c ****  */
 567:FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:FreeRTOS/Source/tasks.c **** 
 576:FreeRTOS/Source/tasks.c **** /*
 577:FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:FreeRTOS/Source/tasks.c ****  */
 580:FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:FreeRTOS/Source/tasks.c **** 
 582:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:FreeRTOS/Source/tasks.c **** 
 584:FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:FreeRTOS/Source/tasks.c **** 
 586:FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:FreeRTOS/Source/tasks.c **** 	{
 594:FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:FreeRTOS/Source/tasks.c **** 
 597:FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:FreeRTOS/Source/tasks.c **** 
 600:FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:FreeRTOS/Source/tasks.c **** 		{
 602:FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 13


 606:FreeRTOS/Source/tasks.c **** 
 607:FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:FreeRTOS/Source/tasks.c **** 			{
 609:FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:FreeRTOS/Source/tasks.c **** 			}
 613:FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:FreeRTOS/Source/tasks.c **** 
 615:FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:FreeRTOS/Source/tasks.c **** 		}
 618:FreeRTOS/Source/tasks.c **** 		else
 619:FreeRTOS/Source/tasks.c **** 		{
 620:FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:FreeRTOS/Source/tasks.c **** 		}
 622:FreeRTOS/Source/tasks.c **** 
 623:FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:FreeRTOS/Source/tasks.c **** 	}
 625:FreeRTOS/Source/tasks.c **** 
 626:FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:FreeRTOS/Source/tasks.c **** 
 629:FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:FreeRTOS/Source/tasks.c **** 
 631:FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:FreeRTOS/Source/tasks.c **** 	{
 633:FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:FreeRTOS/Source/tasks.c **** 
 636:FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:FreeRTOS/Source/tasks.c **** 
 638:FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:FreeRTOS/Source/tasks.c **** 		{
 640:FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:FreeRTOS/Source/tasks.c **** 
 645:FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:FreeRTOS/Source/tasks.c **** 			{
 647:FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:FreeRTOS/Source/tasks.c **** 
 650:FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:FreeRTOS/Source/tasks.c **** 
 655:FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 14


 663:FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:FreeRTOS/Source/tasks.c **** 			}
 666:FreeRTOS/Source/tasks.c **** 		}
 667:FreeRTOS/Source/tasks.c **** 
 668:FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:FreeRTOS/Source/tasks.c **** 	}
 670:FreeRTOS/Source/tasks.c **** 
 671:FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:FreeRTOS/Source/tasks.c **** 
 674:FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:FreeRTOS/Source/tasks.c **** 
 676:FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:FreeRTOS/Source/tasks.c **** 	{
 683:FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:FreeRTOS/Source/tasks.c **** 
 686:FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:FreeRTOS/Source/tasks.c **** 		{
 691:FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:FreeRTOS/Source/tasks.c **** 
 696:FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:FreeRTOS/Source/tasks.c **** 			{
 698:FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:FreeRTOS/Source/tasks.c **** 
 703:FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:FreeRTOS/Source/tasks.c **** 				{
 705:FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:FreeRTOS/Source/tasks.c **** 				}
 709:FreeRTOS/Source/tasks.c **** 			}
 710:FreeRTOS/Source/tasks.c **** 		}
 711:FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:FreeRTOS/Source/tasks.c **** 		{
 713:FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:FreeRTOS/Source/tasks.c **** 
 715:FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 717:FreeRTOS/Source/tasks.c **** 
 718:FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 719:FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 15


 720:FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:FreeRTOS/Source/tasks.c **** 
 723:FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 724:FreeRTOS/Source/tasks.c **** 				{
 725:FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:FreeRTOS/Source/tasks.c **** 				}
 728:FreeRTOS/Source/tasks.c **** 				else
 729:FreeRTOS/Source/tasks.c **** 				{
 730:FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:FreeRTOS/Source/tasks.c **** 					it again. */
 732:FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 733:FreeRTOS/Source/tasks.c **** 				}
 734:FreeRTOS/Source/tasks.c **** 			}
 735:FreeRTOS/Source/tasks.c **** 			else
 736:FreeRTOS/Source/tasks.c **** 			{
 737:FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 738:FreeRTOS/Source/tasks.c **** 			}
 739:FreeRTOS/Source/tasks.c **** 		}
 740:FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:FreeRTOS/Source/tasks.c **** 
 742:FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 743:FreeRTOS/Source/tasks.c **** 		{
 744:FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:FreeRTOS/Source/tasks.c **** 			{
 746:FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:FreeRTOS/Source/tasks.c **** 			}
 750:FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:FreeRTOS/Source/tasks.c **** 
 752:FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 755:FreeRTOS/Source/tasks.c **** 		}
 756:FreeRTOS/Source/tasks.c **** 		else
 757:FreeRTOS/Source/tasks.c **** 		{
 758:FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:FreeRTOS/Source/tasks.c **** 		}
 760:FreeRTOS/Source/tasks.c **** 
 761:FreeRTOS/Source/tasks.c **** 		return xReturn;
 762:FreeRTOS/Source/tasks.c **** 	}
 763:FreeRTOS/Source/tasks.c **** 
 764:FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:FreeRTOS/Source/tasks.c **** 
 767:FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 774:FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:FreeRTOS/Source/tasks.c **** {
 776:FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 16


 777:FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:FreeRTOS/Source/tasks.c **** 
 779:FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:FreeRTOS/Source/tasks.c **** 		{
 784:FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:FreeRTOS/Source/tasks.c **** 		}
 786:FreeRTOS/Source/tasks.c **** 		else
 787:FreeRTOS/Source/tasks.c **** 		{
 788:FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:FreeRTOS/Source/tasks.c **** 		}
 790:FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:FreeRTOS/Source/tasks.c **** 
 793:FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:FreeRTOS/Source/tasks.c **** 	{
 796:FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:FreeRTOS/Source/tasks.c **** 	}
 799:FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:FreeRTOS/Source/tasks.c **** 
 801:FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:FreeRTOS/Source/tasks.c **** 	by the port. */
 805:FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:FreeRTOS/Source/tasks.c **** 	{
 807:FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:FreeRTOS/Source/tasks.c **** 
 810:FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:FreeRTOS/Source/tasks.c **** 	}
 813:FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:FreeRTOS/Source/tasks.c **** 	{
 815:FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:FreeRTOS/Source/tasks.c **** 
 817:FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:FreeRTOS/Source/tasks.c **** 
 820:FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:FreeRTOS/Source/tasks.c **** 		performed. */
 822:FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:FreeRTOS/Source/tasks.c **** 	}
 824:FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:FreeRTOS/Source/tasks.c **** 
 826:FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:FreeRTOS/Source/tasks.c **** 	{
 829:FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 830:FreeRTOS/Source/tasks.c **** 
 831:FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 17


 834:FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:FreeRTOS/Source/tasks.c **** 		{
 836:FreeRTOS/Source/tasks.c **** 			break;
 837:FreeRTOS/Source/tasks.c **** 		}
 838:FreeRTOS/Source/tasks.c **** 		else
 839:FreeRTOS/Source/tasks.c **** 		{
 840:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:FreeRTOS/Source/tasks.c **** 		}
 842:FreeRTOS/Source/tasks.c **** 	}
 843:FreeRTOS/Source/tasks.c **** 
 844:FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:FreeRTOS/Source/tasks.c **** 
 848:FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:FreeRTOS/Source/tasks.c **** 	{
 852:FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:FreeRTOS/Source/tasks.c **** 	}
 854:FreeRTOS/Source/tasks.c **** 	else
 855:FreeRTOS/Source/tasks.c **** 	{
 856:FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:FreeRTOS/Source/tasks.c **** 	}
 858:FreeRTOS/Source/tasks.c **** 
 859:FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:FreeRTOS/Source/tasks.c **** 	{
 862:FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:FreeRTOS/Source/tasks.c **** 	}
 865:FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:FreeRTOS/Source/tasks.c **** 
 867:FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:FreeRTOS/Source/tasks.c **** 
 870:FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:FreeRTOS/Source/tasks.c **** 
 874:FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:FreeRTOS/Source/tasks.c **** 
 878:FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:FreeRTOS/Source/tasks.c **** 	{
 880:FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:FreeRTOS/Source/tasks.c **** 	}
 882:FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:FreeRTOS/Source/tasks.c **** 
 884:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:FreeRTOS/Source/tasks.c **** 	{
 886:FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:FreeRTOS/Source/tasks.c **** 	}
 888:FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:FreeRTOS/Source/tasks.c **** 
 890:FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 18


 891:FreeRTOS/Source/tasks.c **** 	{
 892:FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:FreeRTOS/Source/tasks.c **** 	}
 894:FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:FreeRTOS/Source/tasks.c **** 
 896:FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:FreeRTOS/Source/tasks.c **** 	{
 898:FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:FreeRTOS/Source/tasks.c **** 	}
 900:FreeRTOS/Source/tasks.c **** 	#else
 901:FreeRTOS/Source/tasks.c **** 	{
 902:FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:FreeRTOS/Source/tasks.c **** 	}
 905:FreeRTOS/Source/tasks.c **** 	#endif
 906:FreeRTOS/Source/tasks.c **** 
 907:FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:FreeRTOS/Source/tasks.c **** 	{
 909:FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:FreeRTOS/Source/tasks.c **** 		{
 911:FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:FreeRTOS/Source/tasks.c **** 		}
 913:FreeRTOS/Source/tasks.c **** 	}
 914:FreeRTOS/Source/tasks.c **** 	#endif
 915:FreeRTOS/Source/tasks.c **** 
 916:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:FreeRTOS/Source/tasks.c **** 	{
 918:FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:FreeRTOS/Source/tasks.c **** 	}
 921:FreeRTOS/Source/tasks.c **** 	#endif
 922:FreeRTOS/Source/tasks.c **** 
 923:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:FreeRTOS/Source/tasks.c **** 	{
 925:FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:FreeRTOS/Source/tasks.c **** 	}
 928:FreeRTOS/Source/tasks.c **** 	#endif
 929:FreeRTOS/Source/tasks.c **** 
 930:FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:FreeRTOS/Source/tasks.c **** 	{
 932:FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:FreeRTOS/Source/tasks.c **** 	}
 934:FreeRTOS/Source/tasks.c **** 	#endif
 935:FreeRTOS/Source/tasks.c **** 
 936:FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:FreeRTOS/Source/tasks.c **** 	{
 942:FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:FreeRTOS/Source/tasks.c **** 	}
 944:FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:FreeRTOS/Source/tasks.c **** 	{
 946:FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 19


 948:FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:FreeRTOS/Source/tasks.c **** 
 950:FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:FreeRTOS/Source/tasks.c **** 	{
 952:FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:FreeRTOS/Source/tasks.c **** 	}
 956:FreeRTOS/Source/tasks.c **** 	else
 957:FreeRTOS/Source/tasks.c **** 	{
 958:FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:FreeRTOS/Source/tasks.c **** 	}
 960:FreeRTOS/Source/tasks.c **** }
 961:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:FreeRTOS/Source/tasks.c **** 
 963:FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:FreeRTOS/Source/tasks.c **** {
 965:FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:FreeRTOS/Source/tasks.c **** 	updated. */
 967:FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 968:FreeRTOS/Source/tasks.c **** 	{
 969:FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:FreeRTOS/Source/tasks.c **** 		{
 972:FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:FreeRTOS/Source/tasks.c **** 
 976:FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:FreeRTOS/Source/tasks.c **** 			{
 978:FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 982:FreeRTOS/Source/tasks.c **** 			}
 983:FreeRTOS/Source/tasks.c **** 			else
 984:FreeRTOS/Source/tasks.c **** 			{
 985:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:FreeRTOS/Source/tasks.c **** 			}
 987:FreeRTOS/Source/tasks.c **** 		}
 988:FreeRTOS/Source/tasks.c **** 		else
 989:FreeRTOS/Source/tasks.c **** 		{
 990:FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:FreeRTOS/Source/tasks.c **** 			so far. */
 993:FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:FreeRTOS/Source/tasks.c **** 			{
 995:FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:FreeRTOS/Source/tasks.c **** 				{
 997:FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:FreeRTOS/Source/tasks.c **** 				}
 999:FreeRTOS/Source/tasks.c **** 				else
1000:FreeRTOS/Source/tasks.c **** 				{
1001:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:FreeRTOS/Source/tasks.c **** 				}
1003:FreeRTOS/Source/tasks.c **** 			}
1004:FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 20


1005:FreeRTOS/Source/tasks.c **** 			{
1006:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:FreeRTOS/Source/tasks.c **** 			}
1008:FreeRTOS/Source/tasks.c **** 		}
1009:FreeRTOS/Source/tasks.c **** 
1010:FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1011:FreeRTOS/Source/tasks.c **** 
1012:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:FreeRTOS/Source/tasks.c **** 		{
1014:FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:FreeRTOS/Source/tasks.c **** 		}
1017:FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:FreeRTOS/Source/tasks.c **** 
1020:FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:FreeRTOS/Source/tasks.c **** 
1022:FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:FreeRTOS/Source/tasks.c **** 	}
1024:FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1025:FreeRTOS/Source/tasks.c **** 
1026:FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:FreeRTOS/Source/tasks.c **** 	{
1028:FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:FreeRTOS/Source/tasks.c **** 		{
1032:FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:FreeRTOS/Source/tasks.c **** 		}
1034:FreeRTOS/Source/tasks.c **** 		else
1035:FreeRTOS/Source/tasks.c **** 		{
1036:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:FreeRTOS/Source/tasks.c **** 		}
1038:FreeRTOS/Source/tasks.c **** 	}
1039:FreeRTOS/Source/tasks.c **** 	else
1040:FreeRTOS/Source/tasks.c **** 	{
1041:FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:FreeRTOS/Source/tasks.c **** 	}
1043:FreeRTOS/Source/tasks.c **** }
1044:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:FreeRTOS/Source/tasks.c **** 
1046:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:FreeRTOS/Source/tasks.c **** 
1048:FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:FreeRTOS/Source/tasks.c **** 	{
1050:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:FreeRTOS/Source/tasks.c **** 
1052:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1053:FreeRTOS/Source/tasks.c **** 		{
1054:FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:FreeRTOS/Source/tasks.c **** 
1058:FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1059:FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:FreeRTOS/Source/tasks.c **** 			{
1061:FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 21


1062:FreeRTOS/Source/tasks.c **** 			}
1063:FreeRTOS/Source/tasks.c **** 			else
1064:FreeRTOS/Source/tasks.c **** 			{
1065:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:FreeRTOS/Source/tasks.c **** 			}
1067:FreeRTOS/Source/tasks.c **** 
1068:FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:FreeRTOS/Source/tasks.c **** 			{
1071:FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:FreeRTOS/Source/tasks.c **** 			}
1073:FreeRTOS/Source/tasks.c **** 			else
1074:FreeRTOS/Source/tasks.c **** 			{
1075:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:FreeRTOS/Source/tasks.c **** 			}
1077:FreeRTOS/Source/tasks.c **** 
1078:FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:FreeRTOS/Source/tasks.c **** 			not return. */
1082:FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1083:FreeRTOS/Source/tasks.c **** 
1084:FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:FreeRTOS/Source/tasks.c **** 			{
1086:FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:FreeRTOS/Source/tasks.c **** 
1093:FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:FreeRTOS/Source/tasks.c **** 
1098:FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:FreeRTOS/Source/tasks.c **** 				required. */
1103:FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:FreeRTOS/Source/tasks.c **** 			}
1105:FreeRTOS/Source/tasks.c **** 			else
1106:FreeRTOS/Source/tasks.c **** 			{
1107:FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:FreeRTOS/Source/tasks.c **** 
1110:FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:FreeRTOS/Source/tasks.c **** 			}
1114:FreeRTOS/Source/tasks.c **** 
1115:FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:FreeRTOS/Source/tasks.c **** 		}
1117:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1118:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 22


1119:FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:FreeRTOS/Source/tasks.c **** 		been deleted. */
1121:FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:FreeRTOS/Source/tasks.c **** 		{
1123:FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:FreeRTOS/Source/tasks.c **** 			{
1125:FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1127:FreeRTOS/Source/tasks.c **** 			}
1128:FreeRTOS/Source/tasks.c **** 			else
1129:FreeRTOS/Source/tasks.c **** 			{
1130:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:FreeRTOS/Source/tasks.c **** 			}
1132:FreeRTOS/Source/tasks.c **** 		}
1133:FreeRTOS/Source/tasks.c **** 	}
1134:FreeRTOS/Source/tasks.c **** 
1135:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:FreeRTOS/Source/tasks.c **** 
1138:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:FreeRTOS/Source/tasks.c **** 
1140:FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:FreeRTOS/Source/tasks.c **** 	{
1142:FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:FreeRTOS/Source/tasks.c **** 
1145:FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:FreeRTOS/Source/tasks.c **** 
1149:FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1150:FreeRTOS/Source/tasks.c **** 		{
1151:FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:FreeRTOS/Source/tasks.c **** 			block. */
1153:FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:FreeRTOS/Source/tasks.c **** 
1155:FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:FreeRTOS/Source/tasks.c **** 
1158:FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:FreeRTOS/Source/tasks.c **** 			{
1160:FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:FreeRTOS/Source/tasks.c **** 				{
1167:FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1168:FreeRTOS/Source/tasks.c **** 				}
1169:FreeRTOS/Source/tasks.c **** 				else
1170:FreeRTOS/Source/tasks.c **** 				{
1171:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:FreeRTOS/Source/tasks.c **** 				}
1173:FreeRTOS/Source/tasks.c **** 			}
1174:FreeRTOS/Source/tasks.c **** 			else
1175:FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 23


1176:FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:FreeRTOS/Source/tasks.c **** 				{
1181:FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1182:FreeRTOS/Source/tasks.c **** 				}
1183:FreeRTOS/Source/tasks.c **** 				else
1184:FreeRTOS/Source/tasks.c **** 				{
1185:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:FreeRTOS/Source/tasks.c **** 				}
1187:FreeRTOS/Source/tasks.c **** 			}
1188:FreeRTOS/Source/tasks.c **** 
1189:FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:FreeRTOS/Source/tasks.c **** 
1192:FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:FreeRTOS/Source/tasks.c **** 			{
1194:FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:FreeRTOS/Source/tasks.c **** 
1196:FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:FreeRTOS/Source/tasks.c **** 			}
1200:FreeRTOS/Source/tasks.c **** 			else
1201:FreeRTOS/Source/tasks.c **** 			{
1202:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:FreeRTOS/Source/tasks.c **** 			}
1204:FreeRTOS/Source/tasks.c **** 		}
1205:FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:FreeRTOS/Source/tasks.c **** 
1207:FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:FreeRTOS/Source/tasks.c **** 		{
1211:FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1212:FreeRTOS/Source/tasks.c **** 		}
1213:FreeRTOS/Source/tasks.c **** 		else
1214:FreeRTOS/Source/tasks.c **** 		{
1215:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:FreeRTOS/Source/tasks.c **** 		}
1217:FreeRTOS/Source/tasks.c **** 	}
1218:FreeRTOS/Source/tasks.c **** 
1219:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:FreeRTOS/Source/tasks.c **** 
1222:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:FreeRTOS/Source/tasks.c **** 
1224:FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:FreeRTOS/Source/tasks.c **** 	{
1226:FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:FreeRTOS/Source/tasks.c **** 
1228:FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1230:FreeRTOS/Source/tasks.c **** 		{
1231:FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 24


1233:FreeRTOS/Source/tasks.c **** 			{
1234:FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:FreeRTOS/Source/tasks.c **** 
1236:FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:FreeRTOS/Source/tasks.c **** 				is resumed.
1240:FreeRTOS/Source/tasks.c **** 
1241:FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:FreeRTOS/Source/tasks.c **** 				executing task. */
1243:FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:FreeRTOS/Source/tasks.c **** 			}
1245:FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:FreeRTOS/Source/tasks.c **** 		}
1247:FreeRTOS/Source/tasks.c **** 		else
1248:FreeRTOS/Source/tasks.c **** 		{
1249:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:FreeRTOS/Source/tasks.c **** 		}
1251:FreeRTOS/Source/tasks.c **** 
1252:FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:FreeRTOS/Source/tasks.c **** 		{
1256:FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1257:FreeRTOS/Source/tasks.c **** 		}
1258:FreeRTOS/Source/tasks.c **** 		else
1259:FreeRTOS/Source/tasks.c **** 		{
1260:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:FreeRTOS/Source/tasks.c **** 		}
1262:FreeRTOS/Source/tasks.c **** 	}
1263:FreeRTOS/Source/tasks.c **** 
1264:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:FreeRTOS/Source/tasks.c **** 
1267:FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:FreeRTOS/Source/tasks.c **** 
1269:FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:FreeRTOS/Source/tasks.c **** 	{
1271:FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:FreeRTOS/Source/tasks.c **** 
1275:FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1276:FreeRTOS/Source/tasks.c **** 
1277:FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:FreeRTOS/Source/tasks.c **** 		{
1279:FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1281:FreeRTOS/Source/tasks.c **** 		}
1282:FreeRTOS/Source/tasks.c **** 		else
1283:FreeRTOS/Source/tasks.c **** 		{
1284:FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1285:FreeRTOS/Source/tasks.c **** 			{
1286:FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:FreeRTOS/Source/tasks.c **** 			}
1288:FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 25


1290:FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:FreeRTOS/Source/tasks.c **** 			{
1292:FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:FreeRTOS/Source/tasks.c **** 				lists. */
1294:FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1295:FreeRTOS/Source/tasks.c **** 			}
1296:FreeRTOS/Source/tasks.c **** 
1297:FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:FreeRTOS/Source/tasks.c **** 				{
1300:FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:FreeRTOS/Source/tasks.c **** 					{
1305:FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1306:FreeRTOS/Source/tasks.c **** 					}
1307:FreeRTOS/Source/tasks.c **** 					else
1308:FreeRTOS/Source/tasks.c **** 					{
1309:FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1310:FreeRTOS/Source/tasks.c **** 					}
1311:FreeRTOS/Source/tasks.c **** 				}
1312:FreeRTOS/Source/tasks.c **** 			#endif
1313:FreeRTOS/Source/tasks.c **** 
1314:FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:FreeRTOS/Source/tasks.c **** 				{
1317:FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:FreeRTOS/Source/tasks.c **** 					all. */
1320:FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1321:FreeRTOS/Source/tasks.c **** 				}
1322:FreeRTOS/Source/tasks.c **** 			#endif
1323:FreeRTOS/Source/tasks.c **** 
1324:FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:FreeRTOS/Source/tasks.c **** 			{
1326:FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1328:FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1329:FreeRTOS/Source/tasks.c **** 			}
1330:FreeRTOS/Source/tasks.c **** 		}
1331:FreeRTOS/Source/tasks.c **** 
1332:FreeRTOS/Source/tasks.c **** 		return eReturn;
1333:FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:FreeRTOS/Source/tasks.c **** 
1335:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:FreeRTOS/Source/tasks.c **** 
1338:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:FreeRTOS/Source/tasks.c **** 
1340:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:FreeRTOS/Source/tasks.c **** 	{
1342:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1343:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1344:FreeRTOS/Source/tasks.c **** 
1345:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1346:FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 26


1347:FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:FreeRTOS/Source/tasks.c **** 		}
1352:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1353:FreeRTOS/Source/tasks.c **** 
1354:FreeRTOS/Source/tasks.c **** 		return uxReturn;
1355:FreeRTOS/Source/tasks.c **** 	}
1356:FreeRTOS/Source/tasks.c **** 
1357:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:FreeRTOS/Source/tasks.c **** 
1360:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:FreeRTOS/Source/tasks.c **** 
1362:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:FreeRTOS/Source/tasks.c **** 	{
1364:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:FreeRTOS/Source/tasks.c **** 
1367:FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:FreeRTOS/Source/tasks.c **** 
1385:FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:FreeRTOS/Source/tasks.c **** 		{
1387:FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:FreeRTOS/Source/tasks.c **** 		}
1392:FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:FreeRTOS/Source/tasks.c **** 
1394:FreeRTOS/Source/tasks.c **** 		return uxReturn;
1395:FreeRTOS/Source/tasks.c **** 	}
1396:FreeRTOS/Source/tasks.c **** 
1397:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:FreeRTOS/Source/tasks.c **** 
1400:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:FreeRTOS/Source/tasks.c **** 
1402:FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 27


1404:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:FreeRTOS/Source/tasks.c **** 
1408:FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:FreeRTOS/Source/tasks.c **** 
1410:FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:FreeRTOS/Source/tasks.c **** 		{
1413:FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:FreeRTOS/Source/tasks.c **** 		}
1415:FreeRTOS/Source/tasks.c **** 		else
1416:FreeRTOS/Source/tasks.c **** 		{
1417:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:FreeRTOS/Source/tasks.c **** 		}
1419:FreeRTOS/Source/tasks.c **** 
1420:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1421:FreeRTOS/Source/tasks.c **** 		{
1422:FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:FreeRTOS/Source/tasks.c **** 
1426:FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:FreeRTOS/Source/tasks.c **** 
1428:FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:FreeRTOS/Source/tasks.c **** 			{
1430:FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:FreeRTOS/Source/tasks.c **** 			}
1432:FreeRTOS/Source/tasks.c **** 			#else
1433:FreeRTOS/Source/tasks.c **** 			{
1434:FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:FreeRTOS/Source/tasks.c **** 			}
1436:FreeRTOS/Source/tasks.c **** 			#endif
1437:FreeRTOS/Source/tasks.c **** 
1438:FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:FreeRTOS/Source/tasks.c **** 			{
1440:FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:FreeRTOS/Source/tasks.c **** 				{
1444:FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:FreeRTOS/Source/tasks.c **** 					{
1446:FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:FreeRTOS/Source/tasks.c **** 						{
1451:FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1452:FreeRTOS/Source/tasks.c **** 						}
1453:FreeRTOS/Source/tasks.c **** 						else
1454:FreeRTOS/Source/tasks.c **** 						{
1455:FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:FreeRTOS/Source/tasks.c **** 						}
1457:FreeRTOS/Source/tasks.c **** 					}
1458:FreeRTOS/Source/tasks.c **** 					else
1459:FreeRTOS/Source/tasks.c **** 					{
1460:FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 28


1461:FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:FreeRTOS/Source/tasks.c **** 					}
1464:FreeRTOS/Source/tasks.c **** 				}
1465:FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:FreeRTOS/Source/tasks.c **** 				{
1467:FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1471:FreeRTOS/Source/tasks.c **** 				}
1472:FreeRTOS/Source/tasks.c **** 				else
1473:FreeRTOS/Source/tasks.c **** 				{
1474:FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:FreeRTOS/Source/tasks.c **** 				}
1478:FreeRTOS/Source/tasks.c **** 
1479:FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1481:FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:FreeRTOS/Source/tasks.c **** 
1484:FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:FreeRTOS/Source/tasks.c **** 				{
1486:FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:FreeRTOS/Source/tasks.c **** 					{
1490:FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:FreeRTOS/Source/tasks.c **** 					}
1492:FreeRTOS/Source/tasks.c **** 					else
1493:FreeRTOS/Source/tasks.c **** 					{
1494:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:FreeRTOS/Source/tasks.c **** 					}
1496:FreeRTOS/Source/tasks.c **** 
1497:FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:FreeRTOS/Source/tasks.c **** 				}
1500:FreeRTOS/Source/tasks.c **** 				#else
1501:FreeRTOS/Source/tasks.c **** 				{
1502:FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:FreeRTOS/Source/tasks.c **** 				}
1504:FreeRTOS/Source/tasks.c **** 				#endif
1505:FreeRTOS/Source/tasks.c **** 
1506:FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:FreeRTOS/Source/tasks.c **** 				{
1510:FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:FreeRTOS/Source/tasks.c **** 				}
1512:FreeRTOS/Source/tasks.c **** 				else
1513:FreeRTOS/Source/tasks.c **** 				{
1514:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:FreeRTOS/Source/tasks.c **** 				}
1516:FreeRTOS/Source/tasks.c **** 
1517:FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 29


1518:FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:FreeRTOS/Source/tasks.c **** 				{
1523:FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:FreeRTOS/Source/tasks.c **** 					{
1528:FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:FreeRTOS/Source/tasks.c **** 					}
1533:FreeRTOS/Source/tasks.c **** 					else
1534:FreeRTOS/Source/tasks.c **** 					{
1535:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:FreeRTOS/Source/tasks.c **** 					}
1537:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:FreeRTOS/Source/tasks.c **** 				}
1539:FreeRTOS/Source/tasks.c **** 				else
1540:FreeRTOS/Source/tasks.c **** 				{
1541:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:FreeRTOS/Source/tasks.c **** 				}
1543:FreeRTOS/Source/tasks.c **** 
1544:FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:FreeRTOS/Source/tasks.c **** 				{
1546:FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:FreeRTOS/Source/tasks.c **** 				}
1548:FreeRTOS/Source/tasks.c **** 				else
1549:FreeRTOS/Source/tasks.c **** 				{
1550:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:FreeRTOS/Source/tasks.c **** 				}
1552:FreeRTOS/Source/tasks.c **** 
1553:FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:FreeRTOS/Source/tasks.c **** 			}
1557:FreeRTOS/Source/tasks.c **** 		}
1558:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1559:FreeRTOS/Source/tasks.c **** 	}
1560:FreeRTOS/Source/tasks.c **** 
1561:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:FreeRTOS/Source/tasks.c **** 
1564:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:FreeRTOS/Source/tasks.c **** 
1566:FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:FreeRTOS/Source/tasks.c **** 	{
1568:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:FreeRTOS/Source/tasks.c **** 
1570:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1571:FreeRTOS/Source/tasks.c **** 		{
1572:FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:FreeRTOS/Source/tasks.c **** 			being suspended. */
1574:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 30


1575:FreeRTOS/Source/tasks.c **** 
1576:FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:FreeRTOS/Source/tasks.c **** 
1578:FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:FreeRTOS/Source/tasks.c **** 			{
1582:FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:FreeRTOS/Source/tasks.c **** 			}
1584:FreeRTOS/Source/tasks.c **** 			else
1585:FreeRTOS/Source/tasks.c **** 			{
1586:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:FreeRTOS/Source/tasks.c **** 			}
1588:FreeRTOS/Source/tasks.c **** 
1589:FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:FreeRTOS/Source/tasks.c **** 			{
1592:FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:FreeRTOS/Source/tasks.c **** 			}
1594:FreeRTOS/Source/tasks.c **** 			else
1595:FreeRTOS/Source/tasks.c **** 			{
1596:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:FreeRTOS/Source/tasks.c **** 			}
1598:FreeRTOS/Source/tasks.c **** 
1599:FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:FreeRTOS/Source/tasks.c **** 		}
1601:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1602:FreeRTOS/Source/tasks.c **** 
1603:FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:FreeRTOS/Source/tasks.c **** 		{
1605:FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1608:FreeRTOS/Source/tasks.c **** 			{
1609:FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:FreeRTOS/Source/tasks.c **** 			}
1611:FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1612:FreeRTOS/Source/tasks.c **** 		}
1613:FreeRTOS/Source/tasks.c **** 		else
1614:FreeRTOS/Source/tasks.c **** 		{
1615:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:FreeRTOS/Source/tasks.c **** 		}
1617:FreeRTOS/Source/tasks.c **** 
1618:FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:FreeRTOS/Source/tasks.c **** 		{
1620:FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:FreeRTOS/Source/tasks.c **** 			{
1622:FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1625:FreeRTOS/Source/tasks.c **** 			}
1626:FreeRTOS/Source/tasks.c **** 			else
1627:FreeRTOS/Source/tasks.c **** 			{
1628:FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 31


1632:FreeRTOS/Source/tasks.c **** 				{
1633:FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:FreeRTOS/Source/tasks.c **** 					is. */
1637:FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:FreeRTOS/Source/tasks.c **** 				}
1639:FreeRTOS/Source/tasks.c **** 				else
1640:FreeRTOS/Source/tasks.c **** 				{
1641:FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1642:FreeRTOS/Source/tasks.c **** 				}
1643:FreeRTOS/Source/tasks.c **** 			}
1644:FreeRTOS/Source/tasks.c **** 		}
1645:FreeRTOS/Source/tasks.c **** 		else
1646:FreeRTOS/Source/tasks.c **** 		{
1647:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:FreeRTOS/Source/tasks.c **** 		}
1649:FreeRTOS/Source/tasks.c **** 	}
1650:FreeRTOS/Source/tasks.c **** 
1651:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:FreeRTOS/Source/tasks.c **** 
1654:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:FreeRTOS/Source/tasks.c **** 
1656:FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:FreeRTOS/Source/tasks.c **** 	{
  80              		.loc 1 1657 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85              	.LVL0:
1658:FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:FreeRTOS/Source/tasks.c **** 
1661:FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:FreeRTOS/Source/tasks.c **** 		section. */
1663:FreeRTOS/Source/tasks.c **** 
1664:FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
1666:FreeRTOS/Source/tasks.c **** 
1667:FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  86              		.loc 1 1668 0
  87 0000 4369     		ldr	r3, [r0, #20]	@ MEM[(const struct TCB_t *)xTask_3(D)].xStateListItem.pvContainer, MEM[(const s
  88 0002 064A     		ldr	r2, .L8	@ tmp116,
  89 0004 9342     		cmp	r3, r2	@ MEM[(const struct TCB_t *)xTask_3(D)].xStateListItem.pvContainer, tmp116
  90 0006 07D1     		bne	.L6	@,
  91              	.LVL1:
  92              	.LBB34:
  93              	.LBB35:
1669:FreeRTOS/Source/tasks.c **** 		{
1670:FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  94              		.loc 1 1671 0
  95 0008 806A     		ldr	r0, [r0, #40]	@ D.6590, MEM[(const struct TCB_t *)xTask_3(D)].xEventListItem.pvContainer
  96              	.LVL2:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 32


  97 000a 1433     		adds	r3, r3, #20	@ tmp122, MEM[(const struct TCB_t *)xTask_3(D)].xStateListItem.pvContainer,
  98 000c 9842     		cmp	r0, r3	@ D.6590, tmp122
  99 000e 03D0     		beq	.L6	@,
1672:FreeRTOS/Source/tasks.c **** 			{
1673:FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 100              		.loc 1 1675 0
 101 0010 B0FA80F0 		clz	r0, r0	@ xReturn, D.6590
 102 0014 4009     		lsrs	r0, r0, #5	@ xReturn, xReturn,
 103 0016 7047     		bx	lr	@
 104              	.LVL3:
 105              	.L6:
 106              	.LBE35:
 107              	.LBE34:
1658:FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 108              		.loc 1 1658 0
 109 0018 0020     		movs	r0, #0	@ xReturn,
 110              	.LVL4:
1676:FreeRTOS/Source/tasks.c **** 				{
1677:FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
1678:FreeRTOS/Source/tasks.c **** 				}
1679:FreeRTOS/Source/tasks.c **** 				else
1680:FreeRTOS/Source/tasks.c **** 				{
1681:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:FreeRTOS/Source/tasks.c **** 				}
1683:FreeRTOS/Source/tasks.c **** 			}
1684:FreeRTOS/Source/tasks.c **** 			else
1685:FreeRTOS/Source/tasks.c **** 			{
1686:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:FreeRTOS/Source/tasks.c **** 			}
1688:FreeRTOS/Source/tasks.c **** 		}
1689:FreeRTOS/Source/tasks.c **** 		else
1690:FreeRTOS/Source/tasks.c **** 		{
1691:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:FreeRTOS/Source/tasks.c **** 		}
1693:FreeRTOS/Source/tasks.c **** 
1694:FreeRTOS/Source/tasks.c **** 		return xReturn;
1695:FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 111              		.loc 1 1695 0
 112 001a 7047     		bx	lr	@
 113              	.L9:
 114              		.align	2
 115              	.L8:
 116 001c 00000000 		.word	.LANCHOR0
 117              		.cfi_endproc
 118              	.LFE15:
 119              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 120              		.align	1
 121              		.thumb
 122              		.thumb_func
 123              		.type	prvResetNextTaskUnblockTime, %function
 124              	prvResetNextTaskUnblockTime:
 125              	.LFB39:
1696:FreeRTOS/Source/tasks.c **** 
1697:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 33


1699:FreeRTOS/Source/tasks.c **** 
1700:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:FreeRTOS/Source/tasks.c **** 
1702:FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:FreeRTOS/Source/tasks.c **** 	{
1704:FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:FreeRTOS/Source/tasks.c **** 
1706:FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1708:FreeRTOS/Source/tasks.c **** 
1709:FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:FreeRTOS/Source/tasks.c **** 		{
1713:FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1714:FreeRTOS/Source/tasks.c **** 			{
1715:FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:FreeRTOS/Source/tasks.c **** 				{
1717:FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:FreeRTOS/Source/tasks.c **** 
1719:FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:FreeRTOS/Source/tasks.c **** 
1724:FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:FreeRTOS/Source/tasks.c **** 					{
1727:FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:FreeRTOS/Source/tasks.c **** 						next yield. */
1730:FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:FreeRTOS/Source/tasks.c **** 					}
1732:FreeRTOS/Source/tasks.c **** 					else
1733:FreeRTOS/Source/tasks.c **** 					{
1734:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:FreeRTOS/Source/tasks.c **** 					}
1736:FreeRTOS/Source/tasks.c **** 				}
1737:FreeRTOS/Source/tasks.c **** 				else
1738:FreeRTOS/Source/tasks.c **** 				{
1739:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:FreeRTOS/Source/tasks.c **** 				}
1741:FreeRTOS/Source/tasks.c **** 			}
1742:FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1743:FreeRTOS/Source/tasks.c **** 		}
1744:FreeRTOS/Source/tasks.c **** 		else
1745:FreeRTOS/Source/tasks.c **** 		{
1746:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:FreeRTOS/Source/tasks.c **** 		}
1748:FreeRTOS/Source/tasks.c **** 	}
1749:FreeRTOS/Source/tasks.c **** 
1750:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:FreeRTOS/Source/tasks.c **** 
1752:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:FreeRTOS/Source/tasks.c **** 
1754:FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 34


1756:FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:FreeRTOS/Source/tasks.c **** 	{
1758:FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:FreeRTOS/Source/tasks.c **** 
1762:FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1763:FreeRTOS/Source/tasks.c **** 
1764:FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:FreeRTOS/Source/tasks.c **** 
1782:FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:FreeRTOS/Source/tasks.c **** 		{
1784:FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:FreeRTOS/Source/tasks.c **** 			{
1786:FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:FreeRTOS/Source/tasks.c **** 
1788:FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:FreeRTOS/Source/tasks.c **** 				{
1791:FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1793:FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:FreeRTOS/Source/tasks.c **** 					{
1795:FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1796:FreeRTOS/Source/tasks.c **** 					}
1797:FreeRTOS/Source/tasks.c **** 					else
1798:FreeRTOS/Source/tasks.c **** 					{
1799:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:FreeRTOS/Source/tasks.c **** 					}
1801:FreeRTOS/Source/tasks.c **** 
1802:FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:FreeRTOS/Source/tasks.c **** 				}
1805:FreeRTOS/Source/tasks.c **** 				else
1806:FreeRTOS/Source/tasks.c **** 				{
1807:FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:FreeRTOS/Source/tasks.c **** 					unsuspended. */
1810:FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:FreeRTOS/Source/tasks.c **** 				}
1812:FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 35


1813:FreeRTOS/Source/tasks.c **** 			else
1814:FreeRTOS/Source/tasks.c **** 			{
1815:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:FreeRTOS/Source/tasks.c **** 			}
1817:FreeRTOS/Source/tasks.c **** 		}
1818:FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:FreeRTOS/Source/tasks.c **** 
1820:FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1821:FreeRTOS/Source/tasks.c **** 	}
1822:FreeRTOS/Source/tasks.c **** 
1823:FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:FreeRTOS/Source/tasks.c **** 
1826:FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:FreeRTOS/Source/tasks.c **** {
1828:FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:FreeRTOS/Source/tasks.c **** 
1830:FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:FreeRTOS/Source/tasks.c **** 	{
1833:FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:FreeRTOS/Source/tasks.c **** 
1837:FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:FreeRTOS/Source/tasks.c **** 
1848:FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:FreeRTOS/Source/tasks.c **** 		{
1850:FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:FreeRTOS/Source/tasks.c **** 		}
1852:FreeRTOS/Source/tasks.c **** 		else
1853:FreeRTOS/Source/tasks.c **** 		{
1854:FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:FreeRTOS/Source/tasks.c **** 		}
1856:FreeRTOS/Source/tasks.c **** 	}
1857:FreeRTOS/Source/tasks.c **** 	#else
1858:FreeRTOS/Source/tasks.c **** 	{
1859:FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1863:FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:FreeRTOS/Source/tasks.c **** 	}
1866:FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:FreeRTOS/Source/tasks.c **** 
1868:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 36


1870:FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1871:FreeRTOS/Source/tasks.c **** 		{
1872:FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:FreeRTOS/Source/tasks.c **** 		}
1874:FreeRTOS/Source/tasks.c **** 		else
1875:FreeRTOS/Source/tasks.c **** 		{
1876:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:FreeRTOS/Source/tasks.c **** 		}
1878:FreeRTOS/Source/tasks.c **** 	}
1879:FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:FreeRTOS/Source/tasks.c **** 
1881:FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1882:FreeRTOS/Source/tasks.c **** 	{
1883:FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:FreeRTOS/Source/tasks.c **** 
1890:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:FreeRTOS/Source/tasks.c **** 		{
1892:FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:FreeRTOS/Source/tasks.c **** 		}
1896:FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:FreeRTOS/Source/tasks.c **** 
1898:FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:FreeRTOS/Source/tasks.c **** 
1902:FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:FreeRTOS/Source/tasks.c **** 
1907:FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:FreeRTOS/Source/tasks.c **** 		{
1911:FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:FreeRTOS/Source/tasks.c **** 			function will not return. */
1913:FreeRTOS/Source/tasks.c **** 		}
1914:FreeRTOS/Source/tasks.c **** 		else
1915:FreeRTOS/Source/tasks.c **** 		{
1916:FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:FreeRTOS/Source/tasks.c **** 		}
1918:FreeRTOS/Source/tasks.c **** 	}
1919:FreeRTOS/Source/tasks.c **** 	else
1920:FreeRTOS/Source/tasks.c **** 	{
1921:FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:FreeRTOS/Source/tasks.c **** 		or the timer task. */
1924:FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:FreeRTOS/Source/tasks.c **** 	}
1926:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 37


1927:FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:FreeRTOS/Source/tasks.c **** }
1931:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1932:FreeRTOS/Source/tasks.c **** 
1933:FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:FreeRTOS/Source/tasks.c **** {
1935:FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
1941:FreeRTOS/Source/tasks.c **** }
1942:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:FreeRTOS/Source/tasks.c **** 
1944:FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:FreeRTOS/Source/tasks.c **** {
1946:FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
1951:FreeRTOS/Source/tasks.c **** }
1952:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:FreeRTOS/Source/tasks.c **** 
1954:FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:FreeRTOS/Source/tasks.c **** 
1956:FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:FreeRTOS/Source/tasks.c **** 	{
1958:FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:FreeRTOS/Source/tasks.c **** 
1961:FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:FreeRTOS/Source/tasks.c **** 		running. */
1965:FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:FreeRTOS/Source/tasks.c **** 		{
1967:FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:FreeRTOS/Source/tasks.c **** 			{
1969:FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:FreeRTOS/Source/tasks.c **** 			}
1971:FreeRTOS/Source/tasks.c **** 		}
1972:FreeRTOS/Source/tasks.c **** 		#else
1973:FreeRTOS/Source/tasks.c **** 		{
1974:FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:FreeRTOS/Source/tasks.c **** 
1976:FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:FreeRTOS/Source/tasks.c **** 			{
1983:FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 38


1984:FreeRTOS/Source/tasks.c **** 			}
1985:FreeRTOS/Source/tasks.c **** 		}
1986:FreeRTOS/Source/tasks.c **** 		#endif
1987:FreeRTOS/Source/tasks.c **** 
1988:FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:FreeRTOS/Source/tasks.c **** 		{
1990:FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:FreeRTOS/Source/tasks.c **** 		}
1992:FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:FreeRTOS/Source/tasks.c **** 		{
1994:FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:FreeRTOS/Source/tasks.c **** 			processed. */
1997:FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:FreeRTOS/Source/tasks.c **** 		}
1999:FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:FreeRTOS/Source/tasks.c **** 		{
2001:FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:FreeRTOS/Source/tasks.c **** 		}
2006:FreeRTOS/Source/tasks.c **** 		else
2007:FreeRTOS/Source/tasks.c **** 		{
2008:FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:FreeRTOS/Source/tasks.c **** 		}
2010:FreeRTOS/Source/tasks.c **** 
2011:FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:FreeRTOS/Source/tasks.c **** 	}
2013:FreeRTOS/Source/tasks.c **** 
2014:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:FreeRTOS/Source/tasks.c **** 
2017:FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:FreeRTOS/Source/tasks.c **** {
2019:FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2020:FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:FreeRTOS/Source/tasks.c **** 
2022:FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:FreeRTOS/Source/tasks.c **** 
2026:FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2032:FreeRTOS/Source/tasks.c **** 	{
2033:FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2034:FreeRTOS/Source/tasks.c **** 
2035:FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:FreeRTOS/Source/tasks.c **** 		{
2037:FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:FreeRTOS/Source/tasks.c **** 			{
2039:FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 39


2041:FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:FreeRTOS/Source/tasks.c **** 				{
2043:FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:FreeRTOS/Source/tasks.c **** 
2048:FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:FreeRTOS/Source/tasks.c **** 					{
2052:FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2053:FreeRTOS/Source/tasks.c **** 					}
2054:FreeRTOS/Source/tasks.c **** 					else
2055:FreeRTOS/Source/tasks.c **** 					{
2056:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:FreeRTOS/Source/tasks.c **** 					}
2058:FreeRTOS/Source/tasks.c **** 				}
2059:FreeRTOS/Source/tasks.c **** 
2060:FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2061:FreeRTOS/Source/tasks.c **** 				{
2062:FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:FreeRTOS/Source/tasks.c **** 					state. */
2068:FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:FreeRTOS/Source/tasks.c **** 				}
2070:FreeRTOS/Source/tasks.c **** 
2071:FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:FreeRTOS/Source/tasks.c **** 				time. */
2075:FreeRTOS/Source/tasks.c **** 				{
2076:FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:FreeRTOS/Source/tasks.c **** 
2078:FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:FreeRTOS/Source/tasks.c **** 					{
2080:FreeRTOS/Source/tasks.c **** 						do
2081:FreeRTOS/Source/tasks.c **** 						{
2082:FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:FreeRTOS/Source/tasks.c **** 							{
2084:FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2085:FreeRTOS/Source/tasks.c **** 							}
2086:FreeRTOS/Source/tasks.c **** 							else
2087:FreeRTOS/Source/tasks.c **** 							{
2088:FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:FreeRTOS/Source/tasks.c **** 							}
2090:FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2091:FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:FreeRTOS/Source/tasks.c **** 
2093:FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2094:FreeRTOS/Source/tasks.c **** 					}
2095:FreeRTOS/Source/tasks.c **** 					else
2096:FreeRTOS/Source/tasks.c **** 					{
2097:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 40


2098:FreeRTOS/Source/tasks.c **** 					}
2099:FreeRTOS/Source/tasks.c **** 				}
2100:FreeRTOS/Source/tasks.c **** 
2101:FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:FreeRTOS/Source/tasks.c **** 				{
2103:FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:FreeRTOS/Source/tasks.c **** 					{
2105:FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:FreeRTOS/Source/tasks.c **** 					}
2107:FreeRTOS/Source/tasks.c **** 					#endif
2108:FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:FreeRTOS/Source/tasks.c **** 				}
2110:FreeRTOS/Source/tasks.c **** 				else
2111:FreeRTOS/Source/tasks.c **** 				{
2112:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:FreeRTOS/Source/tasks.c **** 				}
2114:FreeRTOS/Source/tasks.c **** 			}
2115:FreeRTOS/Source/tasks.c **** 		}
2116:FreeRTOS/Source/tasks.c **** 		else
2117:FreeRTOS/Source/tasks.c **** 		{
2118:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:FreeRTOS/Source/tasks.c **** 		}
2120:FreeRTOS/Source/tasks.c **** 	}
2121:FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2122:FreeRTOS/Source/tasks.c **** 
2123:FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2124:FreeRTOS/Source/tasks.c **** }
2125:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:FreeRTOS/Source/tasks.c **** 
2127:FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:FreeRTOS/Source/tasks.c **** {
2129:FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2130:FreeRTOS/Source/tasks.c **** 
2131:FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:FreeRTOS/Source/tasks.c **** 	{
2134:FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2135:FreeRTOS/Source/tasks.c **** 	}
2136:FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:FreeRTOS/Source/tasks.c **** 
2138:FreeRTOS/Source/tasks.c **** 	return xTicks;
2139:FreeRTOS/Source/tasks.c **** }
2140:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2141:FreeRTOS/Source/tasks.c **** 
2142:FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:FreeRTOS/Source/tasks.c **** {
2144:FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:FreeRTOS/Source/tasks.c **** 
2147:FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 41


2155:FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:FreeRTOS/Source/tasks.c **** 
2163:FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:FreeRTOS/Source/tasks.c **** 	{
2165:FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2166:FreeRTOS/Source/tasks.c **** 	}
2167:FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:FreeRTOS/Source/tasks.c **** 
2169:FreeRTOS/Source/tasks.c **** 	return xReturn;
2170:FreeRTOS/Source/tasks.c **** }
2171:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:FreeRTOS/Source/tasks.c **** 
2173:FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:FreeRTOS/Source/tasks.c **** {
2175:FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:FreeRTOS/Source/tasks.c **** }
2179:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:FreeRTOS/Source/tasks.c **** 
2181:FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:FreeRTOS/Source/tasks.c **** {
2183:FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:FreeRTOS/Source/tasks.c **** 
2185:FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:FreeRTOS/Source/tasks.c **** 	queried. */
2187:FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2189:FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:FreeRTOS/Source/tasks.c **** }
2191:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:FreeRTOS/Source/tasks.c **** 
2193:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:FreeRTOS/Source/tasks.c **** 
2195:FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:FreeRTOS/Source/tasks.c **** 	{
2197:FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2199:FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:FreeRTOS/Source/tasks.c **** 
2201:FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:FreeRTOS/Source/tasks.c **** 
2203:FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:FreeRTOS/Source/tasks.c **** 		{
2205:FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:FreeRTOS/Source/tasks.c **** 
2207:FreeRTOS/Source/tasks.c **** 			do
2208:FreeRTOS/Source/tasks.c **** 			{
2209:FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:FreeRTOS/Source/tasks.c **** 
2211:FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 42


2212:FreeRTOS/Source/tasks.c **** 				mismatch. */
2213:FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:FreeRTOS/Source/tasks.c **** 				{
2215:FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:FreeRTOS/Source/tasks.c **** 
2217:FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:FreeRTOS/Source/tasks.c **** 					{
2219:FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:FreeRTOS/Source/tasks.c **** 						break;
2221:FreeRTOS/Source/tasks.c **** 					}
2222:FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:FreeRTOS/Source/tasks.c **** 					{
2224:FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:FreeRTOS/Source/tasks.c **** 						found. */
2226:FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:FreeRTOS/Source/tasks.c **** 						break;
2228:FreeRTOS/Source/tasks.c **** 					}
2229:FreeRTOS/Source/tasks.c **** 					else
2230:FreeRTOS/Source/tasks.c **** 					{
2231:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:FreeRTOS/Source/tasks.c **** 					}
2233:FreeRTOS/Source/tasks.c **** 				}
2234:FreeRTOS/Source/tasks.c **** 
2235:FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2236:FreeRTOS/Source/tasks.c **** 				{
2237:FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:FreeRTOS/Source/tasks.c **** 					break;
2239:FreeRTOS/Source/tasks.c **** 				}
2240:FreeRTOS/Source/tasks.c **** 
2241:FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:FreeRTOS/Source/tasks.c **** 		}
2243:FreeRTOS/Source/tasks.c **** 		else
2244:FreeRTOS/Source/tasks.c **** 		{
2245:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:FreeRTOS/Source/tasks.c **** 		}
2247:FreeRTOS/Source/tasks.c **** 
2248:FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:FreeRTOS/Source/tasks.c **** 	}
2250:FreeRTOS/Source/tasks.c **** 
2251:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:FreeRTOS/Source/tasks.c **** 
2254:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:FreeRTOS/Source/tasks.c **** 
2256:FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:FreeRTOS/Source/tasks.c **** 	{
2258:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:FreeRTOS/Source/tasks.c **** 
2261:FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:FreeRTOS/Source/tasks.c **** 
2264:FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:FreeRTOS/Source/tasks.c **** 		{
2266:FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:FreeRTOS/Source/tasks.c **** 			do
2268:FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 43


2269:FreeRTOS/Source/tasks.c **** 				uxQueue--;
2270:FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:FreeRTOS/Source/tasks.c **** 
2272:FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:FreeRTOS/Source/tasks.c **** 				{
2274:FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:FreeRTOS/Source/tasks.c **** 					break;
2276:FreeRTOS/Source/tasks.c **** 				}
2277:FreeRTOS/Source/tasks.c **** 
2278:FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:FreeRTOS/Source/tasks.c **** 
2280:FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2282:FreeRTOS/Source/tasks.c **** 			{
2283:FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:FreeRTOS/Source/tasks.c **** 			}
2285:FreeRTOS/Source/tasks.c **** 
2286:FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:FreeRTOS/Source/tasks.c **** 			{
2288:FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:FreeRTOS/Source/tasks.c **** 			}
2290:FreeRTOS/Source/tasks.c **** 
2291:FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:FreeRTOS/Source/tasks.c **** 			{
2293:FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:FreeRTOS/Source/tasks.c **** 				{
2295:FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:FreeRTOS/Source/tasks.c **** 				}
2298:FreeRTOS/Source/tasks.c **** 			}
2299:FreeRTOS/Source/tasks.c **** 			#endif
2300:FreeRTOS/Source/tasks.c **** 
2301:FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:FreeRTOS/Source/tasks.c **** 			{
2303:FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:FreeRTOS/Source/tasks.c **** 				{
2305:FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:FreeRTOS/Source/tasks.c **** 				}
2308:FreeRTOS/Source/tasks.c **** 			}
2309:FreeRTOS/Source/tasks.c **** 			#endif
2310:FreeRTOS/Source/tasks.c **** 		}
2311:FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:FreeRTOS/Source/tasks.c **** 
2313:FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:FreeRTOS/Source/tasks.c **** 	}
2315:FreeRTOS/Source/tasks.c **** 
2316:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:FreeRTOS/Source/tasks.c **** 
2319:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:FreeRTOS/Source/tasks.c **** 
2321:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:FreeRTOS/Source/tasks.c **** 	{
2323:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:FreeRTOS/Source/tasks.c **** 
2325:FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 44


2326:FreeRTOS/Source/tasks.c **** 		{
2327:FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:FreeRTOS/Source/tasks.c **** 			{
2330:FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:FreeRTOS/Source/tasks.c **** 				do
2333:FreeRTOS/Source/tasks.c **** 				{
2334:FreeRTOS/Source/tasks.c **** 					uxQueue--;
2335:FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:FreeRTOS/Source/tasks.c **** 
2337:FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:FreeRTOS/Source/tasks.c **** 
2339:FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2341:FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:FreeRTOS/Source/tasks.c **** 
2344:FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:FreeRTOS/Source/tasks.c **** 				{
2346:FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:FreeRTOS/Source/tasks.c **** 				}
2350:FreeRTOS/Source/tasks.c **** 				#endif
2351:FreeRTOS/Source/tasks.c **** 
2352:FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:FreeRTOS/Source/tasks.c **** 				{
2354:FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:FreeRTOS/Source/tasks.c **** 				}
2358:FreeRTOS/Source/tasks.c **** 				#endif
2359:FreeRTOS/Source/tasks.c **** 
2360:FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:FreeRTOS/Source/tasks.c **** 				{
2362:FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:FreeRTOS/Source/tasks.c **** 					{
2364:FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:FreeRTOS/Source/tasks.c **** 						#else
2367:FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:FreeRTOS/Source/tasks.c **** 						#endif
2369:FreeRTOS/Source/tasks.c **** 					}
2370:FreeRTOS/Source/tasks.c **** 				}
2371:FreeRTOS/Source/tasks.c **** 				#else
2372:FreeRTOS/Source/tasks.c **** 				{
2373:FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:FreeRTOS/Source/tasks.c **** 					{
2375:FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:FreeRTOS/Source/tasks.c **** 					}
2377:FreeRTOS/Source/tasks.c **** 				}
2378:FreeRTOS/Source/tasks.c **** 				#endif
2379:FreeRTOS/Source/tasks.c **** 			}
2380:FreeRTOS/Source/tasks.c **** 			else
2381:FreeRTOS/Source/tasks.c **** 			{
2382:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 45


2383:FreeRTOS/Source/tasks.c **** 			}
2384:FreeRTOS/Source/tasks.c **** 		}
2385:FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:FreeRTOS/Source/tasks.c **** 
2387:FreeRTOS/Source/tasks.c **** 		return uxTask;
2388:FreeRTOS/Source/tasks.c **** 	}
2389:FreeRTOS/Source/tasks.c **** 
2390:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:FreeRTOS/Source/tasks.c **** 
2393:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:FreeRTOS/Source/tasks.c **** 
2395:FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:FreeRTOS/Source/tasks.c **** 	{
2397:FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:FreeRTOS/Source/tasks.c **** 	}
2402:FreeRTOS/Source/tasks.c **** 
2403:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:FreeRTOS/Source/tasks.c **** 
2406:FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:FreeRTOS/Source/tasks.c **** 1. */
2410:FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:FreeRTOS/Source/tasks.c **** 
2412:FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:FreeRTOS/Source/tasks.c **** 	{
2414:FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:FreeRTOS/Source/tasks.c **** 	}
2421:FreeRTOS/Source/tasks.c **** 
2422:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:FreeRTOS/Source/tasks.c **** 
2425:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:FreeRTOS/Source/tasks.c **** 
2427:FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:FreeRTOS/Source/tasks.c **** 	{
2429:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:FreeRTOS/Source/tasks.c **** 
2432:FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:FreeRTOS/Source/tasks.c **** 
2434:FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:FreeRTOS/Source/tasks.c **** 		{
2436:FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 46


2440:FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:FreeRTOS/Source/tasks.c **** 
2445:FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:FreeRTOS/Source/tasks.c **** 				is used. */
2449:FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:FreeRTOS/Source/tasks.c **** 				{
2451:FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:FreeRTOS/Source/tasks.c **** 					{
2453:FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:FreeRTOS/Source/tasks.c **** 					}
2456:FreeRTOS/Source/tasks.c **** 					else
2457:FreeRTOS/Source/tasks.c **** 					{
2458:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:FreeRTOS/Source/tasks.c **** 					}
2460:FreeRTOS/Source/tasks.c **** 				}
2461:FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:FreeRTOS/Source/tasks.c **** 
2463:FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:FreeRTOS/Source/tasks.c **** 
2466:FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:FreeRTOS/Source/tasks.c **** 				{
2470:FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:FreeRTOS/Source/tasks.c **** 					{
2475:FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:FreeRTOS/Source/tasks.c **** 					}
2479:FreeRTOS/Source/tasks.c **** 					else
2480:FreeRTOS/Source/tasks.c **** 					{
2481:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:FreeRTOS/Source/tasks.c **** 					}
2483:FreeRTOS/Source/tasks.c **** 				}
2484:FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:FreeRTOS/Source/tasks.c **** 			}
2486:FreeRTOS/Source/tasks.c **** 			else
2487:FreeRTOS/Source/tasks.c **** 			{
2488:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:FreeRTOS/Source/tasks.c **** 			}
2490:FreeRTOS/Source/tasks.c **** 		}
2491:FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:FreeRTOS/Source/tasks.c **** 
2493:FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:FreeRTOS/Source/tasks.c **** 	}
2495:FreeRTOS/Source/tasks.c **** 
2496:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 47


2497:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2498:FreeRTOS/Source/tasks.c **** 
2499:FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:FreeRTOS/Source/tasks.c **** {
2501:FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2502:FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2503:FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:FreeRTOS/Source/tasks.c **** 
2505:FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2508:FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:FreeRTOS/Source/tasks.c **** 	{
2511:FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:FreeRTOS/Source/tasks.c **** 		block. */
2513:FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:FreeRTOS/Source/tasks.c **** 
2515:FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2518:FreeRTOS/Source/tasks.c **** 
2519:FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:FreeRTOS/Source/tasks.c **** 		{
2521:FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:FreeRTOS/Source/tasks.c **** 		}
2523:FreeRTOS/Source/tasks.c **** 		else
2524:FreeRTOS/Source/tasks.c **** 		{
2525:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:FreeRTOS/Source/tasks.c **** 		}
2527:FreeRTOS/Source/tasks.c **** 
2528:FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:FreeRTOS/Source/tasks.c **** 		{
2534:FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:FreeRTOS/Source/tasks.c **** 			{
2536:FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:FreeRTOS/Source/tasks.c **** 				{
2538:FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:FreeRTOS/Source/tasks.c **** 					next time through. */
2543:FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:FreeRTOS/Source/tasks.c **** 					break;
2545:FreeRTOS/Source/tasks.c **** 				}
2546:FreeRTOS/Source/tasks.c **** 				else
2547:FreeRTOS/Source/tasks.c **** 				{
2548:FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 48


2554:FreeRTOS/Source/tasks.c **** 
2555:FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:FreeRTOS/Source/tasks.c **** 					{
2557:FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2559:FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2561:FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:FreeRTOS/Source/tasks.c **** 						break;
2564:FreeRTOS/Source/tasks.c **** 					}
2565:FreeRTOS/Source/tasks.c **** 					else
2566:FreeRTOS/Source/tasks.c **** 					{
2567:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:FreeRTOS/Source/tasks.c **** 					}
2569:FreeRTOS/Source/tasks.c **** 
2570:FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:FreeRTOS/Source/tasks.c **** 
2573:FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:FreeRTOS/Source/tasks.c **** 					{
2577:FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:FreeRTOS/Source/tasks.c **** 					}
2579:FreeRTOS/Source/tasks.c **** 					else
2580:FreeRTOS/Source/tasks.c **** 					{
2581:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:FreeRTOS/Source/tasks.c **** 					}
2583:FreeRTOS/Source/tasks.c **** 
2584:FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:FreeRTOS/Source/tasks.c **** 					list. */
2586:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:FreeRTOS/Source/tasks.c **** 
2588:FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2590:FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:FreeRTOS/Source/tasks.c **** 					{
2592:FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:FreeRTOS/Source/tasks.c **** 						{
2598:FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:FreeRTOS/Source/tasks.c **** 						}
2600:FreeRTOS/Source/tasks.c **** 						else
2601:FreeRTOS/Source/tasks.c **** 						{
2602:FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:FreeRTOS/Source/tasks.c **** 						}
2604:FreeRTOS/Source/tasks.c **** 					}
2605:FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:FreeRTOS/Source/tasks.c **** 				}
2607:FreeRTOS/Source/tasks.c **** 			}
2608:FreeRTOS/Source/tasks.c **** 		}
2609:FreeRTOS/Source/tasks.c **** 
2610:FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 49


2611:FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:FreeRTOS/Source/tasks.c **** 		{
2615:FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:FreeRTOS/Source/tasks.c **** 			{
2617:FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:FreeRTOS/Source/tasks.c **** 			}
2619:FreeRTOS/Source/tasks.c **** 			else
2620:FreeRTOS/Source/tasks.c **** 			{
2621:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:FreeRTOS/Source/tasks.c **** 			}
2623:FreeRTOS/Source/tasks.c **** 		}
2624:FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:FreeRTOS/Source/tasks.c **** 
2626:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:FreeRTOS/Source/tasks.c **** 		{
2628:FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:FreeRTOS/Source/tasks.c **** 			{
2632:FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:FreeRTOS/Source/tasks.c **** 			}
2634:FreeRTOS/Source/tasks.c **** 			else
2635:FreeRTOS/Source/tasks.c **** 			{
2636:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:FreeRTOS/Source/tasks.c **** 			}
2638:FreeRTOS/Source/tasks.c **** 		}
2639:FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:FreeRTOS/Source/tasks.c **** 	}
2641:FreeRTOS/Source/tasks.c **** 	else
2642:FreeRTOS/Source/tasks.c **** 	{
2643:FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2644:FreeRTOS/Source/tasks.c **** 
2645:FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:FreeRTOS/Source/tasks.c **** 		{
2649:FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:FreeRTOS/Source/tasks.c **** 		}
2651:FreeRTOS/Source/tasks.c **** 		#endif
2652:FreeRTOS/Source/tasks.c **** 	}
2653:FreeRTOS/Source/tasks.c **** 
2654:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:FreeRTOS/Source/tasks.c **** 	{
2656:FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:FreeRTOS/Source/tasks.c **** 		{
2658:FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:FreeRTOS/Source/tasks.c **** 		}
2660:FreeRTOS/Source/tasks.c **** 		else
2661:FreeRTOS/Source/tasks.c **** 		{
2662:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:FreeRTOS/Source/tasks.c **** 		}
2664:FreeRTOS/Source/tasks.c **** 	}
2665:FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:FreeRTOS/Source/tasks.c **** 
2667:FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 50


2668:FreeRTOS/Source/tasks.c **** }
2669:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:FreeRTOS/Source/tasks.c **** 
2671:FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:FreeRTOS/Source/tasks.c **** 
2673:FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:FreeRTOS/Source/tasks.c **** 	{
2675:FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2676:FreeRTOS/Source/tasks.c **** 
2677:FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:FreeRTOS/Source/tasks.c **** 		getting set. */
2679:FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:FreeRTOS/Source/tasks.c **** 		{
2681:FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:FreeRTOS/Source/tasks.c **** 		}
2683:FreeRTOS/Source/tasks.c **** 		else
2684:FreeRTOS/Source/tasks.c **** 		{
2685:FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:FreeRTOS/Source/tasks.c **** 		}
2687:FreeRTOS/Source/tasks.c **** 
2688:FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:FreeRTOS/Source/tasks.c **** 	}
2694:FreeRTOS/Source/tasks.c **** 
2695:FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:FreeRTOS/Source/tasks.c **** 
2698:FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:FreeRTOS/Source/tasks.c **** 
2700:FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:FreeRTOS/Source/tasks.c **** 	{
2702:FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:FreeRTOS/Source/tasks.c **** 
2705:FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:FreeRTOS/Source/tasks.c **** 		{
2708:FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:FreeRTOS/Source/tasks.c **** 		}
2710:FreeRTOS/Source/tasks.c **** 		else
2711:FreeRTOS/Source/tasks.c **** 		{
2712:FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:FreeRTOS/Source/tasks.c **** 		}
2714:FreeRTOS/Source/tasks.c **** 
2715:FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:FreeRTOS/Source/tasks.c **** 		{
2719:FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:FreeRTOS/Source/tasks.c **** 		}
2721:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:FreeRTOS/Source/tasks.c **** 
2723:FreeRTOS/Source/tasks.c **** 		return xReturn;
2724:FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 51


2725:FreeRTOS/Source/tasks.c **** 
2726:FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:FreeRTOS/Source/tasks.c **** 
2729:FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:FreeRTOS/Source/tasks.c **** 
2731:FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:FreeRTOS/Source/tasks.c **** 	{
2733:FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:FreeRTOS/Source/tasks.c **** 
2736:FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2738:FreeRTOS/Source/tasks.c **** 		{
2739:FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:FreeRTOS/Source/tasks.c **** 		}
2741:FreeRTOS/Source/tasks.c **** 		else
2742:FreeRTOS/Source/tasks.c **** 		{
2743:FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:FreeRTOS/Source/tasks.c **** 		}
2745:FreeRTOS/Source/tasks.c **** 
2746:FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:FreeRTOS/Source/tasks.c **** 		{
2748:FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:FreeRTOS/Source/tasks.c **** 		}
2750:FreeRTOS/Source/tasks.c **** 		else
2751:FreeRTOS/Source/tasks.c **** 		{
2752:FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:FreeRTOS/Source/tasks.c **** 		}
2754:FreeRTOS/Source/tasks.c **** 
2755:FreeRTOS/Source/tasks.c **** 		return xReturn;
2756:FreeRTOS/Source/tasks.c **** 	}
2757:FreeRTOS/Source/tasks.c **** 
2758:FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:FreeRTOS/Source/tasks.c **** 
2761:FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:FreeRTOS/Source/tasks.c **** {
2763:FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:FreeRTOS/Source/tasks.c **** 	{
2765:FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:FreeRTOS/Source/tasks.c **** 		switch. */
2767:FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2768:FreeRTOS/Source/tasks.c **** 	}
2769:FreeRTOS/Source/tasks.c **** 	else
2770:FreeRTOS/Source/tasks.c **** 	{
2771:FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:FreeRTOS/Source/tasks.c **** 
2774:FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:FreeRTOS/Source/tasks.c **** 		{
2776:FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:FreeRTOS/Source/tasks.c **** 				#else
2779:FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:FreeRTOS/Source/tasks.c **** 				#endif
2781:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 52


2782:FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:FreeRTOS/Source/tasks.c **** 				{
2791:FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:FreeRTOS/Source/tasks.c **** 				}
2793:FreeRTOS/Source/tasks.c **** 				else
2794:FreeRTOS/Source/tasks.c **** 				{
2795:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:FreeRTOS/Source/tasks.c **** 				}
2797:FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:FreeRTOS/Source/tasks.c **** 		}
2799:FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:FreeRTOS/Source/tasks.c **** 
2801:FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:FreeRTOS/Source/tasks.c **** 
2804:FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:FreeRTOS/Source/tasks.c **** 
2809:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:FreeRTOS/Source/tasks.c **** 		{
2811:FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:FreeRTOS/Source/tasks.c **** 		}
2815:FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:FreeRTOS/Source/tasks.c **** 	}
2817:FreeRTOS/Source/tasks.c **** }
2818:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:FreeRTOS/Source/tasks.c **** 
2820:FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:FreeRTOS/Source/tasks.c **** {
2822:FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2823:FreeRTOS/Source/tasks.c **** 
2824:FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:FreeRTOS/Source/tasks.c **** 
2827:FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:FreeRTOS/Source/tasks.c **** 
2833:FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:FreeRTOS/Source/tasks.c **** }
2835:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:FreeRTOS/Source/tasks.c **** 
2837:FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:FreeRTOS/Source/tasks.c **** {
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 53


2839:FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2840:FreeRTOS/Source/tasks.c **** 
2841:FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:FreeRTOS/Source/tasks.c **** 
2845:FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:FreeRTOS/Source/tasks.c **** 
2850:FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:FreeRTOS/Source/tasks.c **** 	the task level). */
2855:FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:FreeRTOS/Source/tasks.c **** 
2857:FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:FreeRTOS/Source/tasks.c **** }
2859:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:FreeRTOS/Source/tasks.c **** 
2861:FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:FreeRTOS/Source/tasks.c **** 
2863:FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:FreeRTOS/Source/tasks.c **** 	{
2865:FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:FreeRTOS/Source/tasks.c **** 
2867:FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:FreeRTOS/Source/tasks.c **** 
2872:FreeRTOS/Source/tasks.c **** 
2873:FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:FreeRTOS/Source/tasks.c **** 
2879:FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:FreeRTOS/Source/tasks.c **** 		{
2884:FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:FreeRTOS/Source/tasks.c **** 		}
2886:FreeRTOS/Source/tasks.c **** 
2887:FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:FreeRTOS/Source/tasks.c **** 	}
2890:FreeRTOS/Source/tasks.c **** 
2891:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:FreeRTOS/Source/tasks.c **** 
2894:FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:FreeRTOS/Source/tasks.c **** {
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 54


2896:FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:FreeRTOS/Source/tasks.c **** 
2899:FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2901:FreeRTOS/Source/tasks.c **** 
2902:FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:FreeRTOS/Source/tasks.c **** 
2906:FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:FreeRTOS/Source/tasks.c **** 
2910:FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2912:FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:FreeRTOS/Source/tasks.c **** 
2916:FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:FreeRTOS/Source/tasks.c **** 	{
2918:FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:FreeRTOS/Source/tasks.c **** 	}
2921:FreeRTOS/Source/tasks.c **** 	else
2922:FreeRTOS/Source/tasks.c **** 	{
2923:FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:FreeRTOS/Source/tasks.c **** 	}
2927:FreeRTOS/Source/tasks.c **** 
2928:FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:FreeRTOS/Source/tasks.c **** 	{
2930:FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2934:FreeRTOS/Source/tasks.c **** 
2935:FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2938:FreeRTOS/Source/tasks.c **** 	}
2939:FreeRTOS/Source/tasks.c **** 	else
2940:FreeRTOS/Source/tasks.c **** 	{
2941:FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
2942:FreeRTOS/Source/tasks.c **** 	}
2943:FreeRTOS/Source/tasks.c **** 
2944:FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:FreeRTOS/Source/tasks.c **** 	{
2946:FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 55


2953:FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:FreeRTOS/Source/tasks.c **** 	}
2956:FreeRTOS/Source/tasks.c **** 	#endif
2957:FreeRTOS/Source/tasks.c **** 
2958:FreeRTOS/Source/tasks.c **** 	return xReturn;
2959:FreeRTOS/Source/tasks.c **** }
2960:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:FreeRTOS/Source/tasks.c **** 
2962:FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:FreeRTOS/Source/tasks.c **** {
2964:FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2966:FreeRTOS/Source/tasks.c **** 
2967:FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:FreeRTOS/Source/tasks.c **** 
2971:FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:FreeRTOS/Source/tasks.c **** 
2974:FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:FreeRTOS/Source/tasks.c **** 	event flags. */
2976:FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:FreeRTOS/Source/tasks.c **** 
2980:FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:FreeRTOS/Source/tasks.c **** 	lists. */
2983:FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:FreeRTOS/Source/tasks.c **** 
2986:FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:FreeRTOS/Source/tasks.c **** 	{
2988:FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:FreeRTOS/Source/tasks.c **** 		switch now. */
2992:FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2993:FreeRTOS/Source/tasks.c **** 
2994:FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2997:FreeRTOS/Source/tasks.c **** 	}
2998:FreeRTOS/Source/tasks.c **** 	else
2999:FreeRTOS/Source/tasks.c **** 	{
3000:FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3001:FreeRTOS/Source/tasks.c **** 	}
3002:FreeRTOS/Source/tasks.c **** 
3003:FreeRTOS/Source/tasks.c **** 	return xReturn;
3004:FreeRTOS/Source/tasks.c **** }
3005:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:FreeRTOS/Source/tasks.c **** 
3007:FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:FreeRTOS/Source/tasks.c **** {
3009:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 56


3010:FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:FreeRTOS/Source/tasks.c **** }
3013:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:FreeRTOS/Source/tasks.c **** 
3015:FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:FreeRTOS/Source/tasks.c **** {
3017:FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:FreeRTOS/Source/tasks.c **** 
3019:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3020:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3021:FreeRTOS/Source/tasks.c **** 
3022:FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3023:FreeRTOS/Source/tasks.c **** 	{
3024:FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:FreeRTOS/Source/tasks.c **** 
3027:FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:FreeRTOS/Source/tasks.c **** 			{
3030:FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:FreeRTOS/Source/tasks.c **** 			}
3035:FreeRTOS/Source/tasks.c **** 			else
3036:FreeRTOS/Source/tasks.c **** 		#endif
3037:FreeRTOS/Source/tasks.c **** 
3038:FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:FreeRTOS/Source/tasks.c **** 			{
3041:FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3045:FreeRTOS/Source/tasks.c **** 			}
3046:FreeRTOS/Source/tasks.c **** 			else
3047:FreeRTOS/Source/tasks.c **** 		#endif
3048:FreeRTOS/Source/tasks.c **** 
3049:FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:FreeRTOS/Source/tasks.c **** 		{
3051:FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:FreeRTOS/Source/tasks.c **** 			was called. */
3056:FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3057:FreeRTOS/Source/tasks.c **** 		}
3058:FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:FreeRTOS/Source/tasks.c **** 		{
3060:FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3064:FreeRTOS/Source/tasks.c **** 		}
3065:FreeRTOS/Source/tasks.c **** 		else
3066:FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 57


3067:FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3068:FreeRTOS/Source/tasks.c **** 		}
3069:FreeRTOS/Source/tasks.c **** 	}
3070:FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3071:FreeRTOS/Source/tasks.c **** 
3072:FreeRTOS/Source/tasks.c **** 	return xReturn;
3073:FreeRTOS/Source/tasks.c **** }
3074:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:FreeRTOS/Source/tasks.c **** 
3076:FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:FreeRTOS/Source/tasks.c **** {
3078:FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3079:FreeRTOS/Source/tasks.c **** }
3080:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:FreeRTOS/Source/tasks.c **** 
3082:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:FreeRTOS/Source/tasks.c **** 
3084:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:FreeRTOS/Source/tasks.c **** 	{
3086:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:FreeRTOS/Source/tasks.c **** 
3089:FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3090:FreeRTOS/Source/tasks.c **** 		{
3091:FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:FreeRTOS/Source/tasks.c **** 		}
3094:FreeRTOS/Source/tasks.c **** 		else
3095:FreeRTOS/Source/tasks.c **** 		{
3096:FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3097:FreeRTOS/Source/tasks.c **** 		}
3098:FreeRTOS/Source/tasks.c **** 
3099:FreeRTOS/Source/tasks.c **** 		return uxReturn;
3100:FreeRTOS/Source/tasks.c **** 	}
3101:FreeRTOS/Source/tasks.c **** 
3102:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:FreeRTOS/Source/tasks.c **** 
3105:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:FreeRTOS/Source/tasks.c **** 
3107:FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:FreeRTOS/Source/tasks.c **** 	{
3109:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3110:FreeRTOS/Source/tasks.c **** 
3111:FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3112:FreeRTOS/Source/tasks.c **** 		{
3113:FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:FreeRTOS/Source/tasks.c **** 		}
3116:FreeRTOS/Source/tasks.c **** 	}
3117:FreeRTOS/Source/tasks.c **** 
3118:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:FreeRTOS/Source/tasks.c **** 
3120:FreeRTOS/Source/tasks.c **** /*
3121:FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:FreeRTOS/Source/tasks.c ****  * The Idle task.
3123:FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 58


3124:FreeRTOS/Source/tasks.c ****  *
3125:FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:FreeRTOS/Source/tasks.c ****  *
3128:FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:FreeRTOS/Source/tasks.c ****  *
3130:FreeRTOS/Source/tasks.c ****  */
3131:FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:FreeRTOS/Source/tasks.c **** {
3133:FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3135:FreeRTOS/Source/tasks.c **** 
3136:FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:FreeRTOS/Source/tasks.c **** 
3139:FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:FreeRTOS/Source/tasks.c **** 	{
3141:FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:FreeRTOS/Source/tasks.c **** 
3145:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:FreeRTOS/Source/tasks.c **** 		{
3147:FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:FreeRTOS/Source/tasks.c **** 			taskYIELD();
3152:FreeRTOS/Source/tasks.c **** 		}
3153:FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:FreeRTOS/Source/tasks.c **** 
3155:FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:FreeRTOS/Source/tasks.c **** 		{
3157:FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:FreeRTOS/Source/tasks.c **** 			timeslice.
3161:FreeRTOS/Source/tasks.c **** 
3162:FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:FreeRTOS/Source/tasks.c **** 			{
3168:FreeRTOS/Source/tasks.c **** 				taskYIELD();
3169:FreeRTOS/Source/tasks.c **** 			}
3170:FreeRTOS/Source/tasks.c **** 			else
3171:FreeRTOS/Source/tasks.c **** 			{
3172:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:FreeRTOS/Source/tasks.c **** 			}
3174:FreeRTOS/Source/tasks.c **** 		}
3175:FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:FreeRTOS/Source/tasks.c **** 
3177:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:FreeRTOS/Source/tasks.c **** 		{
3179:FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 59


3181:FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:FreeRTOS/Source/tasks.c **** 		}
3188:FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:FreeRTOS/Source/tasks.c **** 
3190:FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3193:FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:FreeRTOS/Source/tasks.c **** 		{
3196:FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:FreeRTOS/Source/tasks.c **** 
3198:FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:FreeRTOS/Source/tasks.c **** 			valid. */
3203:FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:FreeRTOS/Source/tasks.c **** 
3205:FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:FreeRTOS/Source/tasks.c **** 			{
3207:FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:FreeRTOS/Source/tasks.c **** 				{
3209:FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:FreeRTOS/Source/tasks.c **** 					be used. */
3212:FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:FreeRTOS/Source/tasks.c **** 
3215:FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:FreeRTOS/Source/tasks.c **** 					{
3217:FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:FreeRTOS/Source/tasks.c **** 					}
3221:FreeRTOS/Source/tasks.c **** 					else
3222:FreeRTOS/Source/tasks.c **** 					{
3223:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:FreeRTOS/Source/tasks.c **** 					}
3225:FreeRTOS/Source/tasks.c **** 				}
3226:FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:FreeRTOS/Source/tasks.c **** 			}
3228:FreeRTOS/Source/tasks.c **** 			else
3229:FreeRTOS/Source/tasks.c **** 			{
3230:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:FreeRTOS/Source/tasks.c **** 			}
3232:FreeRTOS/Source/tasks.c **** 		}
3233:FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:FreeRTOS/Source/tasks.c **** 	}
3235:FreeRTOS/Source/tasks.c **** }
3236:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3237:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 60


3238:FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:FreeRTOS/Source/tasks.c **** 
3240:FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:FreeRTOS/Source/tasks.c **** 	{
3242:FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:FreeRTOS/Source/tasks.c **** 
3246:FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:FreeRTOS/Source/tasks.c **** 		{
3248:FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3250:FreeRTOS/Source/tasks.c **** 		}
3251:FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:FreeRTOS/Source/tasks.c **** 		{
3253:FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:FreeRTOS/Source/tasks.c **** 		}
3256:FreeRTOS/Source/tasks.c **** 		else
3257:FreeRTOS/Source/tasks.c **** 		{
3258:FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:FreeRTOS/Source/tasks.c **** 			{
3264:FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:FreeRTOS/Source/tasks.c **** 			}
3266:FreeRTOS/Source/tasks.c **** 			else
3267:FreeRTOS/Source/tasks.c **** 			{
3268:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:FreeRTOS/Source/tasks.c **** 			}
3270:FreeRTOS/Source/tasks.c **** 		}
3271:FreeRTOS/Source/tasks.c **** 
3272:FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:FreeRTOS/Source/tasks.c **** 	}
3274:FreeRTOS/Source/tasks.c **** 
3275:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:FreeRTOS/Source/tasks.c **** 
3278:FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:FreeRTOS/Source/tasks.c **** 
3280:FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:FreeRTOS/Source/tasks.c **** 	{
3282:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:FreeRTOS/Source/tasks.c **** 
3284:FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:FreeRTOS/Source/tasks.c **** 		{
3286:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:FreeRTOS/Source/tasks.c **** 		}
3289:FreeRTOS/Source/tasks.c **** 	}
3290:FreeRTOS/Source/tasks.c **** 
3291:FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:FreeRTOS/Source/tasks.c **** 
3294:FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 61


3295:FreeRTOS/Source/tasks.c **** 
3296:FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:FreeRTOS/Source/tasks.c **** 	{
3298:FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3300:FreeRTOS/Source/tasks.c **** 
3301:FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:FreeRTOS/Source/tasks.c **** 		{
3303:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:FreeRTOS/Source/tasks.c **** 		}
3306:FreeRTOS/Source/tasks.c **** 		else
3307:FreeRTOS/Source/tasks.c **** 		{
3308:FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:FreeRTOS/Source/tasks.c **** 		}
3310:FreeRTOS/Source/tasks.c **** 
3311:FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:FreeRTOS/Source/tasks.c **** 	}
3313:FreeRTOS/Source/tasks.c **** 
3314:FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:FreeRTOS/Source/tasks.c **** 
3317:FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:FreeRTOS/Source/tasks.c **** 
3319:FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:FreeRTOS/Source/tasks.c **** 	{
3321:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:FreeRTOS/Source/tasks.c **** 
3323:FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:FreeRTOS/Source/tasks.c **** 
3327:FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:FreeRTOS/Source/tasks.c **** 	}
3329:FreeRTOS/Source/tasks.c **** 
3330:FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:FreeRTOS/Source/tasks.c **** 
3333:FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:FreeRTOS/Source/tasks.c **** {
3335:FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:FreeRTOS/Source/tasks.c **** 
3337:FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:FreeRTOS/Source/tasks.c **** 	{
3339:FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:FreeRTOS/Source/tasks.c **** 	}
3341:FreeRTOS/Source/tasks.c **** 
3342:FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:FreeRTOS/Source/tasks.c **** 
3346:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:FreeRTOS/Source/tasks.c **** 	{
3348:FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:FreeRTOS/Source/tasks.c **** 	}
3350:FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 62


3352:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:FreeRTOS/Source/tasks.c **** 	{
3354:FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:FreeRTOS/Source/tasks.c **** 	}
3356:FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:FreeRTOS/Source/tasks.c **** 
3358:FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:FreeRTOS/Source/tasks.c **** 	using list2. */
3360:FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:FreeRTOS/Source/tasks.c **** }
3363:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:FreeRTOS/Source/tasks.c **** 
3365:FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:FreeRTOS/Source/tasks.c **** {
3367:FreeRTOS/Source/tasks.c **** 
3368:FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:FreeRTOS/Source/tasks.c **** 
3370:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:FreeRTOS/Source/tasks.c **** 	{
3372:FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:FreeRTOS/Source/tasks.c **** 
3374:FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:FreeRTOS/Source/tasks.c **** 		{
3378:FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
3379:FreeRTOS/Source/tasks.c **** 			{
3380:FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:FreeRTOS/Source/tasks.c **** 			}
3382:FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
3383:FreeRTOS/Source/tasks.c **** 
3384:FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:FreeRTOS/Source/tasks.c **** 			{
3386:FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:FreeRTOS/Source/tasks.c **** 
3388:FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
3389:FreeRTOS/Source/tasks.c **** 				{
3390:FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:FreeRTOS/Source/tasks.c **** 				}
3395:FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
3396:FreeRTOS/Source/tasks.c **** 
3397:FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:FreeRTOS/Source/tasks.c **** 			}
3399:FreeRTOS/Source/tasks.c **** 			else
3400:FreeRTOS/Source/tasks.c **** 			{
3401:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:FreeRTOS/Source/tasks.c **** 			}
3403:FreeRTOS/Source/tasks.c **** 		}
3404:FreeRTOS/Source/tasks.c **** 	}
3405:FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:FreeRTOS/Source/tasks.c **** }
3407:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3408:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 63


3409:FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:FreeRTOS/Source/tasks.c **** 
3411:FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:FreeRTOS/Source/tasks.c **** 	{
3413:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3414:FreeRTOS/Source/tasks.c **** 
3415:FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:FreeRTOS/Source/tasks.c **** 
3418:FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:FreeRTOS/Source/tasks.c **** 
3424:FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:FreeRTOS/Source/tasks.c **** 		{
3426:FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:FreeRTOS/Source/tasks.c **** 			{
3431:FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3432:FreeRTOS/Source/tasks.c **** 				{
3433:FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:FreeRTOS/Source/tasks.c **** 					{
3435:FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:FreeRTOS/Source/tasks.c **** 					}
3437:FreeRTOS/Source/tasks.c **** 				}
3438:FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3439:FreeRTOS/Source/tasks.c **** 			}
3440:FreeRTOS/Source/tasks.c **** 		}
3441:FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:FreeRTOS/Source/tasks.c **** 
3443:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:FreeRTOS/Source/tasks.c **** 		{
3445:FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:FreeRTOS/Source/tasks.c **** 		}
3447:FreeRTOS/Source/tasks.c **** 		#else
3448:FreeRTOS/Source/tasks.c **** 		{
3449:FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:FreeRTOS/Source/tasks.c **** 		}
3451:FreeRTOS/Source/tasks.c **** 		#endif
3452:FreeRTOS/Source/tasks.c **** 
3453:FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:FreeRTOS/Source/tasks.c **** 		{
3455:FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:FreeRTOS/Source/tasks.c **** 		}
3457:FreeRTOS/Source/tasks.c **** 		#else
3458:FreeRTOS/Source/tasks.c **** 		{
3459:FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:FreeRTOS/Source/tasks.c **** 		}
3461:FreeRTOS/Source/tasks.c **** 		#endif
3462:FreeRTOS/Source/tasks.c **** 
3463:FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 64


3466:FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3467:FreeRTOS/Source/tasks.c **** 		{
3468:FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:FreeRTOS/Source/tasks.c **** 		}
3470:FreeRTOS/Source/tasks.c **** 		else
3471:FreeRTOS/Source/tasks.c **** 		{
3472:FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:FreeRTOS/Source/tasks.c **** 		}
3474:FreeRTOS/Source/tasks.c **** 
3475:FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:FreeRTOS/Source/tasks.c **** 		{
3479:FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:FreeRTOS/Source/tasks.c **** 			{
3481:FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:FreeRTOS/Source/tasks.c **** 			}
3483:FreeRTOS/Source/tasks.c **** 			#else
3484:FreeRTOS/Source/tasks.c **** 			{
3485:FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:FreeRTOS/Source/tasks.c **** 			}
3487:FreeRTOS/Source/tasks.c **** 			#endif
3488:FreeRTOS/Source/tasks.c **** 		}
3489:FreeRTOS/Source/tasks.c **** 		else
3490:FreeRTOS/Source/tasks.c **** 		{
3491:FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:FreeRTOS/Source/tasks.c **** 		}
3493:FreeRTOS/Source/tasks.c **** 	}
3494:FreeRTOS/Source/tasks.c **** 
3495:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:FreeRTOS/Source/tasks.c **** 
3498:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:FreeRTOS/Source/tasks.c **** 
3500:FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:FreeRTOS/Source/tasks.c **** 	{
3502:FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:FreeRTOS/Source/tasks.c **** 
3505:FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:FreeRTOS/Source/tasks.c **** 		{
3507:FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:FreeRTOS/Source/tasks.c **** 
3509:FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:FreeRTOS/Source/tasks.c **** 			do
3514:FreeRTOS/Source/tasks.c **** 			{
3515:FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:FreeRTOS/Source/tasks.c **** 				uxTask++;
3518:FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:FreeRTOS/Source/tasks.c **** 		}
3520:FreeRTOS/Source/tasks.c **** 		else
3521:FreeRTOS/Source/tasks.c **** 		{
3522:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 65


3523:FreeRTOS/Source/tasks.c **** 		}
3524:FreeRTOS/Source/tasks.c **** 
3525:FreeRTOS/Source/tasks.c **** 		return uxTask;
3526:FreeRTOS/Source/tasks.c **** 	}
3527:FreeRTOS/Source/tasks.c **** 
3528:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3530:FreeRTOS/Source/tasks.c **** 
3531:FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:FreeRTOS/Source/tasks.c **** 
3533:FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:FreeRTOS/Source/tasks.c **** 	{
3535:FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3536:FreeRTOS/Source/tasks.c **** 
3537:FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:FreeRTOS/Source/tasks.c **** 		{
3539:FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:FreeRTOS/Source/tasks.c **** 			ulCount++;
3541:FreeRTOS/Source/tasks.c **** 		}
3542:FreeRTOS/Source/tasks.c **** 
3543:FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:FreeRTOS/Source/tasks.c **** 
3545:FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:FreeRTOS/Source/tasks.c **** 	}
3547:FreeRTOS/Source/tasks.c **** 
3548:FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:FreeRTOS/Source/tasks.c **** 
3551:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:FreeRTOS/Source/tasks.c **** 
3553:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:FreeRTOS/Source/tasks.c **** 	{
3555:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:FreeRTOS/Source/tasks.c **** 
3559:FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:FreeRTOS/Source/tasks.c **** 
3561:FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:FreeRTOS/Source/tasks.c **** 		{
3563:FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:FreeRTOS/Source/tasks.c **** 		}
3565:FreeRTOS/Source/tasks.c **** 		#else
3566:FreeRTOS/Source/tasks.c **** 		{
3567:FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:FreeRTOS/Source/tasks.c **** 		}
3569:FreeRTOS/Source/tasks.c **** 		#endif
3570:FreeRTOS/Source/tasks.c **** 
3571:FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:FreeRTOS/Source/tasks.c **** 
3573:FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:FreeRTOS/Source/tasks.c **** 	}
3575:FreeRTOS/Source/tasks.c **** 
3576:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:FreeRTOS/Source/tasks.c **** 
3579:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 66


3580:FreeRTOS/Source/tasks.c **** 
3581:FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:FreeRTOS/Source/tasks.c **** 	{
3583:FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:FreeRTOS/Source/tasks.c **** 
3588:FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:FreeRTOS/Source/tasks.c **** 		{
3592:FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:FreeRTOS/Source/tasks.c **** 		}
3594:FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:FreeRTOS/Source/tasks.c **** 
3596:FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:FreeRTOS/Source/tasks.c **** 		{
3598:FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3602:FreeRTOS/Source/tasks.c **** 		}
3603:FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:FreeRTOS/Source/tasks.c **** 		{
3605:FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:FreeRTOS/Source/tasks.c **** 			memory. */
3608:FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:FreeRTOS/Source/tasks.c **** 			{
3610:FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:FreeRTOS/Source/tasks.c **** 			}
3615:FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:FreeRTOS/Source/tasks.c **** 			{
3617:FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3619:FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:FreeRTOS/Source/tasks.c **** 			}
3621:FreeRTOS/Source/tasks.c **** 			else
3622:FreeRTOS/Source/tasks.c **** 			{
3623:FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:FreeRTOS/Source/tasks.c **** 			}
3628:FreeRTOS/Source/tasks.c **** 		}
3629:FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:FreeRTOS/Source/tasks.c **** 	}
3631:FreeRTOS/Source/tasks.c **** 
3632:FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:FreeRTOS/Source/tasks.c **** 
3635:FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:FreeRTOS/Source/tasks.c **** {
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 67


 126              		.loc 1 3636 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
3637:FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:FreeRTOS/Source/tasks.c **** 
3639:FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 131              		.loc 1 3639 0
 132 0020 064B     		ldr	r3, .L16	@ tmp116,
 133 0022 9A6A     		ldr	r2, [r3, #40]	@ D.6595, pxDelayedTaskList
 134 0024 1268     		ldr	r2, [r2]	@ _3->uxNumberOfItems, _3->uxNumberOfItems
 135 0026 12B9     		cbnz	r2, .L14	@ _3->uxNumberOfItems,
3640:FreeRTOS/Source/tasks.c **** 	{
3641:FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 136              		.loc 1 3645 0
 137 0028 4FF0FF32 		mov	r2, #-1	@ tmp119,
 138 002c 03E0     		b	.L15	@
 139              	.L14:
 140              	.LBB38:
 141              	.LBB39:
3646:FreeRTOS/Source/tasks.c **** 	}
3647:FreeRTOS/Source/tasks.c **** 	else
3648:FreeRTOS/Source/tasks.c **** 	{
3649:FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 142              		.loc 1 3653 0
 143 002e 9A6A     		ldr	r2, [r3, #40]	@ D.6595, pxDelayedTaskList
 144              	.LVL5:
 145 0030 D268     		ldr	r2, [r2, #12]	@ _8->xListEnd.pxNext, _8->xListEnd.pxNext
 146              	.LVL6:
3654:FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 147              		.loc 1 3654 0
 148 0032 D268     		ldr	r2, [r2, #12]	@ _9->pvOwner, _9->pvOwner
 149              	.LVL7:
 150 0034 5268     		ldr	r2, [r2, #4]	@ D.6596, pxTCB_10->xStateListItem.xItemValue
 151              	.LVL8:
 152              	.L15:
 153 0036 DA62     		str	r2, [r3, #44]	@ D.6596, xNextTaskUnblockTime
 154 0038 7047     		bx	lr	@
 155              	.L17:
 156 003a 00BF     		.align	2
 157              	.L16:
 158 003c 00000000 		.word	.LANCHOR0
 159              	.LBE39:
 160              	.LBE38:
 161              		.cfi_endproc
 162              	.LFE39:
 163              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 164              		.align	1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 68


 165              		.thumb
 166              		.thumb_func
 167              		.type	prvAddCurrentTaskToDelayedList, %function
 168              	prvAddCurrentTaskToDelayedList:
 169              	.LFB51:
3655:FreeRTOS/Source/tasks.c **** 	}
3656:FreeRTOS/Source/tasks.c **** }
3657:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3658:FreeRTOS/Source/tasks.c **** 
3659:FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:FreeRTOS/Source/tasks.c **** 
3661:FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:FreeRTOS/Source/tasks.c **** 	{
3663:FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:FreeRTOS/Source/tasks.c **** 
3665:FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3669:FreeRTOS/Source/tasks.c **** 
3670:FreeRTOS/Source/tasks.c **** 		return xReturn;
3671:FreeRTOS/Source/tasks.c **** 	}
3672:FreeRTOS/Source/tasks.c **** 
3673:FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:FreeRTOS/Source/tasks.c **** 
3676:FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:FreeRTOS/Source/tasks.c **** 
3678:FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:FreeRTOS/Source/tasks.c **** 	{
3680:FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:FreeRTOS/Source/tasks.c **** 
3682:FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:FreeRTOS/Source/tasks.c **** 		{
3684:FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:FreeRTOS/Source/tasks.c **** 		}
3686:FreeRTOS/Source/tasks.c **** 		else
3687:FreeRTOS/Source/tasks.c **** 		{
3688:FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:FreeRTOS/Source/tasks.c **** 			{
3690:FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:FreeRTOS/Source/tasks.c **** 			}
3692:FreeRTOS/Source/tasks.c **** 			else
3693:FreeRTOS/Source/tasks.c **** 			{
3694:FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:FreeRTOS/Source/tasks.c **** 			}
3696:FreeRTOS/Source/tasks.c **** 		}
3697:FreeRTOS/Source/tasks.c **** 
3698:FreeRTOS/Source/tasks.c **** 		return xReturn;
3699:FreeRTOS/Source/tasks.c **** 	}
3700:FreeRTOS/Source/tasks.c **** 
3701:FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:FreeRTOS/Source/tasks.c **** 
3704:FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:FreeRTOS/Source/tasks.c **** 
3706:FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 69


3707:FreeRTOS/Source/tasks.c **** 	{
3708:FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:FreeRTOS/Source/tasks.c **** 
3710:FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3713:FreeRTOS/Source/tasks.c **** 		{
3714:FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:FreeRTOS/Source/tasks.c **** 			{
3719:FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3722:FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:FreeRTOS/Source/tasks.c **** 				{
3724:FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:FreeRTOS/Source/tasks.c **** 				}
3726:FreeRTOS/Source/tasks.c **** 				else
3727:FreeRTOS/Source/tasks.c **** 				{
3728:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:FreeRTOS/Source/tasks.c **** 				}
3730:FreeRTOS/Source/tasks.c **** 
3731:FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3733:FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:FreeRTOS/Source/tasks.c **** 				{
3735:FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:FreeRTOS/Source/tasks.c **** 					{
3737:FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:FreeRTOS/Source/tasks.c **** 					}
3739:FreeRTOS/Source/tasks.c **** 					else
3740:FreeRTOS/Source/tasks.c **** 					{
3741:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:FreeRTOS/Source/tasks.c **** 					}
3743:FreeRTOS/Source/tasks.c **** 
3744:FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:FreeRTOS/Source/tasks.c **** 				}
3748:FreeRTOS/Source/tasks.c **** 				else
3749:FreeRTOS/Source/tasks.c **** 				{
3750:FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:FreeRTOS/Source/tasks.c **** 				}
3753:FreeRTOS/Source/tasks.c **** 
3754:FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:FreeRTOS/Source/tasks.c **** 			}
3756:FreeRTOS/Source/tasks.c **** 			else
3757:FreeRTOS/Source/tasks.c **** 			{
3758:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:FreeRTOS/Source/tasks.c **** 			}
3760:FreeRTOS/Source/tasks.c **** 		}
3761:FreeRTOS/Source/tasks.c **** 		else
3762:FreeRTOS/Source/tasks.c **** 		{
3763:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 70


3764:FreeRTOS/Source/tasks.c **** 		}
3765:FreeRTOS/Source/tasks.c **** 	}
3766:FreeRTOS/Source/tasks.c **** 
3767:FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:FreeRTOS/Source/tasks.c **** 
3770:FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:FreeRTOS/Source/tasks.c **** 
3772:FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:FreeRTOS/Source/tasks.c **** 	{
3774:FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:FreeRTOS/Source/tasks.c **** 
3777:FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3778:FreeRTOS/Source/tasks.c **** 		{
3779:FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:FreeRTOS/Source/tasks.c **** 			be the running state task. */
3783:FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:FreeRTOS/Source/tasks.c **** 
3785:FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:FreeRTOS/Source/tasks.c **** 
3788:FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:FreeRTOS/Source/tasks.c **** 			task? */
3790:FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:FreeRTOS/Source/tasks.c **** 			{
3792:FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:FreeRTOS/Source/tasks.c **** 				{
3795:FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:FreeRTOS/Source/tasks.c **** 					{
3802:FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:FreeRTOS/Source/tasks.c **** 					}
3804:FreeRTOS/Source/tasks.c **** 					else
3805:FreeRTOS/Source/tasks.c **** 					{
3806:FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:FreeRTOS/Source/tasks.c **** 					}
3808:FreeRTOS/Source/tasks.c **** 
3809:FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:FreeRTOS/Source/tasks.c **** 					new	ready list. */
3811:FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:FreeRTOS/Source/tasks.c **** 
3814:FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:FreeRTOS/Source/tasks.c **** 
3820:FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 71


3821:FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3824:FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3829:FreeRTOS/Source/tasks.c **** 				}
3830:FreeRTOS/Source/tasks.c **** 				else
3831:FreeRTOS/Source/tasks.c **** 				{
3832:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:FreeRTOS/Source/tasks.c **** 				}
3834:FreeRTOS/Source/tasks.c **** 			}
3835:FreeRTOS/Source/tasks.c **** 			else
3836:FreeRTOS/Source/tasks.c **** 			{
3837:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:FreeRTOS/Source/tasks.c **** 			}
3839:FreeRTOS/Source/tasks.c **** 		}
3840:FreeRTOS/Source/tasks.c **** 		else
3841:FreeRTOS/Source/tasks.c **** 		{
3842:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:FreeRTOS/Source/tasks.c **** 		}
3844:FreeRTOS/Source/tasks.c **** 
3845:FreeRTOS/Source/tasks.c **** 		return xReturn;
3846:FreeRTOS/Source/tasks.c **** 	}
3847:FreeRTOS/Source/tasks.c **** 
3848:FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:FreeRTOS/Source/tasks.c **** 
3851:FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:FreeRTOS/Source/tasks.c **** 
3853:FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:FreeRTOS/Source/tasks.c **** 	{
3855:FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:FreeRTOS/Source/tasks.c **** 
3857:FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:FreeRTOS/Source/tasks.c **** 		{
3859:FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:FreeRTOS/Source/tasks.c **** 
3861:FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:FreeRTOS/Source/tasks.c **** 			critical section. */
3867:FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:FreeRTOS/Source/tasks.c **** 			{
3869:FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:FreeRTOS/Source/tasks.c **** 			}
3871:FreeRTOS/Source/tasks.c **** 		}
3872:FreeRTOS/Source/tasks.c **** 		else
3873:FreeRTOS/Source/tasks.c **** 		{
3874:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:FreeRTOS/Source/tasks.c **** 		}
3876:FreeRTOS/Source/tasks.c **** 	}
3877:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 72


3878:FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:FreeRTOS/Source/tasks.c **** 
3881:FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:FreeRTOS/Source/tasks.c **** 
3883:FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:FreeRTOS/Source/tasks.c **** 	{
3885:FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:FreeRTOS/Source/tasks.c **** 		{
3887:FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:FreeRTOS/Source/tasks.c **** 			{
3889:FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:FreeRTOS/Source/tasks.c **** 
3891:FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:FreeRTOS/Source/tasks.c **** 				{
3893:FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:FreeRTOS/Source/tasks.c **** 				}
3895:FreeRTOS/Source/tasks.c **** 				else
3896:FreeRTOS/Source/tasks.c **** 				{
3897:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:FreeRTOS/Source/tasks.c **** 				}
3899:FreeRTOS/Source/tasks.c **** 			}
3900:FreeRTOS/Source/tasks.c **** 			else
3901:FreeRTOS/Source/tasks.c **** 			{
3902:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:FreeRTOS/Source/tasks.c **** 			}
3904:FreeRTOS/Source/tasks.c **** 		}
3905:FreeRTOS/Source/tasks.c **** 		else
3906:FreeRTOS/Source/tasks.c **** 		{
3907:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:FreeRTOS/Source/tasks.c **** 		}
3909:FreeRTOS/Source/tasks.c **** 	}
3910:FreeRTOS/Source/tasks.c **** 
3911:FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:FreeRTOS/Source/tasks.c **** 
3914:FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:FreeRTOS/Source/tasks.c **** 
3916:FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:FreeRTOS/Source/tasks.c **** 	{
3918:FreeRTOS/Source/tasks.c **** 	size_t x;
3919:FreeRTOS/Source/tasks.c **** 
3920:FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:FreeRTOS/Source/tasks.c **** 
3923:FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:FreeRTOS/Source/tasks.c **** 		printed out. */
3925:FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:FreeRTOS/Source/tasks.c **** 		{
3927:FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:FreeRTOS/Source/tasks.c **** 		}
3929:FreeRTOS/Source/tasks.c **** 
3930:FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:FreeRTOS/Source/tasks.c **** 
3933:FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 73


3935:FreeRTOS/Source/tasks.c **** 	}
3936:FreeRTOS/Source/tasks.c **** 
3937:FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:FreeRTOS/Source/tasks.c **** 
3940:FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:FreeRTOS/Source/tasks.c **** 
3942:FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:FreeRTOS/Source/tasks.c **** 	{
3944:FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:FreeRTOS/Source/tasks.c **** 
3948:FreeRTOS/Source/tasks.c **** 		/*
3949:FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3950:FreeRTOS/Source/tasks.c **** 		 *
3951:FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:FreeRTOS/Source/tasks.c **** 		 * scheduler.
3954:FreeRTOS/Source/tasks.c **** 		 *
3955:FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:FreeRTOS/Source/tasks.c **** 		 *
3959:FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3966:FreeRTOS/Source/tasks.c **** 		 *
3967:FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:FreeRTOS/Source/tasks.c **** 		 */
3971:FreeRTOS/Source/tasks.c **** 
3972:FreeRTOS/Source/tasks.c **** 
3973:FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:FreeRTOS/Source/tasks.c **** 
3976:FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:FreeRTOS/Source/tasks.c **** 
3980:FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:FreeRTOS/Source/tasks.c **** 
3985:FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:FreeRTOS/Source/tasks.c **** 		{
3987:FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:FreeRTOS/Source/tasks.c **** 
3990:FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 74


3992:FreeRTOS/Source/tasks.c **** 			{
3993:FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:FreeRTOS/Source/tasks.c **** 				{
3995:FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:FreeRTOS/Source/tasks.c **** 										break;
3997:FreeRTOS/Source/tasks.c **** 
3998:FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:FreeRTOS/Source/tasks.c **** 										break;
4000:FreeRTOS/Source/tasks.c **** 
4001:FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:FreeRTOS/Source/tasks.c **** 										break;
4003:FreeRTOS/Source/tasks.c **** 
4004:FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:FreeRTOS/Source/tasks.c **** 										break;
4006:FreeRTOS/Source/tasks.c **** 
4007:FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:FreeRTOS/Source/tasks.c **** 										break;
4011:FreeRTOS/Source/tasks.c **** 				}
4012:FreeRTOS/Source/tasks.c **** 
4013:FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:FreeRTOS/Source/tasks.c **** 
4017:FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:FreeRTOS/Source/tasks.c **** 			}
4021:FreeRTOS/Source/tasks.c **** 
4022:FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:FreeRTOS/Source/tasks.c **** 		}
4026:FreeRTOS/Source/tasks.c **** 		else
4027:FreeRTOS/Source/tasks.c **** 		{
4028:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:FreeRTOS/Source/tasks.c **** 		}
4030:FreeRTOS/Source/tasks.c **** 	}
4031:FreeRTOS/Source/tasks.c **** 
4032:FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:FreeRTOS/Source/tasks.c **** 
4035:FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:FreeRTOS/Source/tasks.c **** 
4037:FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:FreeRTOS/Source/tasks.c **** 	{
4039:FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:FreeRTOS/Source/tasks.c **** 
4043:FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:FreeRTOS/Source/tasks.c **** 		{
4045:FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:FreeRTOS/Source/tasks.c **** 		}
4047:FreeRTOS/Source/tasks.c **** 		#endif
4048:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 75


4049:FreeRTOS/Source/tasks.c **** 		/*
4050:FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:FreeRTOS/Source/tasks.c **** 		 *
4052:FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:FreeRTOS/Source/tasks.c **** 		 *
4056:FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:FreeRTOS/Source/tasks.c **** 		 *
4061:FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:FreeRTOS/Source/tasks.c **** 		 *
4069:FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:FreeRTOS/Source/tasks.c **** 		 */
4073:FreeRTOS/Source/tasks.c **** 
4074:FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:FreeRTOS/Source/tasks.c **** 
4077:FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:FreeRTOS/Source/tasks.c **** 		function is executing. */
4079:FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:FreeRTOS/Source/tasks.c **** 
4081:FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:FreeRTOS/Source/tasks.c **** 
4086:FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:FreeRTOS/Source/tasks.c **** 		{
4088:FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:FreeRTOS/Source/tasks.c **** 
4091:FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:FreeRTOS/Source/tasks.c **** 
4094:FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:FreeRTOS/Source/tasks.c **** 			{
4097:FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:FreeRTOS/Source/tasks.c **** 				{
4100:FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:FreeRTOS/Source/tasks.c **** 
4105:FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 76


4106:FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:FreeRTOS/Source/tasks.c **** 					easily. */
4108:FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:FreeRTOS/Source/tasks.c **** 
4110:FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:FreeRTOS/Source/tasks.c **** 					{
4112:FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:FreeRTOS/Source/tasks.c **** 						{
4114:FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:FreeRTOS/Source/tasks.c **** 						}
4116:FreeRTOS/Source/tasks.c **** 						#else
4117:FreeRTOS/Source/tasks.c **** 						{
4118:FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:FreeRTOS/Source/tasks.c **** 						}
4122:FreeRTOS/Source/tasks.c **** 						#endif
4123:FreeRTOS/Source/tasks.c **** 					}
4124:FreeRTOS/Source/tasks.c **** 					else
4125:FreeRTOS/Source/tasks.c **** 					{
4126:FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:FreeRTOS/Source/tasks.c **** 						{
4130:FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:FreeRTOS/Source/tasks.c **** 						}
4132:FreeRTOS/Source/tasks.c **** 						#else
4133:FreeRTOS/Source/tasks.c **** 						{
4134:FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4136:FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:FreeRTOS/Source/tasks.c **** 						}
4138:FreeRTOS/Source/tasks.c **** 						#endif
4139:FreeRTOS/Source/tasks.c **** 					}
4140:FreeRTOS/Source/tasks.c **** 
4141:FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:FreeRTOS/Source/tasks.c **** 				}
4143:FreeRTOS/Source/tasks.c **** 			}
4144:FreeRTOS/Source/tasks.c **** 			else
4145:FreeRTOS/Source/tasks.c **** 			{
4146:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:FreeRTOS/Source/tasks.c **** 			}
4148:FreeRTOS/Source/tasks.c **** 
4149:FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:FreeRTOS/Source/tasks.c **** 		}
4153:FreeRTOS/Source/tasks.c **** 		else
4154:FreeRTOS/Source/tasks.c **** 		{
4155:FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:FreeRTOS/Source/tasks.c **** 		}
4157:FreeRTOS/Source/tasks.c **** 	}
4158:FreeRTOS/Source/tasks.c **** 
4159:FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:FreeRTOS/Source/tasks.c **** 
4162:FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 77


4163:FreeRTOS/Source/tasks.c **** {
4164:FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:FreeRTOS/Source/tasks.c **** 
4166:FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:FreeRTOS/Source/tasks.c **** 
4168:FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:FreeRTOS/Source/tasks.c **** 
4172:FreeRTOS/Source/tasks.c **** 	return uxReturn;
4173:FreeRTOS/Source/tasks.c **** }
4174:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:FreeRTOS/Source/tasks.c **** 
4176:FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:FreeRTOS/Source/tasks.c **** 
4178:FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:FreeRTOS/Source/tasks.c **** 	{
4180:FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:FreeRTOS/Source/tasks.c **** 		{
4184:FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:FreeRTOS/Source/tasks.c **** 		}
4186:FreeRTOS/Source/tasks.c **** 
4187:FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4188:FreeRTOS/Source/tasks.c **** 	}
4189:FreeRTOS/Source/tasks.c **** 
4190:FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:FreeRTOS/Source/tasks.c **** 
4193:FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:FreeRTOS/Source/tasks.c **** 
4195:FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:FreeRTOS/Source/tasks.c **** 	{
4197:FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:FreeRTOS/Source/tasks.c **** 
4199:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4200:FreeRTOS/Source/tasks.c **** 		{
4201:FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:FreeRTOS/Source/tasks.c **** 			{
4204:FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:FreeRTOS/Source/tasks.c **** 
4207:FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:FreeRTOS/Source/tasks.c **** 				{
4209:FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:FreeRTOS/Source/tasks.c **** 
4212:FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4217:FreeRTOS/Source/tasks.c **** 				}
4218:FreeRTOS/Source/tasks.c **** 				else
4219:FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 78


4220:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:FreeRTOS/Source/tasks.c **** 				}
4222:FreeRTOS/Source/tasks.c **** 			}
4223:FreeRTOS/Source/tasks.c **** 			else
4224:FreeRTOS/Source/tasks.c **** 			{
4225:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:FreeRTOS/Source/tasks.c **** 			}
4227:FreeRTOS/Source/tasks.c **** 		}
4228:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4229:FreeRTOS/Source/tasks.c **** 
4230:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4231:FreeRTOS/Source/tasks.c **** 		{
4232:FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:FreeRTOS/Source/tasks.c **** 
4235:FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4236:FreeRTOS/Source/tasks.c **** 			{
4237:FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:FreeRTOS/Source/tasks.c **** 				{
4239:FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:FreeRTOS/Source/tasks.c **** 				}
4241:FreeRTOS/Source/tasks.c **** 				else
4242:FreeRTOS/Source/tasks.c **** 				{
4243:FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:FreeRTOS/Source/tasks.c **** 				}
4245:FreeRTOS/Source/tasks.c **** 			}
4246:FreeRTOS/Source/tasks.c **** 			else
4247:FreeRTOS/Source/tasks.c **** 			{
4248:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:FreeRTOS/Source/tasks.c **** 			}
4250:FreeRTOS/Source/tasks.c **** 
4251:FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:FreeRTOS/Source/tasks.c **** 		}
4253:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4254:FreeRTOS/Source/tasks.c **** 
4255:FreeRTOS/Source/tasks.c **** 		return ulReturn;
4256:FreeRTOS/Source/tasks.c **** 	}
4257:FreeRTOS/Source/tasks.c **** 
4258:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:FreeRTOS/Source/tasks.c **** 
4261:FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:FreeRTOS/Source/tasks.c **** 
4263:FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:FreeRTOS/Source/tasks.c **** 	{
4265:FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:FreeRTOS/Source/tasks.c **** 
4267:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4268:FreeRTOS/Source/tasks.c **** 		{
4269:FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:FreeRTOS/Source/tasks.c **** 			{
4272:FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 79


4277:FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:FreeRTOS/Source/tasks.c **** 
4280:FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:FreeRTOS/Source/tasks.c **** 				{
4282:FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:FreeRTOS/Source/tasks.c **** 
4285:FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4290:FreeRTOS/Source/tasks.c **** 				}
4291:FreeRTOS/Source/tasks.c **** 				else
4292:FreeRTOS/Source/tasks.c **** 				{
4293:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:FreeRTOS/Source/tasks.c **** 				}
4295:FreeRTOS/Source/tasks.c **** 			}
4296:FreeRTOS/Source/tasks.c **** 			else
4297:FreeRTOS/Source/tasks.c **** 			{
4298:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:FreeRTOS/Source/tasks.c **** 			}
4300:FreeRTOS/Source/tasks.c **** 		}
4301:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4302:FreeRTOS/Source/tasks.c **** 
4303:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4304:FreeRTOS/Source/tasks.c **** 		{
4305:FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:FreeRTOS/Source/tasks.c **** 
4307:FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4308:FreeRTOS/Source/tasks.c **** 			{
4309:FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:FreeRTOS/Source/tasks.c **** 				have changed. */
4311:FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:FreeRTOS/Source/tasks.c **** 			}
4313:FreeRTOS/Source/tasks.c **** 
4314:FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:FreeRTOS/Source/tasks.c **** 			{
4320:FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4322:FreeRTOS/Source/tasks.c **** 			}
4323:FreeRTOS/Source/tasks.c **** 			else
4324:FreeRTOS/Source/tasks.c **** 			{
4325:FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4329:FreeRTOS/Source/tasks.c **** 			}
4330:FreeRTOS/Source/tasks.c **** 
4331:FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:FreeRTOS/Source/tasks.c **** 		}
4333:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 80


4334:FreeRTOS/Source/tasks.c **** 
4335:FreeRTOS/Source/tasks.c **** 		return xReturn;
4336:FreeRTOS/Source/tasks.c **** 	}
4337:FreeRTOS/Source/tasks.c **** 
4338:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:FreeRTOS/Source/tasks.c **** 
4341:FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:FreeRTOS/Source/tasks.c **** 
4343:FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:FreeRTOS/Source/tasks.c **** 	{
4345:FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:FreeRTOS/Source/tasks.c **** 
4349:FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4350:FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:FreeRTOS/Source/tasks.c **** 
4352:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4353:FreeRTOS/Source/tasks.c **** 		{
4354:FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:FreeRTOS/Source/tasks.c **** 			{
4356:FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:FreeRTOS/Source/tasks.c **** 			}
4358:FreeRTOS/Source/tasks.c **** 
4359:FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:FreeRTOS/Source/tasks.c **** 
4361:FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:FreeRTOS/Source/tasks.c **** 
4363:FreeRTOS/Source/tasks.c **** 			switch( eAction )
4364:FreeRTOS/Source/tasks.c **** 			{
4365:FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:FreeRTOS/Source/tasks.c **** 					break;
4368:FreeRTOS/Source/tasks.c **** 
4369:FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:FreeRTOS/Source/tasks.c **** 					break;
4372:FreeRTOS/Source/tasks.c **** 
4373:FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:FreeRTOS/Source/tasks.c **** 					break;
4376:FreeRTOS/Source/tasks.c **** 
4377:FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:FreeRTOS/Source/tasks.c **** 					{
4380:FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:FreeRTOS/Source/tasks.c **** 					}
4382:FreeRTOS/Source/tasks.c **** 					else
4383:FreeRTOS/Source/tasks.c **** 					{
4384:FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:FreeRTOS/Source/tasks.c **** 					}
4387:FreeRTOS/Source/tasks.c **** 					break;
4388:FreeRTOS/Source/tasks.c **** 
4389:FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 81


4391:FreeRTOS/Source/tasks.c **** 					updated. */
4392:FreeRTOS/Source/tasks.c **** 					break;
4393:FreeRTOS/Source/tasks.c **** 			}
4394:FreeRTOS/Source/tasks.c **** 
4395:FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:FreeRTOS/Source/tasks.c **** 
4397:FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4399:FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:FreeRTOS/Source/tasks.c **** 			{
4401:FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:FreeRTOS/Source/tasks.c **** 
4404:FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:FreeRTOS/Source/tasks.c **** 
4407:FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:FreeRTOS/Source/tasks.c **** 				{
4409:FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4419:FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:FreeRTOS/Source/tasks.c **** 				}
4421:FreeRTOS/Source/tasks.c **** 				#endif
4422:FreeRTOS/Source/tasks.c **** 
4423:FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:FreeRTOS/Source/tasks.c **** 				{
4425:FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:FreeRTOS/Source/tasks.c **** 				}
4429:FreeRTOS/Source/tasks.c **** 				else
4430:FreeRTOS/Source/tasks.c **** 				{
4431:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:FreeRTOS/Source/tasks.c **** 				}
4433:FreeRTOS/Source/tasks.c **** 			}
4434:FreeRTOS/Source/tasks.c **** 			else
4435:FreeRTOS/Source/tasks.c **** 			{
4436:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:FreeRTOS/Source/tasks.c **** 			}
4438:FreeRTOS/Source/tasks.c **** 		}
4439:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4440:FreeRTOS/Source/tasks.c **** 
4441:FreeRTOS/Source/tasks.c **** 		return xReturn;
4442:FreeRTOS/Source/tasks.c **** 	}
4443:FreeRTOS/Source/tasks.c **** 
4444:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:FreeRTOS/Source/tasks.c **** 
4447:FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 82


4448:FreeRTOS/Source/tasks.c **** 
4449:FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:FreeRTOS/Source/tasks.c **** 	{
4451:FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:FreeRTOS/Source/tasks.c **** 
4456:FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4457:FreeRTOS/Source/tasks.c **** 
4458:FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:FreeRTOS/Source/tasks.c **** 
4476:FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:FreeRTOS/Source/tasks.c **** 
4478:FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:FreeRTOS/Source/tasks.c **** 		{
4480:FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:FreeRTOS/Source/tasks.c **** 			{
4482:FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:FreeRTOS/Source/tasks.c **** 			}
4484:FreeRTOS/Source/tasks.c **** 
4485:FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:FreeRTOS/Source/tasks.c **** 
4488:FreeRTOS/Source/tasks.c **** 			switch( eAction )
4489:FreeRTOS/Source/tasks.c **** 			{
4490:FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:FreeRTOS/Source/tasks.c **** 					break;
4493:FreeRTOS/Source/tasks.c **** 
4494:FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4495:FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:FreeRTOS/Source/tasks.c **** 					break;
4497:FreeRTOS/Source/tasks.c **** 
4498:FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:FreeRTOS/Source/tasks.c **** 					break;
4501:FreeRTOS/Source/tasks.c **** 
4502:FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 83


4505:FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:FreeRTOS/Source/tasks.c **** 					}
4507:FreeRTOS/Source/tasks.c **** 					else
4508:FreeRTOS/Source/tasks.c **** 					{
4509:FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:FreeRTOS/Source/tasks.c **** 					}
4512:FreeRTOS/Source/tasks.c **** 					break;
4513:FreeRTOS/Source/tasks.c **** 
4514:FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:FreeRTOS/Source/tasks.c **** 					updated. */
4517:FreeRTOS/Source/tasks.c **** 					break;
4518:FreeRTOS/Source/tasks.c **** 			}
4519:FreeRTOS/Source/tasks.c **** 
4520:FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:FreeRTOS/Source/tasks.c **** 
4522:FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4524:FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:FreeRTOS/Source/tasks.c **** 			{
4526:FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:FreeRTOS/Source/tasks.c **** 
4529:FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:FreeRTOS/Source/tasks.c **** 				{
4531:FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:FreeRTOS/Source/tasks.c **** 				}
4534:FreeRTOS/Source/tasks.c **** 				else
4535:FreeRTOS/Source/tasks.c **** 				{
4536:FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:FreeRTOS/Source/tasks.c **** 				}
4540:FreeRTOS/Source/tasks.c **** 
4541:FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:FreeRTOS/Source/tasks.c **** 				{
4543:FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:FreeRTOS/Source/tasks.c **** 					{
4547:FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:FreeRTOS/Source/tasks.c **** 					}
4549:FreeRTOS/Source/tasks.c **** 					else
4550:FreeRTOS/Source/tasks.c **** 					{
4551:FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4554:FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4555:FreeRTOS/Source/tasks.c **** 					}
4556:FreeRTOS/Source/tasks.c **** 				}
4557:FreeRTOS/Source/tasks.c **** 				else
4558:FreeRTOS/Source/tasks.c **** 				{
4559:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:FreeRTOS/Source/tasks.c **** 				}
4561:FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 84


4562:FreeRTOS/Source/tasks.c **** 		}
4563:FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:FreeRTOS/Source/tasks.c **** 
4565:FreeRTOS/Source/tasks.c **** 		return xReturn;
4566:FreeRTOS/Source/tasks.c **** 	}
4567:FreeRTOS/Source/tasks.c **** 
4568:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4570:FreeRTOS/Source/tasks.c **** 
4571:FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:FreeRTOS/Source/tasks.c **** 
4573:FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:FreeRTOS/Source/tasks.c **** 	{
4575:FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:FreeRTOS/Source/tasks.c **** 
4579:FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4580:FreeRTOS/Source/tasks.c **** 
4581:FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:FreeRTOS/Source/tasks.c **** 
4599:FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:FreeRTOS/Source/tasks.c **** 
4601:FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:FreeRTOS/Source/tasks.c **** 		{
4603:FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:FreeRTOS/Source/tasks.c **** 
4606:FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:FreeRTOS/Source/tasks.c **** 
4610:FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:FreeRTOS/Source/tasks.c **** 
4612:FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:FreeRTOS/Source/tasks.c **** 			{
4616:FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 85


4619:FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:FreeRTOS/Source/tasks.c **** 				{
4621:FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:FreeRTOS/Source/tasks.c **** 				}
4624:FreeRTOS/Source/tasks.c **** 				else
4625:FreeRTOS/Source/tasks.c **** 				{
4626:FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:FreeRTOS/Source/tasks.c **** 				}
4630:FreeRTOS/Source/tasks.c **** 
4631:FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:FreeRTOS/Source/tasks.c **** 				{
4633:FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:FreeRTOS/Source/tasks.c **** 					{
4637:FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:FreeRTOS/Source/tasks.c **** 					}
4639:FreeRTOS/Source/tasks.c **** 					else
4640:FreeRTOS/Source/tasks.c **** 					{
4641:FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4645:FreeRTOS/Source/tasks.c **** 					}
4646:FreeRTOS/Source/tasks.c **** 				}
4647:FreeRTOS/Source/tasks.c **** 				else
4648:FreeRTOS/Source/tasks.c **** 				{
4649:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:FreeRTOS/Source/tasks.c **** 				}
4651:FreeRTOS/Source/tasks.c **** 			}
4652:FreeRTOS/Source/tasks.c **** 		}
4653:FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:FreeRTOS/Source/tasks.c **** 	}
4655:FreeRTOS/Source/tasks.c **** 
4656:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:FreeRTOS/Source/tasks.c **** 
4658:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4659:FreeRTOS/Source/tasks.c **** 
4660:FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:FreeRTOS/Source/tasks.c **** 
4662:FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:FreeRTOS/Source/tasks.c **** 	{
4664:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4666:FreeRTOS/Source/tasks.c **** 
4667:FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:FreeRTOS/Source/tasks.c **** 
4671:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4672:FreeRTOS/Source/tasks.c **** 		{
4673:FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:FreeRTOS/Source/tasks.c **** 			{
4675:FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 86


4676:FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4677:FreeRTOS/Source/tasks.c **** 			}
4678:FreeRTOS/Source/tasks.c **** 			else
4679:FreeRTOS/Source/tasks.c **** 			{
4680:FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4681:FreeRTOS/Source/tasks.c **** 			}
4682:FreeRTOS/Source/tasks.c **** 		}
4683:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4684:FreeRTOS/Source/tasks.c **** 
4685:FreeRTOS/Source/tasks.c **** 		return xReturn;
4686:FreeRTOS/Source/tasks.c **** 	}
4687:FreeRTOS/Source/tasks.c **** 
4688:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:FreeRTOS/Source/tasks.c **** 
4691:FreeRTOS/Source/tasks.c **** 
4692:FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:FreeRTOS/Source/tasks.c **** {
 170              		.loc 1 4693 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              	.LVL9:
 175 0040 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 176              	.LCFI0:
 177              		.cfi_def_cfa_offset 24
 178              		.cfi_offset 3, -24
 179              		.cfi_offset 4, -20
 180              		.cfi_offset 5, -16
 181              		.cfi_offset 6, -12
 182              		.cfi_offset 7, -8
 183              		.cfi_offset 14, -4
4694:FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4695:FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 184              		.loc 1 4695 0
 185 0042 194C     		ldr	r4, .L26	@ tmp134,
4693:FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
 186              		.loc 1 4693 0
 187 0044 0546     		mov	r5, r0	@ xTicksToWait, xTicksToWait
 188              		.loc 1 4695 0
 189 0046 266B     		ldr	r6, [r4, #48]	@ xConstTickCount, xTickCount
 190              	.LVL10:
4696:FreeRTOS/Source/tasks.c **** 
4697:FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:FreeRTOS/Source/tasks.c **** 	{
4699:FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:FreeRTOS/Source/tasks.c **** 	}
4704:FreeRTOS/Source/tasks.c **** 	#endif
4705:FreeRTOS/Source/tasks.c **** 
4706:FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4708:FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 191              		.loc 1 4708 0
 192 0048 606B     		ldr	r0, [r4, #52]	@ D.6604, pxCurrentTCB
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 87


 193              	.LVL11:
4693:FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
 194              		.loc 1 4693 0
 195 004a 0F46     		mov	r7, r1	@ xCanBlockIndefinitely, xCanBlockIndefinitely
 196              		.loc 1 4708 0
 197 004c 0430     		adds	r0, r0, #4	@, D.6604,
 198 004e FFF7FEFF 		bl	uxListRemove	@
 199              	.LVL12:
 200 0052 2346     		mov	r3, r4	@ tmp156, tmp134
 201 0054 38B9     		cbnz	r0, .L19	@,
4709:FreeRTOS/Source/tasks.c **** 	{
4710:FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 202              		.loc 1 4712 0
 203 0056 626B     		ldr	r2, [r4, #52]	@ D.6604, pxCurrentTCB
 204 0058 A06B     		ldr	r0, [r4, #56]	@ D.6606, uxTopReadyPriority
 205 005a D16A     		ldr	r1, [r2, #44]	@ _8->uxPriority, _8->uxPriority
 206 005c 0122     		movs	r2, #1	@ tmp140,
 207 005e 8A40     		lsls	r2, r2, r1	@ D.6606, tmp140, _8->uxPriority
 208 0060 20EA0202 		bic	r2, r0, r2	@ D.6606, D.6606, D.6606
 209 0064 A263     		str	r2, [r4, #56]	@ D.6606, uxTopReadyPriority
 210              	.L19:
4713:FreeRTOS/Source/tasks.c **** 	}
4714:FreeRTOS/Source/tasks.c **** 	else
4715:FreeRTOS/Source/tasks.c **** 	{
4716:FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:FreeRTOS/Source/tasks.c **** 	}
4718:FreeRTOS/Source/tasks.c **** 
4719:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:FreeRTOS/Source/tasks.c **** 	{
4721:FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 211              		.loc 1 4721 0
 212 0066 6A1C     		adds	r2, r5, #1	@, xTicksToWait,
 213 0068 07D1     		bne	.L20	@,
 214              		.loc 1 4721 0 is_stmt 0 discriminator 1
 215 006a 37B1     		cbz	r7, .L20	@ xCanBlockIndefinitely,
4722:FreeRTOS/Source/tasks.c **** 		{
4723:FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 216              		.loc 1 4726 0 is_stmt 1
 217 006c 596B     		ldr	r1, [r3, #52]	@ D.6604, pxCurrentTCB
 218 006e 0E48     		ldr	r0, .L26	@,
 219 0070 0431     		adds	r1, r1, #4	@, D.6604,
4727:FreeRTOS/Source/tasks.c **** 		}
4728:FreeRTOS/Source/tasks.c **** 		else
4729:FreeRTOS/Source/tasks.c **** 		{
4730:FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
4734:FreeRTOS/Source/tasks.c **** 
4735:FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4737:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 88


4738:FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
4739:FreeRTOS/Source/tasks.c **** 			{
4740:FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:FreeRTOS/Source/tasks.c **** 				list. */
4742:FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:FreeRTOS/Source/tasks.c **** 			}
4744:FreeRTOS/Source/tasks.c **** 			else
4745:FreeRTOS/Source/tasks.c **** 			{
4746:FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:FreeRTOS/Source/tasks.c **** 				is used. */
4748:FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4749:FreeRTOS/Source/tasks.c **** 
4750:FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4753:FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
4754:FreeRTOS/Source/tasks.c **** 				{
4755:FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
4756:FreeRTOS/Source/tasks.c **** 				}
4757:FreeRTOS/Source/tasks.c **** 				else
4758:FreeRTOS/Source/tasks.c **** 				{
4759:FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:FreeRTOS/Source/tasks.c **** 				}
4761:FreeRTOS/Source/tasks.c **** 			}
4762:FreeRTOS/Source/tasks.c **** 		}
4763:FreeRTOS/Source/tasks.c **** 	}
4764:FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:FreeRTOS/Source/tasks.c **** 	{
4766:FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4769:FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:FreeRTOS/Source/tasks.c **** 
4771:FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:FreeRTOS/Source/tasks.c **** 
4774:FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:FreeRTOS/Source/tasks.c **** 		{
4776:FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:FreeRTOS/Source/tasks.c **** 		}
4779:FreeRTOS/Source/tasks.c **** 		else
4780:FreeRTOS/Source/tasks.c **** 		{
4781:FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:FreeRTOS/Source/tasks.c **** 
4784:FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:FreeRTOS/Source/tasks.c **** 			too. */
4787:FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:FreeRTOS/Source/tasks.c **** 			{
4789:FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:FreeRTOS/Source/tasks.c **** 			}
4791:FreeRTOS/Source/tasks.c **** 			else
4792:FreeRTOS/Source/tasks.c **** 			{
4793:FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 89


4795:FreeRTOS/Source/tasks.c **** 		}
4796:FreeRTOS/Source/tasks.c **** 
4797:FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:FreeRTOS/Source/tasks.c **** 	}
4800:FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:FreeRTOS/Source/tasks.c **** }
 220              		.loc 1 4801 0
 221 0072 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}	@
 222              	.LCFI1:
 223              		.cfi_remember_state
 224              		.cfi_restore 14
 225              		.cfi_restore 7
 226              		.cfi_restore 6
 227              		.cfi_restore 5
 228              		.cfi_restore 4
 229              		.cfi_restore 3
 230              		.cfi_def_cfa_offset 0
 231              	.LVL13:
4726:FreeRTOS/Source/tasks.c **** 		}
 232              		.loc 1 4726 0
 233 0076 FFF7FEBF 		b	vListInsertEnd	@
 234              	.LVL14:
 235              	.L20:
 236              	.LCFI2:
 237              		.cfi_restore_state
4733:FreeRTOS/Source/tasks.c **** 
 238              		.loc 1 4733 0
 239 007a AC19     		adds	r4, r5, r6	@ xTimeToWake, xTicksToWait, xConstTickCount
 240              	.LVL15:
4736:FreeRTOS/Source/tasks.c **** 
 241              		.loc 1 4736 0
 242 007c 5B6B     		ldr	r3, [r3, #52]	@ D.6604, pxCurrentTCB
4738:FreeRTOS/Source/tasks.c **** 			{
 243              		.loc 1 4738 0
 244 007e B442     		cmp	r4, r6	@ xTimeToWake, xConstTickCount
4736:FreeRTOS/Source/tasks.c **** 
 245              		.loc 1 4736 0
 246 0080 094D     		ldr	r5, .L26	@ tmp147,
 247              	.LVL16:
 248 0082 5C60     		str	r4, [r3, #4]	@ xTimeToWake, _22->xStateListItem.xItemValue
4738:FreeRTOS/Source/tasks.c **** 			{
 249              		.loc 1 4738 0
 250 0084 06D2     		bcs	.L21	@,
 251              	.LVL17:
 252              	.LBB42:
 253              	.LBB43:
4742:FreeRTOS/Source/tasks.c **** 			}
 254              		.loc 1 4742 0
 255 0086 E86B     		ldr	r0, [r5, #60]	@ D.6608, pxOverflowDelayedTaskList
 256 0088 696B     		ldr	r1, [r5, #52]	@ D.6604, pxCurrentTCB
 257              	.LBE43:
 258              	.LBE42:
 259              		.loc 1 4801 0
 260 008a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}	@
 261              	.LCFI3:
 262              		.cfi_remember_state
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 90


 263              		.cfi_restore 14
 264              		.cfi_restore 7
 265              		.cfi_restore 6
 266              		.cfi_restore 5
 267              		.cfi_restore 4
 268              		.cfi_restore 3
 269              		.cfi_def_cfa_offset 0
 270              	.LVL18:
 271              	.LBB45:
 272              	.LBB44:
4742:FreeRTOS/Source/tasks.c **** 			}
 273              		.loc 1 4742 0
 274 008e 0431     		adds	r1, r1, #4	@, D.6604,
 275 0090 FFF7FEBF 		b	vListInsert	@
 276              	.LVL19:
 277              	.L21:
 278              	.LCFI4:
 279              		.cfi_restore_state
 280              	.LBE44:
 281              	.LBE45:
4748:FreeRTOS/Source/tasks.c **** 
 282              		.loc 1 4748 0
 283 0094 A86A     		ldr	r0, [r5, #40]	@ D.6608, pxDelayedTaskList
 284 0096 696B     		ldr	r1, [r5, #52]	@ D.6604, pxCurrentTCB
 285 0098 0431     		adds	r1, r1, #4	@, D.6604,
 286 009a FFF7FEFF 		bl	vListInsert	@
 287              	.LVL20:
4753:FreeRTOS/Source/tasks.c **** 				{
 288              		.loc 1 4753 0
 289 009e EB6A     		ldr	r3, [r5, #44]	@ D.6606, xNextTaskUnblockTime
 290 00a0 9C42     		cmp	r4, r3	@ xTimeToWake, D.6606
4755:FreeRTOS/Source/tasks.c **** 				}
 291              		.loc 1 4755 0
 292 00a2 38BF     		it	cc
 293 00a4 EC62     		strcc	r4, [r5, #44]	@ xTimeToWake, xNextTaskUnblockTime
 294 00a6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 295              	.LVL21:
 296              	.L27:
 297              		.align	2
 298              	.L26:
 299 00a8 00000000 		.word	.LANCHOR0
 300              		.cfi_endproc
 301              	.LFE51:
 302              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 303              		.align	1
 304              		.global	xTaskCreate
 305              		.thumb
 306              		.thumb_func
 307              		.type	xTaskCreate, %function
 308              	xTaskCreate:
 309              	.LFB5:
 682:FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 310              		.loc 1 682 0
 311              		.cfi_startproc
 312              		@ args = 8, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              	.LVL22:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 91


 315 00ac 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 316              	.LCFI5:
 317              		.cfi_def_cfa_offset 40
 318              		.cfi_offset 3, -40
 319              		.cfi_offset 4, -36
 320              		.cfi_offset 5, -32
 321              		.cfi_offset 6, -28
 322              		.cfi_offset 7, -24
 323              		.cfi_offset 8, -20
 324              		.cfi_offset 9, -16
 325              		.cfi_offset 10, -12
 326              		.cfi_offset 11, -8
 327              		.cfi_offset 14, -4
 328              	.LBB53:
 716:FreeRTOS/Source/tasks.c **** 
 329              		.loc 1 716 0
 330 00b0 9500     		lsls	r5, r2, #2	@ D.6655, usStackDepth,
 331              	.LBE53:
 682:FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 332              		.loc 1 682 0
 333 00b2 8146     		mov	r9, r0	@ pxTaskCode, pxTaskCode
 334              	.LBB54:
 716:FreeRTOS/Source/tasks.c **** 
 335              		.loc 1 716 0
 336 00b4 2846     		mov	r0, r5	@, D.6655
 337              	.LVL23:
 338              	.LBE54:
 682:FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 339              		.loc 1 682 0
 340 00b6 8846     		mov	r8, r1	@ pcName, pcName
 341 00b8 1F46     		mov	r7, r3	@ pvParameters, pvParameters
 342 00ba 0B9E     		ldr	r6, [sp, #44]	@ pxCreatedTask, pxCreatedTask
 343              	.LBB55:
 716:FreeRTOS/Source/tasks.c **** 
 344              		.loc 1 716 0
 345 00bc FFF7FEFF 		bl	pvPortMalloc	@
 346              	.LVL24:
 718:FreeRTOS/Source/tasks.c **** 			{
 347              		.loc 1 718 0
 348 00c0 8246     		mov	r10, r0	@ pxStack,
 349 00c2 0028     		cmp	r0, #0	@ pxStack
 350 00c4 00F0AB80 		beq	.L29	@
 721:FreeRTOS/Source/tasks.c **** 
 351              		.loc 1 721 0
 352 00c8 5420     		movs	r0, #84	@,
 353              	.LVL25:
 354 00ca FFF7FEFF 		bl	pvPortMalloc	@
 355              	.LVL26:
 723:FreeRTOS/Source/tasks.c **** 				{
 356              		.loc 1 723 0
 357 00ce 0446     		mov	r4, r0	@ pxNewTCB,
 358 00d0 90B1     		cbz	r0, .L30	@ pxNewTCB,
 726:FreeRTOS/Source/tasks.c **** 				}
 359              		.loc 1 726 0
 360 00d2 C0F830A0 		str	r10, [r0, #48]	@ pxStack, pxNewTCB_12->pxStack
 361              	.LVL27:
 362              	.LBE55:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 92


 363              	.LBB56:
 364              	.LBB57:
 797:FreeRTOS/Source/tasks.c **** 	}
 365              		.loc 1 797 0
 366 00d6 2A46     		mov	r2, r5	@, D.6655
 367 00d8 5046     		mov	r0, r10	@, pxStack
 368              	.LVL28:
 369 00da A521     		movs	r1, #165	@,
 370 00dc FFF7FEFF 		bl	memset	@
 371              	.LVL29:
 807:FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 372              		.loc 1 807 0
 373 00e0 236B     		ldr	r3, [r4, #48]	@ pxNewTCB_12->pxStack, pxNewTCB_12->pxStack
 374 00e2 043D     		subs	r5, r5, #4	@ D.6659, D.6655,
 375              	.LVL30:
 376 00e4 1D44     		add	r5, r5, r3	@ pxTopOfStack, pxNewTCB_12->pxStack
 377              	.LVL31:
 808:FreeRTOS/Source/tasks.c **** 
 378              		.loc 1 808 0
 379 00e6 25F0070A 		bic	r10, r5, #7	@ pxTopOfStack, pxTopOfStack,
 380              	.LVL32:
 381 00ea 08F1FF33 		add	r3, r8, #-1	@ ivtmp.236, pcName,
 382 00ee 04F13302 		add	r2, r4, #51	@ ivtmp.241, pxNewTCB,
 383 00f2 08F10F08 		add	r8, r8, #15	@ D.6653, pcName,
 384              	.LVL33:
 385 00f6 05E0     		b	.L31	@
 386              	.LVL34:
 387              	.L30:
 388              	.LBE57:
 389              	.LBE56:
 390              	.LBB59:
 732:FreeRTOS/Source/tasks.c **** 				}
 391              		.loc 1 732 0
 392 00f8 5046     		mov	r0, r10	@, pxStack
 393              	.LVL35:
 394 00fa FFF7FEFF 		bl	vPortFree	@
 395              	.LVL36:
 396 00fe 8EE0     		b	.L29	@
 397              	.LVL37:
 398              	.L54:
 399              	.LBE59:
 400              	.LBB60:
 401              	.LBB58:
 827:FreeRTOS/Source/tasks.c **** 	{
 402              		.loc 1 827 0
 403 0100 4345     		cmp	r3, r8	@ ivtmp.236, D.6653
 404 0102 06D0     		beq	.L32	@,
 405              	.LVL38:
 406              	.L31:
 829:FreeRTOS/Source/tasks.c **** 
 407              		.loc 1 829 0
 408 0104 13F8011F 		ldrb	r1, [r3, #1]!	@ zero_extendqisi2	@ D.6660, MEM[base: _64, offset: 0B]
 409              	.LVL39:
 410 0108 02F8011F 		strb	r1, [r2, #1]!	@ D.6660, MEM[base: _63, offset: 0B]
 834:FreeRTOS/Source/tasks.c **** 		{
 411              		.loc 1 834 0
 412 010c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2	@ MEM[base: _64, offset: 0B], MEM[base: _64, offset: 0B]
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 93


 413 010e 0029     		cmp	r1, #0	@ MEM[base: _64, offset: 0B]
 414 0110 F6D1     		bne	.L54	@
 415              	.LVL40:
 416              	.L32:
 417 0112 0A9D     		ldr	r5, [sp, #40]	@ uxPriority, uxPriority
 846:FreeRTOS/Source/tasks.c **** 
 418              		.loc 1 846 0
 419 0114 4FF0000B 		mov	fp, #0	@ tmp200,
 420 0118 042D     		cmp	r5, #4	@ uxPriority,
 421 011a 28BF     		it	cs
 422 011c 0425     		movcs	r5, #4	@ uxPriority,
 423              	.LVL41:
 867:FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 424              		.loc 1 867 0
 425 011e 04F10408 		add	r8, r4, #4	@ D.6661, pxNewTCB,
 426              	.LVL42:
 859:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 427              		.loc 1 859 0
 428 0122 E562     		str	r5, [r4, #44]	@ uxPriority, pxNewTCB_12->uxPriority
 862:FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 429              		.loc 1 862 0
 430 0124 6564     		str	r5, [r4, #68]	@ uxPriority, pxNewTCB_12->uxBasePriority
 867:FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 431              		.loc 1 867 0
 432 0126 4046     		mov	r0, r8	@, D.6661
 846:FreeRTOS/Source/tasks.c **** 
 433              		.loc 1 846 0
 434 0128 84F843B0 		strb	fp, [r4, #67]	@ tmp200, pxNewTCB_12->pcTaskName
 863:FreeRTOS/Source/tasks.c **** 	}
 435              		.loc 1 863 0
 436 012c C4F848B0 		str	fp, [r4, #72]	@ tmp200, pxNewTCB_12->uxMutexesHeld
 867:FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 437              		.loc 1 867 0
 438 0130 FFF7FEFF 		bl	vListInitialiseItem	@
 439              	.LVL43:
 875:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 440              		.loc 1 875 0
 441 0134 C5F10505 		rsb	r5, r5, #5	@ D.6656, uxPriority,
 442              	.LVL44:
 868:FreeRTOS/Source/tasks.c **** 
 443              		.loc 1 868 0
 444 0138 04F11800 		add	r0, r4, #24	@, pxNewTCB,
 445 013c FFF7FEFF 		bl	vListInitialiseItem	@
 446              	.LVL45:
 918:FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 447              		.loc 1 918 0
 448 0140 C4F84CB0 		str	fp, [r4, #76]	@ tmp200, pxNewTCB_12->ulNotifiedValue
 872:FreeRTOS/Source/tasks.c **** 
 449              		.loc 1 872 0
 450 0144 2461     		str	r4, [r4, #16]	@ pxNewTCB, pxNewTCB_12->xStateListItem.pvOwner
 875:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 451              		.loc 1 875 0
 452 0146 A561     		str	r5, [r4, #24]	@ D.6656, pxNewTCB_12->xEventListItem.xItemValue
 876:FreeRTOS/Source/tasks.c **** 
 453              		.loc 1 876 0
 454 0148 6462     		str	r4, [r4, #36]	@ pxNewTCB, pxNewTCB_12->xEventListItem.pvOwner
 919:FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 94


 455              		.loc 1 919 0
 456 014a 84F850B0 		strb	fp, [r4, #80]	@ tmp200, pxNewTCB_12->ucNotifyState
 946:FreeRTOS/Source/tasks.c **** 	}
 457              		.loc 1 946 0
 458 014e 5046     		mov	r0, r10	@, pxTopOfStack
 459 0150 4946     		mov	r1, r9	@, pxTaskCode
 460 0152 3A46     		mov	r2, r7	@, pvParameters
 461 0154 FFF7FEFF 		bl	pxPortInitialiseStack	@
 462              	.LVL46:
 463 0158 2060     		str	r0, [r4]	@, pxNewTCB_12->pxTopOfStack
 950:FreeRTOS/Source/tasks.c **** 	{
 464              		.loc 1 950 0
 465 015a 06B1     		cbz	r6, .L33	@ pxCreatedTask,
 954:FreeRTOS/Source/tasks.c **** 	}
 466              		.loc 1 954 0
 467 015c 3460     		str	r4, [r6]	@ pxNewTCB, *pxCreatedTask_19(D)
 468              	.L33:
 469              	.LVL47:
 470              	.LBE58:
 471              	.LBE60:
 472              	.LBB61:
 473              	.LBB62:
 969:FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 474              		.loc 1 969 0
 475 015e 324D     		ldr	r5, .L55	@ tmp208,
 967:FreeRTOS/Source/tasks.c **** 	{
 476              		.loc 1 967 0
 477 0160 FFF7FEFF 		bl	vPortEnterCritical	@
 478              	.LVL48:
 969:FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 479              		.loc 1 969 0
 480 0164 2B6C     		ldr	r3, [r5, #64]	@ D.6656, uxCurrentNumberOfTasks
 481 0166 05F14409 		add	r9, r5, #68	@ tmp257, tmp256,
 482              	.LVL49:
 483 016a 0133     		adds	r3, r3, #1	@ D.6656, D.6656,
 484 016c 2B64     		str	r3, [r5, #64]	@ D.6656, uxCurrentNumberOfTasks
 970:FreeRTOS/Source/tasks.c **** 		{
 485              		.loc 1 970 0
 486 016e 6F6B     		ldr	r7, [r5, #52]	@ D.6662, pxCurrentTCB
 487              	.LVL50:
 488 0170 27BB     		cbnz	r7, .L34	@ D.6662,
 974:FreeRTOS/Source/tasks.c **** 
 489              		.loc 1 974 0
 490 0172 6C63     		str	r4, [r5, #52]	@ pxNewTCB, pxCurrentTCB
 976:FreeRTOS/Source/tasks.c **** 			{
 491              		.loc 1 976 0
 492 0174 2B6C     		ldr	r3, [r5, #64]	@ D.6656, uxCurrentNumberOfTasks
 493 0176 012B     		cmp	r3, #1	@ D.6656,
 494 0178 29D1     		bne	.L36	@,
 495              	.LVL51:
 496              	.L35:
 497              	.LBB63:
 498              	.LBB64:
3339:FreeRTOS/Source/tasks.c **** 	}
 499              		.loc 1 3339 0
 500 017a 09EB0700 		add	r0, r9, r7	@, tmp257, ivtmp.228
 501 017e 1437     		adds	r7, r7, #20	@ ivtmp.228, ivtmp.228,
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 95


 502 0180 FFF7FEFF 		bl	vListInitialise	@
 503              	.LVL52:
3337:FreeRTOS/Source/tasks.c **** 	{
 504              		.loc 1 3337 0
 505 0184 642F     		cmp	r7, #100	@ ivtmp.228,
 506 0186 284E     		ldr	r6, .L55	@ tmp213,
 507 0188 F7D1     		bne	.L35	@,
3342:FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 508              		.loc 1 3342 0
 509 018a 06F1A80A 		add	r10, r6, #168	@ tmp217, tmp213,
 510              	.LVL53:
 511 018e 5046     		mov	r0, r10	@, tmp217
3343:FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 512              		.loc 1 3343 0
 513 0190 06F1BC07 		add	r7, r6, #188	@ tmp219, tmp213,
3342:FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 514              		.loc 1 3342 0
 515 0194 FFF7FEFF 		bl	vListInitialise	@
 516              	.LVL54:
3343:FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 517              		.loc 1 3343 0
 518 0198 3846     		mov	r0, r7	@, tmp219
 519 019a FFF7FEFF 		bl	vListInitialise	@
 520              	.LVL55:
3344:FreeRTOS/Source/tasks.c **** 
 521              		.loc 1 3344 0
 522 019e 06F11400 		add	r0, r6, #20	@, tmp213,
 523 01a2 FFF7FEFF 		bl	vListInitialise	@
 524              	.LVL56:
3348:FreeRTOS/Source/tasks.c **** 	}
 525              		.loc 1 3348 0
 526 01a6 06F1D000 		add	r0, r6, #208	@, tmp213,
 527 01aa FFF7FEFF 		bl	vListInitialise	@
 528              	.LVL57:
3354:FreeRTOS/Source/tasks.c **** 	}
 529              		.loc 1 3354 0
 530 01ae 3046     		mov	r0, r6	@, tmp213
 531 01b0 FFF7FEFF 		bl	vListInitialise	@
 532              	.LVL58:
3360:FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 533              		.loc 1 3360 0
 534 01b4 C6F828A0 		str	r10, [r6, #40]	@ tmp217, pxDelayedTaskList
3361:FreeRTOS/Source/tasks.c **** }
 535              		.loc 1 3361 0
 536 01b8 F763     		str	r7, [r6, #60]	@ tmp219, pxOverflowDelayedTaskList
 537 01ba 08E0     		b	.L36	@
 538              	.LVL59:
 539              	.L34:
 540              	.LBE64:
 541              	.LBE63:
 993:FreeRTOS/Source/tasks.c **** 			{
 542              		.loc 1 993 0
 543 01bc D5F8E430 		ldr	r3, [r5, #228]	@ D.6663, xSchedulerRunning
 544 01c0 2BB9     		cbnz	r3, .L36	@ D.6663,
 995:FreeRTOS/Source/tasks.c **** 				{
 545              		.loc 1 995 0
 546 01c2 6B6B     		ldr	r3, [r5, #52]	@ D.6662, pxCurrentTCB
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 96


 547 01c4 DA6A     		ldr	r2, [r3, #44]	@ _45->uxPriority, _45->uxPriority
 548 01c6 E36A     		ldr	r3, [r4, #44]	@ pxNewTCB_12->uxPriority, pxNewTCB_12->uxPriority
 549 01c8 9A42     		cmp	r2, r3	@ _45->uxPriority, pxNewTCB_12->uxPriority
 997:FreeRTOS/Source/tasks.c **** 				}
 550              		.loc 1 997 0
 551 01ca 98BF     		it	ls
 552 01cc 6C63     		strls	r4, [r5, #52]	@ pxNewTCB, pxCurrentTCB
 553              	.LVL60:
 554              	.L36:
1010:FreeRTOS/Source/tasks.c **** 
 555              		.loc 1 1010 0
 556 01ce D5F8E830 		ldr	r3, [r5, #232]	@ uxTaskNumber, uxTaskNumber
1020:FreeRTOS/Source/tasks.c **** 
 557              		.loc 1 1020 0
 558 01d2 E26A     		ldr	r2, [r4, #44]	@ D.6656, pxNewTCB_12->uxPriority
1010:FreeRTOS/Source/tasks.c **** 
 559              		.loc 1 1010 0
 560 01d4 0133     		adds	r3, r3, #1	@ D.6656, uxTaskNumber,
 561 01d6 C5F8E830 		str	r3, [r5, #232]	@ D.6656, uxTaskNumber
1020:FreeRTOS/Source/tasks.c **** 
 562              		.loc 1 1020 0
 563 01da 0126     		movs	r6, #1	@ tmp242,
 564 01dc AB6B     		ldr	r3, [r5, #56]	@ D.6656, uxTopReadyPriority
 565 01de 06FA02F1 		lsl	r1, r6, r2	@ D.6656, tmp242, D.6656
 566 01e2 1420     		movs	r0, #20	@ tmp247,
 567 01e4 0B43     		orrs	r3, r3, r1	@, D.6656, D.6656, D.6656
 568 01e6 00FB0290 		mla	r0, r0, r2, r9	@, tmp247, D.6656, tmp257
 569 01ea 4146     		mov	r1, r8	@, D.6661
 570 01ec AB63     		str	r3, [r5, #56]	@ D.6656, uxTopReadyPriority
 571 01ee FFF7FEFF 		bl	vListInsertEnd	@
 572              	.LVL61:
1024:FreeRTOS/Source/tasks.c **** 
 573              		.loc 1 1024 0
 574 01f2 FFF7FEFF 		bl	vPortExitCritical	@
 575              	.LVL62:
1026:FreeRTOS/Source/tasks.c **** 	{
 576              		.loc 1 1026 0
 577 01f6 D5F8E430 		ldr	r3, [r5, #228]	@ D.6663, xSchedulerRunning
 578 01fa 6BB1     		cbz	r3, .L41	@ D.6663,
1030:FreeRTOS/Source/tasks.c **** 		{
 579              		.loc 1 1030 0
 580 01fc 0A4B     		ldr	r3, .L55	@ tmp236,
 581 01fe 5B6B     		ldr	r3, [r3, #52]	@ D.6662, pxCurrentTCB
 582 0200 DA6A     		ldr	r2, [r3, #44]	@ _58->uxPriority, _58->uxPriority
 583 0202 E36A     		ldr	r3, [r4, #44]	@ pxNewTCB_12->uxPriority, pxNewTCB_12->uxPriority
 584 0204 9A42     		cmp	r2, r3	@ _58->uxPriority, pxNewTCB_12->uxPriority
 585 0206 07D2     		bcs	.L41	@,
1032:FreeRTOS/Source/tasks.c **** 		}
 586              		.loc 1 1032 0
 587 0208 084B     		ldr	r3, .L55+4	@ tmp253,
 588 020a 4FF08052 		mov	r2, #268435456	@ tmp254,
 589 020e 1A60     		str	r2, [r3]	@ tmp254, MEM[(volatile uint32_t *)3758157060B]
 590              	.LVL63:
 591              	@ 1032 "FreeRTOS/Source/tasks.c" 1
 592 0210 BFF34F8F 		dsb
 593              	@ 0 "" 2
 594              	@ 1032 "FreeRTOS/Source/tasks.c" 1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 97


 595 0214 BFF36F8F 		isb
 596              	@ 0 "" 2
 597              		.thumb
 598              	.L41:
 599              	.LBE62:
 600              	.LBE61:
 754:FreeRTOS/Source/tasks.c **** 		}
 601              		.loc 1 754 0
 602 0218 3046     		mov	r0, r6	@ xReturn, tmp242
 603 021a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 604              	.LVL64:
 605              	.L29:
 758:FreeRTOS/Source/tasks.c **** 		}
 606              		.loc 1 758 0
 607 021e 4FF0FF30 		mov	r0, #-1	@ xReturn,
 608              	.LVL65:
 762:FreeRTOS/Source/tasks.c **** 
 609              		.loc 1 762 0
 610 0222 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 611              	.LVL66:
 612              	.L56:
 613 0226 00BF     		.align	2
 614              	.L55:
 615 0228 00000000 		.word	.LANCHOR0
 616 022c 04ED00E0 		.word	-536810236
 617              		.cfi_endproc
 618              	.LFE5:
 619              		.size	xTaskCreate, .-xTaskCreate
 620              		.align	1
 621              		.global	vTaskDelete
 622              		.thumb
 623              		.thumb_func
 624              		.type	vTaskDelete, %function
 625              	vTaskDelete:
 626              	.LFB8:
1049:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 627              		.loc 1 1049 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              	.LVL67:
 632 0230 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 633              	.LCFI6:
 634              		.cfi_def_cfa_offset 24
 635              		.cfi_offset 3, -24
 636              		.cfi_offset 4, -20
 637              		.cfi_offset 5, -16
 638              		.cfi_offset 6, -12
 639              		.cfi_offset 7, -8
 640              		.cfi_offset 14, -4
1049:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 641              		.loc 1 1049 0
 642 0232 0446     		mov	r4, r0	@ xTaskToDelete, xTaskToDelete
 643 0234 264D     		ldr	r5, .L70	@ tmp161,
1052:FreeRTOS/Source/tasks.c **** 		{
 644              		.loc 1 1052 0
 645 0236 FFF7FEFF 		bl	vPortEnterCritical	@
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 98


 646              	.LVL68:
1056:FreeRTOS/Source/tasks.c **** 
 647              		.loc 1 1056 0
 648 023a 04B9     		cbnz	r4, .L58	@ xTaskToDelete,
1056:FreeRTOS/Source/tasks.c **** 
 649              		.loc 1 1056 0 is_stmt 0 discriminator 1
 650 023c 6C6B     		ldr	r4, [r5, #52]	@ xTaskToDelete, pxCurrentTCB
 651              	.LVL69:
 652              	.L58:
1059:FreeRTOS/Source/tasks.c **** 			{
 653              		.loc 1 1059 0 is_stmt 1 discriminator 4
 654 023e 271D     		adds	r7, r4, #4	@ D.6671, xTaskToDelete,
 655 0240 3846     		mov	r0, r7	@, D.6671
 656 0242 FFF7FEFF 		bl	uxListRemove	@
 657              	.LVL70:
 658 0246 60B9     		cbnz	r0, .L59	@,
1061:FreeRTOS/Source/tasks.c **** 			}
 659              		.loc 1 1061 0
 660 0248 E06A     		ldr	r0, [r4, #44]	@ D.6672, MEM[(struct TCB_t *)xTaskToDelete_1].uxPriority
 661 024a 1423     		movs	r3, #20	@ tmp135,
 662 024c 03FB0053 		mla	r3, r3, r0, r5	@ tmp136, tmp135, D.6672, tmp161
 663 0250 5B6C     		ldr	r3, [r3, #68]	@ pxReadyTasksLists[_13].uxNumberOfItems, pxReadyTasksLists[_13].uxNumberOfItems
 664 0252 1F49     		ldr	r1, .L70	@ tmp133,
 665 0254 2BB9     		cbnz	r3, .L59	@ pxReadyTasksLists[_13].uxNumberOfItems,
1061:FreeRTOS/Source/tasks.c **** 			}
 666              		.loc 1 1061 0 is_stmt 0 discriminator 1
 667 0256 8A6B     		ldr	r2, [r1, #56]	@ D.6672, uxTopReadyPriority
 668 0258 0123     		movs	r3, #1	@ tmp141,
 669 025a 8340     		lsls	r3, r3, r0	@ D.6672, tmp141, D.6672
 670 025c 22EA0303 		bic	r3, r2, r3	@ D.6672, D.6672, D.6672
 671 0260 8B63     		str	r3, [r1, #56]	@ D.6672, uxTopReadyPriority
 672              	.L59:
1069:FreeRTOS/Source/tasks.c **** 			{
 673              		.loc 1 1069 0 is_stmt 1
 674 0262 A36A     		ldr	r3, [r4, #40]	@ MEM[(struct TCB_t *)xTaskToDelete_1].xEventListItem.pvContainer, MEM[(struct T
 675 0264 1BB1     		cbz	r3, .L60	@ MEM[(struct TCB_t *)xTaskToDelete_1].xEventListItem.pvContainer,
1071:FreeRTOS/Source/tasks.c **** 			}
 676              		.loc 1 1071 0
 677 0266 04F11800 		add	r0, r4, #24	@, xTaskToDelete,
 678 026a FFF7FEFF 		bl	uxListRemove	@
 679              	.LVL71:
 680              	.L60:
1082:FreeRTOS/Source/tasks.c **** 
 681              		.loc 1 1082 0
 682 026e D5F8E830 		ldr	r3, [r5, #232]	@ uxTaskNumber, uxTaskNumber
 683 0272 174E     		ldr	r6, .L70	@ tmp146,
 684 0274 0133     		adds	r3, r3, #1	@ D.6672, uxTaskNumber,
 685 0276 C5F8E830 		str	r3, [r5, #232]	@ D.6672, uxTaskNumber
1084:FreeRTOS/Source/tasks.c **** 			{
 686              		.loc 1 1084 0
 687 027a 6B6B     		ldr	r3, [r5, #52]	@ D.6675, pxCurrentTCB
 688 027c 9C42     		cmp	r4, r3	@ xTaskToDelete, D.6675
 689 027e 0AD1     		bne	.L61	@,
1091:FreeRTOS/Source/tasks.c **** 
 690              		.loc 1 1091 0
 691 0280 06F1D000 		add	r0, r6, #208	@, tmp146,
 692 0284 3946     		mov	r1, r7	@, D.6671
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 99


 693 0286 FFF7FEFF 		bl	vListInsertEnd	@
 694              	.LVL72:
1096:FreeRTOS/Source/tasks.c **** 
 695              		.loc 1 1096 0
 696 028a D6F8EC30 		ldr	r3, [r6, #236]	@ D.6672, uxDeletedTasksWaitingCleanUp
 697 028e 0133     		adds	r3, r3, #1	@ D.6672, D.6672,
 698 0290 C6F8EC30 		str	r3, [r6, #236]	@ D.6672, uxDeletedTasksWaitingCleanUp
 699 0294 0AE0     		b	.L62	@
 700              	.L61:
1107:FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 701              		.loc 1 1107 0
 702 0296 336C     		ldr	r3, [r6, #64]	@ D.6672, uxCurrentNumberOfTasks
 703              	.LBB67:
 704              	.LBB68:
3600:FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 705              		.loc 1 3600 0
 706 0298 206B     		ldr	r0, [r4, #48]	@, MEM[(struct TCB_t *)xTaskToDelete_1].pxStack
 707              	.LBE68:
 708              	.LBE67:
1107:FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 709              		.loc 1 1107 0
 710 029a 013B     		subs	r3, r3, #1	@ D.6672, D.6672,
 711 029c 3364     		str	r3, [r6, #64]	@ D.6672, uxCurrentNumberOfTasks
 712              	.LVL73:
 713              	.LBB70:
 714              	.LBB69:
3600:FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 715              		.loc 1 3600 0
 716 029e FFF7FEFF 		bl	vPortFree	@
 717              	.LVL74:
3601:FreeRTOS/Source/tasks.c **** 		}
 718              		.loc 1 3601 0
 719 02a2 2046     		mov	r0, r4	@, xTaskToDelete
 720 02a4 FFF7FEFF 		bl	vPortFree	@
 721              	.LVL75:
 722              	.LBE69:
 723              	.LBE70:
1112:FreeRTOS/Source/tasks.c **** 			}
 724              		.loc 1 1112 0
 725 02a8 FFF7BAFE 		bl	prvResetNextTaskUnblockTime	@
 726              	.LVL76:
 727              	.L62:
1117:FreeRTOS/Source/tasks.c **** 
 728              		.loc 1 1117 0
 729 02ac FFF7FEFF 		bl	vPortExitCritical	@
 730              	.LVL77:
1121:FreeRTOS/Source/tasks.c **** 		{
 731              		.loc 1 1121 0
 732 02b0 D5F8E430 		ldr	r3, [r5, #228]	@ D.6676, xSchedulerRunning
 733 02b4 5BB1     		cbz	r3, .L57	@ D.6676,
1123:FreeRTOS/Source/tasks.c **** 			{
 734              		.loc 1 1123 0
 735 02b6 064B     		ldr	r3, .L70	@ tmp157,
 736 02b8 5B6B     		ldr	r3, [r3, #52]	@ D.6675, pxCurrentTCB
 737 02ba 9C42     		cmp	r4, r3	@ xTaskToDelete, D.6675
 738 02bc 07D1     		bne	.L57	@,
1126:FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 100


 739              		.loc 1 1126 0
 740 02be 054B     		ldr	r3, .L70+4	@ tmp159,
 741 02c0 4FF08052 		mov	r2, #268435456	@ tmp160,
 742 02c4 1A60     		str	r2, [r3]	@ tmp160, MEM[(volatile uint32_t *)3758157060B]
 743              	@ 1126 "FreeRTOS/Source/tasks.c" 1
 744 02c6 BFF34F8F 		dsb
 745              	@ 0 "" 2
 746              	@ 1126 "FreeRTOS/Source/tasks.c" 1
 747 02ca BFF36F8F 		isb
 748              	@ 0 "" 2
 749              		.thumb
 750              	.L57:
 751 02ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 752              	.LVL78:
 753              	.L71:
 754              		.align	2
 755              	.L70:
 756 02d0 00000000 		.word	.LANCHOR0
 757 02d4 04ED00E0 		.word	-536810236
 758              		.cfi_endproc
 759              	.LFE8:
 760              		.size	vTaskDelete, .-vTaskDelete
 761              		.align	1
 762              		.global	uxTaskPriorityGet
 763              		.thumb
 764              		.thumb_func
 765              		.type	uxTaskPriorityGet, %function
 766              	uxTaskPriorityGet:
 767              	.LFB11:
1341:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 768              		.loc 1 1341 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 0
 771              		@ frame_needed = 0, uses_anonymous_args = 0
 772              	.LVL79:
 773 02d8 10B5     		push	{r4, lr}	@
 774              	.LCFI7:
 775              		.cfi_def_cfa_offset 8
 776              		.cfi_offset 4, -8
 777              		.cfi_offset 14, -4
1341:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 778              		.loc 1 1341 0
 779 02da 0446     		mov	r4, r0	@ xTask, xTask
1345:FreeRTOS/Source/tasks.c **** 		{
 780              		.loc 1 1345 0
 781 02dc FFF7FEFF 		bl	vPortEnterCritical	@
 782              	.LVL80:
1349:FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 783              		.loc 1 1349 0
 784 02e0 0CB9     		cbnz	r4, .L73	@ xTask,
1349:FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 785              		.loc 1 1349 0 is_stmt 0 discriminator 1
 786 02e2 034B     		ldr	r3, .L74	@ tmp113,
 787 02e4 5C6B     		ldr	r4, [r3, #52]	@ xTask, pxCurrentTCB
 788              	.LVL81:
 789              	.L73:
1350:FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 101


 790              		.loc 1 1350 0 is_stmt 1 discriminator 4
 791 02e6 E46A     		ldr	r4, [r4, #44]	@ uxReturn, MEM[(struct TCB_t *)xTask_1].uxPriority
 792              	.LVL82:
1352:FreeRTOS/Source/tasks.c **** 
 793              		.loc 1 1352 0 discriminator 4
 794 02e8 FFF7FEFF 		bl	vPortExitCritical	@
 795              	.LVL83:
1355:FreeRTOS/Source/tasks.c **** 
 796              		.loc 1 1355 0 discriminator 4
 797 02ec 2046     		mov	r0, r4	@, uxReturn
 798 02ee 10BD     		pop	{r4, pc}	@
 799              	.LVL84:
 800              	.L75:
 801              		.align	2
 802              	.L74:
 803 02f0 00000000 		.word	.LANCHOR0
 804              		.cfi_endproc
 805              	.LFE11:
 806              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 807              		.align	1
 808              		.global	uxTaskPriorityGetFromISR
 809              		.thumb
 810              		.thumb_func
 811              		.type	uxTaskPriorityGetFromISR, %function
 812              	uxTaskPriorityGetFromISR:
 813              	.LFB12:
1363:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 814              		.loc 1 1363 0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 0
 817              		@ frame_needed = 0, uses_anonymous_args = 0
 818              		@ link register save eliminated.
 819              	.LVL85:
 820              	.LBB71:
 821              	.LBB72:
 822              		.file 2 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h"
   1:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     All rights reserved
   4:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
   5:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
   7:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
   9:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  13:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  14:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  19:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  20:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 102


  22:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  25:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  26:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  27:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  32:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  37:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  38:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  39:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  43:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     participating in the support forum.
  46:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  47:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  52:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  56:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  63:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  66:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  67:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** */
  69:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  70:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  71:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  73:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  74:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  76:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  77:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 103


  79:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  81:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  84:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  85:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  87:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  88:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  89:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  90:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  91:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  92:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  93:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  94:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  96:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  97:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 101:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #else
 105:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 112:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 114:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 120:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 121:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
 122:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
 123:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
 126:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
 130:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** }
 131:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 132:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 104


 136:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 137:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 139:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 140:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 141:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 148:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 149:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 150:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 153:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 157:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 158:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 162:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 163:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 164:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 165:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 171:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 172:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 174:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 175:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 176:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 178:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 179:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 180:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 181:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 184:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 185:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 105


 193:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 196:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 197:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 198:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 201:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 202:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 203:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 204:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 206:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 208:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 210:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {
 213:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 215:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 216:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 219:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 221:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 222:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 223:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 224:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 225:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 226:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 227:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 228:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 229:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** }
 230:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 231:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 232:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 233:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {
 235:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 236:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 237:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 238:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 239:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 242:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 243:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 245:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** }
 246:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 247:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 248:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 249:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 106


 250:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {
 251:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 253:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 823              		.loc 2 253 0
 824              	@ 253 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 825 02f4 EFF31183 			mrs r3, basepri												@ uxSavedInterruptState
 826 02f8 4FF0BF02 		mov r2, #191													@ ulNewBASEPRI,
 827 02fc 82F31188 		msr basepri, r2												@ ulNewBASEPRI
 828 0300 BFF36F8F 		isb														
 829 0304 BFF34F8F 		dsb														
 830              	
 831              	@ 0 "" 2
 832              	.LVL86:
 833              		.thumb
 834              	.LBE72:
 835              	.LBE71:
1389:FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 836              		.loc 1 1389 0
 837 0308 08B9     		cbnz	r0, .L77	@ xTask,
1389:FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 838              		.loc 1 1389 0 is_stmt 0 discriminator 1
 839 030a 034A     		ldr	r2, .L78	@ tmp117,
 840 030c 506B     		ldr	r0, [r2, #52]	@ xTask, pxCurrentTCB
 841              	.LVL87:
 842              	.L77:
 843              	.LBB73:
 844              	.LBB74:
 254:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 255:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 259:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 260:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 262:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 263:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 265:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 266:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** }
 267:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 268:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 269:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {
 271:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 845              		.loc 2 271 0 is_stmt 1 discriminator 4
 846              	@ 271 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 847 030e 83F31188 			msr basepri, r3		@ uxSavedInterruptState
 848              	@ 0 "" 2
 849              		.thumb
 850              	.LBE74:
 851              	.LBE73:
1395:FreeRTOS/Source/tasks.c **** 
 852              		.loc 1 1395 0 discriminator 4
 853 0312 C06A     		ldr	r0, [r0, #44]	@, MEM[(struct TCB_t *)xTask_1].uxPriority
 854              	.LVL88:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 107


 855 0314 7047     		bx	lr	@
 856              	.L79:
 857 0316 00BF     		.align	2
 858              	.L78:
 859 0318 00000000 		.word	.LANCHOR0
 860              		.cfi_endproc
 861              	.LFE12:
 862              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 863              		.align	1
 864              		.global	vTaskPrioritySet
 865              		.thumb
 866              		.thumb_func
 867              		.type	vTaskPrioritySet, %function
 868              	vTaskPrioritySet:
 869              	.LFB13:
1403:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 870              		.loc 1 1403 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              	.LVL89:
 875 031c 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 876              	.LCFI8:
 877              		.cfi_def_cfa_offset 32
 878              		.cfi_offset 4, -32
 879              		.cfi_offset 5, -28
 880              		.cfi_offset 6, -24
 881              		.cfi_offset 7, -20
 882              		.cfi_offset 8, -16
 883              		.cfi_offset 9, -12
 884              		.cfi_offset 10, -8
 885              		.cfi_offset 14, -4
1403:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 886              		.loc 1 1403 0
 887 0320 0446     		mov	r4, r0	@ xTask, xTask
 888 0322 0429     		cmp	r1, #4	@ uxNewPriority,
 889 0324 28BF     		it	cs
 890 0326 0421     		movcs	r1, #4	@ uxNewPriority,
 891              	.LVL90:
 892 0328 0D46     		mov	r5, r1	@ uxNewPriority, uxNewPriority
 893              	.LVL91:
1420:FreeRTOS/Source/tasks.c **** 		{
 894              		.loc 1 1420 0
 895 032a FFF7FEFF 		bl	vPortEnterCritical	@
 896              	.LVL92:
1424:FreeRTOS/Source/tasks.c **** 
 897              		.loc 1 1424 0
 898 032e 0CB9     		cbnz	r4, .L81	@ xTask,
1424:FreeRTOS/Source/tasks.c **** 
 899              		.loc 1 1424 0 is_stmt 0 discriminator 1
 900 0330 2A4B     		ldr	r3, .L97	@ tmp140,
 901 0332 5C6B     		ldr	r4, [r3, #52]	@ xTask, pxCurrentTCB
 902              	.LVL93:
 903              	.L81:
1430:FreeRTOS/Source/tasks.c **** 			}
 904              		.loc 1 1430 0 is_stmt 1 discriminator 4
 905 0334 636C     		ldr	r3, [r4, #68]	@ uxCurrentBasePriority, MEM[(struct TCB_t *)xTask_3].uxBasePriority
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 108


 906              	.LVL94:
1438:FreeRTOS/Source/tasks.c **** 			{
 907              		.loc 1 1438 0 discriminator 4
 908 0336 AB42     		cmp	r3, r5	@ uxCurrentBasePriority, uxNewPriority
 909 0338 4CD0     		beq	.L83	@,
1442:FreeRTOS/Source/tasks.c **** 				{
 910              		.loc 1 1442 0
 911 033a 9D42     		cmp	r5, r3	@ uxNewPriority, uxCurrentBasePriority
 912 033c 274F     		ldr	r7, .L97	@ tmp173,
 913 033e 09D9     		bls	.L84	@,
1444:FreeRTOS/Source/tasks.c **** 					{
 914              		.loc 1 1444 0
 915 0340 7A6B     		ldr	r2, [r7, #52]	@ D.6687, pxCurrentTCB
 916 0342 9442     		cmp	r4, r2	@ xTask, D.6687
 917 0344 0BD0     		beq	.L93	@,
1449:FreeRTOS/Source/tasks.c **** 						{
 918              		.loc 1 1449 0
 919 0346 7A6B     		ldr	r2, [r7, #52]	@ D.6687, pxCurrentTCB
 920 0348 D66A     		ldr	r6, [r2, #44]	@ _17->uxPriority, _17->uxPriority
 921 034a B542     		cmp	r5, r6	@ uxNewPriority, _17->uxPriority
 922 034c 34BF     		ite	cc
 923 034e 0026     		movcc	r6, #0	@ xYieldRequired,
 924 0350 0126     		movcs	r6, #1	@ xYieldRequired,
 925 0352 05E0     		b	.L85	@
 926              	.L84:
1465:FreeRTOS/Source/tasks.c **** 				{
 927              		.loc 1 1465 0
 928 0354 7E6B     		ldr	r6, [r7, #52]	@ D.6687, pxCurrentTCB
 929 0356 A21B     		subs	r2, r4, r6	@, xTask, D.6687
 930 0358 5642     		rsbs	r6, r2, #0	@ xYieldRequired,,
 931 035a 5641     		adcs	r6, r6, r2	@ xYieldRequired, xYieldRequired,
 932 035c 00E0     		b	.L85	@
 933              	.L93:
1406:FreeRTOS/Source/tasks.c **** 
 934              		.loc 1 1406 0
 935 035e 0026     		movs	r6, #0	@ xYieldRequired,
 936              	.L85:
 937              	.LVL95:
1482:FreeRTOS/Source/tasks.c **** 
 938              		.loc 1 1482 0
 939 0360 D4F82C80 		ldr	r8, [r4, #44]	@ uxPriorityUsedOnEntry, MEM[(struct TCB_t *)xTask_3].uxPriority
 940              	.LVL96:
1521:FreeRTOS/Source/tasks.c **** 				{
 941              		.loc 1 1521 0
 942 0364 DFF87490 		ldr	r9, .L97	@ tmp151,
1488:FreeRTOS/Source/tasks.c **** 					{
 943              		.loc 1 1488 0
 944 0368 4345     		cmp	r3, r8	@ uxCurrentBasePriority, uxPriorityUsedOnEntry
1508:FreeRTOS/Source/tasks.c **** 				{
 945              		.loc 1 1508 0
 946 036a A369     		ldr	r3, [r4, #24]	@ MEM[(struct TCB_t *)xTask_3].xEventListItem.xItemValue, MEM[(struct TCB_t *)xT
 947              	.LVL97:
1490:FreeRTOS/Source/tasks.c **** 					}
 948              		.loc 1 1490 0
 949 036c 08BF     		it	eq
 950 036e E562     		streq	r5, [r4, #44]	@ uxNewPriority, MEM[(struct TCB_t *)xTask_3].uxPriority
1508:FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 109


 951              		.loc 1 1508 0
 952 0370 002B     		cmp	r3, #0	@ MEM[(struct TCB_t *)xTask_3].xEventListItem.xItemValue,
1498:FreeRTOS/Source/tasks.c **** 				}
 953              		.loc 1 1498 0
 954 0372 6564     		str	r5, [r4, #68]	@ uxNewPriority, MEM[(struct TCB_t *)xTask_3].uxBasePriority
 955              	.LVL98:
1510:FreeRTOS/Source/tasks.c **** 				}
 956              		.loc 1 1510 0
 957 0374 A4BF     		itt	ge
 958 0376 C5F10505 		rsbge	r5, r5, #5	@ D.6688, uxNewPriority,
 959              	.LVL99:
 960 037a A561     		strge	r5, [r4, #24]	@ D.6688, MEM[(struct TCB_t *)xTask_3].xEventListItem.xItemValue
1521:FreeRTOS/Source/tasks.c **** 				{
 961              		.loc 1 1521 0
 962 037c 1423     		movs	r3, #20	@ tmp154,
 963 037e 09F14405 		add	r5, r9, #68	@ tmp152, tmp151,
 964 0382 03FB0853 		mla	r3, r3, r8, r5	@ D.6691, tmp154, uxPriorityUsedOnEntry, tmp152
 965 0386 6269     		ldr	r2, [r4, #20]	@ MEM[(struct TCB_t *)xTask_3].xStateListItem.pvContainer, MEM[(struct TCB_t *)x
 966 0388 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)xTask_3].xStateListItem.pvContainer, D.6691
 967 038a 1AD1     		bne	.L89	@,
1526:FreeRTOS/Source/tasks.c **** 					{
 968              		.loc 1 1526 0
 969 038c 04F1040A 		add	r10, r4, #4	@ D.6692, xTask,
 970 0390 5046     		mov	r0, r10	@, D.6692
 971 0392 FFF7FEFF 		bl	uxListRemove	@
 972              	.LVL100:
 973 0396 40B9     		cbnz	r0, .L92	@,
1531:FreeRTOS/Source/tasks.c **** 					}
 974              		.loc 1 1531 0
 975 0398 D9F83820 		ldr	r2, [r9, #56]	@ D.6688, uxTopReadyPriority
 976 039c 0123     		movs	r3, #1	@ tmp159,
 977 039e 03FA08F3 		lsl	r3, r3, r8	@ D.6688, tmp159, uxPriorityUsedOnEntry
 978 03a2 22EA0303 		bic	r3, r2, r3	@ D.6688, D.6688, D.6688
 979 03a6 C9F83830 		str	r3, [r9, #56]	@ D.6688, uxTopReadyPriority
 980              	.L92:
1537:FreeRTOS/Source/tasks.c **** 				}
 981              		.loc 1 1537 0
 982 03aa E16A     		ldr	r1, [r4, #44]	@ D.6688, MEM[(struct TCB_t *)xTask_3].uxPriority
 983 03ac BA6B     		ldr	r2, [r7, #56]	@ D.6688, uxTopReadyPriority
 984 03ae 0123     		movs	r3, #1	@ tmp164,
 985 03b0 8B40     		lsls	r3, r3, r1	@ D.6688, tmp164, D.6688
 986 03b2 1420     		movs	r0, #20	@ tmp169,
 987 03b4 1343     		orrs	r3, r3, r2	@, D.6688, D.6688, D.6688
 988 03b6 00FB0150 		mla	r0, r0, r1, r5	@, tmp169, D.6688, tmp174
 989 03ba 5146     		mov	r1, r10	@, D.6692
 990 03bc BB63     		str	r3, [r7, #56]	@ D.6688, uxTopReadyPriority
 991 03be FFF7FEFF 		bl	vListInsertEnd	@
 992              	.LVL101:
 993              	.L89:
1544:FreeRTOS/Source/tasks.c **** 				{
 994              		.loc 1 1544 0
 995 03c2 3EB1     		cbz	r6, .L83	@ xYieldRequired,
1546:FreeRTOS/Source/tasks.c **** 				}
 996              		.loc 1 1546 0
 997 03c4 064B     		ldr	r3, .L97+4	@ tmp171,
 998 03c6 4FF08052 		mov	r2, #268435456	@ tmp172,
 999 03ca 1A60     		str	r2, [r3]	@ tmp172, MEM[(volatile uint32_t *)3758157060B]
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 110


 1000              	@ 1546 "FreeRTOS/Source/tasks.c" 1
 1001 03cc BFF34F8F 		dsb
 1002              	@ 0 "" 2
 1003              	@ 1546 "FreeRTOS/Source/tasks.c" 1
 1004 03d0 BFF36F8F 		isb
 1005              	@ 0 "" 2
 1006              	.LVL102:
 1007              		.thumb
 1008              	.L83:
1559:FreeRTOS/Source/tasks.c **** 
 1009              		.loc 1 1559 0
 1010 03d4 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1011              	.LCFI9:
 1012              		.cfi_restore 14
 1013              		.cfi_restore 10
 1014              		.cfi_restore 9
 1015              		.cfi_restore 8
 1016              		.cfi_restore 7
 1017              		.cfi_restore 6
 1018              		.cfi_restore 5
 1019              		.cfi_restore 4
 1020              		.cfi_def_cfa_offset 0
 1021              	.LVL103:
1558:FreeRTOS/Source/tasks.c **** 	}
 1022              		.loc 1 1558 0
 1023 03d8 FFF7FEBF 		b	vPortExitCritical	@
 1024              	.LVL104:
 1025              	.L98:
 1026              		.align	2
 1027              	.L97:
 1028 03dc 00000000 		.word	.LANCHOR0
 1029 03e0 04ED00E0 		.word	-536810236
 1030              		.cfi_endproc
 1031              	.LFE13:
 1032              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1033              		.align	1
 1034              		.global	vTaskResume
 1035              		.thumb
 1036              		.thumb_func
 1037              		.type	vTaskResume, %function
 1038              	vTaskResume:
 1039              	.LFB16:
1703:FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1040              		.loc 1 1703 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 0
 1043              		@ frame_needed = 0, uses_anonymous_args = 0
 1044              	.LVL105:
 1045 03e4 70B5     		push	{r4, r5, r6, lr}	@
 1046              	.LCFI10:
 1047              		.cfi_def_cfa_offset 16
 1048              		.cfi_offset 4, -16
 1049              		.cfi_offset 5, -12
 1050              		.cfi_offset 6, -8
 1051              		.cfi_offset 14, -4
1711:FreeRTOS/Source/tasks.c **** 		{
 1052              		.loc 1 1711 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 111


 1053 03e6 0446     		mov	r4, r0	@ xTaskToResume, xTaskToResume
 1054 03e8 60B3     		cbz	r0, .L99	@ xTaskToResume,
1711:FreeRTOS/Source/tasks.c **** 		{
 1055              		.loc 1 1711 0 is_stmt 0 discriminator 1
 1056 03ea 174D     		ldr	r5, .L107	@ tmp123,
 1057 03ec 6B6B     		ldr	r3, [r5, #52]	@ D.6696, pxCurrentTCB
 1058 03ee 9842     		cmp	r0, r3	@ xTaskToResume, D.6696
 1059 03f0 28D0     		beq	.L99	@,
1713:FreeRTOS/Source/tasks.c **** 			{
 1060              		.loc 1 1713 0 is_stmt 1
 1061 03f2 FFF7FEFF 		bl	vPortEnterCritical	@
 1062              	.LVL106:
1715:FreeRTOS/Source/tasks.c **** 				{
 1063              		.loc 1 1715 0
 1064 03f6 2046     		mov	r0, r4	@, xTaskToResume
 1065 03f8 FFF702FE 		bl	prvTaskIsTaskSuspended	@
 1066              	.LVL107:
 1067 03fc F0B1     		cbz	r0, .L102	@,
1721:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1068              		.loc 1 1721 0
 1069 03fe 261D     		adds	r6, r4, #4	@ D.6698, xTaskToResume,
 1070 0400 3046     		mov	r0, r6	@, D.6698
 1071 0402 FFF7FEFF 		bl	uxListRemove	@
 1072              	.LVL108:
1722:FreeRTOS/Source/tasks.c **** 
 1073              		.loc 1 1722 0
 1074 0406 E16A     		ldr	r1, [r4, #44]	@ D.6699, MEM[(struct TCB_t *)xTaskToResume_3(D)].uxPriority
 1075 0408 AA6B     		ldr	r2, [r5, #56]	@ D.6699, uxTopReadyPriority
 1076 040a 0123     		movs	r3, #1	@ tmp126,
 1077 040c 8B40     		lsls	r3, r3, r1	@ D.6699, tmp126, D.6699
 1078 040e 1343     		orrs	r3, r3, r2	@, D.6699, D.6699, D.6699
 1079 0410 AB63     		str	r3, [r5, #56]	@ D.6699, uxTopReadyPriority
 1080 0412 1420     		movs	r0, #20	@ tmp131,
 1081 0414 05F14403 		add	r3, r5, #68	@ tmp129, tmp123,
 1082 0418 00FB0130 		mla	r0, r0, r1, r3	@, tmp131, D.6699, tmp129
 1083 041c 3146     		mov	r1, r6	@, D.6698
 1084 041e FFF7FEFF 		bl	vListInsertEnd	@
 1085              	.LVL109:
1725:FreeRTOS/Source/tasks.c **** 					{
 1086              		.loc 1 1725 0
 1087 0422 6B6B     		ldr	r3, [r5, #52]	@ D.6696, pxCurrentTCB
 1088 0424 E26A     		ldr	r2, [r4, #44]	@ MEM[(struct TCB_t *)xTaskToResume_3(D)].uxPriority, MEM[(struct TCB_t *)xTaskT
 1089 0426 DB6A     		ldr	r3, [r3, #44]	@ _19->uxPriority, _19->uxPriority
 1090 0428 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)xTaskToResume_3(D)].uxPriority, _19->uxPriority
 1091 042a 07D3     		bcc	.L102	@,
1730:FreeRTOS/Source/tasks.c **** 					}
 1092              		.loc 1 1730 0
 1093 042c 074B     		ldr	r3, .L107+4	@ tmp136,
 1094 042e 4FF08052 		mov	r2, #268435456	@ tmp137,
 1095 0432 1A60     		str	r2, [r3]	@ tmp137, MEM[(volatile uint32_t *)3758157060B]
 1096              	@ 1730 "FreeRTOS/Source/tasks.c" 1
 1097 0434 BFF34F8F 		dsb
 1098              	@ 0 "" 2
 1099              	@ 1730 "FreeRTOS/Source/tasks.c" 1
 1100 0438 BFF36F8F 		isb
 1101              	@ 0 "" 2
 1102              		.thumb
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 112


 1103              	.L102:
1748:FreeRTOS/Source/tasks.c **** 
 1104              		.loc 1 1748 0
 1105 043c BDE87040 		pop	{r4, r5, r6, lr}	@
 1106              	.LCFI11:
 1107              		.cfi_remember_state
 1108              		.cfi_restore 14
 1109              		.cfi_restore 6
 1110              		.cfi_restore 5
 1111              		.cfi_restore 4
 1112              		.cfi_def_cfa_offset 0
 1113              	.LVL110:
1742:FreeRTOS/Source/tasks.c **** 		}
 1114              		.loc 1 1742 0
 1115 0440 FFF7FEBF 		b	vPortExitCritical	@
 1116              	.LVL111:
 1117              	.L99:
 1118              	.LCFI12:
 1119              		.cfi_restore_state
 1120 0444 70BD     		pop	{r4, r5, r6, pc}	@
 1121              	.L108:
 1122 0446 00BF     		.align	2
 1123              	.L107:
 1124 0448 00000000 		.word	.LANCHOR0
 1125 044c 04ED00E0 		.word	-536810236
 1126              		.cfi_endproc
 1127              	.LFE16:
 1128              		.size	vTaskResume, .-vTaskResume
 1129              		.align	1
 1130              		.global	xTaskResumeFromISR
 1131              		.thumb
 1132              		.thumb_func
 1133              		.type	xTaskResumeFromISR, %function
 1134              	xTaskResumeFromISR:
 1135              	.LFB17:
1757:FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1136              		.loc 1 1757 0
 1137              		.cfi_startproc
 1138              		@ args = 0, pretend = 0, frame = 0
 1139              		@ frame_needed = 0, uses_anonymous_args = 0
 1140              	.LVL112:
 1141 0450 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 1142              	.LCFI13:
 1143              		.cfi_def_cfa_offset 24
 1144              		.cfi_offset 4, -24
 1145              		.cfi_offset 5, -20
 1146              		.cfi_offset 6, -16
 1147              		.cfi_offset 7, -12
 1148              		.cfi_offset 8, -8
 1149              		.cfi_offset 14, -4
1757:FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1150              		.loc 1 1757 0
 1151 0454 0646     		mov	r6, r0	@ xTaskToResume, xTaskToResume
 1152              	.LVL113:
 1153              	.LBB75:
 1154              	.LBB76:
 253:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 113


 1155              		.loc 2 253 0
 1156              	@ 253 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1157 0456 EFF31187 			mrs r7, basepri												@ uxSavedInterruptStatus
 1158 045a 4FF0BF03 		mov r3, #191													@ ulNewBASEPRI,
 1159 045e 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 1160 0462 BFF36F8F 		isb														
 1161 0466 BFF34F8F 		dsb														
 1162              	
 1163              	@ 0 "" 2
 1164              	.LVL114:
 1165              		.thumb
 1166              	.LBE76:
 1167              	.LBE75:
1784:FreeRTOS/Source/tasks.c **** 			{
 1168              		.loc 1 1784 0
 1169 046a FFF7C9FD 		bl	prvTaskIsTaskSuspended	@
 1170              	.LVL115:
 1171 046e 28B3     		cbz	r0, .L112	@ D.6704,
1789:FreeRTOS/Source/tasks.c **** 				{
 1172              		.loc 1 1789 0
 1173 0470 154D     		ldr	r5, .L113	@ tmp131,
 1174 0472 D5F8F030 		ldr	r3, [r5, #240]	@ D.6705, uxSchedulerSuspended
 1175 0476 CBB9     		cbnz	r3, .L111	@ D.6705,
1793:FreeRTOS/Source/tasks.c **** 					{
 1176              		.loc 1 1793 0
 1177 0478 6B6B     		ldr	r3, [r5, #52]	@ D.6707, pxCurrentTCB
 1178 047a F46A     		ldr	r4, [r6, #44]	@ MEM[(struct TCB_t *)xTaskToResume_4(D)].uxPriority, MEM[(struct TCB_t *)xTaskT
 1179 047c DB6A     		ldr	r3, [r3, #44]	@ _11->uxPriority, _11->uxPriority
1802:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1180              		.loc 1 1802 0
 1181 047e 06F10408 		add	r8, r6, #4	@ D.6706, xTaskToResume,
1793:FreeRTOS/Source/tasks.c **** 					{
 1182              		.loc 1 1793 0
 1183 0482 9C42     		cmp	r4, r3	@ MEM[(struct TCB_t *)xTaskToResume_4(D)].uxPriority, _11->uxPriority
1802:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1184              		.loc 1 1802 0
 1185 0484 4046     		mov	r0, r8	@, D.6706
1793:FreeRTOS/Source/tasks.c **** 					{
 1186              		.loc 1 1793 0
 1187 0486 34BF     		ite	cc
 1188 0488 0024     		movcc	r4, #0	@ xYieldRequired,
 1189 048a 0124     		movcs	r4, #1	@ xYieldRequired,
 1190              	.LVL116:
1802:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1191              		.loc 1 1802 0
 1192 048c FFF7FEFF 		bl	uxListRemove	@
 1193              	.LVL117:
1803:FreeRTOS/Source/tasks.c **** 				}
 1194              		.loc 1 1803 0
 1195 0490 F16A     		ldr	r1, [r6, #44]	@ D.6705, MEM[(struct TCB_t *)xTaskToResume_4(D)].uxPriority
 1196 0492 AA6B     		ldr	r2, [r5, #56]	@ D.6705, uxTopReadyPriority
 1197 0494 0123     		movs	r3, #1	@ tmp139,
 1198 0496 8B40     		lsls	r3, r3, r1	@ D.6705, tmp139, D.6705
 1199 0498 1343     		orrs	r3, r3, r2	@, D.6705, D.6705, D.6705
 1200 049a AB63     		str	r3, [r5, #56]	@ D.6705, uxTopReadyPriority
 1201 049c 1420     		movs	r0, #20	@ tmp144,
 1202 049e 4435     		adds	r5, r5, #68	@ tmp142, tmp131,
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 114


 1203 04a0 00FB0150 		mla	r0, r0, r1, r5	@, tmp144, D.6705, tmp142
 1204 04a4 4146     		mov	r1, r8	@, D.6706
 1205 04a6 FFF7FEFF 		bl	vListInsertEnd	@
 1206              	.LVL118:
 1207 04aa 08E0     		b	.L110	@
 1208              	.LVL119:
 1209              	.L111:
1810:FreeRTOS/Source/tasks.c **** 				}
 1210              		.loc 1 1810 0
 1211 04ac 05F11400 		add	r0, r5, #20	@, tmp131,
 1212 04b0 06F11801 		add	r1, r6, #24	@, xTaskToResume,
 1213 04b4 FFF7FEFF 		bl	vListInsertEnd	@
 1214              	.LVL120:
1758:FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1215              		.loc 1 1758 0
 1216 04b8 0024     		movs	r4, #0	@ xYieldRequired,
 1217 04ba 00E0     		b	.L110	@
 1218              	.L112:
 1219 04bc 0446     		mov	r4, r0	@ xYieldRequired, D.6704
 1220              	.LVL121:
 1221              	.L110:
 1222              	.LBB77:
 1223              	.LBB78:
 1224              		.loc 2 271 0
 1225              	@ 271 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1226 04be 87F31188 			msr basepri, r7		@ uxSavedInterruptStatus
 1227              	@ 0 "" 2
 1228              		.thumb
 1229              	.LBE78:
 1230              	.LBE77:
1821:FreeRTOS/Source/tasks.c **** 
 1231              		.loc 1 1821 0
 1232 04c2 2046     		mov	r0, r4	@, xYieldRequired
 1233 04c4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1234              	.LVL122:
 1235              	.L114:
 1236              		.align	2
 1237              	.L113:
 1238 04c8 00000000 		.word	.LANCHOR0
 1239              		.cfi_endproc
 1240              	.LFE17:
 1241              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1242              		.align	1
 1243              		.global	vTaskStartScheduler
 1244              		.thumb
 1245              		.thumb_func
 1246              		.type	vTaskStartScheduler, %function
 1247              	vTaskStartScheduler:
 1248              	.LFB18:
1827:FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1249              		.loc 1 1827 0
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 0
 1252              		@ frame_needed = 0, uses_anonymous_args = 0
 1253 04cc 37B5     		push	{r0, r1, r2, r4, r5, lr}	@
 1254              	.LCFI14:
 1255              		.cfi_def_cfa_offset 24
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 115


 1256              		.cfi_offset 4, -12
 1257              		.cfi_offset 5, -8
 1258              		.cfi_offset 14, -4
1860:FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1259              		.loc 1 1860 0
 1260 04ce 114C     		ldr	r4, .L117	@ tmp115,
 1261 04d0 0025     		movs	r5, #0	@ tmp114,
 1262 04d2 04F1F403 		add	r3, r4, #244	@ tmp116, tmp115,
 1263 04d6 0193     		str	r3, [sp, #4]	@ tmp116,
 1264 04d8 0095     		str	r5, [sp]	@ tmp114,
 1265 04da 0F48     		ldr	r0, .L117+4	@,
 1266 04dc 0F49     		ldr	r1, .L117+8	@,
 1267 04de 7822     		movs	r2, #120	@,
 1268 04e0 2B46     		mov	r3, r5	@, tmp114
 1269 04e2 FFF7FEFF 		bl	xTaskCreate	@
 1270              	.LVL123:
1881:FreeRTOS/Source/tasks.c **** 	{
 1271              		.loc 1 1881 0
 1272 04e6 0128     		cmp	r0, #1	@ xReturn,
 1273 04e8 12D1     		bne	.L115	@,
 1274              	.LBB79:
 1275              	.LBB80:
 237:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1276              		.loc 2 237 0
 1277              	@ 237 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1278 04ea 4FF0BF03 			mov r3, #191													@ ulNewBASEPRI,
 1279 04ee 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 1280 04f2 BFF36F8F 		isb														
 1281 04f6 BFF34F8F 		dsb														
 1282              	
 1283              	@ 0 "" 2
 1284              	.LVL124:
 1285              		.thumb
 1286              	.LBE80:
 1287              	.LBE79:
1898:FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1288              		.loc 1 1898 0
 1289 04fa 4FF0FF33 		mov	r3, #-1	@ tmp119,
 1290 04fe E362     		str	r3, [r4, #44]	@ tmp119, xNextTaskUnblockTime
1899:FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1291              		.loc 1 1899 0
 1292 0500 C4F8E400 		str	r0, [r4, #228]	@ xReturn, xSchedulerRunning
1900:FreeRTOS/Source/tasks.c **** 
 1293              		.loc 1 1900 0
 1294 0504 2563     		str	r5, [r4, #48]	@ tmp114, xTickCount
1930:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1295              		.loc 1 1930 0
 1296 0506 03B0     		add	sp, sp, #12	@,,
 1297              	.LCFI15:
 1298              		.cfi_remember_state
 1299              		.cfi_def_cfa_offset 12
 1300              		@ sp needed	@
 1301 0508 BDE83040 		pop	{r4, r5, lr}	@
 1302              	.LCFI16:
 1303              		.cfi_restore 14
 1304              		.cfi_restore 5
 1305              		.cfi_restore 4
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 116


 1306              		.cfi_def_cfa_offset 0
1909:FreeRTOS/Source/tasks.c **** 		{
 1307              		.loc 1 1909 0
 1308 050c FFF7FEBF 		b	xPortStartScheduler	@
 1309              	.LVL125:
 1310              	.L115:
 1311              	.LCFI17:
 1312              		.cfi_restore_state
1930:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1313              		.loc 1 1930 0
 1314 0510 03B0     		add	sp, sp, #12	@,,
 1315              	.LCFI18:
 1316              		.cfi_def_cfa_offset 12
 1317              		@ sp needed	@
 1318 0512 30BD     		pop	{r4, r5, pc}	@
 1319              	.L118:
 1320              		.align	2
 1321              	.L117:
 1322 0514 00000000 		.word	.LANCHOR0
 1323 0518 00000000 		.word	prvIdleTask
 1324 051c 00000000 		.word	.LC0
 1325              		.cfi_endproc
 1326              	.LFE18:
 1327              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1328              		.align	1
 1329              		.global	vTaskEndScheduler
 1330              		.thumb
 1331              		.thumb_func
 1332              		.type	vTaskEndScheduler, %function
 1333              	vTaskEndScheduler:
 1334              	.LFB19:
1934:FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1335              		.loc 1 1934 0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 0
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339              		@ link register save eliminated.
 1340              	.LBB81:
 1341              	.LBB82:
 237:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1342              		.loc 2 237 0
 1343              	@ 237 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1344 0520 4FF0BF03 			mov r3, #191													@ ulNewBASEPRI,
 1345 0524 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 1346 0528 BFF36F8F 		isb														
 1347 052c BFF34F8F 		dsb														
 1348              	
 1349              	@ 0 "" 2
 1350              	.LVL126:
 1351              		.thumb
 1352              	.LBE82:
 1353              	.LBE81:
1939:FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1354              		.loc 1 1939 0
 1355 0530 024B     		ldr	r3, .L120	@ tmp112,
 1356 0532 0022     		movs	r2, #0	@ tmp113,
 1357 0534 C3F8E420 		str	r2, [r3, #228]	@ tmp113, xSchedulerRunning
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 117


1940:FreeRTOS/Source/tasks.c **** }
 1358              		.loc 1 1940 0
 1359 0538 FFF7FEBF 		b	vPortEndScheduler	@
 1360              	.LVL127:
 1361              	.L121:
 1362              		.align	2
 1363              	.L120:
 1364 053c 00000000 		.word	.LANCHOR0
 1365              		.cfi_endproc
 1366              	.LFE19:
 1367              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1368              		.align	1
 1369              		.global	vTaskSuspendAll
 1370              		.thumb
 1371              		.thumb_func
 1372              		.type	vTaskSuspendAll, %function
 1373              	vTaskSuspendAll:
 1374              	.LFB20:
1945:FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1375              		.loc 1 1945 0
 1376              		.cfi_startproc
 1377              		@ args = 0, pretend = 0, frame = 0
 1378              		@ frame_needed = 0, uses_anonymous_args = 0
 1379              		@ link register save eliminated.
1950:FreeRTOS/Source/tasks.c **** }
 1380              		.loc 1 1950 0
 1381 0540 034A     		ldr	r2, .L123	@ tmp112,
 1382 0542 D2F8F030 		ldr	r3, [r2, #240]	@ D.6722, uxSchedulerSuspended
 1383 0546 0133     		adds	r3, r3, #1	@ D.6722, D.6722,
 1384 0548 C2F8F030 		str	r3, [r2, #240]	@ D.6722, uxSchedulerSuspended
 1385 054c 7047     		bx	lr	@
 1386              	.L124:
 1387 054e 00BF     		.align	2
 1388              	.L123:
 1389 0550 00000000 		.word	.LANCHOR0
 1390              		.cfi_endproc
 1391              	.LFE20:
 1392              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1393              		.align	1
 1394              		.global	xTaskGetTickCount
 1395              		.thumb
 1396              		.thumb_func
 1397              		.type	xTaskGetTickCount, %function
 1398              	xTaskGetTickCount:
 1399              	.LFB22:
2128:FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1400              		.loc 1 2128 0
 1401              		.cfi_startproc
 1402              		@ args = 0, pretend = 0, frame = 0
 1403              		@ frame_needed = 0, uses_anonymous_args = 0
 1404              		@ link register save eliminated.
2134:FreeRTOS/Source/tasks.c **** 	}
 1405              		.loc 1 2134 0
 1406 0554 014B     		ldr	r3, .L126	@ tmp112,
 1407 0556 186B     		ldr	r0, [r3, #48]	@ xTicks, xTickCount
 1408              	.LVL128:
2139:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 118


 1409              		.loc 1 2139 0
 1410 0558 7047     		bx	lr	@
 1411              	.L127:
 1412 055a 00BF     		.align	2
 1413              	.L126:
 1414 055c 00000000 		.word	.LANCHOR0
 1415              		.cfi_endproc
 1416              	.LFE22:
 1417              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1418              		.align	1
 1419              		.global	xTaskGetTickCountFromISR
 1420              		.thumb
 1421              		.thumb_func
 1422              		.type	xTaskGetTickCountFromISR, %function
 1423              	xTaskGetTickCountFromISR:
 1424              	.LFB23:
2143:FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1425              		.loc 1 2143 0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 0
 1428              		@ frame_needed = 0, uses_anonymous_args = 0
 1429              		@ link register save eliminated.
 1430              	.LVL129:
2165:FreeRTOS/Source/tasks.c **** 	}
 1431              		.loc 1 2165 0
 1432 0560 014B     		ldr	r3, .L129	@ tmp112,
 1433 0562 186B     		ldr	r0, [r3, #48]	@ xReturn, xTickCount
 1434              	.LVL130:
2170:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1435              		.loc 1 2170 0
 1436 0564 7047     		bx	lr	@
 1437              	.L130:
 1438 0566 00BF     		.align	2
 1439              	.L129:
 1440 0568 00000000 		.word	.LANCHOR0
 1441              		.cfi_endproc
 1442              	.LFE23:
 1443              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1444              		.align	1
 1445              		.global	uxTaskGetNumberOfTasks
 1446              		.thumb
 1447              		.thumb_func
 1448              		.type	uxTaskGetNumberOfTasks, %function
 1449              	uxTaskGetNumberOfTasks:
 1450              	.LFB24:
2174:FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1451              		.loc 1 2174 0
 1452              		.cfi_startproc
 1453              		@ args = 0, pretend = 0, frame = 0
 1454              		@ frame_needed = 0, uses_anonymous_args = 0
 1455              		@ link register save eliminated.
2177:FreeRTOS/Source/tasks.c **** }
 1456              		.loc 1 2177 0
 1457 056c 014B     		ldr	r3, .L132	@ tmp112,
 1458 056e 186C     		ldr	r0, [r3, #64]	@ D.6729, uxCurrentNumberOfTasks
2178:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1459              		.loc 1 2178 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 119


 1460 0570 7047     		bx	lr	@
 1461              	.L133:
 1462 0572 00BF     		.align	2
 1463              	.L132:
 1464 0574 00000000 		.word	.LANCHOR0
 1465              		.cfi_endproc
 1466              	.LFE24:
 1467              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1468              		.align	1
 1469              		.global	pcTaskGetName
 1470              		.thumb
 1471              		.thumb_func
 1472              		.type	pcTaskGetName, %function
 1473              	pcTaskGetName:
 1474              	.LFB25:
2182:FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1475              		.loc 1 2182 0
 1476              		.cfi_startproc
 1477              		@ args = 0, pretend = 0, frame = 0
 1478              		@ frame_needed = 0, uses_anonymous_args = 0
 1479              		@ link register save eliminated.
 1480              	.LVL131:
2187:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1481              		.loc 1 2187 0
 1482 0578 08B9     		cbnz	r0, .L135	@ xTaskToQuery,
2187:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1483              		.loc 1 2187 0 is_stmt 0 discriminator 1
 1484 057a 024B     		ldr	r3, .L136	@ tmp113,
 1485 057c 586B     		ldr	r0, [r3, #52]	@ xTaskToQuery, pxCurrentTCB
 1486              	.LVL132:
 1487              	.L135:
2190:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1488              		.loc 1 2190 0 is_stmt 1 discriminator 4
 1489 057e 3430     		adds	r0, r0, #52	@, xTaskToQuery,
 1490              	.LVL133:
 1491 0580 7047     		bx	lr	@
 1492              	.L137:
 1493 0582 00BF     		.align	2
 1494              	.L136:
 1495 0584 00000000 		.word	.LANCHOR0
 1496              		.cfi_endproc
 1497              	.LFE25:
 1498              		.size	pcTaskGetName, .-pcTaskGetName
 1499              		.align	1
 1500              		.global	xTaskIncrementTick
 1501              		.thumb
 1502              		.thumb_func
 1503              		.type	xTaskIncrementTick, %function
 1504              	xTaskIncrementTick:
 1505              	.LFB26:
2500:FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 1506              		.loc 1 2500 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 0
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510              	.LVL134:
 1511 0588 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 120


 1512              	.LCFI19:
 1513              		.cfi_def_cfa_offset 24
 1514              		.cfi_offset 4, -24
 1515              		.cfi_offset 5, -20
 1516              		.cfi_offset 6, -16
 1517              		.cfi_offset 7, -12
 1518              		.cfi_offset 8, -8
 1519              		.cfi_offset 14, -4
2509:FreeRTOS/Source/tasks.c **** 	{
 1520              		.loc 1 2509 0
 1521 058c 2E4C     		ldr	r4, .L162	@ tmp144,
 1522 058e D4F8F030 		ldr	r3, [r4, #240]	@ D.6735, uxSchedulerSuspended
 1523 0592 53BB     		cbnz	r3, .L139	@ D.6735,
 1524              	.LBB83:
2513:FreeRTOS/Source/tasks.c **** 
 1525              		.loc 1 2513 0
 1526 0594 266B     		ldr	r6, [r4, #48]	@ D.6735, xTickCount
 1527 0596 0136     		adds	r6, r6, #1	@ xConstTickCount, D.6735,
 1528              	.LVL135:
2517:FreeRTOS/Source/tasks.c **** 
 1529              		.loc 1 2517 0
 1530 0598 2663     		str	r6, [r4, #48]	@ xConstTickCount, xTickCount
2519:FreeRTOS/Source/tasks.c **** 		{
 1531              		.loc 1 2519 0
 1532 059a 56B9     		cbnz	r6, .L140	@ xConstTickCount,
 1533              	.LBB84:
2521:FreeRTOS/Source/tasks.c **** 		}
 1534              		.loc 1 2521 0
 1535 059c A36A     		ldr	r3, [r4, #40]	@ pxTemp, pxDelayedTaskList
 1536              	.LVL136:
 1537 059e E26B     		ldr	r2, [r4, #60]	@ D.6736, pxOverflowDelayedTaskList
 1538 05a0 A262     		str	r2, [r4, #40]	@ D.6736, pxDelayedTaskList
 1539 05a2 E363     		str	r3, [r4, #60]	@ pxTemp, pxOverflowDelayedTaskList
 1540 05a4 D4F8F830 		ldr	r3, [r4, #248]	@ D.6737, xNumOfOverflows
 1541              	.LVL137:
 1542 05a8 0133     		adds	r3, r3, #1	@ D.6737, D.6737,
 1543 05aa C4F8F830 		str	r3, [r4, #248]	@ D.6737, xNumOfOverflows
 1544              	.LVL138:
 1545 05ae FFF737FD 		bl	prvResetNextTaskUnblockTime	@
 1546              	.LVL139:
 1547              	.L140:
 1548              	.LBE84:
2532:FreeRTOS/Source/tasks.c **** 		{
 1549              		.loc 1 2532 0
 1550 05b2 E36A     		ldr	r3, [r4, #44]	@ D.6735, xNextTaskUnblockTime
 1551 05b4 0025     		movs	r5, #0	@ xSwitchRequired,
 1552 05b6 9E42     		cmp	r6, r3	@ xConstTickCount, D.6735
 1553 05b8 0DD3     		bcc	.L142	@,
 1554              	.LVL140:
 1555              	.L141:
2536:FreeRTOS/Source/tasks.c **** 				{
 1556              		.loc 1 2536 0
 1557 05ba A26A     		ldr	r2, [r4, #40]	@ D.6736, pxDelayedTaskList
 1558 05bc 224B     		ldr	r3, .L162	@ tmp154,
 1559 05be 1268     		ldr	r2, [r2]	@ _25->uxNumberOfItems, _25->uxNumberOfItems
 1560 05c0 12B9     		cbnz	r2, .L158	@ _25->uxNumberOfItems,
2543:FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 121


 1561              		.loc 1 2543 0
 1562 05c2 4FF0FF32 		mov	r2, #-1	@ tmp184,
 1563 05c6 05E0     		b	.L161	@
 1564              	.L158:
2552:FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1565              		.loc 1 2552 0
 1566 05c8 9A6A     		ldr	r2, [r3, #40]	@ D.6736, pxDelayedTaskList
 1567 05ca D268     		ldr	r2, [r2, #12]	@ _27->xListEnd.pxNext, _27->xListEnd.pxNext
 1568 05cc D768     		ldr	r7, [r2, #12]	@ pxTCB, _28->pvOwner
 1569              	.LVL141:
2553:FreeRTOS/Source/tasks.c **** 
 1570              		.loc 1 2553 0
 1571 05ce 7A68     		ldr	r2, [r7, #4]	@ xItemValue, pxTCB_29->xStateListItem.xItemValue
 1572              	.LVL142:
2555:FreeRTOS/Source/tasks.c **** 					{
 1573              		.loc 1 2555 0
 1574 05d0 9642     		cmp	r6, r2	@ xConstTickCount, xItemValue
 1575 05d2 11D2     		bcs	.L160	@,
 1576              	.LVL143:
 1577              	.L161:
2543:FreeRTOS/Source/tasks.c **** 					break;
 1578              		.loc 1 2543 0
 1579 05d4 DA62     		str	r2, [r3, #44]	@ tmp184, xNextTaskUnblockTime
 1580              	.LVL144:
 1581              	.L142:
2615:FreeRTOS/Source/tasks.c **** 			{
 1582              		.loc 1 2615 0
 1583 05d6 636B     		ldr	r3, [r4, #52]	@ D.6742, pxCurrentTCB
 1584 05d8 1422     		movs	r2, #20	@ tmp175,
 1585 05da DB6A     		ldr	r3, [r3, #44]	@ _49->uxPriority, _49->uxPriority
 1586 05dc 02FB0343 		mla	r3, r2, r3, r4	@ tmp176, tmp175, _49->uxPriority, tmp187
 1587 05e0 5B6C     		ldr	r3, [r3, #68]	@ pxReadyTasksLists[_50].uxNumberOfItems, pxReadyTasksLists[_50].uxNumberOfItems
2617:FreeRTOS/Source/tasks.c **** 			}
 1588              		.loc 1 2617 0
 1589 05e2 022B     		cmp	r3, #2	@ pxReadyTasksLists[_50].uxNumberOfItems,
 1590 05e4 28BF     		it	cs
 1591 05e6 0125     		movcs	r5, #1	@ xSwitchRequired,
 1592              	.LVL145:
 1593 05e8 25E0     		b	.L147	@
 1594              	.LVL146:
 1595              	.L139:
 1596              	.LBE83:
2643:FreeRTOS/Source/tasks.c **** 
 1597              		.loc 1 2643 0
 1598 05ea D4F8FC30 		ldr	r3, [r4, #252]	@ D.6735, uxPendedTicks
2503:FreeRTOS/Source/tasks.c **** 
 1599              		.loc 1 2503 0
 1600 05ee 0025     		movs	r5, #0	@ xSwitchRequired,
2643:FreeRTOS/Source/tasks.c **** 
 1601              		.loc 1 2643 0
 1602 05f0 0133     		adds	r3, r3, #1	@ D.6735, D.6735,
 1603 05f2 C4F8FC30 		str	r3, [r4, #252]	@ D.6735, uxPendedTicks
 1604 05f6 1EE0     		b	.L147	@
 1605              	.LVL147:
 1606              	.L160:
 1607              	.LBB85:
2571:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 122


 1608              		.loc 1 2571 0
 1609 05f8 07F10408 		add	r8, r7, #4	@ D.6739, pxTCB,
 1610 05fc 4046     		mov	r0, r8	@, D.6739
 1611 05fe FFF7FEFF 		bl	uxListRemove	@
 1612              	.LVL148:
2575:FreeRTOS/Source/tasks.c **** 					{
 1613              		.loc 1 2575 0
 1614 0602 BB6A     		ldr	r3, [r7, #40]	@ pxTCB_29->xEventListItem.pvContainer, pxTCB_29->xEventListItem.pvContainer
 1615 0604 1BB1     		cbz	r3, .L145	@ pxTCB_29->xEventListItem.pvContainer,
2577:FreeRTOS/Source/tasks.c **** 					}
 1616              		.loc 1 2577 0
 1617 0606 07F11800 		add	r0, r7, #24	@, pxTCB,
 1618 060a FFF7FEFF 		bl	uxListRemove	@
 1619              	.LVL149:
 1620              	.L145:
2586:FreeRTOS/Source/tasks.c **** 
 1621              		.loc 1 2586 0
 1622 060e F96A     		ldr	r1, [r7, #44]	@ D.6735, pxTCB_29->uxPriority
 1623 0610 A26B     		ldr	r2, [r4, #56]	@ D.6735, uxTopReadyPriority
 1624 0612 0123     		movs	r3, #1	@ tmp161,
 1625 0614 8B40     		lsls	r3, r3, r1	@ D.6735, tmp161, D.6735
 1626 0616 1343     		orrs	r3, r3, r2	@, D.6735, D.6735, D.6735
 1627 0618 A363     		str	r3, [r4, #56]	@ D.6735, uxTopReadyPriority
 1628 061a 0C4B     		ldr	r3, .L162+4	@ tmp164,
 1629 061c 1420     		movs	r0, #20	@ tmp166,
 1630 061e 00FB0130 		mla	r0, r0, r1, r3	@, tmp166, D.6735, tmp164
 1631 0622 4146     		mov	r1, r8	@, D.6739
 1632 0624 FFF7FEFF 		bl	vListInsertEnd	@
 1633              	.LVL150:
2596:FreeRTOS/Source/tasks.c **** 						{
 1634              		.loc 1 2596 0
 1635 0628 636B     		ldr	r3, [r4, #52]	@ D.6742, pxCurrentTCB
 1636 062a FA6A     		ldr	r2, [r7, #44]	@ pxTCB_29->uxPriority, pxTCB_29->uxPriority
 1637 062c DB6A     		ldr	r3, [r3, #44]	@ _45->uxPriority, _45->uxPriority
2598:FreeRTOS/Source/tasks.c **** 						}
 1638              		.loc 1 2598 0
 1639 062e 9A42     		cmp	r2, r3	@ pxTCB_29->uxPriority, _45->uxPriority
 1640 0630 28BF     		it	cs	@
 1641 0632 0125     		movcs	r5, #1	@, xSwitchRequired,
 1642              	.LVL151:
 1643 0634 C1E7     		b	.L141	@
 1644              	.LVL152:
 1645              	.L147:
 1646              	.LBE85:
2656:FreeRTOS/Source/tasks.c **** 		{
 1647              		.loc 1 2656 0
 1648 0636 D4F80031 		ldr	r3, [r4, #256]	@ D.6737, xYieldPending
2658:FreeRTOS/Source/tasks.c **** 		}
 1649              		.loc 1 2658 0
 1650 063a 002B     		cmp	r3, #0	@ D.6737,
 1651 063c 18BF     		it	ne
 1652 063e 0125     		movne	r5, #1	@ xSwitchRequired,
 1653              	.LVL153:
2668:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1654              		.loc 1 2668 0
 1655 0640 2846     		mov	r0, r5	@, xSwitchRequired
 1656 0642 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 123


 1657              	.L163:
 1658 0646 00BF     		.align	2
 1659              	.L162:
 1660 0648 00000000 		.word	.LANCHOR0
 1661 064c 44000000 		.word	.LANCHOR0+68
 1662              		.cfi_endproc
 1663              	.LFE26:
 1664              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 1665              		.align	1
 1666              		.global	xTaskResumeAll
 1667              		.thumb
 1668              		.thumb_func
 1669              		.type	xTaskResumeAll, %function
 1670              	xTaskResumeAll:
 1671              	.LFB21:
2018:FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 1672              		.loc 1 2018 0
 1673              		.cfi_startproc
 1674              		@ args = 0, pretend = 0, frame = 0
 1675              		@ frame_needed = 0, uses_anonymous_args = 0
 1676              	.LVL154:
 1677 0650 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 1678              	.LCFI20:
 1679              		.cfi_def_cfa_offset 24
 1680              		.cfi_offset 4, -24
 1681              		.cfi_offset 5, -20
 1682              		.cfi_offset 6, -16
 1683              		.cfi_offset 7, -12
 1684              		.cfi_offset 8, -8
 1685              		.cfi_offset 14, -4
2033:FreeRTOS/Source/tasks.c **** 
 1686              		.loc 1 2033 0
 1687 0654 2B4C     		ldr	r4, .L190	@ tmp133,
2031:FreeRTOS/Source/tasks.c **** 	{
 1688              		.loc 1 2031 0
 1689 0656 FFF7FEFF 		bl	vPortEnterCritical	@
 1690              	.LVL155:
2033:FreeRTOS/Source/tasks.c **** 
 1691              		.loc 1 2033 0
 1692 065a D4F8F030 		ldr	r3, [r4, #240]	@ D.6749, uxSchedulerSuspended
 1693 065e 013B     		subs	r3, r3, #1	@ D.6749, D.6749,
 1694 0660 C4F8F030 		str	r3, [r4, #240]	@ D.6749, uxSchedulerSuspended
2035:FreeRTOS/Source/tasks.c **** 		{
 1695              		.loc 1 2035 0
 1696 0664 D4F8F050 		ldr	r5, [r4, #240]	@ D.6749, uxSchedulerSuspended
 1697 0668 0DB1     		cbz	r5, .L165	@ D.6749,
 1698              	.LVL156:
 1699              	.L168:
2020:FreeRTOS/Source/tasks.c **** 
 1700              		.loc 1 2020 0
 1701 066a 0024     		movs	r4, #0	@ xAlreadyYielded,
 1702 066c 44E0     		b	.L166	@
 1703              	.LVL157:
 1704              	.L165:
2037:FreeRTOS/Source/tasks.c **** 			{
 1705              		.loc 1 2037 0
 1706 066e 236C     		ldr	r3, [r4, #64]	@ D.6749, uxCurrentNumberOfTasks
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 124


 1707 0670 002B     		cmp	r3, #0	@ D.6749
 1708 0672 FAD0     		beq	.L168	@
 1709              	.LVL158:
 1710              	.L167:
2041:FreeRTOS/Source/tasks.c **** 				{
 1711              		.loc 1 2041 0
 1712 0674 6369     		ldr	r3, [r4, #20]	@ xPendingReadyList.uxNumberOfItems, xPendingReadyList.uxNumberOfItems
 1713 0676 234E     		ldr	r6, .L190	@ tmp154,
 1714 0678 0BB3     		cbz	r3, .L189	@ xPendingReadyList.uxNumberOfItems,
2043:FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1715              		.loc 1 2043 0
 1716 067a 336A     		ldr	r3, [r6, #32]	@ xPendingReadyList.xListEnd.pxNext, xPendingReadyList.xListEnd.pxNext
2046:FreeRTOS/Source/tasks.c **** 
 1717              		.loc 1 2046 0
 1718 067c 0127     		movs	r7, #1	@ tmp142,
2043:FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1719              		.loc 1 2043 0
 1720 067e DD68     		ldr	r5, [r3, #12]	@ pxTCB, _19->pvOwner
 1721              	.LVL159:
2045:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1722              		.loc 1 2045 0
 1723 0680 05F10408 		add	r8, r5, #4	@ D.6751, pxTCB,
2044:FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1724              		.loc 1 2044 0
 1725 0684 05F11800 		add	r0, r5, #24	@, pxTCB,
 1726 0688 FFF7FEFF 		bl	uxListRemove	@
 1727              	.LVL160:
2045:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1728              		.loc 1 2045 0
 1729 068c 4046     		mov	r0, r8	@, D.6751
 1730 068e FFF7FEFF 		bl	uxListRemove	@
 1731              	.LVL161:
2046:FreeRTOS/Source/tasks.c **** 
 1732              		.loc 1 2046 0
 1733 0692 EA6A     		ldr	r2, [r5, #44]	@ D.6749, pxTCB_20->uxPriority
 1734 0694 B36B     		ldr	r3, [r6, #56]	@ D.6749, uxTopReadyPriority
 1735 0696 07FA02F1 		lsl	r1, r7, r2	@ D.6749, tmp142, D.6749
 1736 069a 0B43     		orrs	r3, r3, r1	@, D.6749, D.6749, D.6749
 1737 069c B363     		str	r3, [r6, #56]	@ D.6749, uxTopReadyPriority
 1738 069e 1420     		movs	r0, #20	@ tmp147,
 1739 06a0 06F14403 		add	r3, r6, #68	@ tmp145, tmp154,
 1740 06a4 00FB0230 		mla	r0, r0, r2, r3	@, tmp147, D.6749, tmp145
 1741 06a8 4146     		mov	r1, r8	@, D.6751
 1742 06aa FFF7FEFF 		bl	vListInsertEnd	@
 1743              	.LVL162:
2050:FreeRTOS/Source/tasks.c **** 					{
 1744              		.loc 1 2050 0
 1745 06ae 736B     		ldr	r3, [r6, #52]	@ D.6754, pxCurrentTCB
 1746 06b0 EA6A     		ldr	r2, [r5, #44]	@ pxTCB_20->uxPriority, pxTCB_20->uxPriority
 1747 06b2 DB6A     		ldr	r3, [r3, #44]	@ _35->uxPriority, _35->uxPriority
 1748 06b4 9A42     		cmp	r2, r3	@ pxTCB_20->uxPriority, _35->uxPriority
2052:FreeRTOS/Source/tasks.c **** 					}
 1749              		.loc 1 2052 0
 1750 06b6 28BF     		it	cs
 1751 06b8 C6F80071 		strcs	r7, [r6, #256]	@ tmp142, xYieldPending
 1752 06bc DAE7     		b	.L167	@
 1753              	.LVL163:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 125


 1754              	.L189:
2060:FreeRTOS/Source/tasks.c **** 				{
 1755              		.loc 1 2060 0
 1756 06be 0DB1     		cbz	r5, .L171	@ pxTCB,
2068:FreeRTOS/Source/tasks.c **** 				}
 1757              		.loc 1 2068 0
 1758 06c0 FFF7AEFC 		bl	prvResetNextTaskUnblockTime	@
 1759              	.LVL164:
 1760              	.L171:
 1761              	.LBB86:
2076:FreeRTOS/Source/tasks.c **** 
 1762              		.loc 1 2076 0
 1763 06c4 D4F8FC50 		ldr	r5, [r4, #252]	@ uxPendedCounts, uxPendedTicks
 1764              	.LVL165:
2078:FreeRTOS/Source/tasks.c **** 					{
 1765              		.loc 1 2078 0
 1766 06c8 4DB1     		cbz	r5, .L172	@ uxPendedCounts,
 1767              	.L174:
2082:FreeRTOS/Source/tasks.c **** 							{
 1768              		.loc 1 2082 0
 1769 06ca FFF7FEFF 		bl	xTaskIncrementTick	@
 1770              	.LVL166:
 1771 06ce 10B1     		cbz	r0, .L173	@,
2084:FreeRTOS/Source/tasks.c **** 							}
 1772              		.loc 1 2084 0
 1773 06d0 0123     		movs	r3, #1	@ tmp158,
 1774 06d2 C4F80031 		str	r3, [r4, #256]	@ tmp158, xYieldPending
 1775              	.L173:
 1776              	.LVL167:
2091:FreeRTOS/Source/tasks.c **** 
 1777              		.loc 1 2091 0
 1778 06d6 013D     		subs	r5, r5, #1	@ uxPendedCounts, uxPendedCounts,
 1779              	.LVL168:
 1780 06d8 F7D1     		bne	.L174	@,
2093:FreeRTOS/Source/tasks.c **** 					}
 1781              		.loc 1 2093 0
 1782 06da C4F8FC50 		str	r5, [r4, #252]	@ uxPendedCounts, uxPendedTicks
 1783              	.L172:
 1784              	.LBE86:
2101:FreeRTOS/Source/tasks.c **** 				{
 1785              		.loc 1 2101 0
 1786 06de D4F80031 		ldr	r3, [r4, #256]	@ D.6755, xYieldPending
 1787 06e2 002B     		cmp	r3, #0	@ D.6755
 1788 06e4 C1D0     		beq	.L168	@
 1789              	.LVL169:
2108:FreeRTOS/Source/tasks.c **** 				}
 1790              		.loc 1 2108 0
 1791 06e6 084B     		ldr	r3, .L190+4	@ tmp162,
 1792 06e8 4FF08052 		mov	r2, #268435456	@ tmp163,
 1793 06ec 1A60     		str	r2, [r3]	@ tmp163, MEM[(volatile uint32_t *)3758157060B]
 1794              	@ 2108 "FreeRTOS/Source/tasks.c" 1
 1795 06ee BFF34F8F 		dsb
 1796              	@ 0 "" 2
 1797              	@ 2108 "FreeRTOS/Source/tasks.c" 1
 1798 06f2 BFF36F8F 		isb
 1799              	@ 0 "" 2
2105:FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 126


 1800              		.loc 1 2105 0
 1801              		.thumb
 1802 06f6 0124     		movs	r4, #1	@ xAlreadyYielded,
 1803              	.LVL170:
 1804              	.L166:
2121:FreeRTOS/Source/tasks.c **** 
 1805              		.loc 1 2121 0
 1806 06f8 FFF7FEFF 		bl	vPortExitCritical	@
 1807              	.LVL171:
2124:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1808              		.loc 1 2124 0
 1809 06fc 2046     		mov	r0, r4	@, xAlreadyYielded
 1810 06fe BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1811              	.LVL172:
 1812              	.L191:
 1813 0702 00BF     		.align	2
 1814              	.L190:
 1815 0704 00000000 		.word	.LANCHOR0
 1816 0708 04ED00E0 		.word	-536810236
 1817              		.cfi_endproc
 1818              	.LFE21:
 1819              		.size	xTaskResumeAll, .-xTaskResumeAll
 1820              		.align	1
 1821              		.global	vTaskDelayUntil
 1822              		.thumb
 1823              		.thumb_func
 1824              		.type	vTaskDelayUntil, %function
 1825              	vTaskDelayUntil:
 1826              	.LFB9:
1141:FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 1827              		.loc 1 1141 0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 0
 1830              		@ frame_needed = 0, uses_anonymous_args = 0
 1831              	.LVL173:
 1832 070c 38B5     		push	{r3, r4, r5, lr}	@
 1833              	.LCFI21:
 1834              		.cfi_def_cfa_offset 16
 1835              		.cfi_offset 3, -16
 1836              		.cfi_offset 4, -12
 1837              		.cfi_offset 5, -8
 1838              		.cfi_offset 14, -4
1141:FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 1839              		.loc 1 1141 0
 1840 070e 0546     		mov	r5, r0	@ pxPreviousWakeTime, pxPreviousWakeTime
 1841 0710 0C46     		mov	r4, r1	@ xTimeIncrement, xTimeIncrement
1149:FreeRTOS/Source/tasks.c **** 		{
 1842              		.loc 1 1149 0
 1843 0712 FFF7FEFF 		bl	vTaskSuspendAll	@
 1844              	.LVL174:
 1845              	.LBB87:
1153:FreeRTOS/Source/tasks.c **** 
 1846              		.loc 1 1153 0
 1847 0716 124B     		ldr	r3, .L203	@ tmp120,
1156:FreeRTOS/Source/tasks.c **** 
 1848              		.loc 1 1156 0
 1849 0718 2A68     		ldr	r2, [r5]	@ D.6758, *pxPreviousWakeTime_7(D)
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 127


1153:FreeRTOS/Source/tasks.c **** 
 1850              		.loc 1 1153 0
 1851 071a 186B     		ldr	r0, [r3, #48]	@ xConstTickCount, xTickCount
 1852              	.LVL175:
1156:FreeRTOS/Source/tasks.c **** 
 1853              		.loc 1 1156 0
 1854 071c 1119     		adds	r1, r2, r4	@ xTimeToWake, D.6758, xTimeIncrement
 1855              	.LVL176:
1158:FreeRTOS/Source/tasks.c **** 			{
 1856              		.loc 1 1158 0
 1857 071e 9042     		cmp	r0, r2	@ xConstTickCount, D.6758
 1858 0720 02D2     		bcs	.L193	@,
1165:FreeRTOS/Source/tasks.c **** 				{
 1859              		.loc 1 1165 0
 1860 0722 9142     		cmp	r1, r2	@ xTimeToWake, D.6758
 1861 0724 07D2     		bcs	.L197	@,
 1862 0726 01E0     		b	.L202	@
 1863              	.L193:
1179:FreeRTOS/Source/tasks.c **** 				{
 1864              		.loc 1 1179 0
 1865 0728 9142     		cmp	r1, r2	@ xTimeToWake, D.6758
 1866 072a 06D3     		bcc	.L198	@,
 1867              	.L202:
1179:FreeRTOS/Source/tasks.c **** 				{
 1868              		.loc 1 1179 0 is_stmt 0 discriminator 1
 1869 072c 8142     		cmp	r1, r0	@ xTimeToWake, xConstTickCount
 1870 072e 94BF     		ite	ls
 1871 0730 0022     		movls	r2, #0	@ xShouldDelay,
 1872 0732 0122     		movhi	r2, #1	@ xShouldDelay,
 1873 0734 02E0     		b	.L194	@
 1874              	.L197:
 1875              	.LBE87:
1143:FreeRTOS/Source/tasks.c **** 
 1876              		.loc 1 1143 0 is_stmt 1
 1877 0736 0022     		movs	r2, #0	@ xShouldDelay,
 1878 0738 00E0     		b	.L194	@
 1879              	.L198:
 1880              	.LBB88:
1181:FreeRTOS/Source/tasks.c **** 				}
 1881              		.loc 1 1181 0
 1882 073a 0122     		movs	r2, #1	@ xShouldDelay,
 1883              	.L194:
 1884              	.LVL177:
1190:FreeRTOS/Source/tasks.c **** 
 1885              		.loc 1 1190 0
 1886 073c 2960     		str	r1, [r5]	@ xTimeToWake, *pxPreviousWakeTime_7(D)
1192:FreeRTOS/Source/tasks.c **** 			{
 1887              		.loc 1 1192 0
 1888 073e 1AB1     		cbz	r2, .L195	@ xShouldDelay,
1198:FreeRTOS/Source/tasks.c **** 			}
 1889              		.loc 1 1198 0
 1890 0740 081A     		subs	r0, r1, r0	@, xTimeToWake, xConstTickCount
 1891              	.LVL178:
 1892 0742 0021     		movs	r1, #0	@,
 1893              	.LVL179:
 1894 0744 FFF77CFC 		bl	prvAddCurrentTaskToDelayedList	@
 1895              	.LVL180:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 128


 1896              	.L195:
 1897              	.LBE88:
1205:FreeRTOS/Source/tasks.c **** 
 1898              		.loc 1 1205 0
 1899 0748 FFF7FEFF 		bl	xTaskResumeAll	@
 1900              	.LVL181:
1209:FreeRTOS/Source/tasks.c **** 		{
 1901              		.loc 1 1209 0
 1902 074c 38B9     		cbnz	r0, .L192	@,
1211:FreeRTOS/Source/tasks.c **** 		}
 1903              		.loc 1 1211 0
 1904 074e 054B     		ldr	r3, .L203+4	@ tmp126,
 1905 0750 4FF08052 		mov	r2, #268435456	@ tmp127,
 1906 0754 1A60     		str	r2, [r3]	@ tmp127, MEM[(volatile uint32_t *)3758157060B]
 1907              	@ 1211 "FreeRTOS/Source/tasks.c" 1
 1908 0756 BFF34F8F 		dsb
 1909              	@ 0 "" 2
 1910              	@ 1211 "FreeRTOS/Source/tasks.c" 1
 1911 075a BFF36F8F 		isb
 1912              	@ 0 "" 2
 1913              		.thumb
 1914              	.L192:
 1915 075e 38BD     		pop	{r3, r4, r5, pc}	@
 1916              	.LVL182:
 1917              	.L204:
 1918              		.align	2
 1919              	.L203:
 1920 0760 00000000 		.word	.LANCHOR0
 1921 0764 04ED00E0 		.word	-536810236
 1922              		.cfi_endproc
 1923              	.LFE9:
 1924              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 1925              		.align	1
 1926              		.global	vTaskDelay
 1927              		.thumb
 1928              		.thumb_func
 1929              		.type	vTaskDelay, %function
 1930              	vTaskDelay:
 1931              	.LFB10:
1225:FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1932              		.loc 1 1225 0
 1933              		.cfi_startproc
 1934              		@ args = 0, pretend = 0, frame = 0
 1935              		@ frame_needed = 0, uses_anonymous_args = 0
 1936              	.LVL183:
 1937 0768 10B5     		push	{r4, lr}	@
 1938              	.LCFI22:
 1939              		.cfi_def_cfa_offset 8
 1940              		.cfi_offset 4, -8
 1941              		.cfi_offset 14, -4
1229:FreeRTOS/Source/tasks.c **** 		{
 1942              		.loc 1 1229 0
 1943 076a 0446     		mov	r4, r0	@ xTicksToDelay, xTicksToDelay
 1944 076c 40B9     		cbnz	r0, .L206	@ xTicksToDelay,
 1945              	.LVL184:
 1946              	.L208:
1256:FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 129


 1947              		.loc 1 1256 0
 1948 076e 0A4B     		ldr	r3, .L212	@ tmp112,
 1949 0770 4FF08052 		mov	r2, #268435456	@ tmp113,
 1950 0774 1A60     		str	r2, [r3]	@ tmp113, MEM[(volatile uint32_t *)3758157060B]
 1951              	@ 1256 "FreeRTOS/Source/tasks.c" 1
 1952 0776 BFF34F8F 		dsb
 1953              	@ 0 "" 2
 1954              	@ 1256 "FreeRTOS/Source/tasks.c" 1
 1955 077a BFF36F8F 		isb
 1956              	@ 0 "" 2
 1957              		.thumb
 1958 077e 10BD     		pop	{r4, pc}	@
 1959              	.LVL185:
 1960              	.L206:
1232:FreeRTOS/Source/tasks.c **** 			{
 1961              		.loc 1 1232 0
 1962 0780 FFF7FEFF 		bl	vTaskSuspendAll	@
 1963              	.LVL186:
1243:FreeRTOS/Source/tasks.c **** 			}
 1964              		.loc 1 1243 0
 1965 0784 2046     		mov	r0, r4	@, xTicksToDelay
 1966 0786 0021     		movs	r1, #0	@,
 1967 0788 FFF75AFC 		bl	prvAddCurrentTaskToDelayedList	@
 1968              	.LVL187:
1245:FreeRTOS/Source/tasks.c **** 		}
 1969              		.loc 1 1245 0
 1970 078c FFF7FEFF 		bl	xTaskResumeAll	@
 1971              	.LVL188:
1254:FreeRTOS/Source/tasks.c **** 		{
 1972              		.loc 1 1254 0
 1973 0790 0028     		cmp	r0, #0	@
 1974 0792 ECD0     		beq	.L208	@
 1975 0794 10BD     		pop	{r4, pc}	@
 1976              	.LVL189:
 1977              	.L213:
 1978 0796 00BF     		.align	2
 1979              	.L212:
 1980 0798 04ED00E0 		.word	-536810236
 1981              		.cfi_endproc
 1982              	.LFE10:
 1983              		.size	vTaskDelay, .-vTaskDelay
 1984              		.align	1
 1985              		.thumb
 1986              		.thumb_func
 1987              		.type	prvIdleTask, %function
 1988              	prvIdleTask:
 1989              	.LFB35:
3132:FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 1990              		.loc 1 3132 0
 1991              		.cfi_startproc
 1992              		@ Volatile: function does not return.
 1993              		@ args = 0, pretend = 0, frame = 0
 1994              		@ frame_needed = 0, uses_anonymous_args = 0
 1995              	.LVL190:
 1996 079c 08B5     		push	{r3, lr}	@
 1997              	.LCFI23:
 1998              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 130


 1999              		.cfi_offset 3, -8
 2000              		.cfi_offset 14, -4
 2001              	.LVL191:
 2002              	.L216:
 2003              	.LBB95:
 2004              	.LBB96:
3376:FreeRTOS/Source/tasks.c **** 		{
 2005              		.loc 1 3376 0
 2006 079e 184C     		ldr	r4, .L224	@ tmp130,
 2007 07a0 D4F8EC30 		ldr	r3, [r4, #236]	@ D.6768, uxDeletedTasksWaitingCleanUp
 2008 07a4 03B3     		cbz	r3, .L223	@ D.6768,
3378:FreeRTOS/Source/tasks.c **** 			{
 2009              		.loc 1 3378 0
 2010 07a6 FFF7FEFF 		bl	vTaskSuspendAll	@
 2011              	.LVL192:
3380:FreeRTOS/Source/tasks.c **** 			}
 2012              		.loc 1 3380 0
 2013 07aa D4F8D050 		ldr	r5, [r4, #208]	@ D.6768, xTasksWaitingTermination.uxNumberOfItems
 2014              	.LVL193:
3382:FreeRTOS/Source/tasks.c **** 
 2015              		.loc 1 3382 0
 2016 07ae FFF7FEFF 		bl	xTaskResumeAll	@
 2017              	.LVL194:
3384:FreeRTOS/Source/tasks.c **** 			{
 2018              		.loc 1 3384 0
 2019 07b2 002D     		cmp	r5, #0	@ D.6768
 2020 07b4 F3D0     		beq	.L216	@
 2021              	.LBB97:
3388:FreeRTOS/Source/tasks.c **** 				{
 2022              		.loc 1 3388 0
 2023 07b6 FFF7FEFF 		bl	vPortEnterCritical	@
 2024              	.LVL195:
3390:FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2025              		.loc 1 3390 0
 2026 07ba D4F8DC30 		ldr	r3, [r4, #220]	@ xTasksWaitingTermination.xListEnd.pxNext, xTasksWaitingTermination.xListEnd.p
 2027 07be DD68     		ldr	r5, [r3, #12]	@ pxTCB, _8->pvOwner
 2028              	.LVL196:
3391:FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 2029              		.loc 1 3391 0
 2030 07c0 281D     		adds	r0, r5, #4	@, pxTCB,
 2031 07c2 FFF7FEFF 		bl	uxListRemove	@
 2032              	.LVL197:
3392:FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2033              		.loc 1 3392 0
 2034 07c6 236C     		ldr	r3, [r4, #64]	@ D.6768, uxCurrentNumberOfTasks
 2035 07c8 013B     		subs	r3, r3, #1	@ D.6768, D.6768,
 2036 07ca 2364     		str	r3, [r4, #64]	@ D.6768, uxCurrentNumberOfTasks
3393:FreeRTOS/Source/tasks.c **** 				}
 2037              		.loc 1 3393 0
 2038 07cc D4F8EC30 		ldr	r3, [r4, #236]	@ D.6768, uxDeletedTasksWaitingCleanUp
 2039 07d0 013B     		subs	r3, r3, #1	@ D.6768, D.6768,
 2040 07d2 C4F8EC30 		str	r3, [r4, #236]	@ D.6768, uxDeletedTasksWaitingCleanUp
3395:FreeRTOS/Source/tasks.c **** 
 2041              		.loc 1 3395 0
 2042 07d6 FFF7FEFF 		bl	vPortExitCritical	@
 2043              	.LVL198:
 2044              	.LBB98:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 131


 2045              	.LBB99:
3600:FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 2046              		.loc 1 3600 0
 2047 07da 286B     		ldr	r0, [r5, #48]	@, pxTCB_9->pxStack
 2048 07dc FFF7FEFF 		bl	vPortFree	@
 2049              	.LVL199:
3601:FreeRTOS/Source/tasks.c **** 		}
 2050              		.loc 1 3601 0
 2051 07e0 2846     		mov	r0, r5	@, pxTCB
 2052 07e2 FFF7FEFF 		bl	vPortFree	@
 2053              	.LVL200:
 2054 07e6 DAE7     		b	.L216	@
 2055              	.LVL201:
 2056              	.L223:
 2057              	.LBE99:
 2058              	.LBE98:
 2059              	.LBE97:
 2060              	.LBE96:
 2061              	.LBE95:
3166:FreeRTOS/Source/tasks.c **** 			{
 2062              		.loc 1 3166 0
 2063 07e8 636C     		ldr	r3, [r4, #68]	@ pxReadyTasksLists[0].uxNumberOfItems, pxReadyTasksLists[0].uxNumberOfItems
 2064 07ea 012B     		cmp	r3, #1	@ pxReadyTasksLists[0].uxNumberOfItems,
 2065 07ec D7D9     		bls	.L216	@,
3168:FreeRTOS/Source/tasks.c **** 			}
 2066              		.loc 1 3168 0
 2067 07ee 054B     		ldr	r3, .L224+4	@ tmp133,
 2068 07f0 4FF08052 		mov	r2, #268435456	@ tmp134,
 2069 07f4 1A60     		str	r2, [r3]	@ tmp134, MEM[(volatile uint32_t *)3758157060B]
 2070              	@ 3168 "FreeRTOS/Source/tasks.c" 1
 2071 07f6 BFF34F8F 		dsb
 2072              	@ 0 "" 2
 2073              	@ 3168 "FreeRTOS/Source/tasks.c" 1
 2074 07fa BFF36F8F 		isb
 2075              	@ 0 "" 2
 2076              		.thumb
 2077 07fe CEE7     		b	.L216	@
 2078              	.L225:
 2079              		.align	2
 2080              	.L224:
 2081 0800 00000000 		.word	.LANCHOR0
 2082 0804 04ED00E0 		.word	-536810236
 2083              		.cfi_endproc
 2084              	.LFE35:
 2085              		.size	prvIdleTask, .-prvIdleTask
 2086              		.align	1
 2087              		.global	vTaskSwitchContext
 2088              		.thumb
 2089              		.thumb_func
 2090              		.type	vTaskSwitchContext, %function
 2091              	vTaskSwitchContext:
 2092              	.LFB27:
2762:FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2093              		.loc 1 2762 0
 2094              		.cfi_startproc
 2095              		@ args = 0, pretend = 0, frame = 0
 2096              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 132


2763:FreeRTOS/Source/tasks.c **** 	{
 2097              		.loc 1 2763 0
 2098 0808 1F4B     		ldr	r3, .L235	@ tmp130,
2762:FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2099              		.loc 1 2762 0
 2100 080a 70B5     		push	{r4, r5, r6, lr}	@
 2101              	.LCFI24:
 2102              		.cfi_def_cfa_offset 16
 2103              		.cfi_offset 4, -16
 2104              		.cfi_offset 5, -12
 2105              		.cfi_offset 6, -8
 2106              		.cfi_offset 14, -4
2763:FreeRTOS/Source/tasks.c **** 	{
 2107              		.loc 1 2763 0
 2108 080c D3F8F020 		ldr	r2, [r3, #240]	@ D.6780, uxSchedulerSuspended
 2109 0810 1C46     		mov	r4, r3	@ tmp175, tmp130
 2110 0812 1AB1     		cbz	r2, .L227	@ D.6780,
2767:FreeRTOS/Source/tasks.c **** 	}
 2111              		.loc 1 2767 0
 2112 0814 0122     		movs	r2, #1	@ tmp132,
 2113 0816 C3F80021 		str	r2, [r3, #256]	@ tmp132, xYieldPending
 2114 081a 70BD     		pop	{r4, r5, r6, pc}	@
 2115              	.L227:
 2116              	.LBB107:
 2117              	.LBB108:
2771:FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2118              		.loc 1 2771 0
 2119 081c C3F80021 		str	r2, [r3, #256]	@ D.6780, xYieldPending
 2120              	.LBB109:
2802:FreeRTOS/Source/tasks.c **** 
 2121              		.loc 1 2802 0
 2122 0820 5B6B     		ldr	r3, [r3, #52]	@ D.6781, pxCurrentTCB
 2123 0822 1B6B     		ldr	r3, [r3, #48]	@ pulStack, _6->pxStack
 2124              	.LVL202:
 2125 0824 1A68     		ldr	r2, [r3]	@ *pulStack_7, *pulStack_7
 2126 0826 B2F1A53F 		cmp	r2, #-1515870811	@ *pulStack_7,
 2127 082a 0BD1     		bne	.L229	@,
 2128 082c 5A68     		ldr	r2, [r3, #4]	@ MEM[(const uint32_t *)pulStack_7 + 4B], MEM[(const uint32_t *)pulStack_7 + 4B]
 2129 082e B2F1A53F 		cmp	r2, #-1515870811	@ MEM[(const uint32_t *)pulStack_7 + 4B],
 2130 0832 07D1     		bne	.L229	@,
 2131 0834 9A68     		ldr	r2, [r3, #8]	@ MEM[(const uint32_t *)pulStack_7 + 8B], MEM[(const uint32_t *)pulStack_7 + 8B]
 2132 0836 B2F1A53F 		cmp	r2, #-1515870811	@ MEM[(const uint32_t *)pulStack_7 + 8B],
 2133 083a 03D1     		bne	.L229	@,
 2134 083c DB68     		ldr	r3, [r3, #12]	@ MEM[(const uint32_t *)pulStack_7 + 12B], MEM[(const uint32_t *)pulStack_7 + 12
 2135              	.LVL203:
 2136 083e B3F1A53F 		cmp	r3, #-1515870811	@ MEM[(const uint32_t *)pulStack_7 + 12B],
 2137 0842 04D0     		beq	.L230	@,
 2138              	.L229:
 2139 0844 606B     		ldr	r0, [r4, #52]	@ D.6781, pxCurrentTCB
 2140 0846 616B     		ldr	r1, [r4, #52]	@ D.6781, pxCurrentTCB
 2141 0848 3431     		adds	r1, r1, #52	@, D.6781,
 2142 084a FFF7FEFF 		bl	vApplicationStackOverflowHook	@
 2143              	.LVL204:
 2144              	.L230:
 2145              	.LBE109:
 2146              	.LBB110:
2806:FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 133


 2147              		.loc 1 2806 0
 2148 084e A36B     		ldr	r3, [r4, #56]	@ D.6780, uxTopReadyPriority
 2149              	.LVL205:
 2150              	.LBB111:
 2151              	.LBB112:
 176:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 2152              		.loc 2 176 0
 2153              	@ 176 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2154 0850 B3FA83F3 		clz r3, r3	@ ucReturn, D.6780
 2155              	@ 0 "" 2
 2156              	.LVL206:
 2157              		.thumb
 2158 0854 DBB2     		uxtb	r3, r3	@ ucReturn, ucReturn
 2159              	.LVL207:
 2160              	.LBE112:
 2161              	.LBE111:
2806:FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2162              		.loc 1 2806 0
 2163 0856 C3F11F03 		rsb	r3, r3, #31	@ uxTopPriority, ucReturn,
 2164              	.LVL208:
 2165              	.LBB113:
 2166 085a 1421     		movs	r1, #20	@ tmp147,
 2167 085c 01FB03F6 		mul	r6, r1, r3	@ tmp146, tmp147, uxTopPriority
 2168 0860 A219     		adds	r2, r4, r6	@ tmp148, tmp175, tmp146
 2169 0862 906C     		ldr	r0, [r2, #72]	@ MEM[(struct List_t *)&pxReadyTasksLists][uxTopPriority_18].pxIndex, MEM[(struc
 2170 0864 094D     		ldr	r5, .L235+4	@ tmp160,
 2171 0866 4068     		ldr	r0, [r0, #4]	@ D.6784, _19->pxNext
 2172 0868 3544     		add	r5, r5, r6	@ D.6785, tmp146
 2173 086a A842     		cmp	r0, r5	@ D.6784, D.6785
 2174 086c 01FB0343 		mla	r3, r1, r3, r4	@ tmp171, tmp176, uxTopPriority, tmp175
 2175              	.LVL209:
 2176 0870 9064     		str	r0, [r2, #72]	@ D.6784, MEM[(struct List_t *)&pxReadyTasksLists][uxTopPriority_18].pxIndex
 2177 0872 08BF     		it	eq
 2178 0874 4068     		ldreq	r0, [r0, #4]	@ MEM[(struct ListItem_t *)_20].pxNext, MEM[(struct ListItem_t *)_20].pxNext
 2179 0876 02F14402 		add	r2, r2, #68	@ tmp149, tmp148,
 2180 087a 08BF     		it	eq
 2181 087c 5060     		streq	r0, [r2, #4]	@ MEM[(struct ListItem_t *)_20].pxNext, MEM[(struct List_t *)&pxReadyTasksLists
 2182 087e 9B6C     		ldr	r3, [r3, #72]	@ MEM[(struct List_t *)&pxReadyTasksLists][uxTopPriority_18].pxIndex, MEM[(struc
 2183 0880 DB68     		ldr	r3, [r3, #12]	@ D.6786, _23->pvOwner
 2184 0882 6363     		str	r3, [r4, #52]	@ D.6786, pxCurrentTCB
 2185 0884 70BD     		pop	{r4, r5, r6, pc}	@
 2186              	.L236:
 2187 0886 00BF     		.align	2
 2188              	.L235:
 2189 0888 00000000 		.word	.LANCHOR0
 2190 088c 4C000000 		.word	.LANCHOR0+76
 2191              	.LBE113:
 2192              	.LBE110:
 2193              	.LBE108:
 2194              	.LBE107:
 2195              		.cfi_endproc
 2196              	.LFE27:
 2197              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2198              		.align	1
 2199              		.global	vTaskSuspend
 2200              		.thumb
 2201              		.thumb_func
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 134


 2202              		.type	vTaskSuspend, %function
 2203              	vTaskSuspend:
 2204              	.LFB14:
1567:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2205              		.loc 1 1567 0
 2206              		.cfi_startproc
 2207              		@ args = 0, pretend = 0, frame = 0
 2208              		@ frame_needed = 0, uses_anonymous_args = 0
 2209              	.LVL210:
 2210 0890 70B5     		push	{r4, r5, r6, lr}	@
 2211              	.LCFI25:
 2212              		.cfi_def_cfa_offset 16
 2213              		.cfi_offset 4, -16
 2214              		.cfi_offset 5, -12
 2215              		.cfi_offset 6, -8
 2216              		.cfi_offset 14, -4
1567:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2217              		.loc 1 1567 0
 2218 0892 0446     		mov	r4, r0	@ xTaskToSuspend, xTaskToSuspend
 2219 0894 234D     		ldr	r5, .L251	@ tmp152,
1570:FreeRTOS/Source/tasks.c **** 		{
 2220              		.loc 1 1570 0
 2221 0896 FFF7FEFF 		bl	vPortEnterCritical	@
 2222              	.LVL211:
1574:FreeRTOS/Source/tasks.c **** 
 2223              		.loc 1 1574 0
 2224 089a 04B9     		cbnz	r4, .L238	@ xTaskToSuspend,
1574:FreeRTOS/Source/tasks.c **** 
 2225              		.loc 1 1574 0 is_stmt 0 discriminator 1
 2226 089c 6C6B     		ldr	r4, [r5, #52]	@ xTaskToSuspend, pxCurrentTCB
 2227              	.LVL212:
 2228              	.L238:
1580:FreeRTOS/Source/tasks.c **** 			{
 2229              		.loc 1 1580 0 is_stmt 1 discriminator 4
 2230 089e 261D     		adds	r6, r4, #4	@ D.6790, xTaskToSuspend,
 2231 08a0 3046     		mov	r0, r6	@, D.6790
 2232 08a2 FFF7FEFF 		bl	uxListRemove	@
 2233              	.LVL213:
 2234 08a6 60B9     		cbnz	r0, .L239	@,
1582:FreeRTOS/Source/tasks.c **** 			}
 2235              		.loc 1 1582 0
 2236 08a8 E06A     		ldr	r0, [r4, #44]	@ D.6791, MEM[(struct TCB_t *)xTaskToSuspend_1].uxPriority
 2237 08aa 1423     		movs	r3, #20	@ tmp130,
 2238 08ac 03FB0053 		mla	r3, r3, r0, r5	@ tmp131, tmp130, D.6791, tmp152
 2239 08b0 5B6C     		ldr	r3, [r3, #68]	@ pxReadyTasksLists[_13].uxNumberOfItems, pxReadyTasksLists[_13].uxNumberOfItems
 2240 08b2 1C49     		ldr	r1, .L251	@ tmp128,
 2241 08b4 2BB9     		cbnz	r3, .L239	@ pxReadyTasksLists[_13].uxNumberOfItems,
1582:FreeRTOS/Source/tasks.c **** 			}
 2242              		.loc 1 1582 0 is_stmt 0 discriminator 1
 2243 08b6 8A6B     		ldr	r2, [r1, #56]	@ D.6791, uxTopReadyPriority
 2244 08b8 0123     		movs	r3, #1	@ tmp136,
 2245 08ba 8340     		lsls	r3, r3, r0	@ D.6791, tmp136, D.6791
 2246 08bc 22EA0303 		bic	r3, r2, r3	@ D.6791, D.6791, D.6791
 2247 08c0 8B63     		str	r3, [r1, #56]	@ D.6791, uxTopReadyPriority
 2248              	.L239:
1590:FreeRTOS/Source/tasks.c **** 			{
 2249              		.loc 1 1590 0 is_stmt 1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 135


 2250 08c2 A36A     		ldr	r3, [r4, #40]	@ MEM[(struct TCB_t *)xTaskToSuspend_1].xEventListItem.pvContainer, MEM[(struct 
 2251 08c4 1BB1     		cbz	r3, .L240	@ MEM[(struct TCB_t *)xTaskToSuspend_1].xEventListItem.pvContainer,
1592:FreeRTOS/Source/tasks.c **** 			}
 2252              		.loc 1 1592 0
 2253 08c6 04F11800 		add	r0, r4, #24	@, xTaskToSuspend,
 2254 08ca FFF7FEFF 		bl	uxListRemove	@
 2255              	.LVL214:
 2256              	.L240:
1599:FreeRTOS/Source/tasks.c **** 		}
 2257              		.loc 1 1599 0
 2258 08ce 1548     		ldr	r0, .L251	@,
 2259 08d0 3146     		mov	r1, r6	@, D.6790
 2260 08d2 FFF7FEFF 		bl	vListInsertEnd	@
 2261              	.LVL215:
1601:FreeRTOS/Source/tasks.c **** 
 2262              		.loc 1 1601 0
 2263 08d6 FFF7FEFF 		bl	vPortExitCritical	@
 2264              	.LVL216:
1603:FreeRTOS/Source/tasks.c **** 		{
 2265              		.loc 1 1603 0
 2266 08da D5F8E430 		ldr	r3, [r5, #228]	@ D.6794, xSchedulerRunning
 2267 08de 2BB1     		cbz	r3, .L241	@ D.6794,
1607:FreeRTOS/Source/tasks.c **** 			{
 2268              		.loc 1 1607 0
 2269 08e0 FFF7FEFF 		bl	vPortEnterCritical	@
 2270              	.LVL217:
1609:FreeRTOS/Source/tasks.c **** 			}
 2271              		.loc 1 1609 0
 2272 08e4 FFF79CFB 		bl	prvResetNextTaskUnblockTime	@
 2273              	.LVL218:
1611:FreeRTOS/Source/tasks.c **** 		}
 2274              		.loc 1 1611 0
 2275 08e8 FFF7FEFF 		bl	vPortExitCritical	@
 2276              	.LVL219:
 2277              	.L241:
1618:FreeRTOS/Source/tasks.c **** 		{
 2278              		.loc 1 1618 0
 2279 08ec 6A6B     		ldr	r2, [r5, #52]	@ D.6795, pxCurrentTCB
 2280 08ee 0D4B     		ldr	r3, .L251	@ tmp143,
 2281 08f0 9442     		cmp	r4, r2	@ xTaskToSuspend, D.6795
 2282 08f2 15D1     		bne	.L237	@,
1620:FreeRTOS/Source/tasks.c **** 			{
 2283              		.loc 1 1620 0
 2284 08f4 D3F8E420 		ldr	r2, [r3, #228]	@ D.6794, xSchedulerRunning
 2285 08f8 42B1     		cbz	r2, .L243	@ D.6794,
1624:FreeRTOS/Source/tasks.c **** 			}
 2286              		.loc 1 1624 0
 2287 08fa 0B4B     		ldr	r3, .L251+4	@ tmp145,
 2288 08fc 4FF08052 		mov	r2, #268435456	@ tmp146,
 2289 0900 1A60     		str	r2, [r3]	@ tmp146, MEM[(volatile uint32_t *)3758157060B]
 2290              	@ 1624 "FreeRTOS/Source/tasks.c" 1
 2291 0902 BFF34F8F 		dsb
 2292              	@ 0 "" 2
 2293              	@ 1624 "FreeRTOS/Source/tasks.c" 1
 2294 0906 BFF36F8F 		isb
 2295              	@ 0 "" 2
 2296              		.thumb
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 136


 2297 090a 70BD     		pop	{r4, r5, r6, pc}	@
 2298              	.LVL220:
 2299              	.L243:
1631:FreeRTOS/Source/tasks.c **** 				{
 2300              		.loc 1 1631 0
 2301 090c 196C     		ldr	r1, [r3, #64]	@ D.6791, uxCurrentNumberOfTasks
 2302 090e 1868     		ldr	r0, [r3]	@ xSuspendedTaskList.uxNumberOfItems, xSuspendedTaskList.uxNumberOfItems
 2303 0910 8842     		cmp	r0, r1	@ xSuspendedTaskList.uxNumberOfItems, D.6791
 2304 0912 01D1     		bne	.L244	@,
1637:FreeRTOS/Source/tasks.c **** 				}
 2305              		.loc 1 1637 0
 2306 0914 5A63     		str	r2, [r3, #52]	@ D.6794, pxCurrentTCB
 2307 0916 70BD     		pop	{r4, r5, r6, pc}	@
 2308              	.LVL221:
 2309              	.L244:
1649:FreeRTOS/Source/tasks.c **** 
 2310              		.loc 1 1649 0
 2311 0918 BDE87040 		pop	{r4, r5, r6, lr}	@
 2312              	.LCFI26:
 2313              		.cfi_remember_state
 2314              		.cfi_restore 14
 2315              		.cfi_restore 6
 2316              		.cfi_restore 5
 2317              		.cfi_restore 4
 2318              		.cfi_def_cfa_offset 0
 2319              	.LVL222:
1641:FreeRTOS/Source/tasks.c **** 				}
 2320              		.loc 1 1641 0
 2321 091c FFF7FEBF 		b	vTaskSwitchContext	@
 2322              	.LVL223:
 2323              	.L237:
 2324              	.LCFI27:
 2325              		.cfi_restore_state
 2326 0920 70BD     		pop	{r4, r5, r6, pc}	@
 2327              	.LVL224:
 2328              	.L252:
 2329 0922 00BF     		.align	2
 2330              	.L251:
 2331 0924 00000000 		.word	.LANCHOR0
 2332 0928 04ED00E0 		.word	-536810236
 2333              		.cfi_endproc
 2334              	.LFE14:
 2335              		.size	vTaskSuspend, .-vTaskSuspend
 2336              		.align	1
 2337              		.global	vTaskPlaceOnEventList
 2338              		.thumb
 2339              		.thumb_func
 2340              		.type	vTaskPlaceOnEventList, %function
 2341              	vTaskPlaceOnEventList:
 2342              	.LFB28:
2821:FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2343              		.loc 1 2821 0
 2344              		.cfi_startproc
 2345              		@ args = 0, pretend = 0, frame = 0
 2346              		@ frame_needed = 0, uses_anonymous_args = 0
 2347              	.LVL225:
 2348 092c 10B5     		push	{r4, lr}	@
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 137


 2349              	.LCFI28:
 2350              		.cfi_def_cfa_offset 8
 2351              		.cfi_offset 4, -8
 2352              		.cfi_offset 14, -4
2821:FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2353              		.loc 1 2821 0
 2354 092e 0C46     		mov	r4, r1	@ xTicksToWait, xTicksToWait
2831:FreeRTOS/Source/tasks.c **** 
 2355              		.loc 1 2831 0
 2356 0930 054B     		ldr	r3, .L254	@ tmp114,
 2357 0932 596B     		ldr	r1, [r3, #52]	@ D.6798, pxCurrentTCB
 2358              	.LVL226:
 2359 0934 1831     		adds	r1, r1, #24	@, D.6798,
 2360 0936 FFF7FEFF 		bl	vListInsert	@
 2361              	.LVL227:
2833:FreeRTOS/Source/tasks.c **** }
 2362              		.loc 1 2833 0
 2363 093a 2046     		mov	r0, r4	@, xTicksToWait
2834:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2364              		.loc 1 2834 0
 2365 093c BDE81040 		pop	{r4, lr}	@
 2366              	.LCFI29:
 2367              		.cfi_restore 14
 2368              		.cfi_restore 4
 2369              		.cfi_def_cfa_offset 0
 2370              	.LVL228:
2833:FreeRTOS/Source/tasks.c **** }
 2371              		.loc 1 2833 0
 2372 0940 0121     		movs	r1, #1	@,
 2373 0942 FFF77DBB 		b	prvAddCurrentTaskToDelayedList	@
 2374              	.LVL229:
 2375              	.L255:
 2376 0946 00BF     		.align	2
 2377              	.L254:
 2378 0948 00000000 		.word	.LANCHOR0
 2379              		.cfi_endproc
 2380              	.LFE28:
 2381              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2382              		.align	1
 2383              		.global	vTaskPlaceOnUnorderedEventList
 2384              		.thumb
 2385              		.thumb_func
 2386              		.type	vTaskPlaceOnUnorderedEventList, %function
 2387              	vTaskPlaceOnUnorderedEventList:
 2388              	.LFB29:
2838:FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2389              		.loc 1 2838 0
 2390              		.cfi_startproc
 2391              		@ args = 0, pretend = 0, frame = 0
 2392              		@ frame_needed = 0, uses_anonymous_args = 0
 2393              	.LVL230:
 2394 094c 10B5     		push	{r4, lr}	@
 2395              	.LCFI30:
 2396              		.cfi_def_cfa_offset 8
 2397              		.cfi_offset 4, -8
 2398              		.cfi_offset 14, -4
2838:FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 138


 2399              		.loc 1 2838 0
 2400 094e 1446     		mov	r4, r2	@ xTicksToWait, xTicksToWait
2848:FreeRTOS/Source/tasks.c **** 
 2401              		.loc 1 2848 0
 2402 0950 074B     		ldr	r3, .L257	@ tmp117,
 2403 0952 41F00041 		orr	r1, r1, #-2147483648	@ D.6803, xItemValue,
 2404              	.LVL231:
 2405 0956 5A6B     		ldr	r2, [r3, #52]	@ D.6802, pxCurrentTCB
 2406              	.LVL232:
 2407 0958 9161     		str	r1, [r2, #24]	@ D.6803, _2->xEventListItem.xItemValue
2855:FreeRTOS/Source/tasks.c **** 
 2408              		.loc 1 2855 0
 2409 095a 596B     		ldr	r1, [r3, #52]	@ D.6802, pxCurrentTCB
 2410 095c 1831     		adds	r1, r1, #24	@, D.6802,
 2411 095e FFF7FEFF 		bl	vListInsertEnd	@
 2412              	.LVL233:
2857:FreeRTOS/Source/tasks.c **** }
 2413              		.loc 1 2857 0
 2414 0962 2046     		mov	r0, r4	@, xTicksToWait
2858:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2415              		.loc 1 2858 0
 2416 0964 BDE81040 		pop	{r4, lr}	@
 2417              	.LCFI31:
 2418              		.cfi_restore 14
 2419              		.cfi_restore 4
 2420              		.cfi_def_cfa_offset 0
 2421              	.LVL234:
2857:FreeRTOS/Source/tasks.c **** }
 2422              		.loc 1 2857 0
 2423 0968 0121     		movs	r1, #1	@,
 2424 096a FFF769BB 		b	prvAddCurrentTaskToDelayedList	@
 2425              	.LVL235:
 2426              	.L258:
 2427 096e 00BF     		.align	2
 2428              	.L257:
 2429 0970 00000000 		.word	.LANCHOR0
 2430              		.cfi_endproc
 2431              	.LFE29:
 2432              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2433              		.align	1
 2434              		.global	xTaskRemoveFromEventList
 2435              		.thumb
 2436              		.thumb_func
 2437              		.type	xTaskRemoveFromEventList, %function
 2438              	xTaskRemoveFromEventList:
 2439              	.LFB30:
2895:FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2440              		.loc 1 2895 0
 2441              		.cfi_startproc
 2442              		@ args = 0, pretend = 0, frame = 0
 2443              		@ frame_needed = 0, uses_anonymous_args = 0
 2444              	.LVL236:
2912:FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2445              		.loc 1 2912 0
 2446 0974 C368     		ldr	r3, [r0, #12]	@ pxEventList_5(D)->xListEnd.pxNext, pxEventList_5(D)->xListEnd.pxNext
2895:FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2447              		.loc 1 2895 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 139


 2448 0976 70B5     		push	{r4, r5, r6, lr}	@
 2449              	.LCFI32:
 2450              		.cfi_def_cfa_offset 16
 2451              		.cfi_offset 4, -16
 2452              		.cfi_offset 5, -12
 2453              		.cfi_offset 6, -8
 2454              		.cfi_offset 14, -4
2912:FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2455              		.loc 1 2912 0
 2456 0978 DD68     		ldr	r5, [r3, #12]	@ pxUnblockedTCB, _6->pvOwner
 2457              	.LVL237:
2916:FreeRTOS/Source/tasks.c **** 	{
 2458              		.loc 1 2916 0
 2459 097a 144C     		ldr	r4, .L265	@ tmp128,
2914:FreeRTOS/Source/tasks.c **** 
 2460              		.loc 1 2914 0
 2461 097c 05F11806 		add	r6, r5, #24	@ D.6808, pxUnblockedTCB,
 2462 0980 3046     		mov	r0, r6	@, D.6808
 2463              	.LVL238:
 2464 0982 FFF7FEFF 		bl	uxListRemove	@
 2465              	.LVL239:
2916:FreeRTOS/Source/tasks.c **** 	{
 2466              		.loc 1 2916 0
 2467 0986 D4F8F030 		ldr	r3, [r4, #240]	@ D.6809, uxSchedulerSuspended
 2468 098a 7BB9     		cbnz	r3, .L260	@ D.6809,
2918:FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2469              		.loc 1 2918 0
 2470 098c 2E1D     		adds	r6, r5, #4	@ D.6808, pxUnblockedTCB,
 2471 098e 3046     		mov	r0, r6	@, D.6808
 2472 0990 FFF7FEFF 		bl	uxListRemove	@
 2473              	.LVL240:
2919:FreeRTOS/Source/tasks.c **** 	}
 2474              		.loc 1 2919 0
 2475 0994 E96A     		ldr	r1, [r5, #44]	@ D.6809, pxUnblockedTCB_7->uxPriority
 2476 0996 A26B     		ldr	r2, [r4, #56]	@ D.6809, uxTopReadyPriority
 2477 0998 0123     		movs	r3, #1	@ tmp131,
 2478 099a 8B40     		lsls	r3, r3, r1	@ D.6809, tmp131, D.6809
 2479 099c 1343     		orrs	r3, r3, r2	@, D.6809, D.6809, D.6809
 2480 099e A363     		str	r3, [r4, #56]	@ D.6809, uxTopReadyPriority
 2481 09a0 1420     		movs	r0, #20	@ tmp136,
 2482 09a2 04F14403 		add	r3, r4, #68	@ tmp134, tmp146,
 2483 09a6 00FB0130 		mla	r0, r0, r1, r3	@, tmp136, D.6809, tmp134
 2484 09aa 01E0     		b	.L264	@
 2485              	.L260:
2925:FreeRTOS/Source/tasks.c **** 	}
 2486              		.loc 1 2925 0
 2487 09ac 04F11400 		add	r0, r4, #20	@, tmp146,
 2488              	.L264:
 2489 09b0 3146     		mov	r1, r6	@, D.6808
 2490 09b2 FFF7FEFF 		bl	vListInsertEnd	@
 2491              	.LVL241:
2928:FreeRTOS/Source/tasks.c **** 	{
 2492              		.loc 1 2928 0
 2493 09b6 636B     		ldr	r3, [r4, #52]	@ D.6812, pxCurrentTCB
 2494 09b8 EA6A     		ldr	r2, [r5, #44]	@ pxUnblockedTCB_7->uxPriority, pxUnblockedTCB_7->uxPriority
 2495 09ba DB6A     		ldr	r3, [r3, #44]	@ _23->uxPriority, _23->uxPriority
 2496 09bc 9A42     		cmp	r2, r3	@ pxUnblockedTCB_7->uxPriority, _23->uxPriority
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 140


 2497              	.LVL242:
2937:FreeRTOS/Source/tasks.c **** 	}
 2498              		.loc 1 2937 0
 2499 09be 83BF     		ittte	hi
 2500 09c0 024B     		ldrhi	r3, .L265	@ tmp140,
 2501 09c2 0120     		movhi	r0, #1	@ tmp144,
 2502 09c4 C3F80001 		strhi	r0, [r3, #256]	@ tmp144, xYieldPending
2941:FreeRTOS/Source/tasks.c **** 	}
 2503              		.loc 1 2941 0
 2504 09c8 0020     		movls	r0, #0	@ xReturn,
 2505              	.LVL243:
2959:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2506              		.loc 1 2959 0
 2507 09ca 70BD     		pop	{r4, r5, r6, pc}	@
 2508              	.LVL244:
 2509              	.L266:
 2510              		.align	2
 2511              	.L265:
 2512 09cc 00000000 		.word	.LANCHOR0
 2513              		.cfi_endproc
 2514              	.LFE30:
 2515              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2516              		.align	1
 2517              		.global	xTaskRemoveFromUnorderedEventList
 2518              		.thumb
 2519              		.thumb_func
 2520              		.type	xTaskRemoveFromUnorderedEventList, %function
 2521              	xTaskRemoveFromUnorderedEventList:
 2522              	.LFB31:
2963:FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2523              		.loc 1 2963 0
 2524              		.cfi_startproc
 2525              		@ args = 0, pretend = 0, frame = 0
 2526              		@ frame_needed = 0, uses_anonymous_args = 0
 2527              	.LVL245:
 2528 09d0 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 2529              	.LCFI33:
 2530              		.cfi_def_cfa_offset 24
 2531              		.cfi_offset 3, -24
 2532              		.cfi_offset 4, -20
 2533              		.cfi_offset 5, -16
 2534              		.cfi_offset 6, -12
 2535              		.cfi_offset 7, -8
 2536              		.cfi_offset 14, -4
2976:FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2537              		.loc 1 2976 0
 2538 09d2 C668     		ldr	r6, [r0, #12]	@ pxUnblockedTCB, pxEventListItem_6(D)->pvOwner
 2539              	.LVL246:
2972:FreeRTOS/Source/tasks.c **** 
 2540              		.loc 1 2972 0
 2541 09d4 41F00041 		orr	r1, r1, #-2147483648	@ D.6815, xItemValue,
 2542              	.LVL247:
 2543 09d8 0160     		str	r1, [r0]	@ D.6815, pxEventListItem_6(D)->xItemValue
2983:FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2544              		.loc 1 2983 0
 2545 09da 371D     		adds	r7, r6, #4	@ D.6816, pxUnblockedTCB,
2978:FreeRTOS/Source/tasks.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 141


 2546              		.loc 1 2978 0
 2547 09dc FFF7FEFF 		bl	uxListRemove	@
 2548              	.LVL248:
2984:FreeRTOS/Source/tasks.c **** 
 2549              		.loc 1 2984 0
 2550 09e0 0E4D     		ldr	r5, .L270	@ tmp127,
2983:FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2551              		.loc 1 2983 0
 2552 09e2 3846     		mov	r0, r7	@, D.6816
 2553 09e4 FFF7FEFF 		bl	uxListRemove	@
 2554              	.LVL249:
2984:FreeRTOS/Source/tasks.c **** 
 2555              		.loc 1 2984 0
 2556 09e8 F26A     		ldr	r2, [r6, #44]	@ D.6815, pxUnblockedTCB_8->uxPriority
 2557 09ea AB6B     		ldr	r3, [r5, #56]	@ D.6815, uxTopReadyPriority
 2558 09ec 0124     		movs	r4, #1	@ tmp129,
 2559 09ee 04FA02F1 		lsl	r1, r4, r2	@ D.6815, tmp129, D.6815
 2560 09f2 0B43     		orrs	r3, r3, r1	@, D.6815, D.6815, D.6815
 2561 09f4 AB63     		str	r3, [r5, #56]	@ D.6815, uxTopReadyPriority
 2562 09f6 1420     		movs	r0, #20	@ tmp134,
 2563 09f8 05F14403 		add	r3, r5, #68	@ tmp132, tmp127,
 2564 09fc 00FB0230 		mla	r0, r0, r2, r3	@, tmp134, D.6815, tmp132
 2565 0a00 3946     		mov	r1, r7	@, D.6816
 2566 0a02 FFF7FEFF 		bl	vListInsertEnd	@
 2567              	.LVL250:
2986:FreeRTOS/Source/tasks.c **** 	{
 2568              		.loc 1 2986 0
 2569 0a06 6B6B     		ldr	r3, [r5, #52]	@ D.6819, pxCurrentTCB
 2570 0a08 F26A     		ldr	r2, [r6, #44]	@ pxUnblockedTCB_8->uxPriority, pxUnblockedTCB_8->uxPriority
 2571 0a0a DB6A     		ldr	r3, [r3, #44]	@ _21->uxPriority, _21->uxPriority
 2572 0a0c 9A42     		cmp	r2, r3	@ pxUnblockedTCB_8->uxPriority, _21->uxPriority
 2573              	.LVL251:
2992:FreeRTOS/Source/tasks.c **** 
 2574              		.loc 1 2992 0
 2575 0a0e 86BF     		itte	hi
 2576 0a10 2046     		movhi	r0, r4	@ xReturn, tmp129
2996:FreeRTOS/Source/tasks.c **** 	}
 2577              		.loc 1 2996 0
 2578 0a12 C5F80041 		strhi	r4, [r5, #256]	@ tmp129, xYieldPending
3000:FreeRTOS/Source/tasks.c **** 	}
 2579              		.loc 1 3000 0
 2580 0a16 0020     		movls	r0, #0	@ xReturn,
 2581              	.LVL252:
3004:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2582              		.loc 1 3004 0
 2583 0a18 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 2584              	.LVL253:
 2585              	.L271:
 2586 0a1a 00BF     		.align	2
 2587              	.L270:
 2588 0a1c 00000000 		.word	.LANCHOR0
 2589              		.cfi_endproc
 2590              	.LFE31:
 2591              		.size	xTaskRemoveFromUnorderedEventList, .-xTaskRemoveFromUnorderedEventList
 2592              		.align	1
 2593              		.global	vTaskSetTimeOutState
 2594              		.thumb
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 142


 2595              		.thumb_func
 2596              		.type	vTaskSetTimeOutState, %function
 2597              	vTaskSetTimeOutState:
 2598              	.LFB32:
3008:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 2599              		.loc 1 3008 0
 2600              		.cfi_startproc
 2601              		@ args = 0, pretend = 0, frame = 0
 2602              		@ frame_needed = 0, uses_anonymous_args = 0
 2603              		@ link register save eliminated.
 2604              	.LVL254:
3010:FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2605              		.loc 1 3010 0
 2606 0a20 034B     		ldr	r3, .L273	@ tmp113,
 2607 0a22 D3F8F820 		ldr	r2, [r3, #248]	@ D.6822, xNumOfOverflows
3011:FreeRTOS/Source/tasks.c **** }
 2608              		.loc 1 3011 0
 2609 0a26 1B6B     		ldr	r3, [r3, #48]	@ D.6823, xTickCount
3010:FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2610              		.loc 1 3010 0
 2611 0a28 0260     		str	r2, [r0]	@ D.6822, pxTimeOut_3(D)->xOverflowCount
3011:FreeRTOS/Source/tasks.c **** }
 2612              		.loc 1 3011 0
 2613 0a2a 4360     		str	r3, [r0, #4]	@ D.6823, pxTimeOut_3(D)->xTimeOnEntering
 2614 0a2c 7047     		bx	lr	@
 2615              	.L274:
 2616 0a2e 00BF     		.align	2
 2617              	.L273:
 2618 0a30 00000000 		.word	.LANCHOR0
 2619              		.cfi_endproc
 2620              	.LFE32:
 2621              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2622              		.align	1
 2623              		.global	xTaskCheckForTimeOut
 2624              		.thumb
 2625              		.thumb_func
 2626              		.type	xTaskCheckForTimeOut, %function
 2627              	xTaskCheckForTimeOut:
 2628              	.LFB33:
3016:FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 2629              		.loc 1 3016 0
 2630              		.cfi_startproc
 2631              		@ args = 0, pretend = 0, frame = 0
 2632              		@ frame_needed = 0, uses_anonymous_args = 0
 2633              	.LVL255:
 2634 0a34 38B5     		push	{r3, r4, r5, lr}	@
 2635              	.LCFI34:
 2636              		.cfi_def_cfa_offset 16
 2637              		.cfi_offset 3, -16
 2638              		.cfi_offset 4, -12
 2639              		.cfi_offset 5, -8
 2640              		.cfi_offset 14, -4
3016:FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 2641              		.loc 1 3016 0
 2642 0a36 0D46     		mov	r5, r1	@ pxTicksToWait, pxTicksToWait
 2643 0a38 0446     		mov	r4, r0	@ pxTimeOut, pxTimeOut
3022:FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 143


 2644              		.loc 1 3022 0
 2645 0a3a FFF7FEFF 		bl	vPortEnterCritical	@
 2646              	.LVL256:
 2647              	.LBB114:
3039:FreeRTOS/Source/tasks.c **** 			{
 2648              		.loc 1 3039 0
 2649 0a3e 2B68     		ldr	r3, [r5]	@ D.6826, *pxTicksToWait_6(D)
3025:FreeRTOS/Source/tasks.c **** 
 2650              		.loc 1 3025 0
 2651 0a40 0D4A     		ldr	r2, .L281	@ tmp123,
3039:FreeRTOS/Source/tasks.c **** 			{
 2652              		.loc 1 3039 0
 2653 0a42 591C     		adds	r1, r3, #1	@, D.6826,
3025:FreeRTOS/Source/tasks.c **** 
 2654              		.loc 1 3025 0
 2655 0a44 106B     		ldr	r0, [r2, #48]	@ xConstTickCount, xTickCount
 2656              	.LVL257:
3039:FreeRTOS/Source/tasks.c **** 			{
 2657              		.loc 1 3039 0
 2658 0a46 10D0     		beq	.L278	@,
3049:FreeRTOS/Source/tasks.c **** 		{
 2659              		.loc 1 3049 0
 2660 0a48 D2F8F810 		ldr	r1, [r2, #248]	@ D.6827, xNumOfOverflows
 2661 0a4c 2268     		ldr	r2, [r4]	@ pxTimeOut_9(D)->xOverflowCount, pxTimeOut_9(D)->xOverflowCount
 2662 0a4e 9142     		cmp	r1, r2	@ D.6827, pxTimeOut_9(D)->xOverflowCount
 2663 0a50 6268     		ldr	r2, [r4, #4]	@ D.6826, pxTimeOut_9(D)->xTimeOnEntering
 2664 0a52 01D0     		beq	.L277	@,
3049:FreeRTOS/Source/tasks.c **** 		{
 2665              		.loc 1 3049 0 is_stmt 0 discriminator 1
 2666 0a54 9042     		cmp	r0, r2	@ xConstTickCount, D.6826
 2667 0a56 0AD2     		bcs	.L280	@,
 2668              	.L277:
3058:FreeRTOS/Source/tasks.c **** 		{
 2669              		.loc 1 3058 0 is_stmt 1
 2670 0a58 811A     		subs	r1, r0, r2	@ D.6826, xConstTickCount, D.6826
 2671 0a5a 9942     		cmp	r1, r3	@ D.6826, D.6826
 2672 0a5c 07D2     		bcs	.L280	@,
3061:FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2673              		.loc 1 3061 0
 2674 0a5e 121A     		subs	r2, r2, r0	@ D.6826, D.6826, xConstTickCount
 2675 0a60 1344     		add	r3, r3, r2	@ D.6826, D.6826
 2676 0a62 2B60     		str	r3, [r5]	@ D.6826, *pxTicksToWait_6(D)
3062:FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 2677              		.loc 1 3062 0
 2678 0a64 2046     		mov	r0, r4	@, pxTimeOut
 2679              	.LVL258:
 2680 0a66 FFF7FEFF 		bl	vTaskSetTimeOutState	@
 2681              	.LVL259:
 2682              	.L278:
3044:FreeRTOS/Source/tasks.c **** 			}
 2683              		.loc 1 3044 0
 2684 0a6a 0024     		movs	r4, #0	@ xReturn,
 2685              	.LVL260:
 2686 0a6c 00E0     		b	.L276	@
 2687              	.LVL261:
 2688              	.L280:
3056:FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 144


 2689              		.loc 1 3056 0
 2690 0a6e 0124     		movs	r4, #1	@ xReturn,
 2691              	.LVL262:
 2692              	.L276:
 2693              	.LBE114:
3070:FreeRTOS/Source/tasks.c **** 
 2694              		.loc 1 3070 0
 2695 0a70 FFF7FEFF 		bl	vPortExitCritical	@
 2696              	.LVL263:
3073:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2697              		.loc 1 3073 0
 2698 0a74 2046     		mov	r0, r4	@, xReturn
 2699 0a76 38BD     		pop	{r3, r4, r5, pc}	@
 2700              	.LVL264:
 2701              	.L282:
 2702              		.align	2
 2703              	.L281:
 2704 0a78 00000000 		.word	.LANCHOR0
 2705              		.cfi_endproc
 2706              	.LFE33:
 2707              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 2708              		.align	1
 2709              		.global	vTaskMissedYield
 2710              		.thumb
 2711              		.thumb_func
 2712              		.type	vTaskMissedYield, %function
 2713              	vTaskMissedYield:
 2714              	.LFB34:
3077:FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 2715              		.loc 1 3077 0
 2716              		.cfi_startproc
 2717              		@ args = 0, pretend = 0, frame = 0
 2718              		@ frame_needed = 0, uses_anonymous_args = 0
 2719              		@ link register save eliminated.
3078:FreeRTOS/Source/tasks.c **** }
 2720              		.loc 1 3078 0
 2721 0a7c 024B     		ldr	r3, .L284	@ tmp110,
 2722 0a7e 0122     		movs	r2, #1	@ tmp111,
 2723 0a80 C3F80021 		str	r2, [r3, #256]	@ tmp111, xYieldPending
 2724 0a84 7047     		bx	lr	@
 2725              	.L285:
 2726 0a86 00BF     		.align	2
 2727              	.L284:
 2728 0a88 00000000 		.word	.LANCHOR0
 2729              		.cfi_endproc
 2730              	.LFE34:
 2731              		.size	vTaskMissedYield, .-vTaskMissedYield
 2732              		.align	1
 2733              		.global	xTaskGetCurrentTaskHandle
 2734              		.thumb
 2735              		.thumb_func
 2736              		.type	xTaskGetCurrentTaskHandle, %function
 2737              	xTaskGetCurrentTaskHandle:
 2738              	.LFB40:
3662:FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 2739              		.loc 1 3662 0
 2740              		.cfi_startproc
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 145


 2741              		@ args = 0, pretend = 0, frame = 0
 2742              		@ frame_needed = 0, uses_anonymous_args = 0
 2743              		@ link register save eliminated.
3668:FreeRTOS/Source/tasks.c **** 
 2744              		.loc 1 3668 0
 2745 0a8c 014B     		ldr	r3, .L287	@ tmp112,
 2746 0a8e 586B     		ldr	r0, [r3, #52]	@ xReturn, pxCurrentTCB
 2747              	.LVL265:
3671:FreeRTOS/Source/tasks.c **** 
 2748              		.loc 1 3671 0
 2749 0a90 7047     		bx	lr	@
 2750              	.L288:
 2751 0a92 00BF     		.align	2
 2752              	.L287:
 2753 0a94 00000000 		.word	.LANCHOR0
 2754              		.cfi_endproc
 2755              	.LFE40:
 2756              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 2757              		.align	1
 2758              		.global	vTaskPriorityInherit
 2759              		.thumb
 2760              		.thumb_func
 2761              		.type	vTaskPriorityInherit, %function
 2762              	vTaskPriorityInherit:
 2763              	.LFB41:
3707:FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 2764              		.loc 1 3707 0
 2765              		.cfi_startproc
 2766              		@ args = 0, pretend = 0, frame = 0
 2767              		@ frame_needed = 0, uses_anonymous_args = 0
 2768              	.LVL266:
 2769 0a98 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 2770              	.LCFI35:
 2771              		.cfi_def_cfa_offset 32
 2772              		.cfi_offset 3, -32
 2773              		.cfi_offset 4, -28
 2774              		.cfi_offset 5, -24
 2775              		.cfi_offset 6, -20
 2776              		.cfi_offset 7, -16
 2777              		.cfi_offset 8, -12
 2778              		.cfi_offset 9, -8
 2779              		.cfi_offset 14, -4
3712:FreeRTOS/Source/tasks.c **** 		{
 2780              		.loc 1 3712 0
 2781 0a9c 0446     		mov	r4, r0	@ pxMutexHolder, pxMutexHolder
 2782 0a9e 0028     		cmp	r0, #0	@ pxMutexHolder
 2783 0aa0 3ED0     		beq	.L289	@
3717:FreeRTOS/Source/tasks.c **** 			{
 2784              		.loc 1 3717 0
 2785 0aa2 204D     		ldr	r5, .L300	@ tmp139,
 2786 0aa4 C36A     		ldr	r3, [r0, #44]	@ D.6834, MEM[(struct TCB_t *)pxMutexHolder_5(D)].uxPriority
 2787 0aa6 6A6B     		ldr	r2, [r5, #52]	@ D.6835, pxCurrentTCB
 2788 0aa8 D26A     		ldr	r2, [r2, #44]	@ _8->uxPriority, _8->uxPriority
 2789 0aaa 9342     		cmp	r3, r2	@ D.6834, _8->uxPriority
 2790 0aac 38D2     		bcs	.L289	@,
3722:FreeRTOS/Source/tasks.c **** 				{
 2791              		.loc 1 3722 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 146


 2792 0aae 8269     		ldr	r2, [r0, #24]	@ MEM[(struct TCB_t *)pxMutexHolder_5(D)].xEventListItem.xItemValue, MEM[(struct
3733:FreeRTOS/Source/tasks.c **** 				{
 2793              		.loc 1 3733 0
 2794 0ab0 1C4E     		ldr	r6, .L300	@ tmp145,
3722:FreeRTOS/Source/tasks.c **** 				{
 2795              		.loc 1 3722 0
 2796 0ab2 002A     		cmp	r2, #0	@ MEM[(struct TCB_t *)pxMutexHolder_5(D)].xEventListItem.xItemValue,
3724:FreeRTOS/Source/tasks.c **** 				}
 2797              		.loc 1 3724 0
 2798 0ab4 A8BF     		it	ge
 2799 0ab6 6A6B     		ldrge	r2, [r5, #52]	@ D.6835, pxCurrentTCB
3733:FreeRTOS/Source/tasks.c **** 				{
 2800              		.loc 1 3733 0
 2801 0ab8 06F14407 		add	r7, r6, #68	@ tmp146, tmp145,
3724:FreeRTOS/Source/tasks.c **** 				}
 2802              		.loc 1 3724 0
 2803 0abc A8BF     		it	ge
 2804 0abe D26A     		ldrge	r2, [r2, #44]	@ _12->uxPriority, _12->uxPriority
3733:FreeRTOS/Source/tasks.c **** 				{
 2805              		.loc 1 3733 0
 2806 0ac0 4FF01408 		mov	r8, #20	@ tmp148,
 2807 0ac4 08FB0373 		mla	r3, r8, r3, r7	@ D.6838, tmp148, D.6834, tmp146
3724:FreeRTOS/Source/tasks.c **** 				}
 2808              		.loc 1 3724 0
 2809 0ac8 A4BF     		itt	ge
 2810 0aca C2F10502 		rsbge	r2, r2, #5	@ D.6834, _12->uxPriority,
 2811 0ace 8261     		strge	r2, [r0, #24]	@ D.6834, MEM[(struct TCB_t *)pxMutexHolder_5(D)].xEventListItem.xItemValue
3733:FreeRTOS/Source/tasks.c **** 				{
 2812              		.loc 1 3733 0
 2813 0ad0 4269     		ldr	r2, [r0, #20]	@ MEM[(struct TCB_t *)pxMutexHolder_5(D)].xStateListItem.pvContainer, MEM[(struc
 2814 0ad2 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)pxMutexHolder_5(D)].xStateListItem.pvContainer, D.6838
 2815 0ad4 21D1     		bne	.L299	@,
3735:FreeRTOS/Source/tasks.c **** 					{
 2816              		.loc 1 3735 0
 2817 0ad6 00F10409 		add	r9, r0, #4	@ D.6839, pxMutexHolder,
 2818 0ada 4846     		mov	r0, r9	@, D.6839
 2819              	.LVL267:
 2820 0adc FFF7FEFF 		bl	uxListRemove	@
 2821              	.LVL268:
 2822 0ae0 58B9     		cbnz	r0, .L294	@,
3737:FreeRTOS/Source/tasks.c **** 					}
 2823              		.loc 1 3737 0
 2824 0ae2 E16A     		ldr	r1, [r4, #44]	@ D.6834, MEM[(struct TCB_t *)pxMutexHolder_5(D)].uxPriority
 2825 0ae4 08FB0168 		mla	r8, r8, r1, r6	@ tmp154, tmp148, D.6834, tmp145
 2826 0ae8 D8F84430 		ldr	r3, [r8, #68]	@ pxReadyTasksLists[_24].uxNumberOfItems, pxReadyTasksLists[_24].uxNumberOfItems
 2827 0aec 2BB9     		cbnz	r3, .L294	@ pxReadyTasksLists[_24].uxNumberOfItems,
3737:FreeRTOS/Source/tasks.c **** 					}
 2828              		.loc 1 3737 0 is_stmt 0 discriminator 1
 2829 0aee B26B     		ldr	r2, [r6, #56]	@ D.6834, uxTopReadyPriority
 2830 0af0 0123     		movs	r3, #1	@ tmp159,
 2831 0af2 8B40     		lsls	r3, r3, r1	@ D.6834, tmp159, D.6834
 2832 0af4 22EA0303 		bic	r3, r2, r3	@ D.6834, D.6834, D.6834
 2833 0af8 B363     		str	r3, [r6, #56]	@ D.6834, uxTopReadyPriority
 2834              	.L294:
3745:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2835              		.loc 1 3745 0 is_stmt 1
 2836 0afa 6B6B     		ldr	r3, [r5, #52]	@ D.6835, pxCurrentTCB
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 147


3746:FreeRTOS/Source/tasks.c **** 				}
 2837              		.loc 1 3746 0
 2838 0afc 0122     		movs	r2, #1	@ tmp165,
3745:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2839              		.loc 1 3745 0
 2840 0afe DB6A     		ldr	r3, [r3, #44]	@ D.6834, _32->uxPriority
3746:FreeRTOS/Source/tasks.c **** 				}
 2841              		.loc 1 3746 0
 2842 0b00 A86B     		ldr	r0, [r5, #56]	@ D.6834, uxTopReadyPriority
 2843 0b02 9A40     		lsls	r2, r2, r3	@ D.6834, tmp165, D.6834
 2844 0b04 0243     		orrs	r2, r2, r0	@, D.6834, D.6834, D.6834
 2845 0b06 1420     		movs	r0, #20	@ tmp170,
3745:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2846              		.loc 1 3745 0
 2847 0b08 E362     		str	r3, [r4, #44]	@ D.6834, MEM[(struct TCB_t *)pxMutexHolder_5(D)].uxPriority
3746:FreeRTOS/Source/tasks.c **** 				}
 2848              		.loc 1 3746 0
 2849 0b0a AA63     		str	r2, [r5, #56]	@ D.6834, uxTopReadyPriority
 2850 0b0c 00FB0370 		mla	r0, r0, r3, r7	@, tmp170, D.6834, tmp174
 2851 0b10 4946     		mov	r1, r9	@, D.6839
3765:FreeRTOS/Source/tasks.c **** 
 2852              		.loc 1 3765 0
 2853 0b12 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 2854              	.LCFI36:
 2855              		.cfi_remember_state
 2856              		.cfi_restore 14
 2857              		.cfi_restore 9
 2858              		.cfi_restore 8
 2859              		.cfi_restore 7
 2860              		.cfi_restore 6
 2861              		.cfi_restore 5
 2862              		.cfi_restore 4
 2863              		.cfi_restore 3
 2864              		.cfi_def_cfa_offset 0
 2865              	.LVL269:
3746:FreeRTOS/Source/tasks.c **** 				}
 2866              		.loc 1 3746 0
 2867 0b16 FFF7FEBF 		b	vListInsertEnd	@
 2868              	.LVL270:
 2869              	.L299:
 2870              	.LCFI37:
 2871              		.cfi_restore_state
3751:FreeRTOS/Source/tasks.c **** 				}
 2872              		.loc 1 3751 0
 2873 0b1a 736B     		ldr	r3, [r6, #52]	@ D.6835, pxCurrentTCB
 2874 0b1c DB6A     		ldr	r3, [r3, #44]	@ D.6834, _18->uxPriority
 2875 0b1e C362     		str	r3, [r0, #44]	@ D.6834, MEM[(struct TCB_t *)pxMutexHolder_5(D)].uxPriority
 2876              	.L289:
 2877 0b20 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 2878              	.L301:
 2879              		.align	2
 2880              	.L300:
 2881 0b24 00000000 		.word	.LANCHOR0
 2882              		.cfi_endproc
 2883              	.LFE41:
 2884              		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 2885              		.align	1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 148


 2886              		.global	xTaskPriorityDisinherit
 2887              		.thumb
 2888              		.thumb_func
 2889              		.type	xTaskPriorityDisinherit, %function
 2890              	xTaskPriorityDisinherit:
 2891              	.LFB42:
3773:FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 2892              		.loc 1 3773 0
 2893              		.cfi_startproc
 2894              		@ args = 0, pretend = 0, frame = 0
 2895              		@ frame_needed = 0, uses_anonymous_args = 0
 2896              	.LVL271:
 2897 0b28 38B5     		push	{r3, r4, r5, lr}	@
 2898              	.LCFI38:
 2899              		.cfi_def_cfa_offset 16
 2900              		.cfi_offset 3, -16
 2901              		.cfi_offset 4, -12
 2902              		.cfi_offset 5, -8
 2903              		.cfi_offset 14, -4
3777:FreeRTOS/Source/tasks.c **** 		{
 2904              		.loc 1 3777 0
 2905 0b2a 0446     		mov	r4, r0	@ pxMutexHolder, pxMutexHolder
 2906 0b2c 08B9     		cbnz	r0, .L303	@ pxMutexHolder,
 2907              	.L305:
3775:FreeRTOS/Source/tasks.c **** 
 2908              		.loc 1 3775 0
 2909 0b2e 0020     		movs	r0, #0	@ xReturn,
 2910              	.LVL272:
 2911 0b30 38BD     		pop	{r3, r4, r5, pc}	@
 2912              	.LVL273:
 2913              	.L303:
3786:FreeRTOS/Source/tasks.c **** 
 2914              		.loc 1 3786 0
 2915 0b32 836C     		ldr	r3, [r0, #72]	@ MEM[(struct TCB_t *)pxMutexHolder_4(D)].uxMutexesHeld, MEM[(struct TCB_t *)pxM
3790:FreeRTOS/Source/tasks.c **** 			{
 2916              		.loc 1 3790 0
 2917 0b34 C16A     		ldr	r1, [r0, #44]	@ MEM[(struct TCB_t *)pxMutexHolder_4(D)].uxPriority, MEM[(struct TCB_t *)pxMute
 2918 0b36 426C     		ldr	r2, [r0, #68]	@ MEM[(struct TCB_t *)pxMutexHolder_4(D)].uxBasePriority, MEM[(struct TCB_t *)px
3786:FreeRTOS/Source/tasks.c **** 
 2919              		.loc 1 3786 0
 2920 0b38 013B     		subs	r3, r3, #1	@ D.6843, MEM[(struct TCB_t *)pxMutexHolder_4(D)].uxMutexesHeld,
3790:FreeRTOS/Source/tasks.c **** 			{
 2921              		.loc 1 3790 0
 2922 0b3a 9142     		cmp	r1, r2	@ MEM[(struct TCB_t *)pxMutexHolder_4(D)].uxPriority, MEM[(struct TCB_t *)pxMutexHolder
3786:FreeRTOS/Source/tasks.c **** 
 2923              		.loc 1 3786 0
 2924 0b3c 8364     		str	r3, [r0, #72]	@ D.6843, MEM[(struct TCB_t *)pxMutexHolder_4(D)].uxMutexesHeld
3790:FreeRTOS/Source/tasks.c **** 			{
 2925              		.loc 1 3790 0
 2926 0b3e F6D0     		beq	.L305	@,
3793:FreeRTOS/Source/tasks.c **** 				{
 2927              		.loc 1 3793 0
 2928 0b40 002B     		cmp	r3, #0	@ D.6843
 2929 0b42 F4D1     		bne	.L305	@
3800:FreeRTOS/Source/tasks.c **** 					{
 2930              		.loc 1 3800 0
 2931 0b44 051D     		adds	r5, r0, #4	@ D.6844, pxMutexHolder,
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 149


 2932 0b46 2846     		mov	r0, r5	@, D.6844
 2933              	.LVL274:
 2934 0b48 FFF7FEFF 		bl	uxListRemove	@
 2935              	.LVL275:
 2936 0b4c 104B     		ldr	r3, .L307	@ tmp158,
 2937 0b4e 58B9     		cbnz	r0, .L306	@,
3802:FreeRTOS/Source/tasks.c **** 					}
 2938              		.loc 1 3802 0
 2939 0b50 E16A     		ldr	r1, [r4, #44]	@ D.6843, MEM[(struct TCB_t *)pxMutexHolder_4(D)].uxPriority
 2940 0b52 1422     		movs	r2, #20	@ tmp138,
 2941 0b54 02FB0132 		mla	r2, r2, r1, r3	@ tmp139, tmp138, D.6843, tmp158
 2942 0b58 526C     		ldr	r2, [r2, #68]	@ pxReadyTasksLists[_14].uxNumberOfItems, pxReadyTasksLists[_14].uxNumberOfItems
 2943 0b5a 2AB9     		cbnz	r2, .L306	@ pxReadyTasksLists[_14].uxNumberOfItems,
3802:FreeRTOS/Source/tasks.c **** 					}
 2944              		.loc 1 3802 0 is_stmt 0 discriminator 1
 2945 0b5c 986B     		ldr	r0, [r3, #56]	@ D.6843, uxTopReadyPriority
 2946 0b5e 0122     		movs	r2, #1	@ tmp144,
 2947 0b60 8A40     		lsls	r2, r2, r1	@ D.6843, tmp144, D.6843
 2948 0b62 20EA0202 		bic	r2, r0, r2	@ D.6843, D.6843, D.6843
 2949 0b66 9A63     		str	r2, [r3, #56]	@ D.6843, uxTopReadyPriority
 2950              	.L306:
3812:FreeRTOS/Source/tasks.c **** 
 2951              		.loc 1 3812 0 is_stmt 1
 2952 0b68 626C     		ldr	r2, [r4, #68]	@ D.6843, MEM[(struct TCB_t *)pxMutexHolder_4(D)].uxBasePriority
3818:FreeRTOS/Source/tasks.c **** 
 2953              		.loc 1 3818 0
 2954 0b6a 986B     		ldr	r0, [r3, #56]	@ D.6843, uxTopReadyPriority
3817:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2955              		.loc 1 3817 0
 2956 0b6c C2F10501 		rsb	r1, r2, #5	@ D.6843, D.6843,
3812:FreeRTOS/Source/tasks.c **** 
 2957              		.loc 1 3812 0
 2958 0b70 E262     		str	r2, [r4, #44]	@ D.6843, MEM[(struct TCB_t *)pxMutexHolder_4(D)].uxPriority
3817:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2959              		.loc 1 3817 0
 2960 0b72 A161     		str	r1, [r4, #24]	@ D.6843, MEM[(struct TCB_t *)pxMutexHolder_4(D)].xEventListItem.xItemValue
3818:FreeRTOS/Source/tasks.c **** 
 2961              		.loc 1 3818 0
 2962 0b74 0124     		movs	r4, #1	@ tmp150,
 2963              	.LVL276:
 2964 0b76 04FA02F1 		lsl	r1, r4, r2	@ D.6843, tmp150, D.6843
 2965 0b7a 0843     		orrs	r0, r0, r1	@, D.6843, D.6843, D.6843
 2966 0b7c 9863     		str	r0, [r3, #56]	@ D.6843, uxTopReadyPriority
 2967 0b7e 054B     		ldr	r3, .L307+4	@ tmp153,
 2968 0b80 1420     		movs	r0, #20	@ tmp155,
 2969 0b82 00FB0230 		mla	r0, r0, r2, r3	@, tmp155, D.6843, tmp153
 2970 0b86 2946     		mov	r1, r5	@, D.6844
 2971 0b88 FFF7FEFF 		bl	vListInsertEnd	@
 2972              	.LVL277:
3828:FreeRTOS/Source/tasks.c **** 				}
 2973              		.loc 1 3828 0
 2974 0b8c 2046     		mov	r0, r4	@ xReturn, tmp150
 2975              	.LVL278:
3846:FreeRTOS/Source/tasks.c **** 
 2976              		.loc 1 3846 0
 2977 0b8e 38BD     		pop	{r3, r4, r5, pc}	@
 2978              	.LVL279:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 150


 2979              	.L308:
 2980              		.align	2
 2981              	.L307:
 2982 0b90 00000000 		.word	.LANCHOR0
 2983 0b94 44000000 		.word	.LANCHOR0+68
 2984              		.cfi_endproc
 2985              	.LFE42:
 2986              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 2987              		.align	1
 2988              		.global	uxTaskResetEventItemValue
 2989              		.thumb
 2990              		.thumb_func
 2991              		.type	uxTaskResetEventItemValue, %function
 2992              	uxTaskResetEventItemValue:
 2993              	.LFB43:
4163:FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 2994              		.loc 1 4163 0
 2995              		.cfi_startproc
 2996              		@ args = 0, pretend = 0, frame = 0
 2997              		@ frame_needed = 0, uses_anonymous_args = 0
 2998              		@ link register save eliminated.
4166:FreeRTOS/Source/tasks.c **** 
 2999              		.loc 1 4166 0
 3000 0b98 044B     		ldr	r3, .L310	@ tmp117,
 3001 0b9a 5A6B     		ldr	r2, [r3, #52]	@ D.6849, pxCurrentTCB
 3002 0b9c 9069     		ldr	r0, [r2, #24]	@ uxReturn, _2->xEventListItem.xItemValue
 3003              	.LVL280:
4170:FreeRTOS/Source/tasks.c **** 
 3004              		.loc 1 4170 0
 3005 0b9e 5A6B     		ldr	r2, [r3, #52]	@ D.6849, pxCurrentTCB
 3006 0ba0 5B6B     		ldr	r3, [r3, #52]	@ D.6849, pxCurrentTCB
 3007 0ba2 DB6A     		ldr	r3, [r3, #44]	@ _5->uxPriority, _5->uxPriority
 3008 0ba4 C3F10503 		rsb	r3, r3, #5	@ D.6850, _5->uxPriority,
 3009 0ba8 9361     		str	r3, [r2, #24]	@ D.6850, _4->xEventListItem.xItemValue
4173:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3010              		.loc 1 4173 0
 3011 0baa 7047     		bx	lr	@
 3012              	.L311:
 3013              		.align	2
 3014              	.L310:
 3015 0bac 00000000 		.word	.LANCHOR0
 3016              		.cfi_endproc
 3017              	.LFE43:
 3018              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3019              		.align	1
 3020              		.global	pvTaskIncrementMutexHeldCount
 3021              		.thumb
 3022              		.thumb_func
 3023              		.type	pvTaskIncrementMutexHeldCount, %function
 3024              	pvTaskIncrementMutexHeldCount:
 3025              	.LFB44:
4179:FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3026              		.loc 1 4179 0
 3027              		.cfi_startproc
 3028              		@ args = 0, pretend = 0, frame = 0
 3029              		@ frame_needed = 0, uses_anonymous_args = 0
 3030              		@ link register save eliminated.
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 151


4182:FreeRTOS/Source/tasks.c **** 		{
 3031              		.loc 1 4182 0
 3032 0bb0 044B     		ldr	r3, .L317	@ tmp116,
 3033 0bb2 5A6B     		ldr	r2, [r3, #52]	@ D.6853, pxCurrentTCB
 3034 0bb4 1AB1     		cbz	r2, .L313	@ D.6853,
4184:FreeRTOS/Source/tasks.c **** 		}
 3035              		.loc 1 4184 0
 3036 0bb6 596B     		ldr	r1, [r3, #52]	@ D.6853, pxCurrentTCB
 3037 0bb8 8A6C     		ldr	r2, [r1, #72]	@ _4->uxMutexesHeld, _4->uxMutexesHeld
 3038 0bba 0132     		adds	r2, r2, #1	@ D.6854, _4->uxMutexesHeld,
 3039 0bbc 8A64     		str	r2, [r1, #72]	@ D.6854, _4->uxMutexesHeld
 3040              	.L313:
4187:FreeRTOS/Source/tasks.c **** 	}
 3041              		.loc 1 4187 0
 3042 0bbe 586B     		ldr	r0, [r3, #52]	@ D.6855, pxCurrentTCB
4188:FreeRTOS/Source/tasks.c **** 
 3043              		.loc 1 4188 0
 3044 0bc0 7047     		bx	lr	@
 3045              	.L318:
 3046 0bc2 00BF     		.align	2
 3047              	.L317:
 3048 0bc4 00000000 		.word	.LANCHOR0
 3049              		.cfi_endproc
 3050              	.LFE44:
 3051              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 3052              		.align	1
 3053              		.global	ulTaskNotifyTake
 3054              		.thumb
 3055              		.thumb_func
 3056              		.type	ulTaskNotifyTake, %function
 3057              	ulTaskNotifyTake:
 3058              	.LFB45:
4196:FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 3059              		.loc 1 4196 0
 3060              		.cfi_startproc
 3061              		@ args = 0, pretend = 0, frame = 0
 3062              		@ frame_needed = 0, uses_anonymous_args = 0
 3063              	.LVL281:
 3064 0bc8 70B5     		push	{r4, r5, r6, lr}	@
 3065              	.LCFI39:
 3066              		.cfi_def_cfa_offset 16
 3067              		.cfi_offset 4, -16
 3068              		.cfi_offset 5, -12
 3069              		.cfi_offset 6, -8
 3070              		.cfi_offset 14, -4
4202:FreeRTOS/Source/tasks.c **** 			{
 3071              		.loc 1 4202 0
 3072 0bca 174C     		ldr	r4, .L332	@ tmp122,
4196:FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 3073              		.loc 1 4196 0
 3074 0bcc 0646     		mov	r6, r0	@ xClearCountOnExit, xClearCountOnExit
 3075 0bce 0D46     		mov	r5, r1	@ xTicksToWait, xTicksToWait
4199:FreeRTOS/Source/tasks.c **** 		{
 3076              		.loc 1 4199 0
 3077 0bd0 FFF7FEFF 		bl	vPortEnterCritical	@
 3078              	.LVL282:
4202:FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 152


 3079              		.loc 1 4202 0
 3080 0bd4 636B     		ldr	r3, [r4, #52]	@ D.6858, pxCurrentTCB
 3081 0bd6 DB6C     		ldr	r3, [r3, #76]	@ D.6859, _5->ulNotifiedValue
 3082 0bd8 7BB9     		cbnz	r3, .L321	@ D.6859,
4205:FreeRTOS/Source/tasks.c **** 
 3083              		.loc 1 4205 0
 3084 0bda 626B     		ldr	r2, [r4, #52]	@ D.6858, pxCurrentTCB
 3085 0bdc 0121     		movs	r1, #1	@ tmp124,
 3086 0bde 82F85010 		strb	r1, [r2, #80]	@ tmp124, _7->ucNotifyState
4207:FreeRTOS/Source/tasks.c **** 				{
 3087              		.loc 1 4207 0
 3088 0be2 55B1     		cbz	r5, .L321	@ xTicksToWait,
4209:FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 3089              		.loc 1 4209 0
 3090 0be4 2846     		mov	r0, r5	@, xTicksToWait
 3091 0be6 FFF72BFA 		bl	prvAddCurrentTaskToDelayedList	@
 3092              	.LVL283:
4216:FreeRTOS/Source/tasks.c **** 				}
 3093              		.loc 1 4216 0
 3094 0bea 104B     		ldr	r3, .L332+4	@ tmp126,
 3095 0bec 4FF08052 		mov	r2, #268435456	@ tmp127,
 3096 0bf0 1A60     		str	r2, [r3]	@ tmp127, MEM[(volatile uint32_t *)3758157060B]
 3097              	@ 4216 "FreeRTOS/Source/tasks.c" 1
 3098 0bf2 BFF34F8F 		dsb
 3099              	@ 0 "" 2
 3100              	@ 4216 "FreeRTOS/Source/tasks.c" 1
 3101 0bf6 BFF36F8F 		isb
 3102              	@ 0 "" 2
 3103              		.thumb
 3104              	.L321:
4228:FreeRTOS/Source/tasks.c **** 
 3105              		.loc 1 4228 0
 3106 0bfa FFF7FEFF 		bl	vPortExitCritical	@
 3107              	.LVL284:
4230:FreeRTOS/Source/tasks.c **** 		{
 3108              		.loc 1 4230 0
 3109 0bfe FFF7FEFF 		bl	vPortEnterCritical	@
 3110              	.LVL285:
4233:FreeRTOS/Source/tasks.c **** 
 3111              		.loc 1 4233 0
 3112 0c02 626B     		ldr	r2, [r4, #52]	@ D.6858, pxCurrentTCB
 3113 0c04 084B     		ldr	r3, .L332	@ tmp128,
 3114 0c06 D56C     		ldr	r5, [r2, #76]	@ ulReturn, _14->ulNotifiedValue
 3115              	.LVL286:
4235:FreeRTOS/Source/tasks.c **** 			{
 3116              		.loc 1 4235 0
 3117 0c08 2DB1     		cbz	r5, .L323	@ ulReturn,
4239:FreeRTOS/Source/tasks.c **** 				}
 3118              		.loc 1 4239 0
 3119 0c0a 5B6B     		ldr	r3, [r3, #52]	@ D.6858, pxCurrentTCB
4237:FreeRTOS/Source/tasks.c **** 				{
 3120              		.loc 1 4237 0
 3121 0c0c 0EB1     		cbz	r6, .L324	@ xClearCountOnExit,
4239:FreeRTOS/Source/tasks.c **** 				}
 3122              		.loc 1 4239 0
 3123 0c0e 0022     		movs	r2, #0	@ tmp130,
 3124 0c10 00E0     		b	.L331	@
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 153


 3125              	.L324:
4243:FreeRTOS/Source/tasks.c **** 				}
 3126              		.loc 1 4243 0
 3127 0c12 6A1E     		subs	r2, r5, #1	@ D.6859, ulReturn,
 3128              	.L331:
 3129 0c14 DA64     		str	r2, [r3, #76]	@ D.6859,
 3130              	.L323:
4251:FreeRTOS/Source/tasks.c **** 		}
 3131              		.loc 1 4251 0
 3132 0c16 636B     		ldr	r3, [r4, #52]	@ D.6858, pxCurrentTCB
 3133 0c18 0022     		movs	r2, #0	@ tmp133,
 3134 0c1a 83F85020 		strb	r2, [r3, #80]	@ tmp133, _22->ucNotifyState
4253:FreeRTOS/Source/tasks.c **** 
 3135              		.loc 1 4253 0
 3136 0c1e FFF7FEFF 		bl	vPortExitCritical	@
 3137              	.LVL287:
4256:FreeRTOS/Source/tasks.c **** 
 3138              		.loc 1 4256 0
 3139 0c22 2846     		mov	r0, r5	@, ulReturn
 3140 0c24 70BD     		pop	{r4, r5, r6, pc}	@
 3141              	.LVL288:
 3142              	.L333:
 3143 0c26 00BF     		.align	2
 3144              	.L332:
 3145 0c28 00000000 		.word	.LANCHOR0
 3146 0c2c 04ED00E0 		.word	-536810236
 3147              		.cfi_endproc
 3148              	.LFE45:
 3149              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 3150              		.align	1
 3151              		.global	xTaskNotifyWait
 3152              		.thumb
 3153              		.thumb_func
 3154              		.type	xTaskNotifyWait, %function
 3155              	xTaskNotifyWait:
 3156              	.LFB46:
4264:FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3157              		.loc 1 4264 0
 3158              		.cfi_startproc
 3159              		@ args = 0, pretend = 0, frame = 0
 3160              		@ frame_needed = 0, uses_anonymous_args = 0
 3161              	.LVL289:
 3162 0c30 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 3163              	.LCFI40:
 3164              		.cfi_def_cfa_offset 24
 3165              		.cfi_offset 4, -24
 3166              		.cfi_offset 5, -20
 3167              		.cfi_offset 6, -16
 3168              		.cfi_offset 7, -12
 3169              		.cfi_offset 8, -8
 3170              		.cfi_offset 14, -4
4270:FreeRTOS/Source/tasks.c **** 			{
 3171              		.loc 1 4270 0
 3172 0c34 1F4C     		ldr	r4, .L347	@ tmp132,
4264:FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3173              		.loc 1 4264 0
 3174 0c36 1F46     		mov	r7, r3	@ xTicksToWait, xTicksToWait
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 154


 3175 0c38 8046     		mov	r8, r0	@ ulBitsToClearOnEntry, ulBitsToClearOnEntry
 3176 0c3a 0E46     		mov	r6, r1	@ ulBitsToClearOnExit, ulBitsToClearOnExit
 3177 0c3c 1546     		mov	r5, r2	@ pulNotificationValue, pulNotificationValue
4267:FreeRTOS/Source/tasks.c **** 		{
 3178              		.loc 1 4267 0
 3179 0c3e FFF7FEFF 		bl	vPortEnterCritical	@
 3180              	.LVL290:
4270:FreeRTOS/Source/tasks.c **** 			{
 3181              		.loc 1 4270 0
 3182 0c42 636B     		ldr	r3, [r4, #52]	@ D.6862, pxCurrentTCB
 3183 0c44 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2	@ _7->ucNotifyState, _7->ucNotifyState
 3184 0c48 022B     		cmp	r3, #2	@ _7->ucNotifyState,
 3185 0c4a 14D0     		beq	.L336	@,
4275:FreeRTOS/Source/tasks.c **** 
 3186              		.loc 1 4275 0
 3187 0c4c 636B     		ldr	r3, [r4, #52]	@ D.6862, pxCurrentTCB
4278:FreeRTOS/Source/tasks.c **** 
 3188              		.loc 1 4278 0
 3189 0c4e 0121     		movs	r1, #1	@ tmp139,
4275:FreeRTOS/Source/tasks.c **** 
 3190              		.loc 1 4275 0
 3191 0c50 DA6C     		ldr	r2, [r3, #76]	@ D.6864, _9->ulNotifiedValue
 3192 0c52 22EA0802 		bic	r2, r2, r8	@ D.6864, D.6864, ulBitsToClearOnEntry
 3193 0c56 DA64     		str	r2, [r3, #76]	@ D.6864, _9->ulNotifiedValue
4278:FreeRTOS/Source/tasks.c **** 
 3194              		.loc 1 4278 0
 3195 0c58 636B     		ldr	r3, [r4, #52]	@ D.6862, pxCurrentTCB
 3196 0c5a 83F85010 		strb	r1, [r3, #80]	@ tmp139, _15->ucNotifyState
4280:FreeRTOS/Source/tasks.c **** 				{
 3197              		.loc 1 4280 0
 3198 0c5e 57B1     		cbz	r7, .L336	@ xTicksToWait,
4282:FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 3199              		.loc 1 4282 0
 3200 0c60 3846     		mov	r0, r7	@, xTicksToWait
 3201 0c62 FFF7EDF9 		bl	prvAddCurrentTaskToDelayedList	@
 3202              	.LVL291:
4289:FreeRTOS/Source/tasks.c **** 				}
 3203              		.loc 1 4289 0
 3204 0c66 144B     		ldr	r3, .L347+4	@ tmp141,
 3205 0c68 4FF08052 		mov	r2, #268435456	@ tmp142,
 3206 0c6c 1A60     		str	r2, [r3]	@ tmp142, MEM[(volatile uint32_t *)3758157060B]
 3207              	@ 4289 "FreeRTOS/Source/tasks.c" 1
 3208 0c6e BFF34F8F 		dsb
 3209              	@ 0 "" 2
 3210              	@ 4289 "FreeRTOS/Source/tasks.c" 1
 3211 0c72 BFF36F8F 		isb
 3212              	@ 0 "" 2
 3213              		.thumb
 3214              	.L336:
4301:FreeRTOS/Source/tasks.c **** 
 3215              		.loc 1 4301 0
 3216 0c76 FFF7FEFF 		bl	vPortExitCritical	@
 3217              	.LVL292:
4303:FreeRTOS/Source/tasks.c **** 		{
 3218              		.loc 1 4303 0
 3219 0c7a FFF7FEFF 		bl	vPortEnterCritical	@
 3220              	.LVL293:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 155


4307:FreeRTOS/Source/tasks.c **** 			{
 3221              		.loc 1 4307 0
 3222 0c7e 15B1     		cbz	r5, .L338	@ pulNotificationValue,
4311:FreeRTOS/Source/tasks.c **** 			}
 3223              		.loc 1 4311 0
 3224 0c80 636B     		ldr	r3, [r4, #52]	@ D.6862, pxCurrentTCB
 3225 0c82 DB6C     		ldr	r3, [r3, #76]	@ D.6864, _23->ulNotifiedValue
 3226 0c84 2B60     		str	r3, [r5]	@ D.6864, *pulNotificationValue_22(D)
 3227              	.L338:
4318:FreeRTOS/Source/tasks.c **** 			{
 3228              		.loc 1 4318 0
 3229 0c86 636B     		ldr	r3, [r4, #52]	@ D.6862, pxCurrentTCB
4331:FreeRTOS/Source/tasks.c **** 		}
 3230              		.loc 1 4331 0
 3231 0c88 0022     		movs	r2, #0	@ tmp151,
4318:FreeRTOS/Source/tasks.c **** 			{
 3232              		.loc 1 4318 0
 3233 0c8a 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2	@ _26->ucNotifyState, _26->ucNotifyState
 3234 0c8e 012B     		cmp	r3, #1	@ _26->ucNotifyState,
4327:FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 3235              		.loc 1 4327 0
 3236 0c90 1DBF     		ittte	ne
 3237 0c92 084B     		ldrne	r3, .L347	@ tmp144,
4328:FreeRTOS/Source/tasks.c **** 			}
 3238              		.loc 1 4328 0
 3239 0c94 0125     		movne	r5, #1	@ xReturn,
 3240              	.LVL294:
4327:FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 3241              		.loc 1 4327 0
 3242 0c96 5B6B     		ldrne	r3, [r3, #52]	@ D.6862, pxCurrentTCB
4321:FreeRTOS/Source/tasks.c **** 			}
 3243              		.loc 1 4321 0
 3244 0c98 0025     		moveq	r5, #0	@ xReturn,
4327:FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 3245              		.loc 1 4327 0
 3246 0c9a 1EBF     		ittt	ne
 3247 0c9c D96C     		ldrne	r1, [r3, #76]	@ D.6864, _28->ulNotifiedValue
 3248 0c9e B143     		bicne	r1, r1, r6	@ D.6864, D.6864, ulBitsToClearOnExit
 3249 0ca0 D964     		strne	r1, [r3, #76]	@ D.6864, _28->ulNotifiedValue
 3250              	.LVL295:
4331:FreeRTOS/Source/tasks.c **** 		}
 3251              		.loc 1 4331 0
 3252 0ca2 636B     		ldr	r3, [r4, #52]	@ D.6862, pxCurrentTCB
 3253 0ca4 83F85020 		strb	r2, [r3, #80]	@ tmp151, _34->ucNotifyState
4333:FreeRTOS/Source/tasks.c **** 
 3254              		.loc 1 4333 0
 3255 0ca8 FFF7FEFF 		bl	vPortExitCritical	@
 3256              	.LVL296:
4336:FreeRTOS/Source/tasks.c **** 
 3257              		.loc 1 4336 0
 3258 0cac 2846     		mov	r0, r5	@, xReturn
 3259 0cae BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 3260              	.LVL297:
 3261              	.L348:
 3262 0cb2 00BF     		.align	2
 3263              	.L347:
 3264 0cb4 00000000 		.word	.LANCHOR0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 156


 3265 0cb8 04ED00E0 		.word	-536810236
 3266              		.cfi_endproc
 3267              	.LFE46:
 3268              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 3269              		.align	1
 3270              		.global	xTaskGenericNotify
 3271              		.thumb
 3272              		.thumb_func
 3273              		.type	xTaskGenericNotify, %function
 3274              	xTaskGenericNotify:
 3275              	.LFB47:
4344:FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3276              		.loc 1 4344 0
 3277              		.cfi_startproc
 3278              		@ args = 0, pretend = 0, frame = 0
 3279              		@ frame_needed = 0, uses_anonymous_args = 0
 3280              	.LVL298:
 3281 0cbc F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 3282              	.LCFI41:
 3283              		.cfi_def_cfa_offset 24
 3284              		.cfi_offset 3, -24
 3285              		.cfi_offset 4, -20
 3286              		.cfi_offset 5, -16
 3287              		.cfi_offset 6, -12
 3288              		.cfi_offset 7, -8
 3289              		.cfi_offset 14, -4
4344:FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3290              		.loc 1 4344 0
 3291 0cbe 1D46     		mov	r5, r3	@ pulPreviousNotificationValue, pulPreviousNotificationValue
 3292 0cc0 0446     		mov	r4, r0	@ xTaskToNotify, xTaskToNotify
 3293              	.LVL299:
 3294 0cc2 0F46     		mov	r7, r1	@ ulValue, ulValue
 3295 0cc4 1646     		mov	r6, r2	@ eAction, eAction
4352:FreeRTOS/Source/tasks.c **** 		{
 3296              		.loc 1 4352 0
 3297 0cc6 FFF7FEFF 		bl	vPortEnterCritical	@
 3298              	.LVL300:
4354:FreeRTOS/Source/tasks.c **** 			{
 3299              		.loc 1 4354 0
 3300 0cca 0DB1     		cbz	r5, .L350	@ pulPreviousNotificationValue,
4356:FreeRTOS/Source/tasks.c **** 			}
 3301              		.loc 1 4356 0
 3302 0ccc E36C     		ldr	r3, [r4, #76]	@ D.6869, MEM[(struct TCB_t *)xTaskToNotify_5(D)].ulNotifiedValue
 3303 0cce 2B60     		str	r3, [r5]	@ D.6869, *pulPreviousNotificationValue_8(D)
 3304              	.L350:
4359:FreeRTOS/Source/tasks.c **** 
 3305              		.loc 1 4359 0
 3306 0cd0 94F85050 		ldrb	r5, [r4, #80]	@ zero_extendqisi2	@ MEM[(struct TCB_t *)xTaskToNotify_5(D)].ucNotifyState, MEM
 3307              	.LVL301:
4361:FreeRTOS/Source/tasks.c **** 
 3308              		.loc 1 4361 0
 3309 0cd4 0223     		movs	r3, #2	@ tmp135,
4363:FreeRTOS/Source/tasks.c **** 			{
 3310              		.loc 1 4363 0
 3311 0cd6 721E     		subs	r2, r6, #1	@ tmp137, eAction,
4359:FreeRTOS/Source/tasks.c **** 
 3312              		.loc 1 4359 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 157


 3313 0cd8 EDB2     		uxtb	r5, r5	@ ucOriginalNotifyState, MEM[(struct TCB_t *)xTaskToNotify_5(D)].ucNotifyState
 3314              	.LVL302:
4361:FreeRTOS/Source/tasks.c **** 
 3315              		.loc 1 4361 0
 3316 0cda 84F85030 		strb	r3, [r4, #80]	@ tmp135, MEM[(struct TCB_t *)xTaskToNotify_5(D)].ucNotifyState
4363:FreeRTOS/Source/tasks.c **** 			{
 3317              		.loc 1 4363 0
 3318 0cde 032A     		cmp	r2, #3	@ tmp137,
 3319 0ce0 0DD8     		bhi	.L351	@
 3320 0ce2 DFE802F0 		tbb	[pc, r2]	@ tmp137
 3321              	.L353:
 3322 0ce6 02       		.byte	(.L352-.L353)/2
 3323 0ce7 05       		.byte	(.L354-.L353)/2
 3324 0ce8 0B       		.byte	(.L364-.L353)/2
 3325 0ce9 09       		.byte	(.L356-.L353)/2
 3326              		.p2align 1
 3327              	.L352:
4366:FreeRTOS/Source/tasks.c **** 					break;
 3328              		.loc 1 4366 0
 3329 0cea E16C     		ldr	r1, [r4, #76]	@ D.6869, MEM[(struct TCB_t *)xTaskToNotify_5(D)].ulNotifiedValue
 3330 0cec 0F43     		orrs	r7, r7, r1	@, D.6869, ulValue, D.6869
 3331              	.LVL303:
 3332 0cee 05E0     		b	.L364	@
 3333              	.LVL304:
 3334              	.L354:
4370:FreeRTOS/Source/tasks.c **** 					break;
 3335              		.loc 1 4370 0
 3336 0cf0 E36C     		ldr	r3, [r4, #76]	@ D.6869, MEM[(struct TCB_t *)xTaskToNotify_5(D)].ulNotifiedValue
 3337 0cf2 0133     		adds	r3, r3, #1	@ D.6869, D.6869,
 3338 0cf4 E364     		str	r3, [r4, #76]	@ D.6869, MEM[(struct TCB_t *)xTaskToNotify_5(D)].ulNotifiedValue
4371:FreeRTOS/Source/tasks.c **** 
 3339              		.loc 1 4371 0
 3340 0cf6 02E0     		b	.L351	@
 3341              	.L356:
4378:FreeRTOS/Source/tasks.c **** 					{
 3342              		.loc 1 4378 0
 3343 0cf8 022D     		cmp	r5, #2	@ ucOriginalNotifyState,
 3344 0cfa 25D0     		beq	.L360	@,
 3345              	.LVL305:
 3346              	.L364:
4380:FreeRTOS/Source/tasks.c **** 					}
 3347              		.loc 1 4380 0
 3348 0cfc E764     		str	r7, [r4, #76]	@ ulValue,
 3349              	.L351:
4399:FreeRTOS/Source/tasks.c **** 			{
 3350              		.loc 1 4399 0
 3351 0cfe 012D     		cmp	r5, #1	@ ucOriginalNotifyState,
 3352 0d00 01D0     		beq	.L358	@,
 3353              	.L359:
4344:FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3354              		.loc 1 4344 0
 3355 0d02 0125     		movs	r5, #1	@ xReturn,
 3356              	.LVL306:
 3357 0d04 21E0     		b	.L357	@
 3358              	.LVL307:
 3359              	.L358:
4401:FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 158


 3360              		.loc 1 4401 0
 3361 0d06 271D     		adds	r7, r4, #4	@ D.6870, xTaskToNotify,
4402:FreeRTOS/Source/tasks.c **** 
 3362              		.loc 1 4402 0
 3363 0d08 124E     		ldr	r6, .L365	@ tmp138,
4401:FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3364              		.loc 1 4401 0
 3365 0d0a 3846     		mov	r0, r7	@, D.6870
 3366 0d0c FFF7FEFF 		bl	uxListRemove	@
 3367              	.LVL308:
4402:FreeRTOS/Source/tasks.c **** 
 3368              		.loc 1 4402 0
 3369 0d10 E26A     		ldr	r2, [r4, #44]	@ D.6869, MEM[(struct TCB_t *)xTaskToNotify_5(D)].uxPriority
 3370 0d12 B36B     		ldr	r3, [r6, #56]	@ D.6869, uxTopReadyPriority
 3371 0d14 05FA02F1 		lsl	r1, r5, r2	@ D.6869, ucOriginalNotifyState, D.6869
 3372 0d18 0B43     		orrs	r3, r3, r1	@, D.6869, D.6869, D.6869
 3373 0d1a B363     		str	r3, [r6, #56]	@ D.6869, uxTopReadyPriority
 3374 0d1c 1420     		movs	r0, #20	@ tmp145,
 3375 0d1e 06F14403 		add	r3, r6, #68	@ tmp143, tmp138,
 3376 0d22 00FB0230 		mla	r0, r0, r2, r3	@, tmp145, D.6869, tmp143
 3377 0d26 3946     		mov	r1, r7	@, D.6870
 3378 0d28 FFF7FEFF 		bl	vListInsertEnd	@
 3379              	.LVL309:
4423:FreeRTOS/Source/tasks.c **** 				{
 3380              		.loc 1 4423 0
 3381 0d2c 736B     		ldr	r3, [r6, #52]	@ D.6873, pxCurrentTCB
 3382 0d2e E26A     		ldr	r2, [r4, #44]	@ MEM[(struct TCB_t *)xTaskToNotify_5(D)].uxPriority, MEM[(struct TCB_t *)xTaskT
 3383 0d30 DB6A     		ldr	r3, [r3, #44]	@ _34->uxPriority, _34->uxPriority
 3384 0d32 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)xTaskToNotify_5(D)].uxPriority, _34->uxPriority
 3385 0d34 E5D9     		bls	.L359	@,
4427:FreeRTOS/Source/tasks.c **** 				}
 3386              		.loc 1 4427 0
 3387 0d36 084B     		ldr	r3, .L365+4	@ tmp150,
 3388 0d38 4FF08052 		mov	r2, #268435456	@ tmp151,
 3389 0d3c 1A60     		str	r2, [r3]	@ tmp151, MEM[(volatile uint32_t *)3758157060B]
 3390              	@ 4427 "FreeRTOS/Source/tasks.c" 1
 3391 0d3e BFF34F8F 		dsb
 3392              	@ 0 "" 2
 3393              	@ 4427 "FreeRTOS/Source/tasks.c" 1
 3394 0d42 BFF36F8F 		isb
 3395              	@ 0 "" 2
 3396              		.thumb
 3397 0d46 00E0     		b	.L357	@
 3398              	.LVL310:
 3399              	.L360:
4385:FreeRTOS/Source/tasks.c **** 					}
 3400              		.loc 1 4385 0
 3401 0d48 0025     		movs	r5, #0	@ xReturn,
 3402              	.LVL311:
 3403              	.L357:
4439:FreeRTOS/Source/tasks.c **** 
 3404              		.loc 1 4439 0
 3405 0d4a FFF7FEFF 		bl	vPortExitCritical	@
 3406              	.LVL312:
4442:FreeRTOS/Source/tasks.c **** 
 3407              		.loc 1 4442 0
 3408 0d4e 2846     		mov	r0, r5	@, xReturn
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 159


 3409 0d50 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 3410              	.LVL313:
 3411              	.L366:
 3412 0d52 00BF     		.align	2
 3413              	.L365:
 3414 0d54 00000000 		.word	.LANCHOR0
 3415 0d58 04ED00E0 		.word	-536810236
 3416              		.cfi_endproc
 3417              	.LFE47:
 3418              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 3419              		.align	1
 3420              		.global	xTaskGenericNotifyFromISR
 3421              		.thumb
 3422              		.thumb_func
 3423              		.type	xTaskGenericNotifyFromISR, %function
 3424              	xTaskGenericNotifyFromISR:
 3425              	.LFB48:
4450:FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3426              		.loc 1 4450 0
 3427              		.cfi_startproc
 3428              		@ args = 4, pretend = 0, frame = 0
 3429              		@ frame_needed = 0, uses_anonymous_args = 0
 3430              	.LVL314:
 3431 0d5c 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 3432              	.LCFI42:
 3433              		.cfi_def_cfa_offset 32
 3434              		.cfi_offset 3, -32
 3435              		.cfi_offset 4, -28
 3436              		.cfi_offset 5, -24
 3437              		.cfi_offset 6, -20
 3438              		.cfi_offset 7, -16
 3439              		.cfi_offset 8, -12
 3440              		.cfi_offset 9, -8
 3441              		.cfi_offset 14, -4
4450:FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3442              		.loc 1 4450 0
 3443 0d60 DDF82080 		ldr	r8, [sp, #32]	@ pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken
 3444 0d64 0446     		mov	r4, r0	@ xTaskToNotify, xTaskToNotify
 3445              	.LVL315:
 3446              	.LBB115:
 3447              	.LBB116:
 253:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3448              		.loc 2 253 0
 3449              	@ 253 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3450 0d66 EFF31187 			mrs r7, basepri												@ uxSavedInterruptStatus
 3451 0d6a 4FF0BF00 		mov r0, #191													@ ulNewBASEPRI,
 3452 0d6e 80F31188 		msr basepri, r0												@ ulNewBASEPRI
 3453 0d72 BFF36F8F 		isb														
 3454 0d76 BFF34F8F 		dsb														
 3455              	
 3456              	@ 0 "" 2
 3457              	.LVL316:
 3458              		.thumb
 3459              	.LBE116:
 3460              	.LBE115:
4480:FreeRTOS/Source/tasks.c **** 			{
 3461              		.loc 1 4480 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 160


 3462 0d7a 0BB1     		cbz	r3, .L368	@ pulPreviousNotificationValue,
4482:FreeRTOS/Source/tasks.c **** 			}
 3463              		.loc 1 4482 0
 3464 0d7c E06C     		ldr	r0, [r4, #76]	@ D.6878, MEM[(struct TCB_t *)xTaskToNotify_6(D)].ulNotifiedValue
 3465 0d7e 1860     		str	r0, [r3]	@ D.6878, *pulPreviousNotificationValue_8(D)
 3466              	.L368:
4485:FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 3467              		.loc 1 4485 0
 3468 0d80 94F85060 		ldrb	r6, [r4, #80]	@ zero_extendqisi2	@ MEM[(struct TCB_t *)xTaskToNotify_6(D)].ucNotifyState, MEM
4486:FreeRTOS/Source/tasks.c **** 
 3469              		.loc 1 4486 0
 3470 0d84 0223     		movs	r3, #2	@ tmp142,
 3471              	.LVL317:
4488:FreeRTOS/Source/tasks.c **** 			{
 3472              		.loc 1 4488 0
 3473 0d86 013A     		subs	r2, r2, #1	@ tmp144, eAction,
 3474              	.LVL318:
4485:FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 3475              		.loc 1 4485 0
 3476 0d88 F6B2     		uxtb	r6, r6	@ ucOriginalNotifyState, MEM[(struct TCB_t *)xTaskToNotify_6(D)].ucNotifyState
 3477              	.LVL319:
4486:FreeRTOS/Source/tasks.c **** 
 3478              		.loc 1 4486 0
 3479 0d8a 84F85030 		strb	r3, [r4, #80]	@ tmp142, MEM[(struct TCB_t *)xTaskToNotify_6(D)].ucNotifyState
4488:FreeRTOS/Source/tasks.c **** 			{
 3480              		.loc 1 4488 0
 3481 0d8e 032A     		cmp	r2, #3	@ tmp144,
 3482 0d90 0DD8     		bhi	.L369	@
 3483 0d92 DFE802F0 		tbb	[pc, r2]	@ tmp144
 3484              	.L371:
 3485 0d96 02       		.byte	(.L370-.L371)/2
 3486 0d97 05       		.byte	(.L372-.L371)/2
 3487 0d98 0B       		.byte	(.L385-.L371)/2
 3488 0d99 09       		.byte	(.L374-.L371)/2
 3489              		.p2align 1
 3490              	.L370:
4491:FreeRTOS/Source/tasks.c **** 					break;
 3491              		.loc 1 4491 0
 3492 0d9a E36C     		ldr	r3, [r4, #76]	@ D.6878, MEM[(struct TCB_t *)xTaskToNotify_6(D)].ulNotifiedValue
 3493 0d9c 1943     		orrs	r1, r1, r3	@, D.6878, ulValue, D.6878
 3494              	.LVL320:
 3495 0d9e 05E0     		b	.L385	@
 3496              	.LVL321:
 3497              	.L372:
4495:FreeRTOS/Source/tasks.c **** 					break;
 3498              		.loc 1 4495 0
 3499 0da0 E36C     		ldr	r3, [r4, #76]	@ D.6878, MEM[(struct TCB_t *)xTaskToNotify_6(D)].ulNotifiedValue
 3500 0da2 0133     		adds	r3, r3, #1	@ D.6878, D.6878,
 3501 0da4 E364     		str	r3, [r4, #76]	@ D.6878, MEM[(struct TCB_t *)xTaskToNotify_6(D)].ulNotifiedValue
4496:FreeRTOS/Source/tasks.c **** 
 3502              		.loc 1 4496 0
 3503 0da6 02E0     		b	.L369	@
 3504              	.L374:
4503:FreeRTOS/Source/tasks.c **** 					{
 3505              		.loc 1 4503 0
 3506 0da8 022E     		cmp	r6, #2	@ ucOriginalNotifyState,
 3507 0daa 2FD0     		beq	.L381	@,
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 161


 3508              	.LVL322:
 3509              	.L385:
4505:FreeRTOS/Source/tasks.c **** 					}
 3510              		.loc 1 4505 0
 3511 0dac E164     		str	r1, [r4, #76]	@ ulValue,
 3512              	.L369:
4524:FreeRTOS/Source/tasks.c **** 			{
 3513              		.loc 1 4524 0
 3514 0dae 012E     		cmp	r6, #1	@ ucOriginalNotifyState,
 3515 0db0 01D0     		beq	.L376	@,
 3516              	.LVL323:
 3517              	.L379:
4450:FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3518              		.loc 1 4450 0
 3519 0db2 0120     		movs	r0, #1	@ xReturn,
 3520 0db4 2BE0     		b	.L375	@
 3521              	.LVL324:
 3522              	.L376:
4529:FreeRTOS/Source/tasks.c **** 				{
 3523              		.loc 1 4529 0
 3524 0db6 184D     		ldr	r5, .L387	@ tmp145,
 3525 0db8 D5F8F030 		ldr	r3, [r5, #240]	@ D.6878, uxSchedulerSuspended
 3526 0dbc 83B9     		cbnz	r3, .L377	@ D.6878,
4531:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3527              		.loc 1 4531 0
 3528 0dbe 04F10409 		add	r9, r4, #4	@ D.6879, xTaskToNotify,
 3529 0dc2 4846     		mov	r0, r9	@, D.6879
 3530 0dc4 FFF7FEFF 		bl	uxListRemove	@
 3531              	.LVL325:
4532:FreeRTOS/Source/tasks.c **** 				}
 3532              		.loc 1 4532 0
 3533 0dc8 E26A     		ldr	r2, [r4, #44]	@ D.6878, MEM[(struct TCB_t *)xTaskToNotify_6(D)].uxPriority
 3534 0dca AB6B     		ldr	r3, [r5, #56]	@ D.6878, uxTopReadyPriority
 3535 0dcc 9640     		lsls	r6, r6, r2	@ D.6878, ucOriginalNotifyState, D.6878
 3536              	.LVL326:
 3537 0dce 1E43     		orrs	r6, r6, r3	@, D.6878, D.6878, D.6878
 3538 0dd0 1420     		movs	r0, #20	@ tmp153,
 3539 0dd2 05F14403 		add	r3, r5, #68	@ tmp151, tmp165,
 3540 0dd6 AE63     		str	r6, [r5, #56]	@ D.6878, uxTopReadyPriority
 3541 0dd8 00FB0230 		mla	r0, r0, r2, r3	@, tmp153, D.6878, tmp151
 3542 0ddc 4946     		mov	r1, r9	@, D.6879
 3543 0dde 03E0     		b	.L386	@
 3544              	.LVL327:
 3545              	.L377:
4538:FreeRTOS/Source/tasks.c **** 				}
 3546              		.loc 1 4538 0
 3547 0de0 05F11400 		add	r0, r5, #20	@, tmp165,
 3548 0de4 04F11801 		add	r1, r4, #24	@, xTaskToNotify,
 3549              	.LVL328:
 3550              	.L386:
 3551 0de8 FFF7FEFF 		bl	vListInsertEnd	@
 3552              	.LVL329:
4541:FreeRTOS/Source/tasks.c **** 				{
 3553              		.loc 1 4541 0
 3554 0dec 6B6B     		ldr	r3, [r5, #52]	@ D.6882, pxCurrentTCB
 3555 0dee E26A     		ldr	r2, [r4, #44]	@ MEM[(struct TCB_t *)xTaskToNotify_6(D)].uxPriority, MEM[(struct TCB_t *)xTaskT
 3556 0df0 DB6A     		ldr	r3, [r3, #44]	@ _37->uxPriority, _37->uxPriority
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 162


 3557 0df2 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)xTaskToNotify_6(D)].uxPriority, _37->uxPriority
 3558 0df4 DDD9     		bls	.L379	@,
 3559 0df6 0120     		movs	r0, #1	@ tmp166,
4545:FreeRTOS/Source/tasks.c **** 					{
 3560              		.loc 1 4545 0
 3561 0df8 B8F1000F 		cmp	r8, #0	@ pxHigherPriorityTaskWoken
 3562 0dfc 02D0     		beq	.L380	@
4547:FreeRTOS/Source/tasks.c **** 					}
 3563              		.loc 1 4547 0
 3564 0dfe C8F80000 		str	r0, [r8]	@ tmp166, *pxHigherPriorityTaskWoken_39(D)
 3565 0e02 04E0     		b	.L375	@
 3566              	.L380:
4554:FreeRTOS/Source/tasks.c **** 					}
 3567              		.loc 1 4554 0
 3568 0e04 044B     		ldr	r3, .L387	@ tmp158,
 3569 0e06 C3F80001 		str	r0, [r3, #256]	@ tmp166, xYieldPending
 3570 0e0a 00E0     		b	.L375	@
 3571              	.LVL330:
 3572              	.L381:
4510:FreeRTOS/Source/tasks.c **** 					}
 3573              		.loc 1 4510 0
 3574 0e0c 0020     		movs	r0, #0	@ xReturn,
 3575              	.LVL331:
 3576              	.L375:
 3577              	.LBB117:
 3578              	.LBB118:
 3579              		.loc 2 271 0
 3580              	@ 271 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3581 0e0e 87F31188 			msr basepri, r7		@ uxSavedInterruptStatus
 3582              	@ 0 "" 2
 3583              		.thumb
 3584              	.LBE118:
 3585              	.LBE117:
4566:FreeRTOS/Source/tasks.c **** 
 3586              		.loc 1 4566 0
 3587 0e12 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 3588              	.LVL332:
 3589              	.L388:
 3590 0e16 00BF     		.align	2
 3591              	.L387:
 3592 0e18 00000000 		.word	.LANCHOR0
 3593              		.cfi_endproc
 3594              	.LFE48:
 3595              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 3596              		.align	1
 3597              		.global	vTaskNotifyGiveFromISR
 3598              		.thumb
 3599              		.thumb_func
 3600              		.type	vTaskNotifyGiveFromISR, %function
 3601              	vTaskNotifyGiveFromISR:
 3602              	.LFB49:
4574:FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3603              		.loc 1 4574 0
 3604              		.cfi_startproc
 3605              		@ args = 0, pretend = 0, frame = 0
 3606              		@ frame_needed = 0, uses_anonymous_args = 0
 3607              	.LVL333:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 163


 3608 0e1c 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 3609              	.LCFI43:
 3610              		.cfi_def_cfa_offset 32
 3611              		.cfi_offset 3, -32
 3612              		.cfi_offset 4, -28
 3613              		.cfi_offset 5, -24
 3614              		.cfi_offset 6, -20
 3615              		.cfi_offset 7, -16
 3616              		.cfi_offset 8, -12
 3617              		.cfi_offset 9, -8
 3618              		.cfi_offset 14, -4
4574:FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3619              		.loc 1 4574 0
 3620 0e20 0446     		mov	r4, r0	@ xTaskToNotify, xTaskToNotify
 3621 0e22 0F46     		mov	r7, r1	@ pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken
 3622              	.LBB119:
 3623              	.LBB120:
 253:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3624              		.loc 2 253 0
 3625              	@ 253 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3626 0e24 EFF31188 			mrs r8, basepri												@ uxSavedInterruptStatus
 3627 0e28 4FF0BF03 		mov r3, #191													@ ulNewBASEPRI,
 3628 0e2c 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 3629 0e30 BFF36F8F 		isb														
 3630 0e34 BFF34F8F 		dsb														
 3631              	
 3632              	@ 0 "" 2
 3633              	.LVL334:
 3634              		.thumb
 3635              	.LBE120:
 3636              	.LBE119:
4604:FreeRTOS/Source/tasks.c **** 
 3637              		.loc 1 4604 0
 3638 0e38 0223     		movs	r3, #2	@ tmp134,
4603:FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 3639              		.loc 1 4603 0
 3640 0e3a 90F85060 		ldrb	r6, [r0, #80]	@ zero_extendqisi2	@ MEM[(struct TCB_t *)xTaskToNotify_3(D)].ucNotifyState, MEM
4604:FreeRTOS/Source/tasks.c **** 
 3641              		.loc 1 4604 0
 3642 0e3e 80F85030 		strb	r3, [r0, #80]	@ tmp134, MEM[(struct TCB_t *)xTaskToNotify_3(D)].ucNotifyState
4608:FreeRTOS/Source/tasks.c **** 
 3643              		.loc 1 4608 0
 3644 0e42 C36C     		ldr	r3, [r0, #76]	@ D.6887, MEM[(struct TCB_t *)xTaskToNotify_3(D)].ulNotifiedValue
4603:FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 3645              		.loc 1 4603 0
 3646 0e44 F6B2     		uxtb	r6, r6	@ ucOriginalNotifyState, MEM[(struct TCB_t *)xTaskToNotify_3(D)].ucNotifyState
 3647              	.LVL335:
4608:FreeRTOS/Source/tasks.c **** 
 3648              		.loc 1 4608 0
 3649 0e46 0133     		adds	r3, r3, #1	@ D.6887, D.6887,
4614:FreeRTOS/Source/tasks.c **** 			{
 3650              		.loc 1 4614 0
 3651 0e48 012E     		cmp	r6, #1	@ ucOriginalNotifyState,
4608:FreeRTOS/Source/tasks.c **** 
 3652              		.loc 1 4608 0
 3653 0e4a C364     		str	r3, [r0, #76]	@ D.6887, MEM[(struct TCB_t *)xTaskToNotify_3(D)].ulNotifiedValue
4614:FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 164


 3654              		.loc 1 4614 0
 3655 0e4c 26D1     		bne	.L391	@,
4619:FreeRTOS/Source/tasks.c **** 				{
 3656              		.loc 1 4619 0
 3657 0e4e 154D     		ldr	r5, .L397	@ tmp136,
 3658 0e50 D5F8F030 		ldr	r3, [r5, #240]	@ D.6887, uxSchedulerSuspended
 3659 0e54 83B9     		cbnz	r3, .L392	@ D.6887,
4621:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3660              		.loc 1 4621 0
 3661 0e56 00F10409 		add	r9, r0, #4	@ D.6888, xTaskToNotify,
 3662 0e5a 4846     		mov	r0, r9	@, D.6888
 3663              	.LVL336:
 3664 0e5c FFF7FEFF 		bl	uxListRemove	@
 3665              	.LVL337:
4622:FreeRTOS/Source/tasks.c **** 				}
 3666              		.loc 1 4622 0
 3667 0e60 E26A     		ldr	r2, [r4, #44]	@ D.6887, MEM[(struct TCB_t *)xTaskToNotify_3(D)].uxPriority
 3668 0e62 AB6B     		ldr	r3, [r5, #56]	@ D.6887, uxTopReadyPriority
 3669 0e64 9640     		lsls	r6, r6, r2	@ D.6887, ucOriginalNotifyState, D.6887
 3670              	.LVL338:
 3671 0e66 1E43     		orrs	r6, r6, r3	@, D.6887, D.6887, D.6887
 3672 0e68 1420     		movs	r0, #20	@ tmp144,
 3673 0e6a 05F14403 		add	r3, r5, #68	@ tmp142, tmp155,
 3674 0e6e AE63     		str	r6, [r5, #56]	@ D.6887, uxTopReadyPriority
 3675 0e70 00FB0230 		mla	r0, r0, r2, r3	@, tmp144, D.6887, tmp142
 3676 0e74 4946     		mov	r1, r9	@, D.6888
 3677 0e76 03E0     		b	.L396	@
 3678              	.LVL339:
 3679              	.L392:
4628:FreeRTOS/Source/tasks.c **** 				}
 3680              		.loc 1 4628 0
 3681 0e78 05F11400 		add	r0, r5, #20	@, tmp155,
 3682              	.LVL340:
 3683 0e7c 04F11801 		add	r1, r4, #24	@, xTaskToNotify,
 3684              	.LVL341:
 3685              	.L396:
 3686 0e80 FFF7FEFF 		bl	vListInsertEnd	@
 3687              	.LVL342:
4631:FreeRTOS/Source/tasks.c **** 				{
 3688              		.loc 1 4631 0
 3689 0e84 6B6B     		ldr	r3, [r5, #52]	@ D.6891, pxCurrentTCB
 3690 0e86 E26A     		ldr	r2, [r4, #44]	@ MEM[(struct TCB_t *)xTaskToNotify_3(D)].uxPriority, MEM[(struct TCB_t *)xTaskT
 3691 0e88 DB6A     		ldr	r3, [r3, #44]	@ _24->uxPriority, _24->uxPriority
 3692 0e8a 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)xTaskToNotify_3(D)].uxPriority, _24->uxPriority
 3693 0e8c 06D9     		bls	.L391	@,
 3694 0e8e 0123     		movs	r3, #1	@ tmp156,
4635:FreeRTOS/Source/tasks.c **** 					{
 3695              		.loc 1 4635 0
 3696 0e90 0FB1     		cbz	r7, .L395	@ pxHigherPriorityTaskWoken,
4637:FreeRTOS/Source/tasks.c **** 					}
 3697              		.loc 1 4637 0
 3698 0e92 3B60     		str	r3, [r7]	@ tmp156, *pxHigherPriorityTaskWoken_26(D)
 3699 0e94 02E0     		b	.L391	@
 3700              	.L395:
4644:FreeRTOS/Source/tasks.c **** 					}
 3701              		.loc 1 4644 0
 3702 0e96 034A     		ldr	r2, .L397	@ tmp149,
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 165


 3703 0e98 C2F80031 		str	r3, [r2, #256]	@ tmp156, xYieldPending
 3704              	.L391:
 3705              	.LVL343:
 3706              	.LBB121:
 3707              	.LBB122:
 3708              		.loc 2 271 0
 3709              	@ 271 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3710 0e9c 88F31188 			msr basepri, r8		@ uxSavedInterruptStatus
 3711              	@ 0 "" 2
 3712              		.thumb
 3713 0ea0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 3714              	.LVL344:
 3715              	.L398:
 3716              		.align	2
 3717              	.L397:
 3718 0ea4 00000000 		.word	.LANCHOR0
 3719              	.LBE122:
 3720              	.LBE121:
 3721              		.cfi_endproc
 3722              	.LFE49:
 3723              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 3724              		.align	1
 3725              		.global	xTaskNotifyStateClear
 3726              		.thumb
 3727              		.thumb_func
 3728              		.type	xTaskNotifyStateClear, %function
 3729              	xTaskNotifyStateClear:
 3730              	.LFB50:
4663:FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3731              		.loc 1 4663 0
 3732              		.cfi_startproc
 3733              		@ args = 0, pretend = 0, frame = 0
 3734              		@ frame_needed = 0, uses_anonymous_args = 0
 3735              	.LVL345:
 3736 0ea8 38B5     		push	{r3, r4, r5, lr}	@
 3737              	.LCFI44:
 3738              		.cfi_def_cfa_offset 16
 3739              		.cfi_offset 3, -16
 3740              		.cfi_offset 4, -12
 3741              		.cfi_offset 5, -8
 3742              		.cfi_offset 14, -4
4669:FreeRTOS/Source/tasks.c **** 
 3743              		.loc 1 4669 0
 3744 0eaa 0546     		mov	r5, r0	@ xTask, xTask
 3745 0eac 08B9     		cbnz	r0, .L400	@ xTask,
4669:FreeRTOS/Source/tasks.c **** 
 3746              		.loc 1 4669 0 is_stmt 0 discriminator 1
 3747 0eae 084B     		ldr	r3, .L403	@ tmp114,
 3748 0eb0 5D6B     		ldr	r5, [r3, #52]	@ xTask, pxCurrentTCB
 3749              	.LVL346:
 3750              	.L400:
4671:FreeRTOS/Source/tasks.c **** 		{
 3751              		.loc 1 4671 0 is_stmt 1 discriminator 4
 3752 0eb2 FFF7FEFF 		bl	vPortEnterCritical	@
 3753              	.LVL347:
4673:FreeRTOS/Source/tasks.c **** 			{
 3754              		.loc 1 4673 0 discriminator 4
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 166


 3755 0eb6 95F85030 		ldrb	r3, [r5, #80]	@ zero_extendqisi2	@ MEM[(struct TCB_t *)xTask_2].ucNotifyState, MEM[(struct TC
 3756 0eba 0024     		movs	r4, #0	@ xReturn,
 3757 0ebc 022B     		cmp	r3, #2	@ MEM[(struct TCB_t *)xTask_2].ucNotifyState,
4675:FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 3758              		.loc 1 4675 0 discriminator 4
 3759 0ebe 04BF     		itt	eq
 3760 0ec0 85F85040 		strbeq	r4, [r5, #80]	@ xReturn, MEM[(struct TCB_t *)xTask_2].ucNotifyState
 3761              	.LVL348:
4676:FreeRTOS/Source/tasks.c **** 			}
 3762              		.loc 1 4676 0 discriminator 4
 3763 0ec4 0124     		moveq	r4, #1	@ xReturn,
 3764              	.LVL349:
4683:FreeRTOS/Source/tasks.c **** 
 3765              		.loc 1 4683 0 discriminator 4
 3766 0ec6 FFF7FEFF 		bl	vPortExitCritical	@
 3767              	.LVL350:
4686:FreeRTOS/Source/tasks.c **** 
 3768              		.loc 1 4686 0 discriminator 4
 3769 0eca 2046     		mov	r0, r4	@, xReturn
 3770 0ecc 38BD     		pop	{r3, r4, r5, pc}	@
 3771              	.LVL351:
 3772              	.L404:
 3773 0ece 00BF     		.align	2
 3774              	.L403:
 3775 0ed0 00000000 		.word	.LANCHOR0
 3776              		.cfi_endproc
 3777              	.LFE50:
 3778              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 3779              		.global	pxCurrentTCB
 3780              		.section	.rodata.str1.1,"aMS",%progbits,1
 3781              	.LC0:
 3782 0000 49444C45 		.ascii	"IDLE\000"
 3782      00
 3783              		.bss
 3784              		.align	2
 3785              		.set	.LANCHOR0,. + 0
 3786              		.type	xSuspendedTaskList, %object
 3787              		.size	xSuspendedTaskList, 20
 3788              	xSuspendedTaskList:
 3789 0000 00000000 		.space	20
 3789      00000000 
 3789      00000000 
 3789      00000000 
 3789      00000000 
 3790              		.type	xPendingReadyList, %object
 3791              		.size	xPendingReadyList, 20
 3792              	xPendingReadyList:
 3793 0014 00000000 		.space	20
 3793      00000000 
 3793      00000000 
 3793      00000000 
 3793      00000000 
 3794              		.type	pxDelayedTaskList, %object
 3795              		.size	pxDelayedTaskList, 4
 3796              	pxDelayedTaskList:
 3797 0028 00000000 		.space	4
 3798              		.type	xNextTaskUnblockTime, %object
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 167


 3799              		.size	xNextTaskUnblockTime, 4
 3800              	xNextTaskUnblockTime:
 3801 002c 00000000 		.space	4
 3802              		.type	xTickCount, %object
 3803              		.size	xTickCount, 4
 3804              	xTickCount:
 3805 0030 00000000 		.space	4
 3806              		.type	pxCurrentTCB, %object
 3807              		.size	pxCurrentTCB, 4
 3808              	pxCurrentTCB:
 3809 0034 00000000 		.space	4
 3810              		.type	uxTopReadyPriority, %object
 3811              		.size	uxTopReadyPriority, 4
 3812              	uxTopReadyPriority:
 3813 0038 00000000 		.space	4
 3814              		.type	pxOverflowDelayedTaskList, %object
 3815              		.size	pxOverflowDelayedTaskList, 4
 3816              	pxOverflowDelayedTaskList:
 3817 003c 00000000 		.space	4
 3818              		.type	uxCurrentNumberOfTasks, %object
 3819              		.size	uxCurrentNumberOfTasks, 4
 3820              	uxCurrentNumberOfTasks:
 3821 0040 00000000 		.space	4
 3822              		.type	pxReadyTasksLists, %object
 3823              		.size	pxReadyTasksLists, 100
 3824              	pxReadyTasksLists:
 3825 0044 00000000 		.space	100
 3825      00000000 
 3825      00000000 
 3825      00000000 
 3825      00000000 
 3826              		.type	xDelayedTaskList1, %object
 3827              		.size	xDelayedTaskList1, 20
 3828              	xDelayedTaskList1:
 3829 00a8 00000000 		.space	20
 3829      00000000 
 3829      00000000 
 3829      00000000 
 3829      00000000 
 3830              		.type	xDelayedTaskList2, %object
 3831              		.size	xDelayedTaskList2, 20
 3832              	xDelayedTaskList2:
 3833 00bc 00000000 		.space	20
 3833      00000000 
 3833      00000000 
 3833      00000000 
 3833      00000000 
 3834              		.type	xTasksWaitingTermination, %object
 3835              		.size	xTasksWaitingTermination, 20
 3836              	xTasksWaitingTermination:
 3837 00d0 00000000 		.space	20
 3837      00000000 
 3837      00000000 
 3837      00000000 
 3837      00000000 
 3838              		.type	xSchedulerRunning, %object
 3839              		.size	xSchedulerRunning, 4
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 168


 3840              	xSchedulerRunning:
 3841 00e4 00000000 		.space	4
 3842              		.type	uxTaskNumber, %object
 3843              		.size	uxTaskNumber, 4
 3844              	uxTaskNumber:
 3845 00e8 00000000 		.space	4
 3846              		.type	uxDeletedTasksWaitingCleanUp, %object
 3847              		.size	uxDeletedTasksWaitingCleanUp, 4
 3848              	uxDeletedTasksWaitingCleanUp:
 3849 00ec 00000000 		.space	4
 3850              		.type	uxSchedulerSuspended, %object
 3851              		.size	uxSchedulerSuspended, 4
 3852              	uxSchedulerSuspended:
 3853 00f0 00000000 		.space	4
 3854              		.type	xIdleTaskHandle, %object
 3855              		.size	xIdleTaskHandle, 4
 3856              	xIdleTaskHandle:
 3857 00f4 00000000 		.space	4
 3858              		.type	xNumOfOverflows, %object
 3859              		.size	xNumOfOverflows, 4
 3860              	xNumOfOverflows:
 3861 00f8 00000000 		.space	4
 3862              		.type	uxPendedTicks, %object
 3863              		.size	uxPendedTicks, 4
 3864              	uxPendedTicks:
 3865 00fc 00000000 		.space	4
 3866              		.type	xYieldPending, %object
 3867              		.size	xYieldPending, 4
 3868              	xYieldPending:
 3869 0100 00000000 		.space	4
 3870              		.text
 3871              	.Letext0:
 3872              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 3873              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 3874              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 3875              		.file 6 "./FreeRTOS/Source/include/projdefs.h"
 3876              		.file 7 "./FreeRTOS/Source/include/list.h"
 3877              		.file 8 "./FreeRTOS/Source/include/task.h"
 3878              		.file 9 "./FreeRTOS/Source/include/portable.h"
 3879              		.file 10 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/string.h"
 3880              		.section	.debug_info,"",%progbits
 3881              	.Ldebug_info0:
 3882 0000 13200000 		.4byte	0x2013
 3883 0004 0200     		.2byte	0x2
 3884 0006 00000000 		.4byte	.Ldebug_abbrev0
 3885 000a 04       		.byte	0x4
 3886 000b 01       		.uleb128 0x1
 3887 000c FD090000 		.4byte	.LASF210
 3888 0010 01       		.byte	0x1
 3889 0011 2E090000 		.4byte	.LASF211
 3890 0015 E30A0000 		.4byte	.LASF212
 3891 0019 00000000 		.4byte	.Ltext0
 3892 001d D40E0000 		.4byte	.Letext0
 3893 0021 00000000 		.4byte	.Ldebug_line0
 3894 0025 02       		.uleb128 0x2
 3895 0026 FA030000 		.4byte	.LASF2
 3896 002a 03       		.byte	0x3
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 169


 3897 002b D4       		.byte	0xd4
 3898 002c 30000000 		.4byte	0x30
 3899 0030 03       		.uleb128 0x3
 3900 0031 04       		.byte	0x4
 3901 0032 07       		.byte	0x7
 3902 0033 DB000000 		.4byte	.LASF0
 3903 0037 04       		.uleb128 0x4
 3904 0038 04       		.byte	0x4
 3905 0039 05       		.byte	0x5
 3906 003a 696E7400 		.ascii	"int\000"
 3907 003e 03       		.uleb128 0x3
 3908 003f 01       		.byte	0x1
 3909 0040 06       		.byte	0x6
 3910 0041 090D0000 		.4byte	.LASF1
 3911 0045 02       		.uleb128 0x2
 3912 0046 D5090000 		.4byte	.LASF3
 3913 004a 04       		.byte	0x4
 3914 004b 1D       		.byte	0x1d
 3915 004c 50000000 		.4byte	0x50
 3916 0050 03       		.uleb128 0x3
 3917 0051 01       		.byte	0x1
 3918 0052 08       		.byte	0x8
 3919 0053 630B0000 		.4byte	.LASF4
 3920 0057 03       		.uleb128 0x3
 3921 0058 02       		.byte	0x2
 3922 0059 05       		.byte	0x5
 3923 005a A0080000 		.4byte	.LASF5
 3924 005e 02       		.uleb128 0x2
 3925 005f B1030000 		.4byte	.LASF6
 3926 0063 04       		.byte	0x4
 3927 0064 2B       		.byte	0x2b
 3928 0065 69000000 		.4byte	0x69
 3929 0069 03       		.uleb128 0x3
 3930 006a 02       		.byte	0x2
 3931 006b 07       		.byte	0x7
 3932 006c 150D0000 		.4byte	.LASF7
 3933 0070 03       		.uleb128 0x3
 3934 0071 04       		.byte	0x4
 3935 0072 05       		.byte	0x5
 3936 0073 D6080000 		.4byte	.LASF8
 3937 0077 02       		.uleb128 0x2
 3938 0078 B20B0000 		.4byte	.LASF9
 3939 007c 04       		.byte	0x4
 3940 007d 41       		.byte	0x41
 3941 007e 82000000 		.4byte	0x82
 3942 0082 03       		.uleb128 0x3
 3943 0083 04       		.byte	0x4
 3944 0084 07       		.byte	0x7
 3945 0085 B10A0000 		.4byte	.LASF10
 3946 0089 03       		.uleb128 0x3
 3947 008a 08       		.byte	0x8
 3948 008b 05       		.byte	0x5
 3949 008c 6F060000 		.4byte	.LASF11
 3950 0090 03       		.uleb128 0x3
 3951 0091 08       		.byte	0x8
 3952 0092 07       		.byte	0x7
 3953 0093 20030000 		.4byte	.LASF12
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 170


 3954 0097 03       		.uleb128 0x3
 3955 0098 04       		.byte	0x4
 3956 0099 07       		.byte	0x7
 3957 009a 890A0000 		.4byte	.LASF13
 3958 009e 05       		.uleb128 0x5
 3959 009f 04       		.byte	0x4
 3960 00a0 06       		.uleb128 0x6
 3961 00a1 04       		.byte	0x4
 3962 00a2 A6000000 		.4byte	0xa6
 3963 00a6 03       		.uleb128 0x3
 3964 00a7 01       		.byte	0x1
 3965 00a8 08       		.byte	0x8
 3966 00a9 32050000 		.4byte	.LASF14
 3967 00ad 06       		.uleb128 0x6
 3968 00ae 04       		.byte	0x4
 3969 00af B3000000 		.4byte	0xb3
 3970 00b3 07       		.uleb128 0x7
 3971 00b4 A6000000 		.4byte	0xa6
 3972 00b8 02       		.uleb128 0x2
 3973 00b9 06060000 		.4byte	.LASF15
 3974 00bd 05       		.byte	0x5
 3975 00be 14       		.byte	0x14
 3976 00bf 45000000 		.4byte	0x45
 3977 00c3 02       		.uleb128 0x2
 3978 00c4 2E080000 		.4byte	.LASF16
 3979 00c8 05       		.byte	0x5
 3980 00c9 1A       		.byte	0x1a
 3981 00ca 5E000000 		.4byte	0x5e
 3982 00ce 02       		.uleb128 0x2
 3983 00cf 83020000 		.4byte	.LASF17
 3984 00d3 05       		.byte	0x5
 3985 00d4 20       		.byte	0x20
 3986 00d5 77000000 		.4byte	0x77
 3987 00d9 02       		.uleb128 0x2
 3988 00da 00070000 		.4byte	.LASF18
 3989 00de 06       		.byte	0x6
 3990 00df 4D       		.byte	0x4d
 3991 00e0 E4000000 		.4byte	0xe4
 3992 00e4 06       		.uleb128 0x6
 3993 00e5 04       		.byte	0x4
 3994 00e6 EA000000 		.4byte	0xea
 3995 00ea 08       		.uleb128 0x8
 3996 00eb 01       		.byte	0x1
 3997 00ec F6000000 		.4byte	0xf6
 3998 00f0 09       		.uleb128 0x9
 3999 00f1 9E000000 		.4byte	0x9e
 4000 00f5 00       		.byte	0
 4001 00f6 02       		.uleb128 0x2
 4002 00f7 23010000 		.4byte	.LASF19
 4003 00fb 02       		.byte	0x2
 4004 00fc 61       		.byte	0x61
 4005 00fd CE000000 		.4byte	0xce
 4006 0101 02       		.uleb128 0x2
 4007 0102 AE060000 		.4byte	.LASF20
 4008 0106 02       		.byte	0x2
 4009 0107 62       		.byte	0x62
 4010 0108 70000000 		.4byte	0x70
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 171


 4011 010c 02       		.uleb128 0x2
 4012 010d 69050000 		.4byte	.LASF21
 4013 0111 02       		.byte	0x2
 4014 0112 63       		.byte	0x63
 4015 0113 82000000 		.4byte	0x82
 4016 0117 02       		.uleb128 0x2
 4017 0118 F7070000 		.4byte	.LASF22
 4018 011c 02       		.byte	0x2
 4019 011d 69       		.byte	0x69
 4020 011e CE000000 		.4byte	0xce
 4021 0122 0A       		.uleb128 0xa
 4022 0123 56010000 		.4byte	.LASF29
 4023 0127 14       		.byte	0x14
 4024 0128 07       		.byte	0x7
 4025 0129 B5       		.byte	0xb5
 4026 012a 75010000 		.4byte	0x175
 4027 012e 0B       		.uleb128 0xb
 4028 012f CB080000 		.4byte	.LASF23
 4029 0133 07       		.byte	0x7
 4030 0134 B8       		.byte	0xb8
 4031 0135 17010000 		.4byte	0x117
 4032 0139 02       		.byte	0x2
 4033 013a 23       		.byte	0x23
 4034 013b 00       		.uleb128 0
 4035 013c 0B       		.uleb128 0xb
 4036 013d 0F070000 		.4byte	.LASF24
 4037 0141 07       		.byte	0x7
 4038 0142 B9       		.byte	0xb9
 4039 0143 75010000 		.4byte	0x175
 4040 0147 02       		.byte	0x2
 4041 0148 23       		.byte	0x23
 4042 0149 04       		.uleb128 0x4
 4043 014a 0B       		.uleb128 0xb
 4044 014b 8D030000 		.4byte	.LASF25
 4045 014f 07       		.byte	0x7
 4046 0150 BA       		.byte	0xba
 4047 0151 75010000 		.4byte	0x175
 4048 0155 02       		.byte	0x2
 4049 0156 23       		.byte	0x23
 4050 0157 08       		.uleb128 0x8
 4051 0158 0B       		.uleb128 0xb
 4052 0159 620C0000 		.4byte	.LASF26
 4053 015d 07       		.byte	0x7
 4054 015e BB       		.byte	0xbb
 4055 015f 9E000000 		.4byte	0x9e
 4056 0163 02       		.byte	0x2
 4057 0164 23       		.byte	0x23
 4058 0165 0C       		.uleb128 0xc
 4059 0166 0B       		.uleb128 0xb
 4060 0167 66080000 		.4byte	.LASF27
 4061 016b 07       		.byte	0x7
 4062 016c BC       		.byte	0xbc
 4063 016d 9E000000 		.4byte	0x9e
 4064 0171 02       		.byte	0x2
 4065 0172 23       		.byte	0x23
 4066 0173 10       		.uleb128 0x10
 4067 0174 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 172


 4068 0175 06       		.uleb128 0x6
 4069 0176 04       		.byte	0x4
 4070 0177 22010000 		.4byte	0x122
 4071 017b 02       		.uleb128 0x2
 4072 017c 37050000 		.4byte	.LASF28
 4073 0180 07       		.byte	0x7
 4074 0181 BF       		.byte	0xbf
 4075 0182 22010000 		.4byte	0x122
 4076 0186 0A       		.uleb128 0xa
 4077 0187 0C040000 		.4byte	.LASF30
 4078 018b 0C       		.byte	0xc
 4079 018c 07       		.byte	0x7
 4080 018d C1       		.byte	0xc1
 4081 018e BD010000 		.4byte	0x1bd
 4082 0192 0B       		.uleb128 0xb
 4083 0193 CB080000 		.4byte	.LASF23
 4084 0197 07       		.byte	0x7
 4085 0198 C4       		.byte	0xc4
 4086 0199 17010000 		.4byte	0x117
 4087 019d 02       		.byte	0x2
 4088 019e 23       		.byte	0x23
 4089 019f 00       		.uleb128 0
 4090 01a0 0B       		.uleb128 0xb
 4091 01a1 0F070000 		.4byte	.LASF24
 4092 01a5 07       		.byte	0x7
 4093 01a6 C5       		.byte	0xc5
 4094 01a7 75010000 		.4byte	0x175
 4095 01ab 02       		.byte	0x2
 4096 01ac 23       		.byte	0x23
 4097 01ad 04       		.uleb128 0x4
 4098 01ae 0B       		.uleb128 0xb
 4099 01af 8D030000 		.4byte	.LASF25
 4100 01b3 07       		.byte	0x7
 4101 01b4 C6       		.byte	0xc6
 4102 01b5 75010000 		.4byte	0x175
 4103 01b9 02       		.byte	0x2
 4104 01ba 23       		.byte	0x23
 4105 01bb 08       		.uleb128 0x8
 4106 01bc 00       		.byte	0
 4107 01bd 02       		.uleb128 0x2
 4108 01be C2050000 		.4byte	.LASF31
 4109 01c2 07       		.byte	0x7
 4110 01c3 C8       		.byte	0xc8
 4111 01c4 86010000 		.4byte	0x186
 4112 01c8 0A       		.uleb128 0xa
 4113 01c9 27040000 		.4byte	.LASF32
 4114 01cd 14       		.byte	0x14
 4115 01ce 07       		.byte	0x7
 4116 01cf CD       		.byte	0xcd
 4117 01d0 FF010000 		.4byte	0x1ff
 4118 01d4 0B       		.uleb128 0xb
 4119 01d5 0B000000 		.4byte	.LASF33
 4120 01d9 07       		.byte	0x7
 4121 01da D0       		.byte	0xd0
 4122 01db 0C010000 		.4byte	0x10c
 4123 01df 02       		.byte	0x2
 4124 01e0 23       		.byte	0x23
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 173


 4125 01e1 00       		.uleb128 0
 4126 01e2 0B       		.uleb128 0xb
 4127 01e3 06010000 		.4byte	.LASF34
 4128 01e7 07       		.byte	0x7
 4129 01e8 D1       		.byte	0xd1
 4130 01e9 FF010000 		.4byte	0x1ff
 4131 01ed 02       		.byte	0x2
 4132 01ee 23       		.byte	0x23
 4133 01ef 04       		.uleb128 0x4
 4134 01f0 0B       		.uleb128 0xb
 4135 01f1 9B050000 		.4byte	.LASF35
 4136 01f5 07       		.byte	0x7
 4137 01f6 D2       		.byte	0xd2
 4138 01f7 BD010000 		.4byte	0x1bd
 4139 01fb 02       		.byte	0x2
 4140 01fc 23       		.byte	0x23
 4141 01fd 08       		.uleb128 0x8
 4142 01fe 00       		.byte	0
 4143 01ff 06       		.uleb128 0x6
 4144 0200 04       		.byte	0x4
 4145 0201 7B010000 		.4byte	0x17b
 4146 0205 02       		.uleb128 0x2
 4147 0206 E3070000 		.4byte	.LASF36
 4148 020a 07       		.byte	0x7
 4149 020b D4       		.byte	0xd4
 4150 020c C8010000 		.4byte	0x1c8
 4151 0210 02       		.uleb128 0x2
 4152 0211 94070000 		.4byte	.LASF37
 4153 0215 08       		.byte	0x8
 4154 0216 67       		.byte	0x67
 4155 0217 9E000000 		.4byte	0x9e
 4156 021b 0C       		.uleb128 0xc
 4157 021c 01       		.byte	0x1
 4158 021d 08       		.byte	0x8
 4159 021e 7C       		.byte	0x7c
 4160 021f 42020000 		.4byte	0x242
 4161 0223 0D       		.uleb128 0xd
 4162 0224 BE000000 		.4byte	.LASF38
 4163 0228 00       		.sleb128 0
 4164 0229 0D       		.uleb128 0xd
 4165 022a 16080000 		.4byte	.LASF39
 4166 022e 01       		.sleb128 1
 4167 022f 0D       		.uleb128 0xd
 4168 0230 01040000 		.4byte	.LASF40
 4169 0234 02       		.sleb128 2
 4170 0235 0D       		.uleb128 0xd
 4171 0236 09030000 		.4byte	.LASF41
 4172 023a 03       		.sleb128 3
 4173 023b 0D       		.uleb128 0xd
 4174 023c 42050000 		.4byte	.LASF42
 4175 0240 04       		.sleb128 4
 4176 0241 00       		.byte	0
 4177 0242 02       		.uleb128 0x2
 4178 0243 EC030000 		.4byte	.LASF43
 4179 0247 08       		.byte	0x8
 4180 0248 82       		.byte	0x82
 4181 0249 1B020000 		.4byte	0x21b
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 174


 4182 024d 0A       		.uleb128 0xa
 4183 024e 2F010000 		.4byte	.LASF44
 4184 0252 08       		.byte	0x8
 4185 0253 08       		.byte	0x8
 4186 0254 87       		.byte	0x87
 4187 0255 76020000 		.4byte	0x276
 4188 0259 0B       		.uleb128 0xb
 4189 025a F8010000 		.4byte	.LASF45
 4190 025e 08       		.byte	0x8
 4191 025f 89       		.byte	0x89
 4192 0260 01010000 		.4byte	0x101
 4193 0264 02       		.byte	0x2
 4194 0265 23       		.byte	0x23
 4195 0266 00       		.uleb128 0
 4196 0267 0B       		.uleb128 0xb
 4197 0268 E2060000 		.4byte	.LASF46
 4198 026c 08       		.byte	0x8
 4199 026d 8A       		.byte	0x8a
 4200 026e 17010000 		.4byte	0x117
 4201 0272 02       		.byte	0x2
 4202 0273 23       		.byte	0x23
 4203 0274 04       		.uleb128 0x4
 4204 0275 00       		.byte	0
 4205 0276 02       		.uleb128 0x2
 4206 0277 7D070000 		.4byte	.LASF47
 4207 027b 08       		.byte	0x8
 4208 027c 8B       		.byte	0x8b
 4209 027d 4D020000 		.4byte	0x24d
 4210 0281 0A       		.uleb128 0xa
 4211 0282 1F080000 		.4byte	.LASF48
 4212 0286 0C       		.byte	0xc
 4213 0287 08       		.byte	0x8
 4214 0288 90       		.byte	0x90
 4215 0289 B8020000 		.4byte	0x2b8
 4216 028d 0B       		.uleb128 0xb
 4217 028e 4E0B0000 		.4byte	.LASF49
 4218 0292 08       		.byte	0x8
 4219 0293 92       		.byte	0x92
 4220 0294 9E000000 		.4byte	0x9e
 4221 0298 02       		.byte	0x2
 4222 0299 23       		.byte	0x23
 4223 029a 00       		.uleb128 0
 4224 029b 0B       		.uleb128 0xb
 4225 029c 9E060000 		.4byte	.LASF50
 4226 02a0 08       		.byte	0x8
 4227 02a1 93       		.byte	0x93
 4228 02a2 CE000000 		.4byte	0xce
 4229 02a6 02       		.byte	0x2
 4230 02a7 23       		.byte	0x23
 4231 02a8 04       		.uleb128 0x4
 4232 02a9 0B       		.uleb128 0xb
 4233 02aa 2A020000 		.4byte	.LASF51
 4234 02ae 08       		.byte	0x8
 4235 02af 94       		.byte	0x94
 4236 02b0 CE000000 		.4byte	0xce
 4237 02b4 02       		.byte	0x2
 4238 02b5 23       		.byte	0x23
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 175


 4239 02b6 08       		.uleb128 0x8
 4240 02b7 00       		.byte	0
 4241 02b8 02       		.uleb128 0x2
 4242 02b9 22060000 		.4byte	.LASF52
 4243 02bd 08       		.byte	0x8
 4244 02be 95       		.byte	0x95
 4245 02bf 81020000 		.4byte	0x281
 4246 02c3 07       		.uleb128 0x7
 4247 02c4 AD000000 		.4byte	0xad
 4248 02c8 06       		.uleb128 0x6
 4249 02c9 04       		.byte	0x4
 4250 02ca F6000000 		.4byte	0xf6
 4251 02ce 0E       		.uleb128 0xe
 4252 02cf 58000000 		.4byte	.LASF53
 4253 02d3 54       		.byte	0x54
 4254 02d4 01       		.byte	0x1
 4255 02d5 2501     		.2byte	0x125
 4256 02d7 72030000 		.4byte	0x372
 4257 02db 0F       		.uleb128 0xf
 4258 02dc 5E0D0000 		.4byte	.LASF54
 4259 02e0 01       		.byte	0x1
 4260 02e1 2701     		.2byte	0x127
 4261 02e3 72030000 		.4byte	0x372
 4262 02e7 02       		.byte	0x2
 4263 02e8 23       		.byte	0x23
 4264 02e9 00       		.uleb128 0
 4265 02ea 0F       		.uleb128 0xf
 4266 02eb 340D0000 		.4byte	.LASF55
 4267 02ef 01       		.byte	0x1
 4268 02f0 2D01     		.2byte	0x12d
 4269 02f2 7B010000 		.4byte	0x17b
 4270 02f6 02       		.byte	0x2
 4271 02f7 23       		.byte	0x23
 4272 02f8 04       		.uleb128 0x4
 4273 02f9 0F       		.uleb128 0xf
 4274 02fa 2A0C0000 		.4byte	.LASF56
 4275 02fe 01       		.byte	0x1
 4276 02ff 2E01     		.2byte	0x12e
 4277 0301 7B010000 		.4byte	0x17b
 4278 0305 02       		.byte	0x2
 4279 0306 23       		.byte	0x23
 4280 0307 18       		.uleb128 0x18
 4281 0308 0F       		.uleb128 0xf
 4282 0309 41000000 		.4byte	.LASF57
 4283 030d 01       		.byte	0x1
 4284 030e 2F01     		.2byte	0x12f
 4285 0310 0C010000 		.4byte	0x10c
 4286 0314 02       		.byte	0x2
 4287 0315 23       		.byte	0x23
 4288 0316 2C       		.uleb128 0x2c
 4289 0317 0F       		.uleb128 0xf
 4290 0318 64090000 		.4byte	.LASF58
 4291 031c 01       		.byte	0x1
 4292 031d 3001     		.2byte	0x130
 4293 031f C8020000 		.4byte	0x2c8
 4294 0323 02       		.byte	0x2
 4295 0324 23       		.byte	0x23
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 176


 4296 0325 30       		.uleb128 0x30
 4297 0326 0F       		.uleb128 0xf
 4298 0327 00000000 		.4byte	.LASF59
 4299 032b 01       		.byte	0x1
 4300 032c 3101     		.2byte	0x131
 4301 032e 7D030000 		.4byte	0x37d
 4302 0332 02       		.byte	0x2
 4303 0333 23       		.byte	0x23
 4304 0334 34       		.uleb128 0x34
 4305 0335 0F       		.uleb128 0xf
 4306 0336 0B0C0000 		.4byte	.LASF60
 4307 033a 01       		.byte	0x1
 4308 033b 4101     		.2byte	0x141
 4309 033d 0C010000 		.4byte	0x10c
 4310 0341 02       		.byte	0x2
 4311 0342 23       		.byte	0x23
 4312 0343 44       		.uleb128 0x44
 4313 0344 0F       		.uleb128 0xf
 4314 0345 F3040000 		.4byte	.LASF61
 4315 0349 01       		.byte	0x1
 4316 034a 4201     		.2byte	0x142
 4317 034c 0C010000 		.4byte	0x10c
 4318 0350 02       		.byte	0x2
 4319 0351 23       		.byte	0x23
 4320 0352 48       		.uleb128 0x48
 4321 0353 0F       		.uleb128 0xf
 4322 0354 E3040000 		.4byte	.LASF62
 4323 0358 01       		.byte	0x1
 4324 0359 5D01     		.2byte	0x15d
 4325 035b 8D030000 		.4byte	0x38d
 4326 035f 02       		.byte	0x2
 4327 0360 23       		.byte	0x23
 4328 0361 4C       		.uleb128 0x4c
 4329 0362 0F       		.uleb128 0xf
 4330 0363 8C020000 		.4byte	.LASF63
 4331 0367 01       		.byte	0x1
 4332 0368 5E01     		.2byte	0x15e
 4333 036a 92030000 		.4byte	0x392
 4334 036e 02       		.byte	0x2
 4335 036f 23       		.byte	0x23
 4336 0370 50       		.uleb128 0x50
 4337 0371 00       		.byte	0
 4338 0372 06       		.uleb128 0x6
 4339 0373 04       		.byte	0x4
 4340 0374 78030000 		.4byte	0x378
 4341 0378 10       		.uleb128 0x10
 4342 0379 F6000000 		.4byte	0xf6
 4343 037d 11       		.uleb128 0x11
 4344 037e A6000000 		.4byte	0xa6
 4345 0382 8D030000 		.4byte	0x38d
 4346 0386 12       		.uleb128 0x12
 4347 0387 97000000 		.4byte	0x97
 4348 038b 0F       		.byte	0xf
 4349 038c 00       		.byte	0
 4350 038d 10       		.uleb128 0x10
 4351 038e CE000000 		.4byte	0xce
 4352 0392 10       		.uleb128 0x10
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 177


 4353 0393 B8000000 		.4byte	0xb8
 4354 0397 13       		.uleb128 0x13
 4355 0398 65020000 		.4byte	.LASF64
 4356 039c 01       		.byte	0x1
 4357 039d 6B01     		.2byte	0x16b
 4358 039f CE020000 		.4byte	0x2ce
 4359 03a3 13       		.uleb128 0x13
 4360 03a4 4F0C0000 		.4byte	.LASF65
 4361 03a8 01       		.byte	0x1
 4362 03a9 6F01     		.2byte	0x16f
 4363 03ab 97030000 		.4byte	0x397
 4364 03af 14       		.uleb128 0x14
 4365 03b0 17090000 		.4byte	.LASF83
 4366 03b4 01       		.byte	0x1
 4367 03b5 7806     		.2byte	0x678
 4368 03b7 01       		.byte	0x1
 4369 03b8 01010000 		.4byte	0x101
 4370 03bc 01       		.byte	0x1
 4371 03bd E6030000 		.4byte	0x3e6
 4372 03c1 15       		.uleb128 0x15
 4373 03c2 10080000 		.4byte	.LASF70
 4374 03c6 01       		.byte	0x1
 4375 03c7 7806     		.2byte	0x678
 4376 03c9 E6030000 		.4byte	0x3e6
 4377 03cd 16       		.uleb128 0x16
 4378 03ce 810A0000 		.4byte	.LASF66
 4379 03d2 01       		.byte	0x1
 4380 03d3 7A06     		.2byte	0x67a
 4381 03d5 01010000 		.4byte	0x101
 4382 03d9 16       		.uleb128 0x16
 4383 03da 430D0000 		.4byte	.LASF67
 4384 03de 01       		.byte	0x1
 4385 03df 7B06     		.2byte	0x67b
 4386 03e1 EB030000 		.4byte	0x3eb
 4387 03e5 00       		.byte	0
 4388 03e6 07       		.uleb128 0x7
 4389 03e7 10020000 		.4byte	0x210
 4390 03eb 07       		.uleb128 0x7
 4391 03ec F0030000 		.4byte	0x3f0
 4392 03f0 06       		.uleb128 0x6
 4393 03f1 04       		.byte	0x4
 4394 03f2 F6030000 		.4byte	0x3f6
 4395 03f6 07       		.uleb128 0x7
 4396 03f7 A3030000 		.4byte	0x3a3
 4397 03fb 17       		.uleb128 0x17
 4398 03fc C6060000 		.4byte	.LASF68
 4399 0400 01       		.byte	0x1
 4400 0401 330E     		.2byte	0xe33
 4401 0403 01       		.byte	0x1
 4402 0404 01       		.byte	0x1
 4403 0405 16040000 		.4byte	0x416
 4404 0409 16       		.uleb128 0x16
 4405 040a 430D0000 		.4byte	.LASF67
 4406 040e 01       		.byte	0x1
 4407 040f 350E     		.2byte	0xe35
 4408 0411 16040000 		.4byte	0x416
 4409 0415 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 178


 4410 0416 06       		.uleb128 0x6
 4411 0417 04       		.byte	0x4
 4412 0418 A3030000 		.4byte	0x3a3
 4413 041c 17       		.uleb128 0x17
 4414 041d 8F000000 		.4byte	.LASF69
 4415 0421 01       		.byte	0x1
 4416 0422 FF02     		.2byte	0x2ff
 4417 0424 01       		.byte	0x1
 4418 0425 01       		.byte	0x1
 4419 0426 A1040000 		.4byte	0x4a1
 4420 042a 15       		.uleb128 0x15
 4421 042b 17060000 		.4byte	.LASF71
 4422 042f 01       		.byte	0x1
 4423 0430 FF02     		.2byte	0x2ff
 4424 0432 D9000000 		.4byte	0xd9
 4425 0436 15       		.uleb128 0x15
 4426 0437 83040000 		.4byte	.LASF72
 4427 043b 01       		.byte	0x1
 4428 043c 0003     		.2byte	0x300
 4429 043e C3020000 		.4byte	0x2c3
 4430 0442 15       		.uleb128 0x15
 4431 0443 75050000 		.4byte	.LASF73
 4432 0447 01       		.byte	0x1
 4433 0448 0103     		.2byte	0x301
 4434 044a A1040000 		.4byte	0x4a1
 4435 044e 15       		.uleb128 0x15
 4436 044f BE080000 		.4byte	.LASF74
 4437 0453 01       		.byte	0x1
 4438 0454 0203     		.2byte	0x302
 4439 0456 A6040000 		.4byte	0x4a6
 4440 045a 15       		.uleb128 0x15
 4441 045b 41000000 		.4byte	.LASF57
 4442 045f 01       		.byte	0x1
 4443 0460 0303     		.2byte	0x303
 4444 0462 0C010000 		.4byte	0x10c
 4445 0466 15       		.uleb128 0x15
 4446 0467 9E0D0000 		.4byte	.LASF75
 4447 046b 01       		.byte	0x1
 4448 046c 0403     		.2byte	0x304
 4449 046e AB040000 		.4byte	0x4ab
 4450 0472 15       		.uleb128 0x15
 4451 0473 0E060000 		.4byte	.LASF76
 4452 0477 01       		.byte	0x1
 4453 0478 0503     		.2byte	0x305
 4454 047a 16040000 		.4byte	0x416
 4455 047e 15       		.uleb128 0x15
 4456 047f AE0C0000 		.4byte	.LASF77
 4457 0483 01       		.byte	0x1
 4458 0484 0603     		.2byte	0x306
 4459 0486 B6040000 		.4byte	0x4b6
 4460 048a 16       		.uleb128 0x16
 4461 048b 5E0D0000 		.4byte	.LASF54
 4462 048f 01       		.byte	0x1
 4463 0490 0803     		.2byte	0x308
 4464 0492 C8020000 		.4byte	0x2c8
 4465 0496 18       		.uleb128 0x18
 4466 0497 7800     		.ascii	"x\000"
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 179


 4467 0499 01       		.byte	0x1
 4468 049a 0903     		.2byte	0x309
 4469 049c 0C010000 		.4byte	0x10c
 4470 04a0 00       		.byte	0
 4471 04a1 07       		.uleb128 0x7
 4472 04a2 CE000000 		.4byte	0xce
 4473 04a6 07       		.uleb128 0x7
 4474 04a7 9E000000 		.4byte	0x9e
 4475 04ab 07       		.uleb128 0x7
 4476 04ac B0040000 		.4byte	0x4b0
 4477 04b0 06       		.uleb128 0x6
 4478 04b1 04       		.byte	0x4
 4479 04b2 10020000 		.4byte	0x210
 4480 04b6 07       		.uleb128 0x7
 4481 04b7 BB040000 		.4byte	0x4bb
 4482 04bb 06       		.uleb128 0x6
 4483 04bc 04       		.byte	0x4
 4484 04bd C1040000 		.4byte	0x4c1
 4485 04c1 07       		.uleb128 0x7
 4486 04c2 B8020000 		.4byte	0x2b8
 4487 04c6 17       		.uleb128 0x17
 4488 04c7 B70C0000 		.4byte	.LASF78
 4489 04cb 01       		.byte	0x1
 4490 04cc 5412     		.2byte	0x1254
 4491 04ce 01       		.byte	0x1
 4492 04cf 01       		.byte	0x1
 4493 04d0 05050000 		.4byte	0x505
 4494 04d4 15       		.uleb128 0x15
 4495 04d5 550C0000 		.4byte	.LASF79
 4496 04d9 01       		.byte	0x1
 4497 04da 5412     		.2byte	0x1254
 4498 04dc 17010000 		.4byte	0x117
 4499 04e0 15       		.uleb128 0x15
 4500 04e1 2F0B0000 		.4byte	.LASF80
 4501 04e5 01       		.byte	0x1
 4502 04e6 5412     		.2byte	0x1254
 4503 04e8 05050000 		.4byte	0x505
 4504 04ec 16       		.uleb128 0x16
 4505 04ed 280D0000 		.4byte	.LASF81
 4506 04f1 01       		.byte	0x1
 4507 04f2 5612     		.2byte	0x1256
 4508 04f4 17010000 		.4byte	0x117
 4509 04f8 16       		.uleb128 0x16
 4510 04f9 51040000 		.4byte	.LASF82
 4511 04fd 01       		.byte	0x1
 4512 04fe 5712     		.2byte	0x1257
 4513 0500 0A050000 		.4byte	0x50a
 4514 0504 00       		.byte	0
 4515 0505 07       		.uleb128 0x7
 4516 0506 01010000 		.4byte	0x101
 4517 050a 07       		.uleb128 0x7
 4518 050b 17010000 		.4byte	0x117
 4519 050f 19       		.uleb128 0x19
 4520 0510 46060000 		.4byte	.LASF84
 4521 0514 02       		.byte	0x2
 4522 0515 F9       		.byte	0xf9
 4523 0516 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 180


 4524 0517 CE000000 		.4byte	0xce
 4525 051b 03       		.byte	0x3
 4526 051c 37050000 		.4byte	0x537
 4527 0520 1A       		.uleb128 0x1a
 4528 0521 B6020000 		.4byte	.LASF85
 4529 0525 02       		.byte	0x2
 4530 0526 FB       		.byte	0xfb
 4531 0527 CE000000 		.4byte	0xce
 4532 052b 1A       		.uleb128 0x1a
 4533 052c 5C050000 		.4byte	.LASF86
 4534 0530 02       		.byte	0x2
 4535 0531 FB       		.byte	0xfb
 4536 0532 CE000000 		.4byte	0xce
 4537 0536 00       		.byte	0
 4538 0537 17       		.uleb128 0x17
 4539 0538 07020000 		.4byte	.LASF87
 4540 053c 02       		.byte	0x2
 4541 053d 0D01     		.2byte	0x10d
 4542 053f 01       		.byte	0x1
 4543 0540 03       		.byte	0x3
 4544 0541 52050000 		.4byte	0x552
 4545 0545 15       		.uleb128 0x15
 4546 0546 A9070000 		.4byte	.LASF88
 4547 054a 02       		.byte	0x2
 4548 054b 0D01     		.2byte	0x10d
 4549 054d CE000000 		.4byte	0xce
 4550 0551 00       		.byte	0
 4551 0552 1B       		.uleb128 0x1b
 4552 0553 C30A0000 		.4byte	.LASF89
 4553 0557 02       		.byte	0x2
 4554 0558 E9       		.byte	0xe9
 4555 0559 01       		.byte	0x1
 4556 055a 03       		.byte	0x3
 4557 055b 6B050000 		.4byte	0x56b
 4558 055f 1A       		.uleb128 0x1a
 4559 0560 5C050000 		.4byte	.LASF86
 4560 0564 02       		.byte	0x2
 4561 0565 EB       		.byte	0xeb
 4562 0566 CE000000 		.4byte	0xce
 4563 056a 00       		.byte	0
 4564 056b 19       		.uleb128 0x19
 4565 056c 86060000 		.4byte	.LASF90
 4566 0570 02       		.byte	0x2
 4567 0571 AC       		.byte	0xac
 4568 0572 01       		.byte	0x1
 4569 0573 B8000000 		.4byte	0xb8
 4570 0577 03       		.byte	0x3
 4571 0578 93050000 		.4byte	0x593
 4572 057c 1C       		.uleb128 0x1c
 4573 057d CB010000 		.4byte	.LASF91
 4574 0581 02       		.byte	0x2
 4575 0582 AC       		.byte	0xac
 4576 0583 CE000000 		.4byte	0xce
 4577 0587 1A       		.uleb128 0x1a
 4578 0588 DF090000 		.4byte	.LASF92
 4579 058c 02       		.byte	0x2
 4580 058d AE       		.byte	0xae
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 181


 4581 058e B8000000 		.4byte	0xb8
 4582 0592 00       		.byte	0
 4583 0593 1D       		.uleb128 0x1d
 4584 0594 01       		.byte	0x1
 4585 0595 43080000 		.4byte	.LASF197
 4586 0599 01       		.byte	0x1
 4587 059a C90A     		.2byte	0xac9
 4588 059c 01       		.byte	0x1
 4589 059d 01       		.byte	0x1
 4590 059e DD050000 		.4byte	0x5dd
 4591 05a2 1E       		.uleb128 0x1e
 4592 05a3 C0050000 		.4byte	0x5c0
 4593 05a7 16       		.uleb128 0x16
 4594 05a8 450B0000 		.4byte	.LASF93
 4595 05ac 01       		.byte	0x1
 4596 05ad F20A     		.2byte	0xaf2
 4597 05af DD050000 		.4byte	0x5dd
 4598 05b3 16       		.uleb128 0x16
 4599 05b4 B9060000 		.4byte	.LASF94
 4600 05b8 01       		.byte	0x1
 4601 05b9 F20A     		.2byte	0xaf2
 4602 05bb A1040000 		.4byte	0x4a1
 4603 05bf 00       		.byte	0
 4604 05c0 1F       		.uleb128 0x1f
 4605 05c1 16       		.uleb128 0x16
 4606 05c2 FD0B0000 		.4byte	.LASF95
 4607 05c6 01       		.byte	0x1
 4608 05c7 F60A     		.2byte	0xaf6
 4609 05c9 0C010000 		.4byte	0x10c
 4610 05cd 1F       		.uleb128 0x1f
 4611 05ce 16       		.uleb128 0x16
 4612 05cf 4C000000 		.4byte	.LASF96
 4613 05d3 01       		.byte	0x1
 4614 05d4 F60A     		.2byte	0xaf6
 4615 05d6 E8050000 		.4byte	0x5e8
 4616 05da 00       		.byte	0
 4617 05db 00       		.byte	0
 4618 05dc 00       		.byte	0
 4619 05dd 07       		.uleb128 0x7
 4620 05de E2050000 		.4byte	0x5e2
 4621 05e2 06       		.uleb128 0x6
 4622 05e3 04       		.byte	0x4
 4623 05e4 A1040000 		.4byte	0x4a1
 4624 05e8 07       		.uleb128 0x7
 4625 05e9 ED050000 		.4byte	0x5ed
 4626 05ed 06       		.uleb128 0x6
 4627 05ee 04       		.byte	0x4
 4628 05ef 05020000 		.4byte	0x205
 4629 05f3 20       		.uleb128 0x20
 4630 05f4 AF030000 		.4byte	0x3af
 4631 05f8 00000000 		.4byte	.LFB15
 4632 05fc 20000000 		.4byte	.LFE15
 4633 0600 02       		.byte	0x2
 4634 0601 7D       		.byte	0x7d
 4635 0602 00       		.sleb128 0
 4636 0603 01       		.byte	0x1
 4637 0604 4B060000 		.4byte	0x64b
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 182


 4638 0608 21       		.uleb128 0x21
 4639 0609 C1030000 		.4byte	0x3c1
 4640 060d 00000000 		.4byte	.LLST0
 4641 0611 22       		.uleb128 0x22
 4642 0612 CD030000 		.4byte	0x3cd
 4643 0616 21000000 		.4byte	.LLST1
 4644 061a 22       		.uleb128 0x22
 4645 061b D9030000 		.4byte	0x3d9
 4646 061f 00000000 		.4byte	.LLST0
 4647 0623 23       		.uleb128 0x23
 4648 0624 08000000 		.4byte	.LBB34
 4649 0628 18000000 		.4byte	.LBE34
 4650 062c 21       		.uleb128 0x21
 4651 062d C1030000 		.4byte	0x3c1
 4652 0631 40000000 		.4byte	.LLST3
 4653 0635 23       		.uleb128 0x23
 4654 0636 08000000 		.4byte	.LBB35
 4655 063a 18000000 		.4byte	.LBE35
 4656 063e 24       		.uleb128 0x24
 4657 063f CD030000 		.4byte	0x3cd
 4658 0643 24       		.uleb128 0x24
 4659 0644 D9030000 		.4byte	0x3d9
 4660 0648 00       		.byte	0
 4661 0649 00       		.byte	0
 4662 064a 00       		.byte	0
 4663 064b 20       		.uleb128 0x20
 4664 064c FB030000 		.4byte	0x3fb
 4665 0650 20000000 		.4byte	.LFB39
 4666 0654 40000000 		.4byte	.LFE39
 4667 0658 02       		.byte	0x2
 4668 0659 7D       		.byte	0x7d
 4669 065a 00       		.sleb128 0
 4670 065b 01       		.byte	0x1
 4671 065c 79060000 		.4byte	0x679
 4672 0660 24       		.uleb128 0x24
 4673 0661 09040000 		.4byte	0x409
 4674 0665 23       		.uleb128 0x23
 4675 0666 2E000000 		.4byte	.LBB39
 4676 066a 40000000 		.4byte	.LBE39
 4677 066e 22       		.uleb128 0x22
 4678 066f 09040000 		.4byte	0x409
 4679 0673 61000000 		.4byte	.LLST4
 4680 0677 00       		.byte	0
 4681 0678 00       		.byte	0
 4682 0679 25       		.uleb128 0x25
 4683 067a C6040000 		.4byte	0x4c6
 4684 067e 40000000 		.4byte	.LFB51
 4685 0682 AC000000 		.4byte	.LFE51
 4686 0686 8F000000 		.4byte	.LLST5
 4687 068a 01       		.byte	0x1
 4688 068b 14070000 		.4byte	0x714
 4689 068f 21       		.uleb128 0x21
 4690 0690 D4040000 		.4byte	0x4d4
 4691 0694 DF000000 		.4byte	.LLST6
 4692 0698 21       		.uleb128 0x21
 4693 0699 E0040000 		.4byte	0x4e0
 4694 069d 3E010000 		.4byte	.LLST7
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 183


 4695 06a1 22       		.uleb128 0x22
 4696 06a2 EC040000 		.4byte	0x4ec
 4697 06a6 9C010000 		.4byte	.LLST8
 4698 06aa 22       		.uleb128 0x22
 4699 06ab F8040000 		.4byte	0x4f8
 4700 06af BA010000 		.4byte	.LLST9
 4701 06b3 26       		.uleb128 0x26
 4702 06b4 00000000 		.4byte	.Ldebug_ranges0+0
 4703 06b8 E9060000 		.4byte	0x6e9
 4704 06bc 21       		.uleb128 0x21
 4705 06bd D4040000 		.4byte	0x4d4
 4706 06c1 E3010000 		.4byte	.LLST10
 4707 06c5 21       		.uleb128 0x21
 4708 06c6 E0040000 		.4byte	0x4e0
 4709 06ca 06020000 		.4byte	.LLST11
 4710 06ce 27       		.uleb128 0x27
 4711 06cf 00000000 		.4byte	.Ldebug_ranges0+0
 4712 06d3 24       		.uleb128 0x24
 4713 06d4 EC040000 		.4byte	0x4ec
 4714 06d8 24       		.uleb128 0x24
 4715 06d9 F8040000 		.4byte	0x4f8
 4716 06dd 28       		.uleb128 0x28
 4717 06de 94000000 		.4byte	.LVL19
 4718 06e2 01       		.byte	0x1
 4719 06e3 E81E0000 		.4byte	0x1ee8
 4720 06e7 00       		.byte	0
 4721 06e8 00       		.byte	0
 4722 06e9 29       		.uleb128 0x29
 4723 06ea 52000000 		.4byte	.LVL12
 4724 06ee 071F0000 		.4byte	0x1f07
 4725 06f2 2A       		.uleb128 0x2a
 4726 06f3 7A000000 		.4byte	.LVL14
 4727 06f7 01       		.byte	0x1
 4728 06f8 201F0000 		.4byte	0x1f20
 4729 06fc 0A070000 		.4byte	0x70a
 4730 0700 2B       		.uleb128 0x2b
 4731 0701 01       		.byte	0x1
 4732 0702 50       		.byte	0x50
 4733 0703 05       		.byte	0x5
 4734 0704 03       		.byte	0x3
 4735 0705 00000000 		.4byte	.LANCHOR0
 4736 0709 00       		.byte	0
 4737 070a 29       		.uleb128 0x29
 4738 070b 9E000000 		.4byte	.LVL20
 4739 070f E81E0000 		.4byte	0x1ee8
 4740 0713 00       		.byte	0
 4741 0714 17       		.uleb128 0x17
 4742 0715 ED050000 		.4byte	.LASF97
 4743 0719 01       		.byte	0x1
 4744 071a C303     		.2byte	0x3c3
 4745 071c 01       		.byte	0x1
 4746 071d 01       		.byte	0x1
 4747 071e 2F070000 		.4byte	0x72f
 4748 0722 15       		.uleb128 0x15
 4749 0723 0E060000 		.4byte	.LASF76
 4750 0727 01       		.byte	0x1
 4751 0728 C303     		.2byte	0x3c3
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 184


 4752 072a 16040000 		.4byte	0x416
 4753 072e 00       		.byte	0
 4754 072f 17       		.uleb128 0x17
 4755 0730 770D0000 		.4byte	.LASF98
 4756 0734 01       		.byte	0x1
 4757 0735 050D     		.2byte	0xd05
 4758 0737 01       		.byte	0x1
 4759 0738 01       		.byte	0x1
 4760 0739 4A070000 		.4byte	0x74a
 4761 073d 16       		.uleb128 0x16
 4762 073e 41000000 		.4byte	.LASF57
 4763 0742 01       		.byte	0x1
 4764 0743 070D     		.2byte	0xd07
 4765 0745 0C010000 		.4byte	0x10c
 4766 0749 00       		.byte	0
 4767 074a 2C       		.uleb128 0x2c
 4768 074b 01       		.byte	0x1
 4769 074c E1050000 		.4byte	.LASF102
 4770 0750 01       		.byte	0x1
 4771 0751 A402     		.2byte	0x2a4
 4772 0753 01       		.byte	0x1
 4773 0754 01010000 		.4byte	0x101
 4774 0758 AC000000 		.4byte	.LFB5
 4775 075c 30020000 		.4byte	.LFE5
 4776 0760 27020000 		.4byte	.LLST12
 4777 0764 01       		.byte	0x1
 4778 0765 F1090000 		.4byte	0x9f1
 4779 0769 2D       		.uleb128 0x2d
 4780 076a 17060000 		.4byte	.LASF71
 4781 076e 01       		.byte	0x1
 4782 076f A402     		.2byte	0x2a4
 4783 0771 D9000000 		.4byte	0xd9
 4784 0775 47020000 		.4byte	.LLST13
 4785 0779 2D       		.uleb128 0x2d
 4786 077a 83040000 		.4byte	.LASF72
 4787 077e 01       		.byte	0x1
 4788 077f A502     		.2byte	0x2a5
 4789 0781 C3020000 		.4byte	0x2c3
 4790 0785 8C020000 		.4byte	.LLST14
 4791 0789 2D       		.uleb128 0x2d
 4792 078a EA020000 		.4byte	.LASF99
 4793 078e 01       		.byte	0x1
 4794 078f A602     		.2byte	0x2a6
 4795 0791 F1090000 		.4byte	0x9f1
 4796 0795 F6020000 		.4byte	.LLST15
 4797 0799 2D       		.uleb128 0x2d
 4798 079a BE080000 		.4byte	.LASF74
 4799 079e 01       		.byte	0x1
 4800 079f A702     		.2byte	0x2a7
 4801 07a1 A6040000 		.4byte	0x4a6
 4802 07a5 17030000 		.4byte	.LLST16
 4803 07a9 2D       		.uleb128 0x2d
 4804 07aa 41000000 		.4byte	.LASF57
 4805 07ae 01       		.byte	0x1
 4806 07af A802     		.2byte	0x2a8
 4807 07b1 0C010000 		.4byte	0x10c
 4808 07b5 5C030000 		.4byte	.LLST17
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 185


 4809 07b9 2D       		.uleb128 0x2d
 4810 07ba 9E0D0000 		.4byte	.LASF75
 4811 07be 01       		.byte	0x1
 4812 07bf A902     		.2byte	0x2a9
 4813 07c1 AB040000 		.4byte	0x4ab
 4814 07c5 88030000 		.4byte	.LLST18
 4815 07c9 2E       		.uleb128 0x2e
 4816 07ca 0E060000 		.4byte	.LASF76
 4817 07ce 01       		.byte	0x1
 4818 07cf AB02     		.2byte	0x2ab
 4819 07d1 16040000 		.4byte	0x416
 4820 07d5 B4030000 		.4byte	.LLST19
 4821 07d9 2F       		.uleb128 0x2f
 4822 07da 810A0000 		.4byte	.LASF66
 4823 07de 01       		.byte	0x1
 4824 07df AC02     		.2byte	0x2ac
 4825 07e1 01010000 		.4byte	0x101
 4826 07e5 01       		.byte	0x1
 4827 07e6 50       		.byte	0x50
 4828 07e7 26       		.uleb128 0x26
 4829 07e8 18000000 		.4byte	.Ldebug_ranges0+0x18
 4830 07ec 39080000 		.4byte	0x839
 4831 07f0 2E       		.uleb128 0x2e
 4832 07f1 64090000 		.4byte	.LASF58
 4833 07f5 01       		.byte	0x1
 4834 07f6 C902     		.2byte	0x2c9
 4835 07f8 C8020000 		.4byte	0x2c8
 4836 07fc F4030000 		.4byte	.LLST20
 4837 0800 30       		.uleb128 0x30
 4838 0801 C0000000 		.4byte	.LVL24
 4839 0805 3A1F0000 		.4byte	0x1f3a
 4840 0809 14080000 		.4byte	0x814
 4841 080d 2B       		.uleb128 0x2b
 4842 080e 01       		.byte	0x1
 4843 080f 50       		.byte	0x50
 4844 0810 02       		.byte	0x2
 4845 0811 75       		.byte	0x75
 4846 0812 00       		.sleb128 0
 4847 0813 00       		.byte	0
 4848 0814 30       		.uleb128 0x30
 4849 0815 CE000000 		.4byte	.LVL26
 4850 0819 3A1F0000 		.4byte	0x1f3a
 4851 081d 28080000 		.4byte	0x828
 4852 0821 2B       		.uleb128 0x2b
 4853 0822 01       		.byte	0x1
 4854 0823 50       		.byte	0x50
 4855 0824 02       		.byte	0x2
 4856 0825 08       		.byte	0x8
 4857 0826 54       		.byte	0x54
 4858 0827 00       		.byte	0
 4859 0828 31       		.uleb128 0x31
 4860 0829 FE000000 		.4byte	.LVL36
 4861 082d 521F0000 		.4byte	0x1f52
 4862 0831 2B       		.uleb128 0x2b
 4863 0832 01       		.byte	0x1
 4864 0833 50       		.byte	0x50
 4865 0834 02       		.byte	0x2
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 186


 4866 0835 7A       		.byte	0x7a
 4867 0836 00       		.sleb128 0
 4868 0837 00       		.byte	0
 4869 0838 00       		.byte	0
 4870 0839 32       		.uleb128 0x32
 4871 083a 1C040000 		.4byte	0x41c
 4872 083e D6000000 		.4byte	.LBB56
 4873 0842 40000000 		.4byte	.Ldebug_ranges0+0x40
 4874 0846 01       		.byte	0x1
 4875 0847 F002     		.2byte	0x2f0
 4876 0849 12090000 		.4byte	0x912
 4877 084d 21       		.uleb128 0x21
 4878 084e 7E040000 		.4byte	0x47e
 4879 0852 28040000 		.4byte	.LLST21
 4880 0856 21       		.uleb128 0x21
 4881 0857 72040000 		.4byte	0x472
 4882 085b 48040000 		.4byte	.LLST22
 4883 085f 21       		.uleb128 0x21
 4884 0860 66040000 		.4byte	0x466
 4885 0864 71040000 		.4byte	.LLST23
 4886 0868 21       		.uleb128 0x21
 4887 0869 5A040000 		.4byte	0x45a
 4888 086d B2040000 		.4byte	.LLST24
 4889 0871 21       		.uleb128 0x21
 4890 0872 4E040000 		.4byte	0x44e
 4891 0876 FE040000 		.4byte	.LLST25
 4892 087a 21       		.uleb128 0x21
 4893 087b 42040000 		.4byte	0x442
 4894 087f 2A050000 		.4byte	.LLST26
 4895 0883 21       		.uleb128 0x21
 4896 0884 36040000 		.4byte	0x436
 4897 0888 56050000 		.4byte	.LLST27
 4898 088c 21       		.uleb128 0x21
 4899 088d 2A040000 		.4byte	0x42a
 4900 0891 91050000 		.4byte	.LLST28
 4901 0895 27       		.uleb128 0x27
 4902 0896 40000000 		.4byte	.Ldebug_ranges0+0x40
 4903 089a 22       		.uleb128 0x22
 4904 089b 8A040000 		.4byte	0x48a
 4905 089f BD050000 		.4byte	.LLST29
 4906 08a3 22       		.uleb128 0x22
 4907 08a4 96040000 		.4byte	0x496
 4908 08a8 0A060000 		.4byte	.LLST30
 4909 08ac 30       		.uleb128 0x30
 4910 08ad E0000000 		.4byte	.LVL29
 4911 08b1 661F0000 		.4byte	0x1f66
 4912 08b5 CC080000 		.4byte	0x8cc
 4913 08b9 2B       		.uleb128 0x2b
 4914 08ba 01       		.byte	0x1
 4915 08bb 52       		.byte	0x52
 4916 08bc 02       		.byte	0x2
 4917 08bd 75       		.byte	0x75
 4918 08be 00       		.sleb128 0
 4919 08bf 2B       		.uleb128 0x2b
 4920 08c0 01       		.byte	0x1
 4921 08c1 51       		.byte	0x51
 4922 08c2 02       		.byte	0x2
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 187


 4923 08c3 08       		.byte	0x8
 4924 08c4 A5       		.byte	0xa5
 4925 08c5 2B       		.uleb128 0x2b
 4926 08c6 01       		.byte	0x1
 4927 08c7 50       		.byte	0x50
 4928 08c8 02       		.byte	0x2
 4929 08c9 7A       		.byte	0x7a
 4930 08ca 00       		.sleb128 0
 4931 08cb 00       		.byte	0
 4932 08cc 30       		.uleb128 0x30
 4933 08cd 34010000 		.4byte	.LVL43
 4934 08d1 881F0000 		.4byte	0x1f88
 4935 08d5 E0080000 		.4byte	0x8e0
 4936 08d9 2B       		.uleb128 0x2b
 4937 08da 01       		.byte	0x1
 4938 08db 50       		.byte	0x50
 4939 08dc 02       		.byte	0x2
 4940 08dd 78       		.byte	0x78
 4941 08de 00       		.sleb128 0
 4942 08df 00       		.byte	0
 4943 08e0 30       		.uleb128 0x30
 4944 08e1 40010000 		.4byte	.LVL45
 4945 08e5 881F0000 		.4byte	0x1f88
 4946 08e9 F4080000 		.4byte	0x8f4
 4947 08ed 2B       		.uleb128 0x2b
 4948 08ee 01       		.byte	0x1
 4949 08ef 50       		.byte	0x50
 4950 08f0 02       		.byte	0x2
 4951 08f1 74       		.byte	0x74
 4952 08f2 18       		.sleb128 24
 4953 08f3 00       		.byte	0
 4954 08f4 31       		.uleb128 0x31
 4955 08f5 58010000 		.4byte	.LVL46
 4956 08f9 9D1F0000 		.4byte	0x1f9d
 4957 08fd 2B       		.uleb128 0x2b
 4958 08fe 01       		.byte	0x1
 4959 08ff 52       		.byte	0x52
 4960 0900 02       		.byte	0x2
 4961 0901 77       		.byte	0x77
 4962 0902 00       		.sleb128 0
 4963 0903 2B       		.uleb128 0x2b
 4964 0904 01       		.byte	0x1
 4965 0905 51       		.byte	0x51
 4966 0906 02       		.byte	0x2
 4967 0907 79       		.byte	0x79
 4968 0908 00       		.sleb128 0
 4969 0909 2B       		.uleb128 0x2b
 4970 090a 01       		.byte	0x1
 4971 090b 50       		.byte	0x50
 4972 090c 02       		.byte	0x2
 4973 090d 7A       		.byte	0x7a
 4974 090e 00       		.sleb128 0
 4975 090f 00       		.byte	0
 4976 0910 00       		.byte	0
 4977 0911 00       		.byte	0
 4978 0912 33       		.uleb128 0x33
 4979 0913 14070000 		.4byte	0x714
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 188


 4980 0917 5E010000 		.4byte	.LBB61
 4981 091b 18020000 		.4byte	.LBE61
 4982 091f 01       		.byte	0x1
 4983 0920 F102     		.2byte	0x2f1
 4984 0922 21       		.uleb128 0x21
 4985 0923 22070000 		.4byte	0x722
 4986 0927 42060000 		.4byte	.LLST31
 4987 092b 34       		.uleb128 0x34
 4988 092c 2F070000 		.4byte	0x72f
 4989 0930 7A010000 		.4byte	.LBB63
 4990 0934 BC010000 		.4byte	.LBE63
 4991 0938 01       		.byte	0x1
 4992 0939 D503     		.2byte	0x3d5
 4993 093b C9090000 		.4byte	0x9c9
 4994 093f 23       		.uleb128 0x23
 4995 0940 7A010000 		.4byte	.LBB64
 4996 0944 BC010000 		.4byte	.LBE64
 4997 0948 24       		.uleb128 0x24
 4998 0949 3D070000 		.4byte	0x73d
 4999 094d 30       		.uleb128 0x30
 5000 094e 84010000 		.4byte	.LVL52
 5001 0952 BF1F0000 		.4byte	0x1fbf
 5002 0956 66090000 		.4byte	0x966
 5003 095a 2B       		.uleb128 0x2b
 5004 095b 01       		.byte	0x1
 5005 095c 50       		.byte	0x50
 5006 095d 07       		.byte	0x7
 5007 095e 79       		.byte	0x79
 5008 095f 00       		.sleb128 0
 5009 0960 77       		.byte	0x77
 5010 0961 00       		.sleb128 0
 5011 0962 22       		.byte	0x22
 5012 0963 44       		.byte	0x44
 5013 0964 1C       		.byte	0x1c
 5014 0965 00       		.byte	0
 5015 0966 30       		.uleb128 0x30
 5016 0967 98010000 		.4byte	.LVL54
 5017 096b BF1F0000 		.4byte	0x1fbf
 5018 096f 7A090000 		.4byte	0x97a
 5019 0973 2B       		.uleb128 0x2b
 5020 0974 01       		.byte	0x1
 5021 0975 50       		.byte	0x50
 5022 0976 02       		.byte	0x2
 5023 0977 7A       		.byte	0x7a
 5024 0978 00       		.sleb128 0
 5025 0979 00       		.byte	0
 5026 097a 30       		.uleb128 0x30
 5027 097b 9E010000 		.4byte	.LVL55
 5028 097f BF1F0000 		.4byte	0x1fbf
 5029 0983 8E090000 		.4byte	0x98e
 5030 0987 2B       		.uleb128 0x2b
 5031 0988 01       		.byte	0x1
 5032 0989 50       		.byte	0x50
 5033 098a 02       		.byte	0x2
 5034 098b 77       		.byte	0x77
 5035 098c 00       		.sleb128 0
 5036 098d 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 189


 5037 098e 30       		.uleb128 0x30
 5038 098f A6010000 		.4byte	.LVL56
 5039 0993 BF1F0000 		.4byte	0x1fbf
 5040 0997 A2090000 		.4byte	0x9a2
 5041 099b 2B       		.uleb128 0x2b
 5042 099c 01       		.byte	0x1
 5043 099d 50       		.byte	0x50
 5044 099e 02       		.byte	0x2
 5045 099f 75       		.byte	0x75
 5046 09a0 14       		.sleb128 20
 5047 09a1 00       		.byte	0
 5048 09a2 30       		.uleb128 0x30
 5049 09a3 AE010000 		.4byte	.LVL57
 5050 09a7 BF1F0000 		.4byte	0x1fbf
 5051 09ab B7090000 		.4byte	0x9b7
 5052 09af 2B       		.uleb128 0x2b
 5053 09b0 01       		.byte	0x1
 5054 09b1 50       		.byte	0x50
 5055 09b2 03       		.byte	0x3
 5056 09b3 75       		.byte	0x75
 5057 09b4 D001     		.sleb128 208
 5058 09b6 00       		.byte	0
 5059 09b7 31       		.uleb128 0x31
 5060 09b8 B4010000 		.4byte	.LVL58
 5061 09bc BF1F0000 		.4byte	0x1fbf
 5062 09c0 2B       		.uleb128 0x2b
 5063 09c1 01       		.byte	0x1
 5064 09c2 50       		.byte	0x50
 5065 09c3 02       		.byte	0x2
 5066 09c4 75       		.byte	0x75
 5067 09c5 00       		.sleb128 0
 5068 09c6 00       		.byte	0
 5069 09c7 00       		.byte	0
 5070 09c8 00       		.byte	0
 5071 09c9 29       		.uleb128 0x29
 5072 09ca 64010000 		.4byte	.LVL48
 5073 09ce D41F0000 		.4byte	0x1fd4
 5074 09d2 30       		.uleb128 0x30
 5075 09d3 F2010000 		.4byte	.LVL61
 5076 09d7 201F0000 		.4byte	0x1f20
 5077 09db E6090000 		.4byte	0x9e6
 5078 09df 2B       		.uleb128 0x2b
 5079 09e0 01       		.byte	0x1
 5080 09e1 51       		.byte	0x51
 5081 09e2 02       		.byte	0x2
 5082 09e3 78       		.byte	0x78
 5083 09e4 00       		.sleb128 0
 5084 09e5 00       		.byte	0
 5085 09e6 29       		.uleb128 0x29
 5086 09e7 F6010000 		.4byte	.LVL62
 5087 09eb DE1F0000 		.4byte	0x1fde
 5088 09ef 00       		.byte	0
 5089 09f0 00       		.byte	0
 5090 09f1 07       		.uleb128 0x7
 5091 09f2 C3000000 		.4byte	0xc3
 5092 09f6 17       		.uleb128 0x17
 5093 09f7 6A0C0000 		.4byte	.LASF100
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 190


 5094 09fb 01       		.byte	0x1
 5095 09fc FD0D     		.2byte	0xdfd
 5096 09fe 01       		.byte	0x1
 5097 09ff 01       		.byte	0x1
 5098 0a00 110A0000 		.4byte	0xa11
 5099 0a04 15       		.uleb128 0x15
 5100 0a05 430D0000 		.4byte	.LASF67
 5101 0a09 01       		.byte	0x1
 5102 0a0a FD0D     		.2byte	0xdfd
 5103 0a0c 16040000 		.4byte	0x416
 5104 0a10 00       		.byte	0
 5105 0a11 35       		.uleb128 0x35
 5106 0a12 01       		.byte	0x1
 5107 0a13 37080000 		.4byte	.LASF107
 5108 0a17 01       		.byte	0x1
 5109 0a18 1804     		.2byte	0x418
 5110 0a1a 01       		.byte	0x1
 5111 0a1b 30020000 		.4byte	.LFB8
 5112 0a1f D8020000 		.4byte	.LFE8
 5113 0a23 55060000 		.4byte	.LLST32
 5114 0a27 01       		.byte	0x1
 5115 0a28 E20A0000 		.4byte	0xae2
 5116 0a2c 2D       		.uleb128 0x2d
 5117 0a2d 6C090000 		.4byte	.LASF101
 5118 0a31 01       		.byte	0x1
 5119 0a32 1804     		.2byte	0x418
 5120 0a34 10020000 		.4byte	0x210
 5121 0a38 75060000 		.4byte	.LLST33
 5122 0a3c 2E       		.uleb128 0x2e
 5123 0a3d 430D0000 		.4byte	.LASF67
 5124 0a41 01       		.byte	0x1
 5125 0a42 1A04     		.2byte	0x41a
 5126 0a44 16040000 		.4byte	0x416
 5127 0a48 93060000 		.4byte	.LLST34
 5128 0a4c 32       		.uleb128 0x32
 5129 0a4d F6090000 		.4byte	0x9f6
 5130 0a51 98020000 		.4byte	.LBB67
 5131 0a55 58000000 		.4byte	.Ldebug_ranges0+0x58
 5132 0a59 01       		.byte	0x1
 5133 0a5a 5404     		.2byte	0x454
 5134 0a5c 830A0000 		.4byte	0xa83
 5135 0a60 21       		.uleb128 0x21
 5136 0a61 040A0000 		.4byte	0xa04
 5137 0a65 A6060000 		.4byte	.LLST35
 5138 0a69 29       		.uleb128 0x29
 5139 0a6a A2020000 		.4byte	.LVL74
 5140 0a6e 521F0000 		.4byte	0x1f52
 5141 0a72 31       		.uleb128 0x31
 5142 0a73 A8020000 		.4byte	.LVL75
 5143 0a77 521F0000 		.4byte	0x1f52
 5144 0a7b 2B       		.uleb128 0x2b
 5145 0a7c 01       		.byte	0x1
 5146 0a7d 50       		.byte	0x50
 5147 0a7e 02       		.byte	0x2
 5148 0a7f 74       		.byte	0x74
 5149 0a80 00       		.sleb128 0
 5150 0a81 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 191


 5151 0a82 00       		.byte	0
 5152 0a83 29       		.uleb128 0x29
 5153 0a84 3A020000 		.4byte	.LVL68
 5154 0a88 D41F0000 		.4byte	0x1fd4
 5155 0a8c 30       		.uleb128 0x30
 5156 0a8d 46020000 		.4byte	.LVL70
 5157 0a91 071F0000 		.4byte	0x1f07
 5158 0a95 A00A0000 		.4byte	0xaa0
 5159 0a99 2B       		.uleb128 0x2b
 5160 0a9a 01       		.byte	0x1
 5161 0a9b 50       		.byte	0x50
 5162 0a9c 02       		.byte	0x2
 5163 0a9d 77       		.byte	0x77
 5164 0a9e 00       		.sleb128 0
 5165 0a9f 00       		.byte	0
 5166 0aa0 30       		.uleb128 0x30
 5167 0aa1 6E020000 		.4byte	.LVL71
 5168 0aa5 071F0000 		.4byte	0x1f07
 5169 0aa9 B40A0000 		.4byte	0xab4
 5170 0aad 2B       		.uleb128 0x2b
 5171 0aae 01       		.byte	0x1
 5172 0aaf 50       		.byte	0x50
 5173 0ab0 02       		.byte	0x2
 5174 0ab1 74       		.byte	0x74
 5175 0ab2 18       		.sleb128 24
 5176 0ab3 00       		.byte	0
 5177 0ab4 30       		.uleb128 0x30
 5178 0ab5 8A020000 		.4byte	.LVL72
 5179 0ab9 201F0000 		.4byte	0x1f20
 5180 0abd CF0A0000 		.4byte	0xacf
 5181 0ac1 2B       		.uleb128 0x2b
 5182 0ac2 01       		.byte	0x1
 5183 0ac3 51       		.byte	0x51
 5184 0ac4 02       		.byte	0x2
 5185 0ac5 77       		.byte	0x77
 5186 0ac6 00       		.sleb128 0
 5187 0ac7 2B       		.uleb128 0x2b
 5188 0ac8 01       		.byte	0x1
 5189 0ac9 50       		.byte	0x50
 5190 0aca 03       		.byte	0x3
 5191 0acb 75       		.byte	0x75
 5192 0acc D001     		.sleb128 208
 5193 0ace 00       		.byte	0
 5194 0acf 29       		.uleb128 0x29
 5195 0ad0 AC020000 		.4byte	.LVL76
 5196 0ad4 FB030000 		.4byte	0x3fb
 5197 0ad8 29       		.uleb128 0x29
 5198 0ad9 B0020000 		.4byte	.LVL77
 5199 0add DE1F0000 		.4byte	0x1fde
 5200 0ae1 00       		.byte	0
 5201 0ae2 2C       		.uleb128 0x2c
 5202 0ae3 01       		.byte	0x1
 5203 0ae4 3F040000 		.4byte	.LASF103
 5204 0ae8 01       		.byte	0x1
 5205 0ae9 3C05     		.2byte	0x53c
 5206 0aeb 01       		.byte	0x1
 5207 0aec 0C010000 		.4byte	0x10c
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 192


 5208 0af0 D8020000 		.4byte	.LFB11
 5209 0af4 F4020000 		.4byte	.LFE11
 5210 0af8 B9060000 		.4byte	.LLST36
 5211 0afc 01       		.byte	0x1
 5212 0afd 440B0000 		.4byte	0xb44
 5213 0b01 2D       		.uleb128 0x2d
 5214 0b02 10080000 		.4byte	.LASF70
 5215 0b06 01       		.byte	0x1
 5216 0b07 3C05     		.2byte	0x53c
 5217 0b09 10020000 		.4byte	0x210
 5218 0b0d D9060000 		.4byte	.LLST37
 5219 0b11 2E       		.uleb128 0x2e
 5220 0b12 430D0000 		.4byte	.LASF67
 5221 0b16 01       		.byte	0x1
 5222 0b17 3E05     		.2byte	0x53e
 5223 0b19 16040000 		.4byte	0x416
 5224 0b1d F7060000 		.4byte	.LLST38
 5225 0b21 2E       		.uleb128 0x2e
 5226 0b22 45020000 		.4byte	.LASF104
 5227 0b26 01       		.byte	0x1
 5228 0b27 3F05     		.2byte	0x53f
 5229 0b29 0C010000 		.4byte	0x10c
 5230 0b2d 0A070000 		.4byte	.LLST39
 5231 0b31 29       		.uleb128 0x29
 5232 0b32 E0020000 		.4byte	.LVL80
 5233 0b36 D41F0000 		.4byte	0x1fd4
 5234 0b3a 29       		.uleb128 0x29
 5235 0b3b EC020000 		.4byte	.LVL83
 5236 0b3f DE1F0000 		.4byte	0x1fde
 5237 0b43 00       		.byte	0
 5238 0b44 36       		.uleb128 0x36
 5239 0b45 01       		.byte	0x1
 5240 0b46 52070000 		.4byte	.LASF105
 5241 0b4a 01       		.byte	0x1
 5242 0b4b 5205     		.2byte	0x552
 5243 0b4d 01       		.byte	0x1
 5244 0b4e 0C010000 		.4byte	0x10c
 5245 0b52 F4020000 		.4byte	.LFB12
 5246 0b56 1C030000 		.4byte	.LFE12
 5247 0b5a 02       		.byte	0x2
 5248 0b5b 7D       		.byte	0x7d
 5249 0b5c 00       		.sleb128 0
 5250 0b5d 01       		.byte	0x1
 5251 0b5e E20B0000 		.4byte	0xbe2
 5252 0b62 2D       		.uleb128 0x2d
 5253 0b63 10080000 		.4byte	.LASF70
 5254 0b67 01       		.byte	0x1
 5255 0b68 5205     		.2byte	0x552
 5256 0b6a 10020000 		.4byte	0x210
 5257 0b6e 28070000 		.4byte	.LLST40
 5258 0b72 2E       		.uleb128 0x2e
 5259 0b73 430D0000 		.4byte	.LASF67
 5260 0b77 01       		.byte	0x1
 5261 0b78 5405     		.2byte	0x554
 5262 0b7a 16040000 		.4byte	0x416
 5263 0b7e 3B070000 		.4byte	.LLST41
 5264 0b82 2E       		.uleb128 0x2e
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 193


 5265 0b83 45020000 		.4byte	.LASF104
 5266 0b87 01       		.byte	0x1
 5267 0b88 5505     		.2byte	0x555
 5268 0b8a 0C010000 		.4byte	0x10c
 5269 0b8e 4E070000 		.4byte	.LLST42
 5270 0b92 16       		.uleb128 0x16
 5271 0b93 50030000 		.4byte	.LASF106
 5272 0b97 01       		.byte	0x1
 5273 0b98 5505     		.2byte	0x555
 5274 0b9a 0C010000 		.4byte	0x10c
 5275 0b9e 34       		.uleb128 0x34
 5276 0b9f 0F050000 		.4byte	0x50f
 5277 0ba3 F4020000 		.4byte	.LBB71
 5278 0ba7 08030000 		.4byte	.LBE71
 5279 0bab 01       		.byte	0x1
 5280 0bac 6905     		.2byte	0x569
 5281 0bae C90B0000 		.4byte	0xbc9
 5282 0bb2 23       		.uleb128 0x23
 5283 0bb3 F4020000 		.4byte	.LBB72
 5284 0bb7 08030000 		.4byte	.LBE72
 5285 0bbb 37       		.uleb128 0x37
 5286 0bbc 20050000 		.4byte	0x520
 5287 0bc0 01       		.byte	0x1
 5288 0bc1 53       		.byte	0x53
 5289 0bc2 24       		.uleb128 0x24
 5290 0bc3 2B050000 		.4byte	0x52b
 5291 0bc7 00       		.byte	0
 5292 0bc8 00       		.byte	0
 5293 0bc9 33       		.uleb128 0x33
 5294 0bca 37050000 		.4byte	0x537
 5295 0bce 0E030000 		.4byte	.LBB73
 5296 0bd2 12030000 		.4byte	.LBE73
 5297 0bd6 01       		.byte	0x1
 5298 0bd7 7005     		.2byte	0x570
 5299 0bd9 38       		.uleb128 0x38
 5300 0bda 45050000 		.4byte	0x545
 5301 0bde 01       		.byte	0x1
 5302 0bdf 53       		.byte	0x53
 5303 0be0 00       		.byte	0
 5304 0be1 00       		.byte	0
 5305 0be2 35       		.uleb128 0x35
 5306 0be3 01       		.byte	0x1
 5307 0be4 D2070000 		.4byte	.LASF108
 5308 0be8 01       		.byte	0x1
 5309 0be9 7A05     		.2byte	0x57a
 5310 0beb 01       		.byte	0x1
 5311 0bec 1C030000 		.4byte	.LFB13
 5312 0bf0 E4030000 		.4byte	.LFE13
 5313 0bf4 6D070000 		.4byte	.LLST43
 5314 0bf8 01       		.byte	0x1
 5315 0bf9 990C0000 		.4byte	0xc99
 5316 0bfd 2D       		.uleb128 0x2d
 5317 0bfe 10080000 		.4byte	.LASF70
 5318 0c02 01       		.byte	0x1
 5319 0c03 7A05     		.2byte	0x57a
 5320 0c05 10020000 		.4byte	0x210
 5321 0c09 99070000 		.4byte	.LLST44
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 194


 5322 0c0d 2D       		.uleb128 0x2d
 5323 0c0e F2060000 		.4byte	.LASF109
 5324 0c12 01       		.byte	0x1
 5325 0c13 7A05     		.2byte	0x57a
 5326 0c15 0C010000 		.4byte	0x10c
 5327 0c19 B7070000 		.4byte	.LLST45
 5328 0c1d 2E       		.uleb128 0x2e
 5329 0c1e 430D0000 		.4byte	.LASF67
 5330 0c22 01       		.byte	0x1
 5331 0c23 7C05     		.2byte	0x57c
 5332 0c25 16040000 		.4byte	0x416
 5333 0c29 1C080000 		.4byte	.LLST46
 5334 0c2d 2E       		.uleb128 0x2e
 5335 0c2e CC0D0000 		.4byte	.LASF110
 5336 0c32 01       		.byte	0x1
 5337 0c33 7D05     		.2byte	0x57d
 5338 0c35 0C010000 		.4byte	0x10c
 5339 0c39 2F080000 		.4byte	.LLST47
 5340 0c3d 2E       		.uleb128 0x2e
 5341 0c3e 390C0000 		.4byte	.LASF111
 5342 0c42 01       		.byte	0x1
 5343 0c43 7D05     		.2byte	0x57d
 5344 0c45 0C010000 		.4byte	0x10c
 5345 0c49 4F080000 		.4byte	.LLST48
 5346 0c4d 2E       		.uleb128 0x2e
 5347 0c4e A7020000 		.4byte	.LASF112
 5348 0c52 01       		.byte	0x1
 5349 0c53 7E05     		.2byte	0x57e
 5350 0c55 01010000 		.4byte	0x101
 5351 0c59 62080000 		.4byte	.LLST49
 5352 0c5d 29       		.uleb128 0x29
 5353 0c5e 2E030000 		.4byte	.LVL92
 5354 0c62 D41F0000 		.4byte	0x1fd4
 5355 0c66 30       		.uleb128 0x30
 5356 0c67 96030000 		.4byte	.LVL100
 5357 0c6b 071F0000 		.4byte	0x1f07
 5358 0c6f 7A0C0000 		.4byte	0xc7a
 5359 0c73 2B       		.uleb128 0x2b
 5360 0c74 01       		.byte	0x1
 5361 0c75 50       		.byte	0x50
 5362 0c76 02       		.byte	0x2
 5363 0c77 7A       		.byte	0x7a
 5364 0c78 00       		.sleb128 0
 5365 0c79 00       		.byte	0
 5366 0c7a 30       		.uleb128 0x30
 5367 0c7b C2030000 		.4byte	.LVL101
 5368 0c7f 201F0000 		.4byte	0x1f20
 5369 0c83 8E0C0000 		.4byte	0xc8e
 5370 0c87 2B       		.uleb128 0x2b
 5371 0c88 01       		.byte	0x1
 5372 0c89 51       		.byte	0x51
 5373 0c8a 02       		.byte	0x2
 5374 0c8b 7A       		.byte	0x7a
 5375 0c8c 00       		.sleb128 0
 5376 0c8d 00       		.byte	0
 5377 0c8e 28       		.uleb128 0x28
 5378 0c8f DC030000 		.4byte	.LVL104
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 195


 5379 0c93 01       		.byte	0x1
 5380 0c94 DE1F0000 		.4byte	0x1fde
 5381 0c98 00       		.byte	0
 5382 0c99 35       		.uleb128 0x35
 5383 0c9a 01       		.byte	0x1
 5384 0c9b 6B0D0000 		.4byte	.LASF113
 5385 0c9f 01       		.byte	0x1
 5386 0ca0 A606     		.2byte	0x6a6
 5387 0ca2 01       		.byte	0x1
 5388 0ca3 E4030000 		.4byte	.LFB16
 5389 0ca7 50040000 		.4byte	.LFE16
 5390 0cab 81080000 		.4byte	.LLST50
 5391 0caf 01       		.byte	0x1
 5392 0cb0 240D0000 		.4byte	0xd24
 5393 0cb4 2D       		.uleb128 0x2d
 5394 0cb5 37020000 		.4byte	.LASF114
 5395 0cb9 01       		.byte	0x1
 5396 0cba A606     		.2byte	0x6a6
 5397 0cbc 10020000 		.4byte	0x210
 5398 0cc0 B9080000 		.4byte	.LLST51
 5399 0cc4 2E       		.uleb128 0x2e
 5400 0cc5 430D0000 		.4byte	.LASF67
 5401 0cc9 01       		.byte	0x1
 5402 0cca A806     		.2byte	0x6a8
 5403 0ccc 240D0000 		.4byte	0xd24
 5404 0cd0 B9080000 		.4byte	.LLST51
 5405 0cd4 29       		.uleb128 0x29
 5406 0cd5 F6030000 		.4byte	.LVL106
 5407 0cd9 D41F0000 		.4byte	0x1fd4
 5408 0cdd 30       		.uleb128 0x30
 5409 0cde FC030000 		.4byte	.LVL107
 5410 0ce2 AF030000 		.4byte	0x3af
 5411 0ce6 F10C0000 		.4byte	0xcf1
 5412 0cea 2B       		.uleb128 0x2b
 5413 0ceb 01       		.byte	0x1
 5414 0cec 50       		.byte	0x50
 5415 0ced 02       		.byte	0x2
 5416 0cee 74       		.byte	0x74
 5417 0cef 00       		.sleb128 0
 5418 0cf0 00       		.byte	0
 5419 0cf1 30       		.uleb128 0x30
 5420 0cf2 06040000 		.4byte	.LVL108
 5421 0cf6 071F0000 		.4byte	0x1f07
 5422 0cfa 050D0000 		.4byte	0xd05
 5423 0cfe 2B       		.uleb128 0x2b
 5424 0cff 01       		.byte	0x1
 5425 0d00 50       		.byte	0x50
 5426 0d01 02       		.byte	0x2
 5427 0d02 76       		.byte	0x76
 5428 0d03 00       		.sleb128 0
 5429 0d04 00       		.byte	0
 5430 0d05 30       		.uleb128 0x30
 5431 0d06 22040000 		.4byte	.LVL109
 5432 0d0a 201F0000 		.4byte	0x1f20
 5433 0d0e 190D0000 		.4byte	0xd19
 5434 0d12 2B       		.uleb128 0x2b
 5435 0d13 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 196


 5436 0d14 51       		.byte	0x51
 5437 0d15 02       		.byte	0x2
 5438 0d16 76       		.byte	0x76
 5439 0d17 00       		.sleb128 0
 5440 0d18 00       		.byte	0
 5441 0d19 28       		.uleb128 0x28
 5442 0d1a 44040000 		.4byte	.LVL111
 5443 0d1e 01       		.byte	0x1
 5444 0d1f DE1F0000 		.4byte	0x1fde
 5445 0d23 00       		.byte	0
 5446 0d24 07       		.uleb128 0x7
 5447 0d25 16040000 		.4byte	0x416
 5448 0d29 2C       		.uleb128 0x2c
 5449 0d2a 01       		.byte	0x1
 5450 0d2b BC030000 		.4byte	.LASF115
 5451 0d2f 01       		.byte	0x1
 5452 0d30 DC06     		.2byte	0x6dc
 5453 0d32 01       		.byte	0x1
 5454 0d33 01010000 		.4byte	0x101
 5455 0d37 50040000 		.4byte	.LFB17
 5456 0d3b CC040000 		.4byte	.LFE17
 5457 0d3f F0080000 		.4byte	.LLST53
 5458 0d43 01       		.byte	0x1
 5459 0d44 220E0000 		.4byte	0xe22
 5460 0d48 2D       		.uleb128 0x2d
 5461 0d49 37020000 		.4byte	.LASF114
 5462 0d4d 01       		.byte	0x1
 5463 0d4e DC06     		.2byte	0x6dc
 5464 0d50 10020000 		.4byte	0x210
 5465 0d54 10090000 		.4byte	.LLST54
 5466 0d58 2E       		.uleb128 0x2e
 5467 0d59 A7020000 		.4byte	.LASF112
 5468 0d5d 01       		.byte	0x1
 5469 0d5e DE06     		.2byte	0x6de
 5470 0d60 01010000 		.4byte	0x101
 5471 0d64 3C090000 		.4byte	.LLST55
 5472 0d68 2E       		.uleb128 0x2e
 5473 0d69 430D0000 		.4byte	.LASF67
 5474 0d6d 01       		.byte	0x1
 5475 0d6e DF06     		.2byte	0x6df
 5476 0d70 240D0000 		.4byte	0xd24
 5477 0d74 7D090000 		.4byte	.LLST56
 5478 0d78 16       		.uleb128 0x16
 5479 0d79 6C020000 		.4byte	.LASF116
 5480 0d7d 01       		.byte	0x1
 5481 0d7e E006     		.2byte	0x6e0
 5482 0d80 0C010000 		.4byte	0x10c
 5483 0d84 34       		.uleb128 0x34
 5484 0d85 0F050000 		.4byte	0x50f
 5485 0d89 56040000 		.4byte	.LBB75
 5486 0d8d 6A040000 		.4byte	.LBE75
 5487 0d91 01       		.byte	0x1
 5488 0d92 F606     		.2byte	0x6f6
 5489 0d94 B10D0000 		.4byte	0xdb1
 5490 0d98 23       		.uleb128 0x23
 5491 0d99 56040000 		.4byte	.LBB76
 5492 0d9d 6A040000 		.4byte	.LBE76
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 197


 5493 0da1 22       		.uleb128 0x22
 5494 0da2 20050000 		.4byte	0x520
 5495 0da6 A9090000 		.4byte	.LLST57
 5496 0daa 24       		.uleb128 0x24
 5497 0dab 2B050000 		.4byte	0x52b
 5498 0daf 00       		.byte	0
 5499 0db0 00       		.byte	0
 5500 0db1 34       		.uleb128 0x34
 5501 0db2 37050000 		.4byte	0x537
 5502 0db6 BE040000 		.4byte	.LBB77
 5503 0dba C2040000 		.4byte	.LBE77
 5504 0dbe 01       		.byte	0x1
 5505 0dbf 1A07     		.2byte	0x71a
 5506 0dc1 CF0D0000 		.4byte	0xdcf
 5507 0dc5 21       		.uleb128 0x21
 5508 0dc6 45050000 		.4byte	0x545
 5509 0dca BC090000 		.4byte	.LLST58
 5510 0dce 00       		.byte	0
 5511 0dcf 30       		.uleb128 0x30
 5512 0dd0 6E040000 		.4byte	.LVL115
 5513 0dd4 AF030000 		.4byte	0x3af
 5514 0dd8 E30D0000 		.4byte	0xde3
 5515 0ddc 2B       		.uleb128 0x2b
 5516 0ddd 01       		.byte	0x1
 5517 0dde 50       		.byte	0x50
 5518 0ddf 02       		.byte	0x2
 5519 0de0 76       		.byte	0x76
 5520 0de1 00       		.sleb128 0
 5521 0de2 00       		.byte	0
 5522 0de3 30       		.uleb128 0x30
 5523 0de4 90040000 		.4byte	.LVL117
 5524 0de8 071F0000 		.4byte	0x1f07
 5525 0dec F70D0000 		.4byte	0xdf7
 5526 0df0 2B       		.uleb128 0x2b
 5527 0df1 01       		.byte	0x1
 5528 0df2 50       		.byte	0x50
 5529 0df3 02       		.byte	0x2
 5530 0df4 78       		.byte	0x78
 5531 0df5 00       		.sleb128 0
 5532 0df6 00       		.byte	0
 5533 0df7 30       		.uleb128 0x30
 5534 0df8 AA040000 		.4byte	.LVL118
 5535 0dfc 201F0000 		.4byte	0x1f20
 5536 0e00 0B0E0000 		.4byte	0xe0b
 5537 0e04 2B       		.uleb128 0x2b
 5538 0e05 01       		.byte	0x1
 5539 0e06 51       		.byte	0x51
 5540 0e07 02       		.byte	0x2
 5541 0e08 78       		.byte	0x78
 5542 0e09 00       		.sleb128 0
 5543 0e0a 00       		.byte	0
 5544 0e0b 31       		.uleb128 0x31
 5545 0e0c B8040000 		.4byte	.LVL120
 5546 0e10 201F0000 		.4byte	0x1f20
 5547 0e14 2B       		.uleb128 0x2b
 5548 0e15 01       		.byte	0x1
 5549 0e16 51       		.byte	0x51
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 198


 5550 0e17 02       		.byte	0x2
 5551 0e18 76       		.byte	0x76
 5552 0e19 18       		.sleb128 24
 5553 0e1a 2B       		.uleb128 0x2b
 5554 0e1b 01       		.byte	0x1
 5555 0e1c 50       		.byte	0x50
 5556 0e1d 02       		.byte	0x2
 5557 0e1e 75       		.byte	0x75
 5558 0e1f 14       		.sleb128 20
 5559 0e20 00       		.byte	0
 5560 0e21 00       		.byte	0
 5561 0e22 35       		.uleb128 0x35
 5562 0e23 01       		.byte	0x1
 5563 0e24 1B0B0000 		.4byte	.LASF117
 5564 0e28 01       		.byte	0x1
 5565 0e29 2207     		.2byte	0x722
 5566 0e2b 01       		.byte	0x1
 5567 0e2c CC040000 		.4byte	.LFB18
 5568 0e30 20050000 		.4byte	.LFE18
 5569 0e34 CF090000 		.4byte	.LLST59
 5570 0e38 01       		.byte	0x1
 5571 0e39 B70E0000 		.4byte	0xeb7
 5572 0e3d 2E       		.uleb128 0x2e
 5573 0e3e 810A0000 		.4byte	.LASF66
 5574 0e42 01       		.byte	0x1
 5575 0e43 2407     		.2byte	0x724
 5576 0e45 01010000 		.4byte	0x101
 5577 0e49 1F0A0000 		.4byte	.LLST60
 5578 0e4d 34       		.uleb128 0x34
 5579 0e4e 52050000 		.4byte	0x552
 5580 0e52 EA040000 		.4byte	.LBB79
 5581 0e56 FA040000 		.4byte	.LBE79
 5582 0e5a 01       		.byte	0x1
 5583 0e5b 6007     		.2byte	0x760
 5584 0e5d 710E0000 		.4byte	0xe71
 5585 0e61 23       		.uleb128 0x23
 5586 0e62 EA040000 		.4byte	.LBB80
 5587 0e66 FA040000 		.4byte	.LBE80
 5588 0e6a 24       		.uleb128 0x24
 5589 0e6b 5F050000 		.4byte	0x55f
 5590 0e6f 00       		.byte	0
 5591 0e70 00       		.byte	0
 5592 0e71 30       		.uleb128 0x30
 5593 0e72 E6040000 		.4byte	.LVL123
 5594 0e76 4A070000 		.4byte	0x74a
 5595 0e7a AC0E0000 		.4byte	0xeac
 5596 0e7e 2B       		.uleb128 0x2b
 5597 0e7f 01       		.byte	0x1
 5598 0e80 53       		.byte	0x53
 5599 0e81 02       		.byte	0x2
 5600 0e82 75       		.byte	0x75
 5601 0e83 00       		.sleb128 0
 5602 0e84 2B       		.uleb128 0x2b
 5603 0e85 01       		.byte	0x1
 5604 0e86 52       		.byte	0x52
 5605 0e87 02       		.byte	0x2
 5606 0e88 08       		.byte	0x8
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 199


 5607 0e89 78       		.byte	0x78
 5608 0e8a 2B       		.uleb128 0x2b
 5609 0e8b 01       		.byte	0x1
 5610 0e8c 51       		.byte	0x51
 5611 0e8d 05       		.byte	0x5
 5612 0e8e 03       		.byte	0x3
 5613 0e8f 00000000 		.4byte	.LC0
 5614 0e93 2B       		.uleb128 0x2b
 5615 0e94 01       		.byte	0x1
 5616 0e95 50       		.byte	0x50
 5617 0e96 05       		.byte	0x5
 5618 0e97 03       		.byte	0x3
 5619 0e98 00000000 		.4byte	prvIdleTask
 5620 0e9c 2B       		.uleb128 0x2b
 5621 0e9d 02       		.byte	0x2
 5622 0e9e 7D       		.byte	0x7d
 5623 0e9f 04       		.sleb128 4
 5624 0ea0 03       		.byte	0x3
 5625 0ea1 74       		.byte	0x74
 5626 0ea2 F401     		.sleb128 244
 5627 0ea4 2B       		.uleb128 0x2b
 5628 0ea5 02       		.byte	0x2
 5629 0ea6 7D       		.byte	0x7d
 5630 0ea7 00       		.sleb128 0
 5631 0ea8 02       		.byte	0x2
 5632 0ea9 75       		.byte	0x75
 5633 0eaa 00       		.sleb128 0
 5634 0eab 00       		.byte	0
 5635 0eac 28       		.uleb128 0x28
 5636 0ead 10050000 		.4byte	.LVL125
 5637 0eb1 01       		.byte	0x1
 5638 0eb2 E81F0000 		.4byte	0x1fe8
 5639 0eb6 00       		.byte	0
 5640 0eb7 39       		.uleb128 0x39
 5641 0eb8 01       		.byte	0x1
 5642 0eb9 2D040000 		.4byte	.LASF118
 5643 0ebd 01       		.byte	0x1
 5644 0ebe 8D07     		.2byte	0x78d
 5645 0ec0 01       		.byte	0x1
 5646 0ec1 20050000 		.4byte	.LFB19
 5647 0ec5 40050000 		.4byte	.LFE19
 5648 0ec9 02       		.byte	0x2
 5649 0eca 7D       		.byte	0x7d
 5650 0ecb 00       		.sleb128 0
 5651 0ecc 01       		.byte	0x1
 5652 0ecd 000F0000 		.4byte	0xf00
 5653 0ed1 34       		.uleb128 0x34
 5654 0ed2 52050000 		.4byte	0x552
 5655 0ed6 20050000 		.4byte	.LBB81
 5656 0eda 30050000 		.4byte	.LBE81
 5657 0ede 01       		.byte	0x1
 5658 0edf 9207     		.2byte	0x792
 5659 0ee1 F50E0000 		.4byte	0xef5
 5660 0ee5 23       		.uleb128 0x23
 5661 0ee6 20050000 		.4byte	.LBB82
 5662 0eea 30050000 		.4byte	.LBE82
 5663 0eee 24       		.uleb128 0x24
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 200


 5664 0eef 5F050000 		.4byte	0x55f
 5665 0ef3 00       		.byte	0
 5666 0ef4 00       		.byte	0
 5667 0ef5 28       		.uleb128 0x28
 5668 0ef6 3C050000 		.4byte	.LVL127
 5669 0efa 01       		.byte	0x1
 5670 0efb F61F0000 		.4byte	0x1ff6
 5671 0eff 00       		.byte	0
 5672 0f00 3A       		.uleb128 0x3a
 5673 0f01 01       		.byte	0x1
 5674 0f02 DC030000 		.4byte	.LASF151
 5675 0f06 01       		.byte	0x1
 5676 0f07 9807     		.2byte	0x798
 5677 0f09 01       		.byte	0x1
 5678 0f0a 40050000 		.4byte	.LFB20
 5679 0f0e 54050000 		.4byte	.LFE20
 5680 0f12 02       		.byte	0x2
 5681 0f13 7D       		.byte	0x7d
 5682 0f14 00       		.sleb128 0
 5683 0f15 01       		.byte	0x1
 5684 0f16 36       		.uleb128 0x36
 5685 0f17 01       		.byte	0x1
 5686 0f18 6B070000 		.4byte	.LASF119
 5687 0f1c 01       		.byte	0x1
 5688 0f1d 4F08     		.2byte	0x84f
 5689 0f1f 01       		.byte	0x1
 5690 0f20 17010000 		.4byte	0x117
 5691 0f24 54050000 		.4byte	.LFB22
 5692 0f28 60050000 		.4byte	.LFE22
 5693 0f2c 02       		.byte	0x2
 5694 0f2d 7D       		.byte	0x7d
 5695 0f2e 00       		.sleb128 0
 5696 0f2f 01       		.byte	0x1
 5697 0f30 430F0000 		.4byte	0xf43
 5698 0f34 2F       		.uleb128 0x2f
 5699 0f35 140B0000 		.4byte	.LASF120
 5700 0f39 01       		.byte	0x1
 5701 0f3a 5108     		.2byte	0x851
 5702 0f3c 17010000 		.4byte	0x117
 5703 0f40 01       		.byte	0x1
 5704 0f41 50       		.byte	0x50
 5705 0f42 00       		.byte	0
 5706 0f43 36       		.uleb128 0x36
 5707 0f44 01       		.byte	0x1
 5708 0f45 37030000 		.4byte	.LASF121
 5709 0f49 01       		.byte	0x1
 5710 0f4a 5E08     		.2byte	0x85e
 5711 0f4c 01       		.byte	0x1
 5712 0f4d 17010000 		.4byte	0x117
 5713 0f51 60050000 		.4byte	.LFB23
 5714 0f55 6C050000 		.4byte	.LFE23
 5715 0f59 02       		.byte	0x2
 5716 0f5a 7D       		.byte	0x7d
 5717 0f5b 00       		.sleb128 0
 5718 0f5c 01       		.byte	0x1
 5719 0f5d 7D0F0000 		.4byte	0xf7d
 5720 0f61 2F       		.uleb128 0x2f
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 201


 5721 0f62 810A0000 		.4byte	.LASF66
 5722 0f66 01       		.byte	0x1
 5723 0f67 6008     		.2byte	0x860
 5724 0f69 17010000 		.4byte	0x117
 5725 0f6d 01       		.byte	0x1
 5726 0f6e 50       		.byte	0x50
 5727 0f6f 3B       		.uleb128 0x3b
 5728 0f70 6C020000 		.4byte	.LASF116
 5729 0f74 01       		.byte	0x1
 5730 0f75 6108     		.2byte	0x861
 5731 0f77 0C010000 		.4byte	0x10c
 5732 0f7b 00       		.byte	0
 5733 0f7c 00       		.byte	0
 5734 0f7d 3C       		.uleb128 0x3c
 5735 0f7e 01       		.byte	0x1
 5736 0f7f 4E020000 		.4byte	.LASF158
 5737 0f83 01       		.byte	0x1
 5738 0f84 7D08     		.2byte	0x87d
 5739 0f86 01       		.byte	0x1
 5740 0f87 0C010000 		.4byte	0x10c
 5741 0f8b 6C050000 		.4byte	.LFB24
 5742 0f8f 78050000 		.4byte	.LFE24
 5743 0f93 02       		.byte	0x2
 5744 0f94 7D       		.byte	0x7d
 5745 0f95 00       		.sleb128 0
 5746 0f96 01       		.byte	0x1
 5747 0f97 36       		.uleb128 0x36
 5748 0f98 01       		.byte	0x1
 5749 0f99 D50A0000 		.4byte	.LASF122
 5750 0f9d 01       		.byte	0x1
 5751 0f9e 8508     		.2byte	0x885
 5752 0fa0 01       		.byte	0x1
 5753 0fa1 A0000000 		.4byte	0xa0
 5754 0fa5 78050000 		.4byte	.LFB25
 5755 0fa9 88050000 		.4byte	.LFE25
 5756 0fad 02       		.byte	0x2
 5757 0fae 7D       		.byte	0x7d
 5758 0faf 00       		.sleb128 0
 5759 0fb0 01       		.byte	0x1
 5760 0fb1 D60F0000 		.4byte	0xfd6
 5761 0fb5 2D       		.uleb128 0x2d
 5762 0fb6 EA070000 		.4byte	.LASF123
 5763 0fba 01       		.byte	0x1
 5764 0fbb 8508     		.2byte	0x885
 5765 0fbd 10020000 		.4byte	0x210
 5766 0fc1 3D0A0000 		.4byte	.LLST61
 5767 0fc5 2E       		.uleb128 0x2e
 5768 0fc6 430D0000 		.4byte	.LASF67
 5769 0fca 01       		.byte	0x1
 5770 0fcb 8708     		.2byte	0x887
 5771 0fcd 16040000 		.4byte	0x416
 5772 0fd1 500A0000 		.4byte	.LLST62
 5773 0fd5 00       		.byte	0
 5774 0fd6 2C       		.uleb128 0x2c
 5775 0fd7 01       		.byte	0x1
 5776 0fd8 B8010000 		.4byte	.LASF124
 5777 0fdc 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 202


 5778 0fdd C309     		.2byte	0x9c3
 5779 0fdf 01       		.byte	0x1
 5780 0fe0 01010000 		.4byte	0x101
 5781 0fe4 88050000 		.4byte	.LFB26
 5782 0fe8 50060000 		.4byte	.LFE26
 5783 0fec 700A0000 		.4byte	.LLST63
 5784 0ff0 01       		.byte	0x1
 5785 0ff1 9B100000 		.4byte	0x109b
 5786 0ff5 2E       		.uleb128 0x2e
 5787 0ff6 430D0000 		.4byte	.LASF67
 5788 0ffa 01       		.byte	0x1
 5789 0ffb C509     		.2byte	0x9c5
 5790 0ffd 16040000 		.4byte	0x416
 5791 1001 900A0000 		.4byte	.LLST64
 5792 1005 2E       		.uleb128 0x2e
 5793 1006 CB080000 		.4byte	.LASF23
 5794 100a 01       		.byte	0x1
 5795 100b C609     		.2byte	0x9c6
 5796 100d 17010000 		.4byte	0x117
 5797 1011 AE0A0000 		.4byte	.LLST65
 5798 1015 2E       		.uleb128 0x2e
 5799 1016 46090000 		.4byte	.LASF125
 5800 101a 01       		.byte	0x1
 5801 101b C709     		.2byte	0x9c7
 5802 101d 01010000 		.4byte	0x101
 5803 1021 CC0A0000 		.4byte	.LLST66
 5804 1025 27       		.uleb128 0x27
 5805 1026 70000000 		.4byte	.Ldebug_ranges0+0x70
 5806 102a 2E       		.uleb128 0x2e
 5807 102b 51040000 		.4byte	.LASF82
 5808 102f 01       		.byte	0x1
 5809 1030 D109     		.2byte	0x9d1
 5810 1032 0A050000 		.4byte	0x50a
 5811 1036 0D0B0000 		.4byte	.LLST67
 5812 103a 3D       		.uleb128 0x3d
 5813 103b 9C050000 		.4byte	.LBB84
 5814 103f B2050000 		.4byte	.LBE84
 5815 1043 61100000 		.4byte	0x1061
 5816 1047 2E       		.uleb128 0x2e
 5817 1048 5C0B0000 		.4byte	.LASF126
 5818 104c 01       		.byte	0x1
 5819 104d D909     		.2byte	0x9d9
 5820 104f ED050000 		.4byte	0x5ed
 5821 1053 2B0B0000 		.4byte	.LLST68
 5822 1057 29       		.uleb128 0x29
 5823 1058 B2050000 		.4byte	.LVL139
 5824 105c FB030000 		.4byte	0x3fb
 5825 1060 00       		.byte	0
 5826 1061 30       		.uleb128 0x30
 5827 1062 02060000 		.4byte	.LVL148
 5828 1066 071F0000 		.4byte	0x1f07
 5829 106a 75100000 		.4byte	0x1075
 5830 106e 2B       		.uleb128 0x2b
 5831 106f 01       		.byte	0x1
 5832 1070 50       		.byte	0x50
 5833 1071 02       		.byte	0x2
 5834 1072 78       		.byte	0x78
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 203


 5835 1073 00       		.sleb128 0
 5836 1074 00       		.byte	0
 5837 1075 30       		.uleb128 0x30
 5838 1076 0E060000 		.4byte	.LVL149
 5839 107a 071F0000 		.4byte	0x1f07
 5840 107e 89100000 		.4byte	0x1089
 5841 1082 2B       		.uleb128 0x2b
 5842 1083 01       		.byte	0x1
 5843 1084 50       		.byte	0x50
 5844 1085 02       		.byte	0x2
 5845 1086 77       		.byte	0x77
 5846 1087 18       		.sleb128 24
 5847 1088 00       		.byte	0
 5848 1089 31       		.uleb128 0x31
 5849 108a 28060000 		.4byte	.LVL150
 5850 108e 201F0000 		.4byte	0x1f20
 5851 1092 2B       		.uleb128 0x2b
 5852 1093 01       		.byte	0x1
 5853 1094 51       		.byte	0x51
 5854 1095 02       		.byte	0x2
 5855 1096 78       		.byte	0x78
 5856 1097 00       		.sleb128 0
 5857 1098 00       		.byte	0
 5858 1099 00       		.byte	0
 5859 109a 00       		.byte	0
 5860 109b 2C       		.uleb128 0x2c
 5861 109c 01       		.byte	0x1
 5862 109d DF080000 		.4byte	.LASF127
 5863 10a1 01       		.byte	0x1
 5864 10a2 E107     		.2byte	0x7e1
 5865 10a4 01       		.byte	0x1
 5866 10a5 01010000 		.4byte	0x101
 5867 10a9 50060000 		.4byte	.LFB21
 5868 10ad 0C070000 		.4byte	.LFE21
 5869 10b1 4D0B0000 		.4byte	.LLST69
 5870 10b5 01       		.byte	0x1
 5871 10b6 59110000 		.4byte	0x1159
 5872 10ba 2E       		.uleb128 0x2e
 5873 10bb 430D0000 		.4byte	.LASF67
 5874 10bf 01       		.byte	0x1
 5875 10c0 E307     		.2byte	0x7e3
 5876 10c2 16040000 		.4byte	0x416
 5877 10c6 6D0B0000 		.4byte	.LLST70
 5878 10ca 2E       		.uleb128 0x2e
 5879 10cb 840C0000 		.4byte	.LASF128
 5880 10cf 01       		.byte	0x1
 5881 10d0 E407     		.2byte	0x7e4
 5882 10d2 01010000 		.4byte	0x101
 5883 10d6 980B0000 		.4byte	.LLST71
 5884 10da 3D       		.uleb128 0x3d
 5885 10db C4060000 		.4byte	.LBB86
 5886 10df DE060000 		.4byte	.LBE86
 5887 10e3 01110000 		.4byte	0x1101
 5888 10e7 2E       		.uleb128 0x2e
 5889 10e8 6C000000 		.4byte	.LASF129
 5890 10ec 01       		.byte	0x1
 5891 10ed 1C08     		.2byte	0x81c
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 204


 5892 10ef 0C010000 		.4byte	0x10c
 5893 10f3 CE0B0000 		.4byte	.LLST72
 5894 10f7 29       		.uleb128 0x29
 5895 10f8 CE060000 		.4byte	.LVL166
 5896 10fc D60F0000 		.4byte	0xfd6
 5897 1100 00       		.byte	0
 5898 1101 29       		.uleb128 0x29
 5899 1102 5A060000 		.4byte	.LVL155
 5900 1106 D41F0000 		.4byte	0x1fd4
 5901 110a 30       		.uleb128 0x30
 5902 110b 8C060000 		.4byte	.LVL160
 5903 110f 071F0000 		.4byte	0x1f07
 5904 1113 1E110000 		.4byte	0x111e
 5905 1117 2B       		.uleb128 0x2b
 5906 1118 01       		.byte	0x1
 5907 1119 50       		.byte	0x50
 5908 111a 02       		.byte	0x2
 5909 111b 75       		.byte	0x75
 5910 111c 18       		.sleb128 24
 5911 111d 00       		.byte	0
 5912 111e 30       		.uleb128 0x30
 5913 111f 92060000 		.4byte	.LVL161
 5914 1123 071F0000 		.4byte	0x1f07
 5915 1127 32110000 		.4byte	0x1132
 5916 112b 2B       		.uleb128 0x2b
 5917 112c 01       		.byte	0x1
 5918 112d 50       		.byte	0x50
 5919 112e 02       		.byte	0x2
 5920 112f 78       		.byte	0x78
 5921 1130 00       		.sleb128 0
 5922 1131 00       		.byte	0
 5923 1132 30       		.uleb128 0x30
 5924 1133 AE060000 		.4byte	.LVL162
 5925 1137 201F0000 		.4byte	0x1f20
 5926 113b 46110000 		.4byte	0x1146
 5927 113f 2B       		.uleb128 0x2b
 5928 1140 01       		.byte	0x1
 5929 1141 51       		.byte	0x51
 5930 1142 02       		.byte	0x2
 5931 1143 78       		.byte	0x78
 5932 1144 00       		.sleb128 0
 5933 1145 00       		.byte	0
 5934 1146 29       		.uleb128 0x29
 5935 1147 C4060000 		.4byte	.LVL164
 5936 114b FB030000 		.4byte	0x3fb
 5937 114f 29       		.uleb128 0x29
 5938 1150 FC060000 		.4byte	.LVL171
 5939 1154 DE1F0000 		.4byte	0x1fde
 5940 1158 00       		.byte	0
 5941 1159 35       		.uleb128 0x35
 5942 115a 01       		.byte	0x1
 5943 115b 1A0C0000 		.4byte	.LASF130
 5944 115f 01       		.byte	0x1
 5945 1160 7404     		.2byte	0x474
 5946 1162 01       		.byte	0x1
 5947 1163 0C070000 		.4byte	.LFB9
 5948 1167 68070000 		.4byte	.LFE9
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 205


 5949 116b F90B0000 		.4byte	.LLST73
 5950 116f 01       		.byte	0x1
 5951 1170 FE110000 		.4byte	0x11fe
 5952 1174 2D       		.uleb128 0x2d
 5953 1175 C2090000 		.4byte	.LASF131
 5954 1179 01       		.byte	0x1
 5955 117a 7404     		.2byte	0x474
 5956 117c FE110000 		.4byte	0x11fe
 5957 1180 190C0000 		.4byte	.LLST74
 5958 1184 2D       		.uleb128 0x2d
 5959 1185 FA0C0000 		.4byte	.LASF132
 5960 1189 01       		.byte	0x1
 5961 118a 7404     		.2byte	0x474
 5962 118c 0A050000 		.4byte	0x50a
 5963 1190 450C0000 		.4byte	.LLST75
 5964 1194 2E       		.uleb128 0x2e
 5965 1195 280D0000 		.4byte	.LASF81
 5966 1199 01       		.byte	0x1
 5967 119a 7604     		.2byte	0x476
 5968 119c 17010000 		.4byte	0x117
 5969 11a0 710C0000 		.4byte	.LLST76
 5970 11a4 2F       		.uleb128 0x2f
 5971 11a5 840C0000 		.4byte	.LASF128
 5972 11a9 01       		.byte	0x1
 5973 11aa 7704     		.2byte	0x477
 5974 11ac 01010000 		.4byte	0x101
 5975 11b0 01       		.byte	0x1
 5976 11b1 50       		.byte	0x50
 5977 11b2 2E       		.uleb128 0x2e
 5978 11b3 82050000 		.4byte	.LASF133
 5979 11b7 01       		.byte	0x1
 5980 11b8 7704     		.2byte	0x477
 5981 11ba 01010000 		.4byte	0x101
 5982 11be 900C0000 		.4byte	.LLST77
 5983 11c2 26       		.uleb128 0x26
 5984 11c3 88000000 		.4byte	.Ldebug_ranges0+0x88
 5985 11c7 EB110000 		.4byte	0x11eb
 5986 11cb 2E       		.uleb128 0x2e
 5987 11cc 51040000 		.4byte	.LASF82
 5988 11d0 01       		.byte	0x1
 5989 11d1 8104     		.2byte	0x481
 5990 11d3 0A050000 		.4byte	0x50a
 5991 11d7 A40C0000 		.4byte	.LLST78
 5992 11db 31       		.uleb128 0x31
 5993 11dc 48070000 		.4byte	.LVL180
 5994 11e0 C6040000 		.4byte	0x4c6
 5995 11e4 2B       		.uleb128 0x2b
 5996 11e5 01       		.byte	0x1
 5997 11e6 51       		.byte	0x51
 5998 11e7 01       		.byte	0x1
 5999 11e8 30       		.byte	0x30
 6000 11e9 00       		.byte	0
 6001 11ea 00       		.byte	0
 6002 11eb 29       		.uleb128 0x29
 6003 11ec 16070000 		.4byte	.LVL174
 6004 11f0 000F0000 		.4byte	0xf00
 6005 11f4 29       		.uleb128 0x29
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 206


 6006 11f5 4C070000 		.4byte	.LVL181
 6007 11f9 9B100000 		.4byte	0x109b
 6008 11fd 00       		.byte	0
 6009 11fe 07       		.uleb128 0x7
 6010 11ff 03120000 		.4byte	0x1203
 6011 1203 06       		.uleb128 0x6
 6012 1204 04       		.byte	0x4
 6013 1205 17010000 		.4byte	0x117
 6014 1209 35       		.uleb128 0x35
 6015 120a 01       		.byte	0x1
 6016 120b BA040000 		.4byte	.LASF134
 6017 120f 01       		.byte	0x1
 6018 1210 C804     		.2byte	0x4c8
 6019 1212 01       		.byte	0x1
 6020 1213 68070000 		.4byte	.LFB10
 6021 1217 9C070000 		.4byte	.LFE10
 6022 121b B70C0000 		.4byte	.LLST79
 6023 121f 01       		.byte	0x1
 6024 1220 70120000 		.4byte	0x1270
 6025 1224 2D       		.uleb128 0x2d
 6026 1225 44070000 		.4byte	.LASF135
 6027 1229 01       		.byte	0x1
 6028 122a C804     		.2byte	0x4c8
 6029 122c 0A050000 		.4byte	0x50a
 6030 1230 D70C0000 		.4byte	.LLST80
 6031 1234 2E       		.uleb128 0x2e
 6032 1235 840C0000 		.4byte	.LASF128
 6033 1239 01       		.byte	0x1
 6034 123a CA04     		.2byte	0x4ca
 6035 123c 01010000 		.4byte	0x101
 6036 1240 190D0000 		.4byte	.LLST81
 6037 1244 29       		.uleb128 0x29
 6038 1245 84070000 		.4byte	.LVL186
 6039 1249 000F0000 		.4byte	0xf00
 6040 124d 30       		.uleb128 0x30
 6041 124e 8C070000 		.4byte	.LVL187
 6042 1252 C6040000 		.4byte	0x4c6
 6043 1256 66120000 		.4byte	0x1266
 6044 125a 2B       		.uleb128 0x2b
 6045 125b 01       		.byte	0x1
 6046 125c 51       		.byte	0x51
 6047 125d 01       		.byte	0x1
 6048 125e 30       		.byte	0x30
 6049 125f 2B       		.uleb128 0x2b
 6050 1260 01       		.byte	0x1
 6051 1261 50       		.byte	0x50
 6052 1262 02       		.byte	0x2
 6053 1263 74       		.byte	0x74
 6054 1264 00       		.sleb128 0
 6055 1265 00       		.byte	0
 6056 1266 29       		.uleb128 0x29
 6057 1267 90070000 		.4byte	.LVL188
 6058 126b 9B100000 		.4byte	0x109b
 6059 126f 00       		.byte	0
 6060 1270 17       		.uleb128 0x17
 6061 1271 AC0D0000 		.4byte	.LASF136
 6062 1275 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 207


 6063 1276 250D     		.2byte	0xd25
 6064 1278 01       		.byte	0x1
 6065 1279 01       		.byte	0x1
 6066 127a 9B120000 		.4byte	0x129b
 6067 127e 1F       		.uleb128 0x1f
 6068 127f 16       		.uleb128 0x16
 6069 1280 A4050000 		.4byte	.LASF137
 6070 1284 01       		.byte	0x1
 6071 1285 2C0D     		.2byte	0xd2c
 6072 1287 01010000 		.4byte	0x101
 6073 128b 1F       		.uleb128 0x1f
 6074 128c 16       		.uleb128 0x16
 6075 128d 430D0000 		.4byte	.LASF67
 6076 1291 01       		.byte	0x1
 6077 1292 3A0D     		.2byte	0xd3a
 6078 1294 16040000 		.4byte	0x416
 6079 1298 00       		.byte	0
 6080 1299 00       		.byte	0
 6081 129a 00       		.byte	0
 6082 129b 3E       		.uleb128 0x3e
 6083 129c 8F050000 		.4byte	.LASF213
 6084 12a0 01       		.byte	0x1
 6085 12a1 3B0C     		.2byte	0xc3b
 6086 12a3 01       		.byte	0x1
 6087 12a4 9C070000 		.4byte	.LFB35
 6088 12a8 08080000 		.4byte	.LFE35
 6089 12ac 440D0000 		.4byte	.LLST82
 6090 12b0 01       		.byte	0x1
 6091 12b1 70130000 		.4byte	0x1370
 6092 12b5 2D       		.uleb128 0x2d
 6093 12b6 BE080000 		.4byte	.LASF74
 6094 12ba 01       		.byte	0x1
 6095 12bb 3B0C     		.2byte	0xc3b
 6096 12bd 9E000000 		.4byte	0x9e
 6097 12c1 640D0000 		.4byte	.LLST83
 6098 12c5 33       		.uleb128 0x33
 6099 12c6 70120000 		.4byte	0x1270
 6100 12ca 9E070000 		.4byte	.LBB95
 6101 12ce E8070000 		.4byte	.LBE95
 6102 12d2 01       		.byte	0x1
 6103 12d3 470C     		.2byte	0xc47
 6104 12d5 23       		.uleb128 0x23
 6105 12d6 9E070000 		.4byte	.LBB96
 6106 12da E8070000 		.4byte	.LBE96
 6107 12de 22       		.uleb128 0x22
 6108 12df 7F120000 		.4byte	0x127f
 6109 12e3 850D0000 		.4byte	.LLST84
 6110 12e7 3D       		.uleb128 0x3d
 6111 12e8 B6070000 		.4byte	.LBB97
 6112 12ec E8070000 		.4byte	.LBE97
 6113 12f0 5B130000 		.4byte	0x135b
 6114 12f4 22       		.uleb128 0x22
 6115 12f5 8C120000 		.4byte	0x128c
 6116 12f9 9F0D0000 		.4byte	.LLST85
 6117 12fd 34       		.uleb128 0x34
 6118 12fe F6090000 		.4byte	0x9f6
 6119 1302 DA070000 		.4byte	.LBB98
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 208


 6120 1306 E8070000 		.4byte	.LBE98
 6121 130a 01       		.byte	0x1
 6122 130b 450D     		.2byte	0xd45
 6123 130d 34130000 		.4byte	0x1334
 6124 1311 21       		.uleb128 0x21
 6125 1312 040A0000 		.4byte	0xa04
 6126 1316 B20D0000 		.4byte	.LLST86
 6127 131a 29       		.uleb128 0x29
 6128 131b E0070000 		.4byte	.LVL199
 6129 131f 521F0000 		.4byte	0x1f52
 6130 1323 31       		.uleb128 0x31
 6131 1324 E6070000 		.4byte	.LVL200
 6132 1328 521F0000 		.4byte	0x1f52
 6133 132c 2B       		.uleb128 0x2b
 6134 132d 01       		.byte	0x1
 6135 132e 50       		.byte	0x50
 6136 132f 02       		.byte	0x2
 6137 1330 75       		.byte	0x75
 6138 1331 00       		.sleb128 0
 6139 1332 00       		.byte	0
 6140 1333 00       		.byte	0
 6141 1334 29       		.uleb128 0x29
 6142 1335 BA070000 		.4byte	.LVL195
 6143 1339 D41F0000 		.4byte	0x1fd4
 6144 133d 30       		.uleb128 0x30
 6145 133e C6070000 		.4byte	.LVL197
 6146 1342 071F0000 		.4byte	0x1f07
 6147 1346 51130000 		.4byte	0x1351
 6148 134a 2B       		.uleb128 0x2b
 6149 134b 01       		.byte	0x1
 6150 134c 50       		.byte	0x50
 6151 134d 02       		.byte	0x2
 6152 134e 75       		.byte	0x75
 6153 134f 04       		.sleb128 4
 6154 1350 00       		.byte	0
 6155 1351 29       		.uleb128 0x29
 6156 1352 DA070000 		.4byte	.LVL198
 6157 1356 DE1F0000 		.4byte	0x1fde
 6158 135a 00       		.byte	0
 6159 135b 29       		.uleb128 0x29
 6160 135c AA070000 		.4byte	.LVL192
 6161 1360 000F0000 		.4byte	0xf00
 6162 1364 29       		.uleb128 0x29
 6163 1365 B2070000 		.4byte	.LVL194
 6164 1369 9B100000 		.4byte	0x109b
 6165 136d 00       		.byte	0
 6166 136e 00       		.byte	0
 6167 136f 00       		.byte	0
 6168 1370 25       		.uleb128 0x25
 6169 1371 93050000 		.4byte	0x593
 6170 1375 08080000 		.4byte	.LFB27
 6171 1379 90080000 		.4byte	.LFE27
 6172 137d C50D0000 		.4byte	.LLST87
 6173 1381 01       		.byte	0x1
 6174 1382 08140000 		.4byte	0x1408
 6175 1386 3D       		.uleb128 0x3d
 6176 1387 20080000 		.4byte	.LBB109
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 209


 6177 138b 4E080000 		.4byte	.LBE109
 6178 138f B0130000 		.4byte	0x13b0
 6179 1393 22       		.uleb128 0x22
 6180 1394 A7050000 		.4byte	0x5a7
 6181 1398 E50D0000 		.4byte	.LLST88
 6182 139c 3F       		.uleb128 0x3f
 6183 139d B3050000 		.4byte	0x5b3
 6184 13a1 A5CB96AD 		.sleb128 -1515870811
 6184      7A
 6185 13a6 29       		.uleb128 0x29
 6186 13a7 4E080000 		.4byte	.LVL204
 6187 13ab 00200000 		.4byte	0x2000
 6188 13af 00       		.byte	0
 6189 13b0 23       		.uleb128 0x23
 6190 13b1 4E080000 		.4byte	.LBB110
 6191 13b5 90080000 		.4byte	.LBE110
 6192 13b9 22       		.uleb128 0x22
 6193 13ba C1050000 		.4byte	0x5c1
 6194 13be F80D0000 		.4byte	.LLST89
 6195 13c2 34       		.uleb128 0x34
 6196 13c3 6B050000 		.4byte	0x56b
 6197 13c7 50080000 		.4byte	.LBB111
 6198 13cb 56080000 		.4byte	.LBE111
 6199 13cf 01       		.byte	0x1
 6200 13d0 F60A     		.2byte	0xaf6
 6201 13d2 F3130000 		.4byte	0x13f3
 6202 13d6 21       		.uleb128 0x21
 6203 13d7 7C050000 		.4byte	0x57c
 6204 13db 0B0E0000 		.4byte	.LLST90
 6205 13df 23       		.uleb128 0x23
 6206 13e0 50080000 		.4byte	.LBB112
 6207 13e4 56080000 		.4byte	.LBE112
 6208 13e8 22       		.uleb128 0x22
 6209 13e9 87050000 		.4byte	0x587
 6210 13ed 1E0E0000 		.4byte	.LLST91
 6211 13f1 00       		.byte	0
 6212 13f2 00       		.byte	0
 6213 13f3 23       		.uleb128 0x23
 6214 13f4 5A080000 		.4byte	.LBB113
 6215 13f8 90080000 		.4byte	.LBE113
 6216 13fc 22       		.uleb128 0x22
 6217 13fd CE050000 		.4byte	0x5ce
 6218 1401 310E0000 		.4byte	.LLST92
 6219 1405 00       		.byte	0
 6220 1406 00       		.byte	0
 6221 1407 00       		.byte	0
 6222 1408 35       		.uleb128 0x35
 6223 1409 01       		.byte	0x1
 6224 140a 770C0000 		.4byte	.LASF138
 6225 140e 01       		.byte	0x1
 6226 140f 1E06     		.2byte	0x61e
 6227 1411 01       		.byte	0x1
 6228 1412 90080000 		.4byte	.LFB14
 6229 1416 2C090000 		.4byte	.LFE14
 6230 141a 4E0E0000 		.4byte	.LLST93
 6231 141e 01       		.byte	0x1
 6232 141f BD140000 		.4byte	0x14bd
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 210


 6233 1423 2D       		.uleb128 0x2d
 6234 1424 82090000 		.4byte	.LASF139
 6235 1428 01       		.byte	0x1
 6236 1429 1E06     		.2byte	0x61e
 6237 142b 10020000 		.4byte	0x210
 6238 142f 860E0000 		.4byte	.LLST94
 6239 1433 2E       		.uleb128 0x2e
 6240 1434 430D0000 		.4byte	.LASF67
 6241 1438 01       		.byte	0x1
 6242 1439 2006     		.2byte	0x620
 6243 143b 16040000 		.4byte	0x416
 6244 143f A40E0000 		.4byte	.LLST95
 6245 1443 29       		.uleb128 0x29
 6246 1444 9A080000 		.4byte	.LVL211
 6247 1448 D41F0000 		.4byte	0x1fd4
 6248 144c 30       		.uleb128 0x30
 6249 144d A6080000 		.4byte	.LVL213
 6250 1451 071F0000 		.4byte	0x1f07
 6251 1455 60140000 		.4byte	0x1460
 6252 1459 2B       		.uleb128 0x2b
 6253 145a 01       		.byte	0x1
 6254 145b 50       		.byte	0x50
 6255 145c 02       		.byte	0x2
 6256 145d 76       		.byte	0x76
 6257 145e 00       		.sleb128 0
 6258 145f 00       		.byte	0
 6259 1460 30       		.uleb128 0x30
 6260 1461 CE080000 		.4byte	.LVL214
 6261 1465 071F0000 		.4byte	0x1f07
 6262 1469 74140000 		.4byte	0x1474
 6263 146d 2B       		.uleb128 0x2b
 6264 146e 01       		.byte	0x1
 6265 146f 50       		.byte	0x50
 6266 1470 02       		.byte	0x2
 6267 1471 74       		.byte	0x74
 6268 1472 18       		.sleb128 24
 6269 1473 00       		.byte	0
 6270 1474 30       		.uleb128 0x30
 6271 1475 D6080000 		.4byte	.LVL215
 6272 1479 201F0000 		.4byte	0x1f20
 6273 147d 8E140000 		.4byte	0x148e
 6274 1481 2B       		.uleb128 0x2b
 6275 1482 01       		.byte	0x1
 6276 1483 51       		.byte	0x51
 6277 1484 02       		.byte	0x2
 6278 1485 76       		.byte	0x76
 6279 1486 00       		.sleb128 0
 6280 1487 2B       		.uleb128 0x2b
 6281 1488 01       		.byte	0x1
 6282 1489 50       		.byte	0x50
 6283 148a 02       		.byte	0x2
 6284 148b 75       		.byte	0x75
 6285 148c 00       		.sleb128 0
 6286 148d 00       		.byte	0
 6287 148e 29       		.uleb128 0x29
 6288 148f DA080000 		.4byte	.LVL216
 6289 1493 DE1F0000 		.4byte	0x1fde
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 211


 6290 1497 29       		.uleb128 0x29
 6291 1498 E4080000 		.4byte	.LVL217
 6292 149c D41F0000 		.4byte	0x1fd4
 6293 14a0 29       		.uleb128 0x29
 6294 14a1 E8080000 		.4byte	.LVL218
 6295 14a5 FB030000 		.4byte	0x3fb
 6296 14a9 29       		.uleb128 0x29
 6297 14aa EC080000 		.4byte	.LVL219
 6298 14ae DE1F0000 		.4byte	0x1fde
 6299 14b2 28       		.uleb128 0x28
 6300 14b3 20090000 		.4byte	.LVL223
 6301 14b7 01       		.byte	0x1
 6302 14b8 93050000 		.4byte	0x593
 6303 14bc 00       		.byte	0
 6304 14bd 35       		.uleb128 0x35
 6305 14be 01       		.byte	0x1
 6306 14bf A4040000 		.4byte	.LASF140
 6307 14c3 01       		.byte	0x1
 6308 14c4 040B     		.2byte	0xb04
 6309 14c6 01       		.byte	0x1
 6310 14c7 2C090000 		.4byte	.LFB28
 6311 14cb 4C090000 		.4byte	.LFE28
 6312 14cf C20E0000 		.4byte	.LLST96
 6313 14d3 01       		.byte	0x1
 6314 14d4 25150000 		.4byte	0x1525
 6315 14d8 2D       		.uleb128 0x2d
 6316 14d9 E8000000 		.4byte	.LASF141
 6317 14dd 01       		.byte	0x1
 6318 14de 040B     		.2byte	0xb04
 6319 14e0 E8050000 		.4byte	0x5e8
 6320 14e4 EE0E0000 		.4byte	.LLST97
 6321 14e8 2D       		.uleb128 0x2d
 6322 14e9 550C0000 		.4byte	.LASF79
 6323 14ed 01       		.byte	0x1
 6324 14ee 040B     		.2byte	0xb04
 6325 14f0 0A050000 		.4byte	0x50a
 6326 14f4 0F0F0000 		.4byte	.LLST98
 6327 14f8 30       		.uleb128 0x30
 6328 14f9 3A090000 		.4byte	.LVL227
 6329 14fd E81E0000 		.4byte	0x1ee8
 6330 1501 0D150000 		.4byte	0x150d
 6331 1505 2B       		.uleb128 0x2b
 6332 1506 01       		.byte	0x1
 6333 1507 50       		.byte	0x50
 6334 1508 03       		.byte	0x3
 6335 1509 F3       		.byte	0xf3
 6336 150a 01       		.uleb128 0x1
 6337 150b 50       		.byte	0x50
 6338 150c 00       		.byte	0
 6339 150d 40       		.uleb128 0x40
 6340 150e 46090000 		.4byte	.LVL229
 6341 1512 01       		.byte	0x1
 6342 1513 C6040000 		.4byte	0x4c6
 6343 1517 2B       		.uleb128 0x2b
 6344 1518 01       		.byte	0x1
 6345 1519 51       		.byte	0x51
 6346 151a 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 212


 6347 151b 31       		.byte	0x31
 6348 151c 2B       		.uleb128 0x2b
 6349 151d 01       		.byte	0x1
 6350 151e 50       		.byte	0x50
 6351 151f 03       		.byte	0x3
 6352 1520 F3       		.byte	0xf3
 6353 1521 01       		.uleb128 0x1
 6354 1522 51       		.byte	0x51
 6355 1523 00       		.byte	0
 6356 1524 00       		.byte	0
 6357 1525 35       		.uleb128 0x35
 6358 1526 01       		.byte	0x1
 6359 1527 710B0000 		.4byte	.LASF142
 6360 152b 01       		.byte	0x1
 6361 152c 150B     		.2byte	0xb15
 6362 152e 01       		.byte	0x1
 6363 152f 4C090000 		.4byte	.LFB29
 6364 1533 74090000 		.4byte	.LFE29
 6365 1537 460F0000 		.4byte	.LLST99
 6366 153b 01       		.byte	0x1
 6367 153c 9D150000 		.4byte	0x159d
 6368 1540 2D       		.uleb128 0x2d
 6369 1541 E8000000 		.4byte	.LASF141
 6370 1545 01       		.byte	0x1
 6371 1546 150B     		.2byte	0xb15
 6372 1548 ED050000 		.4byte	0x5ed
 6373 154c 720F0000 		.4byte	.LLST100
 6374 1550 2D       		.uleb128 0x2d
 6375 1551 CB080000 		.4byte	.LASF23
 6376 1555 01       		.byte	0x1
 6377 1556 150B     		.2byte	0xb15
 6378 1558 0A050000 		.4byte	0x50a
 6379 155c 930F0000 		.4byte	.LLST101
 6380 1560 2D       		.uleb128 0x2d
 6381 1561 550C0000 		.4byte	.LASF79
 6382 1565 01       		.byte	0x1
 6383 1566 150B     		.2byte	0xb15
 6384 1568 0A050000 		.4byte	0x50a
 6385 156c B40F0000 		.4byte	.LLST102
 6386 1570 30       		.uleb128 0x30
 6387 1571 62090000 		.4byte	.LVL233
 6388 1575 201F0000 		.4byte	0x1f20
 6389 1579 85150000 		.4byte	0x1585
 6390 157d 2B       		.uleb128 0x2b
 6391 157e 01       		.byte	0x1
 6392 157f 50       		.byte	0x50
 6393 1580 03       		.byte	0x3
 6394 1581 F3       		.byte	0xf3
 6395 1582 01       		.uleb128 0x1
 6396 1583 50       		.byte	0x50
 6397 1584 00       		.byte	0
 6398 1585 40       		.uleb128 0x40
 6399 1586 6E090000 		.4byte	.LVL235
 6400 158a 01       		.byte	0x1
 6401 158b C6040000 		.4byte	0x4c6
 6402 158f 2B       		.uleb128 0x2b
 6403 1590 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 213


 6404 1591 51       		.byte	0x51
 6405 1592 01       		.byte	0x1
 6406 1593 31       		.byte	0x31
 6407 1594 2B       		.uleb128 0x2b
 6408 1595 01       		.byte	0x1
 6409 1596 50       		.byte	0x50
 6410 1597 03       		.byte	0x3
 6411 1598 F3       		.byte	0xf3
 6412 1599 01       		.uleb128 0x1
 6413 159a 52       		.byte	0x52
 6414 159b 00       		.byte	0
 6415 159c 00       		.byte	0
 6416 159d 2C       		.uleb128 0x2c
 6417 159e 01       		.byte	0x1
 6418 159f 19050000 		.4byte	.LASF143
 6419 15a3 01       		.byte	0x1
 6420 15a4 4E0B     		.2byte	0xb4e
 6421 15a6 01       		.byte	0x1
 6422 15a7 01010000 		.4byte	0x101
 6423 15ab 74090000 		.4byte	.LFB30
 6424 15af D0090000 		.4byte	.LFE30
 6425 15b3 EB0F0000 		.4byte	.LLST103
 6426 15b7 01       		.byte	0x1
 6427 15b8 25160000 		.4byte	0x1625
 6428 15bc 2D       		.uleb128 0x2d
 6429 15bd E8000000 		.4byte	.LASF141
 6430 15c1 01       		.byte	0x1
 6431 15c2 4E0B     		.2byte	0xb4e
 6432 15c4 25160000 		.4byte	0x1625
 6433 15c8 0B100000 		.4byte	.LLST104
 6434 15cc 2E       		.uleb128 0x2e
 6435 15cd DB020000 		.4byte	.LASF144
 6436 15d1 01       		.byte	0x1
 6437 15d2 500B     		.2byte	0xb50
 6438 15d4 16040000 		.4byte	0x416
 6439 15d8 2C100000 		.4byte	.LLST105
 6440 15dc 2E       		.uleb128 0x2e
 6441 15dd 810A0000 		.4byte	.LASF66
 6442 15e1 01       		.byte	0x1
 6443 15e2 510B     		.2byte	0xb51
 6444 15e4 01010000 		.4byte	0x101
 6445 15e8 3F100000 		.4byte	.LLST106
 6446 15ec 30       		.uleb128 0x30
 6447 15ed 86090000 		.4byte	.LVL239
 6448 15f1 071F0000 		.4byte	0x1f07
 6449 15f5 00160000 		.4byte	0x1600
 6450 15f9 2B       		.uleb128 0x2b
 6451 15fa 01       		.byte	0x1
 6452 15fb 50       		.byte	0x50
 6453 15fc 02       		.byte	0x2
 6454 15fd 76       		.byte	0x76
 6455 15fe 00       		.sleb128 0
 6456 15ff 00       		.byte	0
 6457 1600 30       		.uleb128 0x30
 6458 1601 94090000 		.4byte	.LVL240
 6459 1605 071F0000 		.4byte	0x1f07
 6460 1609 14160000 		.4byte	0x1614
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 214


 6461 160d 2B       		.uleb128 0x2b
 6462 160e 01       		.byte	0x1
 6463 160f 50       		.byte	0x50
 6464 1610 02       		.byte	0x2
 6465 1611 76       		.byte	0x76
 6466 1612 00       		.sleb128 0
 6467 1613 00       		.byte	0
 6468 1614 31       		.uleb128 0x31
 6469 1615 B6090000 		.4byte	.LVL241
 6470 1619 201F0000 		.4byte	0x1f20
 6471 161d 2B       		.uleb128 0x2b
 6472 161e 01       		.byte	0x1
 6473 161f 51       		.byte	0x51
 6474 1620 02       		.byte	0x2
 6475 1621 76       		.byte	0x76
 6476 1622 00       		.sleb128 0
 6477 1623 00       		.byte	0
 6478 1624 00       		.byte	0
 6479 1625 07       		.uleb128 0x7
 6480 1626 2A160000 		.4byte	0x162a
 6481 162a 06       		.uleb128 0x6
 6482 162b 04       		.byte	0x4
 6483 162c 30160000 		.4byte	0x1630
 6484 1630 07       		.uleb128 0x7
 6485 1631 05020000 		.4byte	0x205
 6486 1635 2C       		.uleb128 0x2c
 6487 1636 01       		.byte	0x1
 6488 1637 900B0000 		.4byte	.LASF145
 6489 163b 01       		.byte	0x1
 6490 163c 920B     		.2byte	0xb92
 6491 163e 01       		.byte	0x1
 6492 163f 01010000 		.4byte	0x101
 6493 1643 D0090000 		.4byte	.LFB31
 6494 1647 200A0000 		.4byte	.LFE31
 6495 164b 5E100000 		.4byte	.LLST107
 6496 164f 01       		.byte	0x1
 6497 1650 CE160000 		.4byte	0x16ce
 6498 1654 2D       		.uleb128 0x2d
 6499 1655 8E0D0000 		.4byte	.LASF146
 6500 1659 01       		.byte	0x1
 6501 165a 920B     		.2byte	0xb92
 6502 165c FF010000 		.4byte	0x1ff
 6503 1660 7E100000 		.4byte	.LLST108
 6504 1664 2D       		.uleb128 0x2d
 6505 1665 CB080000 		.4byte	.LASF23
 6506 1669 01       		.byte	0x1
 6507 166a 920B     		.2byte	0xb92
 6508 166c 0A050000 		.4byte	0x50a
 6509 1670 9F100000 		.4byte	.LLST109
 6510 1674 2E       		.uleb128 0x2e
 6511 1675 DB020000 		.4byte	.LASF144
 6512 1679 01       		.byte	0x1
 6513 167a 940B     		.2byte	0xb94
 6514 167c 16040000 		.4byte	0x416
 6515 1680 C0100000 		.4byte	.LLST110
 6516 1684 2E       		.uleb128 0x2e
 6517 1685 810A0000 		.4byte	.LASF66
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 215


 6518 1689 01       		.byte	0x1
 6519 168a 950B     		.2byte	0xb95
 6520 168c 01010000 		.4byte	0x101
 6521 1690 D3100000 		.4byte	.LLST111
 6522 1694 30       		.uleb128 0x30
 6523 1695 E0090000 		.4byte	.LVL248
 6524 1699 071F0000 		.4byte	0x1f07
 6525 169d A9160000 		.4byte	0x16a9
 6526 16a1 2B       		.uleb128 0x2b
 6527 16a2 01       		.byte	0x1
 6528 16a3 50       		.byte	0x50
 6529 16a4 03       		.byte	0x3
 6530 16a5 F3       		.byte	0xf3
 6531 16a6 01       		.uleb128 0x1
 6532 16a7 50       		.byte	0x50
 6533 16a8 00       		.byte	0
 6534 16a9 30       		.uleb128 0x30
 6535 16aa E8090000 		.4byte	.LVL249
 6536 16ae 071F0000 		.4byte	0x1f07
 6537 16b2 BD160000 		.4byte	0x16bd
 6538 16b6 2B       		.uleb128 0x2b
 6539 16b7 01       		.byte	0x1
 6540 16b8 50       		.byte	0x50
 6541 16b9 02       		.byte	0x2
 6542 16ba 77       		.byte	0x77
 6543 16bb 00       		.sleb128 0
 6544 16bc 00       		.byte	0
 6545 16bd 31       		.uleb128 0x31
 6546 16be 060A0000 		.4byte	.LVL250
 6547 16c2 201F0000 		.4byte	0x1f20
 6548 16c6 2B       		.uleb128 0x2b
 6549 16c7 01       		.byte	0x1
 6550 16c8 51       		.byte	0x51
 6551 16c9 02       		.byte	0x2
 6552 16ca 77       		.byte	0x77
 6553 16cb 00       		.sleb128 0
 6554 16cc 00       		.byte	0
 6555 16cd 00       		.byte	0
 6556 16ce 39       		.uleb128 0x39
 6557 16cf 01       		.byte	0x1
 6558 16d0 89010000 		.4byte	.LASF147
 6559 16d4 01       		.byte	0x1
 6560 16d5 BF0B     		.2byte	0xbbf
 6561 16d7 01       		.byte	0x1
 6562 16d8 200A0000 		.4byte	.LFB32
 6563 16dc 340A0000 		.4byte	.LFE32
 6564 16e0 02       		.byte	0x2
 6565 16e1 7D       		.byte	0x7d
 6566 16e2 00       		.sleb128 0
 6567 16e3 01       		.byte	0x1
 6568 16e4 F7160000 		.4byte	0x16f7
 6569 16e8 41       		.uleb128 0x41
 6570 16e9 3A070000 		.4byte	.LASF148
 6571 16ed 01       		.byte	0x1
 6572 16ee BF0B     		.2byte	0xbbf
 6573 16f0 F7160000 		.4byte	0x16f7
 6574 16f4 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 216


 6575 16f5 50       		.byte	0x50
 6576 16f6 00       		.byte	0
 6577 16f7 07       		.uleb128 0x7
 6578 16f8 FC160000 		.4byte	0x16fc
 6579 16fc 06       		.uleb128 0x6
 6580 16fd 04       		.byte	0x4
 6581 16fe 76020000 		.4byte	0x276
 6582 1702 2C       		.uleb128 0x2c
 6583 1703 01       		.byte	0x1
 6584 1704 91090000 		.4byte	.LASF149
 6585 1708 01       		.byte	0x1
 6586 1709 C70B     		.2byte	0xbc7
 6587 170b 01       		.byte	0x1
 6588 170c 01010000 		.4byte	0x101
 6589 1710 340A0000 		.4byte	.LFB33
 6590 1714 7C0A0000 		.4byte	.LFE33
 6591 1718 F2100000 		.4byte	.LLST112
 6592 171c 01       		.byte	0x1
 6593 171d 92170000 		.4byte	0x1792
 6594 1721 2D       		.uleb128 0x2d
 6595 1722 3A070000 		.4byte	.LASF148
 6596 1726 01       		.byte	0x1
 6597 1727 C70B     		.2byte	0xbc7
 6598 1729 F7160000 		.4byte	0x16f7
 6599 172d 12110000 		.4byte	.LLST113
 6600 1731 2D       		.uleb128 0x2d
 6601 1732 E30B0000 		.4byte	.LASF150
 6602 1736 01       		.byte	0x1
 6603 1737 C70B     		.2byte	0xbc7
 6604 1739 FE110000 		.4byte	0x11fe
 6605 173d 57110000 		.4byte	.LLST114
 6606 1741 2E       		.uleb128 0x2e
 6607 1742 810A0000 		.4byte	.LASF66
 6608 1746 01       		.byte	0x1
 6609 1747 C90B     		.2byte	0xbc9
 6610 1749 01010000 		.4byte	0x101
 6611 174d 83110000 		.4byte	.LLST115
 6612 1751 3D       		.uleb128 0x3d
 6613 1752 3E0A0000 		.4byte	.LBB114
 6614 1756 700A0000 		.4byte	.LBE114
 6615 175a 7F170000 		.4byte	0x177f
 6616 175e 2E       		.uleb128 0x2e
 6617 175f 51040000 		.4byte	.LASF82
 6618 1763 01       		.byte	0x1
 6619 1764 D10B     		.2byte	0xbd1
 6620 1766 0A050000 		.4byte	0x50a
 6621 176a A1110000 		.4byte	.LLST116
 6622 176e 31       		.uleb128 0x31
 6623 176f 6A0A0000 		.4byte	.LVL259
 6624 1773 CE160000 		.4byte	0x16ce
 6625 1777 2B       		.uleb128 0x2b
 6626 1778 01       		.byte	0x1
 6627 1779 50       		.byte	0x50
 6628 177a 02       		.byte	0x2
 6629 177b 74       		.byte	0x74
 6630 177c 00       		.sleb128 0
 6631 177d 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 217


 6632 177e 00       		.byte	0
 6633 177f 29       		.uleb128 0x29
 6634 1780 3E0A0000 		.4byte	.LVL256
 6635 1784 D41F0000 		.4byte	0x1fd4
 6636 1788 29       		.uleb128 0x29
 6637 1789 740A0000 		.4byte	.LVL263
 6638 178d DE1F0000 		.4byte	0x1fde
 6639 1791 00       		.byte	0
 6640 1792 3A       		.uleb128 0x3a
 6641 1793 01       		.byte	0x1
 6642 1794 920A0000 		.4byte	.LASF152
 6643 1798 01       		.byte	0x1
 6644 1799 040C     		.2byte	0xc04
 6645 179b 01       		.byte	0x1
 6646 179c 7C0A0000 		.4byte	.LFB34
 6647 17a0 8C0A0000 		.4byte	.LFE34
 6648 17a4 02       		.byte	0x2
 6649 17a5 7D       		.byte	0x7d
 6650 17a6 00       		.sleb128 0
 6651 17a7 01       		.byte	0x1
 6652 17a8 36       		.uleb128 0x36
 6653 17a9 01       		.byte	0x1
 6654 17aa 940C0000 		.4byte	.LASF153
 6655 17ae 01       		.byte	0x1
 6656 17af 4D0E     		.2byte	0xe4d
 6657 17b1 01       		.byte	0x1
 6658 17b2 10020000 		.4byte	0x210
 6659 17b6 8C0A0000 		.4byte	.LFB40
 6660 17ba 980A0000 		.4byte	.LFE40
 6661 17be 02       		.byte	0x2
 6662 17bf 7D       		.byte	0x7d
 6663 17c0 00       		.sleb128 0
 6664 17c1 01       		.byte	0x1
 6665 17c2 D5170000 		.4byte	0x17d5
 6666 17c6 2F       		.uleb128 0x2f
 6667 17c7 810A0000 		.4byte	.LASF66
 6668 17cb 01       		.byte	0x1
 6669 17cc 4F0E     		.2byte	0xe4f
 6670 17ce 10020000 		.4byte	0x210
 6671 17d2 01       		.byte	0x1
 6672 17d3 50       		.byte	0x50
 6673 17d4 00       		.byte	0
 6674 17d5 35       		.uleb128 0x35
 6675 17d6 01       		.byte	0x1
 6676 17d7 0E010000 		.4byte	.LASF154
 6677 17db 01       		.byte	0x1
 6678 17dc 7A0E     		.2byte	0xe7a
 6679 17de 01       		.byte	0x1
 6680 17df 980A0000 		.4byte	.LFB41
 6681 17e3 280B0000 		.4byte	.LFE41
 6682 17e7 BF110000 		.4byte	.LLST117
 6683 17eb 01       		.byte	0x1
 6684 17ec 39180000 		.4byte	0x1839
 6685 17f0 2D       		.uleb128 0x2d
 6686 17f1 56090000 		.4byte	.LASF155
 6687 17f5 01       		.byte	0x1
 6688 17f6 7A0E     		.2byte	0xe7a
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 218


 6689 17f8 E6030000 		.4byte	0x3e6
 6690 17fc F7110000 		.4byte	.LLST118
 6691 1800 2E       		.uleb128 0x2e
 6692 1801 430D0000 		.4byte	.LASF67
 6693 1805 01       		.byte	0x1
 6694 1806 7C0E     		.2byte	0xe7c
 6695 1808 240D0000 		.4byte	0xd24
 6696 180c F7110000 		.4byte	.LLST118
 6697 1810 30       		.uleb128 0x30
 6698 1811 E00A0000 		.4byte	.LVL268
 6699 1815 071F0000 		.4byte	0x1f07
 6700 1819 24180000 		.4byte	0x1824
 6701 181d 2B       		.uleb128 0x2b
 6702 181e 01       		.byte	0x1
 6703 181f 50       		.byte	0x50
 6704 1820 02       		.byte	0x2
 6705 1821 79       		.byte	0x79
 6706 1822 00       		.sleb128 0
 6707 1823 00       		.byte	0
 6708 1824 40       		.uleb128 0x40
 6709 1825 1A0B0000 		.4byte	.LVL270
 6710 1829 01       		.byte	0x1
 6711 182a 201F0000 		.4byte	0x1f20
 6712 182e 2B       		.uleb128 0x2b
 6713 182f 01       		.byte	0x1
 6714 1830 51       		.byte	0x51
 6715 1831 05       		.byte	0x5
 6716 1832 F3       		.byte	0xf3
 6717 1833 01       		.uleb128 0x1
 6718 1834 50       		.byte	0x50
 6719 1835 23       		.byte	0x23
 6720 1836 04       		.uleb128 0x4
 6721 1837 00       		.byte	0
 6722 1838 00       		.byte	0
 6723 1839 2C       		.uleb128 0x2c
 6724 183a 01       		.byte	0x1
 6725 183b 01050000 		.4byte	.LASF156
 6726 183f 01       		.byte	0x1
 6727 1840 BC0E     		.2byte	0xebc
 6728 1842 01       		.byte	0x1
 6729 1843 01010000 		.4byte	0x101
 6730 1847 280B0000 		.4byte	.LFB42
 6731 184b 980B0000 		.4byte	.LFE42
 6732 184f 3B120000 		.4byte	.LLST120
 6733 1853 01       		.byte	0x1
 6734 1854 AD180000 		.4byte	0x18ad
 6735 1858 2D       		.uleb128 0x2d
 6736 1859 56090000 		.4byte	.LASF155
 6737 185d 01       		.byte	0x1
 6738 185e BC0E     		.2byte	0xebc
 6739 1860 E6030000 		.4byte	0x3e6
 6740 1864 5B120000 		.4byte	.LLST121
 6741 1868 2E       		.uleb128 0x2e
 6742 1869 430D0000 		.4byte	.LASF67
 6743 186d 01       		.byte	0x1
 6744 186e BE0E     		.2byte	0xebe
 6745 1870 240D0000 		.4byte	0xd24
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 219


 6746 1874 5B120000 		.4byte	.LLST121
 6747 1878 2E       		.uleb128 0x2e
 6748 1879 810A0000 		.4byte	.LASF66
 6749 187d 01       		.byte	0x1
 6750 187e BF0E     		.2byte	0xebf
 6751 1880 01010000 		.4byte	0x101
 6752 1884 AA120000 		.4byte	.LLST123
 6753 1888 30       		.uleb128 0x30
 6754 1889 4C0B0000 		.4byte	.LVL275
 6755 188d 071F0000 		.4byte	0x1f07
 6756 1891 9C180000 		.4byte	0x189c
 6757 1895 2B       		.uleb128 0x2b
 6758 1896 01       		.byte	0x1
 6759 1897 50       		.byte	0x50
 6760 1898 02       		.byte	0x2
 6761 1899 75       		.byte	0x75
 6762 189a 00       		.sleb128 0
 6763 189b 00       		.byte	0
 6764 189c 31       		.uleb128 0x31
 6765 189d 8C0B0000 		.4byte	.LVL277
 6766 18a1 201F0000 		.4byte	0x1f20
 6767 18a5 2B       		.uleb128 0x2b
 6768 18a6 01       		.byte	0x1
 6769 18a7 51       		.byte	0x51
 6770 18a8 02       		.byte	0x2
 6771 18a9 75       		.byte	0x75
 6772 18aa 00       		.sleb128 0
 6773 18ab 00       		.byte	0
 6774 18ac 00       		.byte	0
 6775 18ad 36       		.uleb128 0x36
 6776 18ae 01       		.byte	0x1
 6777 18af B8070000 		.4byte	.LASF157
 6778 18b3 01       		.byte	0x1
 6779 18b4 4210     		.2byte	0x1042
 6780 18b6 01       		.byte	0x1
 6781 18b7 17010000 		.4byte	0x117
 6782 18bb 980B0000 		.4byte	.LFB43
 6783 18bf B00B0000 		.4byte	.LFE43
 6784 18c3 02       		.byte	0x2
 6785 18c4 7D       		.byte	0x7d
 6786 18c5 00       		.sleb128 0
 6787 18c6 01       		.byte	0x1
 6788 18c7 DA180000 		.4byte	0x18da
 6789 18cb 2F       		.uleb128 0x2f
 6790 18cc 45020000 		.4byte	.LASF104
 6791 18d0 01       		.byte	0x1
 6792 18d1 4410     		.2byte	0x1044
 6793 18d3 17010000 		.4byte	0x117
 6794 18d7 01       		.byte	0x1
 6795 18d8 50       		.byte	0x50
 6796 18d9 00       		.byte	0
 6797 18da 3C       		.uleb128 0x3c
 6798 18db 01       		.byte	0x1
 6799 18dc C5040000 		.4byte	.LASF159
 6800 18e0 01       		.byte	0x1
 6801 18e1 5210     		.2byte	0x1052
 6802 18e3 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 220


 6803 18e4 9E000000 		.4byte	0x9e
 6804 18e8 B00B0000 		.4byte	.LFB44
 6805 18ec C80B0000 		.4byte	.LFE44
 6806 18f0 02       		.byte	0x2
 6807 18f1 7D       		.byte	0x7d
 6808 18f2 00       		.sleb128 0
 6809 18f3 01       		.byte	0x1
 6810 18f4 2C       		.uleb128 0x2c
 6811 18f5 01       		.byte	0x1
 6812 18f6 B1050000 		.4byte	.LASF160
 6813 18fa 01       		.byte	0x1
 6814 18fb 6310     		.2byte	0x1063
 6815 18fd 01       		.byte	0x1
 6816 18fe CE000000 		.4byte	0xce
 6817 1902 C80B0000 		.4byte	.LFB45
 6818 1906 300C0000 		.4byte	.LFE45
 6819 190a D5120000 		.4byte	.LLST124
 6820 190e 01       		.byte	0x1
 6821 190f 81190000 		.4byte	0x1981
 6822 1913 2D       		.uleb128 0x2d
 6823 1914 F7020000 		.4byte	.LASF161
 6824 1918 01       		.byte	0x1
 6825 1919 6310     		.2byte	0x1063
 6826 191b 01010000 		.4byte	0x101
 6827 191f F5120000 		.4byte	.LLST125
 6828 1923 2D       		.uleb128 0x2d
 6829 1924 550C0000 		.4byte	.LASF79
 6830 1928 01       		.byte	0x1
 6831 1929 6310     		.2byte	0x1063
 6832 192b 17010000 		.4byte	0x117
 6833 192f 21130000 		.4byte	.LLST126
 6834 1933 2E       		.uleb128 0x2e
 6835 1934 7D060000 		.4byte	.LASF162
 6836 1938 01       		.byte	0x1
 6837 1939 6510     		.2byte	0x1065
 6838 193b CE000000 		.4byte	0xce
 6839 193f 4D130000 		.4byte	.LLST127
 6840 1943 29       		.uleb128 0x29
 6841 1944 D40B0000 		.4byte	.LVL282
 6842 1948 D41F0000 		.4byte	0x1fd4
 6843 194c 30       		.uleb128 0x30
 6844 194d EA0B0000 		.4byte	.LVL283
 6845 1951 C6040000 		.4byte	0x4c6
 6846 1955 65190000 		.4byte	0x1965
 6847 1959 2B       		.uleb128 0x2b
 6848 195a 01       		.byte	0x1
 6849 195b 51       		.byte	0x51
 6850 195c 01       		.byte	0x1
 6851 195d 31       		.byte	0x31
 6852 195e 2B       		.uleb128 0x2b
 6853 195f 01       		.byte	0x1
 6854 1960 50       		.byte	0x50
 6855 1961 02       		.byte	0x2
 6856 1962 75       		.byte	0x75
 6857 1963 00       		.sleb128 0
 6858 1964 00       		.byte	0
 6859 1965 29       		.uleb128 0x29
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 221


 6860 1966 FE0B0000 		.4byte	.LVL284
 6861 196a DE1F0000 		.4byte	0x1fde
 6862 196e 29       		.uleb128 0x29
 6863 196f 020C0000 		.4byte	.LVL285
 6864 1973 D41F0000 		.4byte	0x1fd4
 6865 1977 29       		.uleb128 0x29
 6866 1978 220C0000 		.4byte	.LVL287
 6867 197c DE1F0000 		.4byte	0x1fde
 6868 1980 00       		.byte	0
 6869 1981 2C       		.uleb128 0x2c
 6870 1982 01       		.byte	0x1
 6871 1983 D1050000 		.4byte	.LASF163
 6872 1987 01       		.byte	0x1
 6873 1988 A710     		.2byte	0x10a7
 6874 198a 01       		.byte	0x1
 6875 198b 01010000 		.4byte	0x101
 6876 198f 300C0000 		.4byte	.LFB46
 6877 1993 BC0C0000 		.4byte	.LFE46
 6878 1997 6B130000 		.4byte	.LLST128
 6879 199b 01       		.byte	0x1
 6880 199c 2E1A0000 		.4byte	0x1a2e
 6881 19a0 2D       		.uleb128 0x2d
 6882 19a1 66030000 		.4byte	.LASF164
 6883 19a5 01       		.byte	0x1
 6884 19a6 A710     		.2byte	0x10a7
 6885 19a8 CE000000 		.4byte	0xce
 6886 19ac 8B130000 		.4byte	.LLST129
 6887 19b0 2D       		.uleb128 0x2d
 6888 19b1 7B000000 		.4byte	.LASF165
 6889 19b5 01       		.byte	0x1
 6890 19b6 A710     		.2byte	0x10a7
 6891 19b8 CE000000 		.4byte	0xce
 6892 19bc B7130000 		.4byte	.LLST130
 6893 19c0 2D       		.uleb128 0x2d
 6894 19c1 E8090000 		.4byte	.LASF166
 6895 19c5 01       		.byte	0x1
 6896 19c6 A710     		.2byte	0x10a7
 6897 19c8 2E1A0000 		.4byte	0x1a2e
 6898 19cc E3130000 		.4byte	.LLST131
 6899 19d0 2D       		.uleb128 0x2d
 6900 19d1 550C0000 		.4byte	.LASF79
 6901 19d5 01       		.byte	0x1
 6902 19d6 A710     		.2byte	0x10a7
 6903 19d8 17010000 		.4byte	0x117
 6904 19dc 0F140000 		.4byte	.LLST132
 6905 19e0 2E       		.uleb128 0x2e
 6906 19e1 810A0000 		.4byte	.LASF66
 6907 19e5 01       		.byte	0x1
 6908 19e6 A910     		.2byte	0x10a9
 6909 19e8 01010000 		.4byte	0x101
 6910 19ec 3B140000 		.4byte	.LLST133
 6911 19f0 29       		.uleb128 0x29
 6912 19f1 420C0000 		.4byte	.LVL290
 6913 19f5 D41F0000 		.4byte	0x1fd4
 6914 19f9 30       		.uleb128 0x30
 6915 19fa 660C0000 		.4byte	.LVL291
 6916 19fe C6040000 		.4byte	0x4c6
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 222


 6917 1a02 121A0000 		.4byte	0x1a12
 6918 1a06 2B       		.uleb128 0x2b
 6919 1a07 01       		.byte	0x1
 6920 1a08 51       		.byte	0x51
 6921 1a09 01       		.byte	0x1
 6922 1a0a 31       		.byte	0x31
 6923 1a0b 2B       		.uleb128 0x2b
 6924 1a0c 01       		.byte	0x1
 6925 1a0d 50       		.byte	0x50
 6926 1a0e 02       		.byte	0x2
 6927 1a0f 77       		.byte	0x77
 6928 1a10 00       		.sleb128 0
 6929 1a11 00       		.byte	0
 6930 1a12 29       		.uleb128 0x29
 6931 1a13 7A0C0000 		.4byte	.LVL292
 6932 1a17 DE1F0000 		.4byte	0x1fde
 6933 1a1b 29       		.uleb128 0x29
 6934 1a1c 7E0C0000 		.4byte	.LVL293
 6935 1a20 D41F0000 		.4byte	0x1fd4
 6936 1a24 29       		.uleb128 0x29
 6937 1a25 AC0C0000 		.4byte	.LVL296
 6938 1a29 DE1F0000 		.4byte	0x1fde
 6939 1a2d 00       		.byte	0
 6940 1a2e 06       		.uleb128 0x6
 6941 1a2f 04       		.byte	0x4
 6942 1a30 CE000000 		.4byte	0xce
 6943 1a34 2C       		.uleb128 0x2c
 6944 1a35 01       		.byte	0x1
 6945 1a36 C8020000 		.4byte	.LASF167
 6946 1a3a 01       		.byte	0x1
 6947 1a3b F710     		.2byte	0x10f7
 6948 1a3d 01       		.byte	0x1
 6949 1a3e 01010000 		.4byte	0x101
 6950 1a42 BC0C0000 		.4byte	.LFB47
 6951 1a46 5C0D0000 		.4byte	.LFE47
 6952 1a4a 59140000 		.4byte	.LLST134
 6953 1a4e 01       		.byte	0x1
 6954 1a4f FB1A0000 		.4byte	0x1afb
 6955 1a53 2D       		.uleb128 0x2d
 6956 1a54 02080000 		.4byte	.LASF168
 6957 1a58 01       		.byte	0x1
 6958 1a59 F710     		.2byte	0x10f7
 6959 1a5b 10020000 		.4byte	0x210
 6960 1a5f 79140000 		.4byte	.LLST135
 6961 1a63 2D       		.uleb128 0x2d
 6962 1a64 7A090000 		.4byte	.LASF169
 6963 1a68 01       		.byte	0x1
 6964 1a69 F710     		.2byte	0x10f7
 6965 1a6b CE000000 		.4byte	0xce
 6966 1a6f A5140000 		.4byte	.LLST136
 6967 1a73 2D       		.uleb128 0x2d
 6968 1a74 A1070000 		.4byte	.LASF170
 6969 1a78 01       		.byte	0x1
 6970 1a79 F710     		.2byte	0x10f7
 6971 1a7b 42020000 		.4byte	0x242
 6972 1a7f 03150000 		.4byte	.LLST137
 6973 1a83 2D       		.uleb128 0x2d
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 223


 6974 1a84 16070000 		.4byte	.LASF171
 6975 1a88 01       		.byte	0x1
 6976 1a89 F710     		.2byte	0x10f7
 6977 1a8b 2E1A0000 		.4byte	0x1a2e
 6978 1a8f 24150000 		.4byte	.LLST138
 6979 1a93 2E       		.uleb128 0x2e
 6980 1a94 430D0000 		.4byte	.LASF67
 6981 1a98 01       		.byte	0x1
 6982 1a99 F910     		.2byte	0x10f9
 6983 1a9b 16040000 		.4byte	0x416
 6984 1a9f 50150000 		.4byte	.LLST139
 6985 1aa3 3B       		.uleb128 0x3b
 6986 1aa4 810A0000 		.4byte	.LASF66
 6987 1aa8 01       		.byte	0x1
 6988 1aa9 FA10     		.2byte	0x10fa
 6989 1aab 01010000 		.4byte	0x101
 6990 1aaf 01       		.byte	0x1
 6991 1ab0 2E       		.uleb128 0x2e
 6992 1ab1 73010000 		.4byte	.LASF172
 6993 1ab5 01       		.byte	0x1
 6994 1ab6 FB10     		.2byte	0x10fb
 6995 1ab8 B8000000 		.4byte	0xb8
 6996 1abc 7C150000 		.4byte	.LLST140
 6997 1ac0 29       		.uleb128 0x29
 6998 1ac1 CA0C0000 		.4byte	.LVL300
 6999 1ac5 D41F0000 		.4byte	0x1fd4
 7000 1ac9 30       		.uleb128 0x30
 7001 1aca 100D0000 		.4byte	.LVL308
 7002 1ace 071F0000 		.4byte	0x1f07
 7003 1ad2 DD1A0000 		.4byte	0x1add
 7004 1ad6 2B       		.uleb128 0x2b
 7005 1ad7 01       		.byte	0x1
 7006 1ad8 50       		.byte	0x50
 7007 1ad9 02       		.byte	0x2
 7008 1ada 77       		.byte	0x77
 7009 1adb 00       		.sleb128 0
 7010 1adc 00       		.byte	0
 7011 1add 30       		.uleb128 0x30
 7012 1ade 2C0D0000 		.4byte	.LVL309
 7013 1ae2 201F0000 		.4byte	0x1f20
 7014 1ae6 F11A0000 		.4byte	0x1af1
 7015 1aea 2B       		.uleb128 0x2b
 7016 1aeb 01       		.byte	0x1
 7017 1aec 51       		.byte	0x51
 7018 1aed 02       		.byte	0x2
 7019 1aee 77       		.byte	0x77
 7020 1aef 00       		.sleb128 0
 7021 1af0 00       		.byte	0
 7022 1af1 29       		.uleb128 0x29
 7023 1af2 4E0D0000 		.4byte	.LVL312
 7024 1af6 DE1F0000 		.4byte	0x1fde
 7025 1afa 00       		.byte	0
 7026 1afb 2C       		.uleb128 0x2c
 7027 1afc 01       		.byte	0x1
 7028 1afd 9E010000 		.4byte	.LASF173
 7029 1b01 01       		.byte	0x1
 7030 1b02 6111     		.2byte	0x1161
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 224


 7031 1b04 01       		.byte	0x1
 7032 1b05 01010000 		.4byte	0x101
 7033 1b09 5C0D0000 		.4byte	.LFB48
 7034 1b0d 1C0E0000 		.4byte	.LFE48
 7035 1b11 9A150000 		.4byte	.LLST141
 7036 1b15 01       		.byte	0x1
 7037 1b16 0C1C0000 		.4byte	0x1c0c
 7038 1b1a 2D       		.uleb128 0x2d
 7039 1b1b 02080000 		.4byte	.LASF168
 7040 1b1f 01       		.byte	0x1
 7041 1b20 6111     		.2byte	0x1161
 7042 1b22 10020000 		.4byte	0x210
 7043 1b26 BA150000 		.4byte	.LLST142
 7044 1b2a 2D       		.uleb128 0x2d
 7045 1b2b 7A090000 		.4byte	.LASF169
 7046 1b2f 01       		.byte	0x1
 7047 1b30 6111     		.2byte	0x1161
 7048 1b32 CE000000 		.4byte	0xce
 7049 1b36 E6150000 		.4byte	.LLST143
 7050 1b3a 2D       		.uleb128 0x2d
 7051 1b3b A1070000 		.4byte	.LASF170
 7052 1b3f 01       		.byte	0x1
 7053 1b40 6111     		.2byte	0x1161
 7054 1b42 42020000 		.4byte	0x242
 7055 1b46 39160000 		.4byte	.LLST144
 7056 1b4a 2D       		.uleb128 0x2d
 7057 1b4b 16070000 		.4byte	.LASF171
 7058 1b4f 01       		.byte	0x1
 7059 1b50 6111     		.2byte	0x1161
 7060 1b52 2E1A0000 		.4byte	0x1a2e
 7061 1b56 5A160000 		.4byte	.LLST145
 7062 1b5a 2D       		.uleb128 0x2d
 7063 1b5b A4000000 		.4byte	.LASF174
 7064 1b5f 01       		.byte	0x1
 7065 1b60 6111     		.2byte	0x1161
 7066 1b62 0C1C0000 		.4byte	0x1c0c
 7067 1b66 7B160000 		.4byte	.LLST146
 7068 1b6a 2E       		.uleb128 0x2e
 7069 1b6b 430D0000 		.4byte	.LASF67
 7070 1b6f 01       		.byte	0x1
 7071 1b70 6311     		.2byte	0x1163
 7072 1b72 16040000 		.4byte	0x416
 7073 1b76 9B160000 		.4byte	.LLST147
 7074 1b7a 2E       		.uleb128 0x2e
 7075 1b7b 73010000 		.4byte	.LASF172
 7076 1b7f 01       		.byte	0x1
 7077 1b80 6411     		.2byte	0x1164
 7078 1b82 B8000000 		.4byte	0xb8
 7079 1b86 C7160000 		.4byte	.LLST148
 7080 1b8a 3B       		.uleb128 0x3b
 7081 1b8b 810A0000 		.4byte	.LASF66
 7082 1b8f 01       		.byte	0x1
 7083 1b90 6511     		.2byte	0x1165
 7084 1b92 01010000 		.4byte	0x101
 7085 1b96 01       		.byte	0x1
 7086 1b97 16       		.uleb128 0x16
 7087 1b98 6C020000 		.4byte	.LASF116
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 225


 7088 1b9c 01       		.byte	0x1
 7089 1b9d 6611     		.2byte	0x1166
 7090 1b9f 0C010000 		.4byte	0x10c
 7091 1ba3 34       		.uleb128 0x34
 7092 1ba4 0F050000 		.4byte	0x50f
 7093 1ba8 660D0000 		.4byte	.LBB115
 7094 1bac 7A0D0000 		.4byte	.LBE115
 7095 1bb0 01       		.byte	0x1
 7096 1bb1 7E11     		.2byte	0x117e
 7097 1bb3 D01B0000 		.4byte	0x1bd0
 7098 1bb7 23       		.uleb128 0x23
 7099 1bb8 660D0000 		.4byte	.LBB116
 7100 1bbc 7A0D0000 		.4byte	.LBE116
 7101 1bc0 22       		.uleb128 0x22
 7102 1bc1 20050000 		.4byte	0x520
 7103 1bc5 FB160000 		.4byte	.LLST149
 7104 1bc9 24       		.uleb128 0x24
 7105 1bca 2B050000 		.4byte	0x52b
 7106 1bce 00       		.byte	0
 7107 1bcf 00       		.byte	0
 7108 1bd0 34       		.uleb128 0x34
 7109 1bd1 37050000 		.4byte	0x537
 7110 1bd5 0E0E0000 		.4byte	.LBB117
 7111 1bd9 120E0000 		.4byte	.LBE117
 7112 1bdd 01       		.byte	0x1
 7113 1bde D311     		.2byte	0x11d3
 7114 1be0 EE1B0000 		.4byte	0x1bee
 7115 1be4 21       		.uleb128 0x21
 7116 1be5 45050000 		.4byte	0x545
 7117 1be9 0E170000 		.4byte	.LLST150
 7118 1bed 00       		.byte	0
 7119 1bee 30       		.uleb128 0x30
 7120 1bef C80D0000 		.4byte	.LVL325
 7121 1bf3 071F0000 		.4byte	0x1f07
 7122 1bf7 021C0000 		.4byte	0x1c02
 7123 1bfb 2B       		.uleb128 0x2b
 7124 1bfc 01       		.byte	0x1
 7125 1bfd 50       		.byte	0x50
 7126 1bfe 02       		.byte	0x2
 7127 1bff 79       		.byte	0x79
 7128 1c00 00       		.sleb128 0
 7129 1c01 00       		.byte	0
 7130 1c02 29       		.uleb128 0x29
 7131 1c03 EC0D0000 		.4byte	.LVL329
 7132 1c07 201F0000 		.4byte	0x1f20
 7133 1c0b 00       		.byte	0
 7134 1c0c 06       		.uleb128 0x6
 7135 1c0d 04       		.byte	0x4
 7136 1c0e 01010000 		.4byte	0x101
 7137 1c12 35       		.uleb128 0x35
 7138 1c13 01       		.byte	0x1
 7139 1c14 EE080000 		.4byte	.LASF175
 7140 1c18 01       		.byte	0x1
 7141 1c19 DD11     		.2byte	0x11dd
 7142 1c1b 01       		.byte	0x1
 7143 1c1c 1C0E0000 		.4byte	.LFB49
 7144 1c20 A80E0000 		.4byte	.LFE49
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 226


 7145 1c24 21170000 		.4byte	.LLST151
 7146 1c28 01       		.byte	0x1
 7147 1c29 E21C0000 		.4byte	0x1ce2
 7148 1c2d 2D       		.uleb128 0x2d
 7149 1c2e 02080000 		.4byte	.LASF168
 7150 1c32 01       		.byte	0x1
 7151 1c33 DD11     		.2byte	0x11dd
 7152 1c35 10020000 		.4byte	0x210
 7153 1c39 41170000 		.4byte	.LLST152
 7154 1c3d 2D       		.uleb128 0x2d
 7155 1c3e A4000000 		.4byte	.LASF174
 7156 1c42 01       		.byte	0x1
 7157 1c43 DD11     		.2byte	0x11dd
 7158 1c45 0C1C0000 		.4byte	0x1c0c
 7159 1c49 83170000 		.4byte	.LLST153
 7160 1c4d 2E       		.uleb128 0x2e
 7161 1c4e 430D0000 		.4byte	.LASF67
 7162 1c52 01       		.byte	0x1
 7163 1c53 DF11     		.2byte	0x11df
 7164 1c55 16040000 		.4byte	0x416
 7165 1c59 41170000 		.4byte	.LLST152
 7166 1c5d 2E       		.uleb128 0x2e
 7167 1c5e 73010000 		.4byte	.LASF172
 7168 1c62 01       		.byte	0x1
 7169 1c63 E011     		.2byte	0x11e0
 7170 1c65 B8000000 		.4byte	0xb8
 7171 1c69 C5170000 		.4byte	.LLST155
 7172 1c6d 16       		.uleb128 0x16
 7173 1c6e 6C020000 		.4byte	.LASF116
 7174 1c72 01       		.byte	0x1
 7175 1c73 E111     		.2byte	0x11e1
 7176 1c75 0C010000 		.4byte	0x10c
 7177 1c79 34       		.uleb128 0x34
 7178 1c7a 0F050000 		.4byte	0x50f
 7179 1c7e 240E0000 		.4byte	.LBB119
 7180 1c82 380E0000 		.4byte	.LBE119
 7181 1c86 01       		.byte	0x1
 7182 1c87 F911     		.2byte	0x11f9
 7183 1c89 A61C0000 		.4byte	0x1ca6
 7184 1c8d 23       		.uleb128 0x23
 7185 1c8e 240E0000 		.4byte	.LBB120
 7186 1c92 380E0000 		.4byte	.LBE120
 7187 1c96 22       		.uleb128 0x22
 7188 1c97 20050000 		.4byte	0x520
 7189 1c9b E3170000 		.4byte	.LLST156
 7190 1c9f 24       		.uleb128 0x24
 7191 1ca0 2B050000 		.4byte	0x52b
 7192 1ca4 00       		.byte	0
 7193 1ca5 00       		.byte	0
 7194 1ca6 34       		.uleb128 0x34
 7195 1ca7 37050000 		.4byte	0x537
 7196 1cab 9C0E0000 		.4byte	.LBB121
 7197 1caf A80E0000 		.4byte	.LBE121
 7198 1cb3 01       		.byte	0x1
 7199 1cb4 2D12     		.2byte	0x122d
 7200 1cb6 C41C0000 		.4byte	0x1cc4
 7201 1cba 21       		.uleb128 0x21
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 227


 7202 1cbb 45050000 		.4byte	0x545
 7203 1cbf F6170000 		.4byte	.LLST157
 7204 1cc3 00       		.byte	0
 7205 1cc4 30       		.uleb128 0x30
 7206 1cc5 600E0000 		.4byte	.LVL337
 7207 1cc9 071F0000 		.4byte	0x1f07
 7208 1ccd D81C0000 		.4byte	0x1cd8
 7209 1cd1 2B       		.uleb128 0x2b
 7210 1cd2 01       		.byte	0x1
 7211 1cd3 50       		.byte	0x50
 7212 1cd4 02       		.byte	0x2
 7213 1cd5 79       		.byte	0x79
 7214 1cd6 00       		.sleb128 0
 7215 1cd7 00       		.byte	0
 7216 1cd8 29       		.uleb128 0x29
 7217 1cd9 840E0000 		.4byte	.LVL342
 7218 1cdd 201F0000 		.4byte	0x1f20
 7219 1ce1 00       		.byte	0
 7220 1ce2 2C       		.uleb128 0x2c
 7221 1ce3 01       		.byte	0x1
 7222 1ce4 BD0B0000 		.4byte	.LASF176
 7223 1ce8 01       		.byte	0x1
 7224 1ce9 3612     		.2byte	0x1236
 7225 1ceb 01       		.byte	0x1
 7226 1cec 01010000 		.4byte	0x101
 7227 1cf0 A80E0000 		.4byte	.LFB50
 7228 1cf4 D40E0000 		.4byte	.LFE50
 7229 1cf8 09180000 		.4byte	.LLST158
 7230 1cfc 01       		.byte	0x1
 7231 1cfd 441D0000 		.4byte	0x1d44
 7232 1d01 2D       		.uleb128 0x2d
 7233 1d02 10080000 		.4byte	.LASF70
 7234 1d06 01       		.byte	0x1
 7235 1d07 3612     		.2byte	0x1236
 7236 1d09 10020000 		.4byte	0x210
 7237 1d0d 29180000 		.4byte	.LLST159
 7238 1d11 2E       		.uleb128 0x2e
 7239 1d12 430D0000 		.4byte	.LASF67
 7240 1d16 01       		.byte	0x1
 7241 1d17 3812     		.2byte	0x1238
 7242 1d19 16040000 		.4byte	0x416
 7243 1d1d 3C180000 		.4byte	.LLST160
 7244 1d21 2E       		.uleb128 0x2e
 7245 1d22 810A0000 		.4byte	.LASF66
 7246 1d26 01       		.byte	0x1
 7247 1d27 3912     		.2byte	0x1239
 7248 1d29 01010000 		.4byte	0x101
 7249 1d2d 4F180000 		.4byte	.LLST161
 7250 1d31 29       		.uleb128 0x29
 7251 1d32 B60E0000 		.4byte	.LVL347
 7252 1d36 D41F0000 		.4byte	0x1fd4
 7253 1d3a 29       		.uleb128 0x29
 7254 1d3b CA0E0000 		.4byte	.LVL350
 7255 1d3f DE1F0000 		.4byte	0x1fde
 7256 1d43 00       		.byte	0
 7257 1d44 11       		.uleb128 0x11
 7258 1d45 05020000 		.4byte	0x205
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 228


 7259 1d49 541D0000 		.4byte	0x1d54
 7260 1d4d 12       		.uleb128 0x12
 7261 1d4e 97000000 		.4byte	0x97
 7262 1d52 04       		.byte	0x4
 7263 1d53 00       		.byte	0
 7264 1d54 2F       		.uleb128 0x2f
 7265 1d55 61010000 		.4byte	.LASF177
 7266 1d59 01       		.byte	0x1
 7267 1d5a 7701     		.2byte	0x177
 7268 1d5c 441D0000 		.4byte	0x1d44
 7269 1d60 05       		.byte	0x5
 7270 1d61 03       		.byte	0x3
 7271 1d62 44000000 		.4byte	pxReadyTasksLists
 7272 1d66 2F       		.uleb128 0x2f
 7273 1d67 D4010000 		.4byte	.LASF178
 7274 1d6b 01       		.byte	0x1
 7275 1d6c 7801     		.2byte	0x178
 7276 1d6e 05020000 		.4byte	0x205
 7277 1d72 05       		.byte	0x5
 7278 1d73 03       		.byte	0x3
 7279 1d74 A8000000 		.4byte	xDelayedTaskList1
 7280 1d78 2F       		.uleb128 0x2f
 7281 1d79 E6010000 		.4byte	.LASF179
 7282 1d7d 01       		.byte	0x1
 7283 1d7e 7901     		.2byte	0x179
 7284 1d80 05020000 		.4byte	0x205
 7285 1d84 05       		.byte	0x5
 7286 1d85 03       		.byte	0x3
 7287 1d86 BC000000 		.4byte	xDelayedTaskList2
 7288 1d8a 2F       		.uleb128 0x2f
 7289 1d8b 05090000 		.4byte	.LASF180
 7290 1d8f 01       		.byte	0x1
 7291 1d90 7A01     		.2byte	0x17a
 7292 1d92 9C1D0000 		.4byte	0x1d9c
 7293 1d96 05       		.byte	0x5
 7294 1d97 03       		.byte	0x3
 7295 1d98 28000000 		.4byte	pxDelayedTaskList
 7296 1d9c 10       		.uleb128 0x10
 7297 1d9d ED050000 		.4byte	0x5ed
 7298 1da1 2F       		.uleb128 0x2f
 7299 1da2 8A040000 		.4byte	.LASF181
 7300 1da6 01       		.byte	0x1
 7301 1da7 7B01     		.2byte	0x17b
 7302 1da9 9C1D0000 		.4byte	0x1d9c
 7303 1dad 05       		.byte	0x5
 7304 1dae 03       		.byte	0x3
 7305 1daf 3C000000 		.4byte	pxOverflowDelayedTaskList
 7306 1db3 2F       		.uleb128 0x2f
 7307 1db4 7B030000 		.4byte	.LASF182
 7308 1db8 01       		.byte	0x1
 7309 1db9 7C01     		.2byte	0x17c
 7310 1dbb 05020000 		.4byte	0x205
 7311 1dbf 05       		.byte	0x5
 7312 1dc0 03       		.byte	0x3
 7313 1dc1 14000000 		.4byte	xPendingReadyList
 7314 1dc5 2F       		.uleb128 0x2f
 7315 1dc6 98030000 		.4byte	.LASF183
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 229


 7316 1dca 01       		.byte	0x1
 7317 1dcb 8001     		.2byte	0x180
 7318 1dcd 05020000 		.4byte	0x205
 7319 1dd1 05       		.byte	0x5
 7320 1dd2 03       		.byte	0x3
 7321 1dd3 D0000000 		.4byte	xTasksWaitingTermination
 7322 1dd7 2F       		.uleb128 0x2f
 7323 1dd8 39010000 		.4byte	.LASF184
 7324 1ddc 01       		.byte	0x1
 7325 1ddd 8101     		.2byte	0x181
 7326 1ddf E91D0000 		.4byte	0x1de9
 7327 1de3 05       		.byte	0x5
 7328 1de4 03       		.byte	0x3
 7329 1de5 EC000000 		.4byte	uxDeletedTasksWaitingCleanUp
 7330 1de9 10       		.uleb128 0x10
 7331 1dea 0C010000 		.4byte	0x10c
 7332 1dee 2F       		.uleb128 0x2f
 7333 1def 70040000 		.4byte	.LASF185
 7334 1df3 01       		.byte	0x1
 7335 1df4 8701     		.2byte	0x187
 7336 1df6 05020000 		.4byte	0x205
 7337 1dfa 05       		.byte	0x5
 7338 1dfb 03       		.byte	0x3
 7339 1dfc 00000000 		.4byte	xSuspendedTaskList
 7340 1e00 2F       		.uleb128 0x2f
 7341 1e01 E30C0000 		.4byte	.LASF186
 7342 1e05 01       		.byte	0x1
 7343 1e06 8C01     		.2byte	0x18c
 7344 1e08 E91D0000 		.4byte	0x1de9
 7345 1e0c 05       		.byte	0x5
 7346 1e0d 03       		.byte	0x3
 7347 1e0e 40000000 		.4byte	uxCurrentNumberOfTasks
 7348 1e12 2F       		.uleb128 0x2f
 7349 1e13 1C040000 		.4byte	.LASF187
 7350 1e17 01       		.byte	0x1
 7351 1e18 8D01     		.2byte	0x18d
 7352 1e1a 241E0000 		.4byte	0x1e24
 7353 1e1e 05       		.byte	0x5
 7354 1e1f 03       		.byte	0x3
 7355 1e20 30000000 		.4byte	xTickCount
 7356 1e24 10       		.uleb128 0x10
 7357 1e25 17010000 		.4byte	0x117
 7358 1e29 2F       		.uleb128 0x2f
 7359 1e2a C8000000 		.4byte	.LASF188
 7360 1e2e 01       		.byte	0x1
 7361 1e2f 8E01     		.2byte	0x18e
 7362 1e31 E91D0000 		.4byte	0x1de9
 7363 1e35 05       		.byte	0x5
 7364 1e36 03       		.byte	0x3
 7365 1e37 38000000 		.4byte	uxTopReadyPriority
 7366 1e3b 2F       		.uleb128 0x2f
 7367 1e3c F4000000 		.4byte	.LASF189
 7368 1e40 01       		.byte	0x1
 7369 1e41 8F01     		.2byte	0x18f
 7370 1e43 4D1E0000 		.4byte	0x1e4d
 7371 1e47 05       		.byte	0x5
 7372 1e48 03       		.byte	0x3
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 230


 7373 1e49 E4000000 		.4byte	xSchedulerRunning
 7374 1e4d 10       		.uleb128 0x10
 7375 1e4e 01010000 		.4byte	0x101
 7376 1e52 2F       		.uleb128 0x2f
 7377 1e53 A30A0000 		.4byte	.LASF190
 7378 1e57 01       		.byte	0x1
 7379 1e58 9001     		.2byte	0x190
 7380 1e5a E91D0000 		.4byte	0x1de9
 7381 1e5e 05       		.byte	0x5
 7382 1e5f 03       		.byte	0x3
 7383 1e60 FC000000 		.4byte	uxPendedTicks
 7384 1e64 2F       		.uleb128 0x2f
 7385 1e65 E20D0000 		.4byte	.LASF191
 7386 1e69 01       		.byte	0x1
 7387 1e6a 9101     		.2byte	0x191
 7388 1e6c 4D1E0000 		.4byte	0x1e4d
 7389 1e70 05       		.byte	0x5
 7390 1e71 03       		.byte	0x3
 7391 1e72 00010000 		.4byte	xYieldPending
 7392 1e76 2F       		.uleb128 0x2f
 7393 1e77 56080000 		.4byte	.LASF192
 7394 1e7b 01       		.byte	0x1
 7395 1e7c 9201     		.2byte	0x192
 7396 1e7e 4D1E0000 		.4byte	0x1e4d
 7397 1e82 05       		.byte	0x5
 7398 1e83 03       		.byte	0x3
 7399 1e84 F8000000 		.4byte	xNumOfOverflows
 7400 1e88 2F       		.uleb128 0x2f
 7401 1e89 87070000 		.4byte	.LASF193
 7402 1e8d 01       		.byte	0x1
 7403 1e8e 9301     		.2byte	0x193
 7404 1e90 0C010000 		.4byte	0x10c
 7405 1e94 05       		.byte	0x5
 7406 1e95 03       		.byte	0x3
 7407 1e96 E8000000 		.4byte	uxTaskNumber
 7408 1e9a 2F       		.uleb128 0x2f
 7409 1e9b 31060000 		.4byte	.LASF194
 7410 1e9f 01       		.byte	0x1
 7411 1ea0 9401     		.2byte	0x194
 7412 1ea2 241E0000 		.4byte	0x1e24
 7413 1ea6 05       		.byte	0x5
 7414 1ea7 03       		.byte	0x3
 7415 1ea8 2C000000 		.4byte	xNextTaskUnblockTime
 7416 1eac 2F       		.uleb128 0x2f
 7417 1ead 72080000 		.4byte	.LASF195
 7418 1eb1 01       		.byte	0x1
 7419 1eb2 9501     		.2byte	0x195
 7420 1eb4 10020000 		.4byte	0x210
 7421 1eb8 05       		.byte	0x5
 7422 1eb9 03       		.byte	0x3
 7423 1eba F4000000 		.4byte	xIdleTaskHandle
 7424 1ebe 2F       		.uleb128 0x2f
 7425 1ebf 490D0000 		.4byte	.LASF196
 7426 1ec3 01       		.byte	0x1
 7427 1ec4 9F01     		.2byte	0x19f
 7428 1ec6 E91D0000 		.4byte	0x1de9
 7429 1eca 05       		.byte	0x5
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 231


 7430 1ecb 03       		.byte	0x3
 7431 1ecc F0000000 		.4byte	uxSchedulerSuspended
 7432 1ed0 42       		.uleb128 0x42
 7433 1ed1 D60C0000 		.4byte	.LASF214
 7434 1ed5 01       		.byte	0x1
 7435 1ed6 7401     		.2byte	0x174
 7436 1ed8 E31E0000 		.4byte	0x1ee3
 7437 1edc 01       		.byte	0x1
 7438 1edd 05       		.byte	0x5
 7439 1ede 03       		.byte	0x3
 7440 1edf 00000000 		.4byte	pxCurrentTCB
 7441 1ee3 10       		.uleb128 0x10
 7442 1ee4 16040000 		.4byte	0x416
 7443 1ee8 43       		.uleb128 0x43
 7444 1ee9 01       		.byte	0x1
 7445 1eea F10B0000 		.4byte	.LASF198
 7446 1eee 07       		.byte	0x7
 7447 1eef 9A01     		.2byte	0x19a
 7448 1ef1 01       		.byte	0x1
 7449 1ef2 01       		.byte	0x1
 7450 1ef3 021F0000 		.4byte	0x1f02
 7451 1ef7 09       		.uleb128 0x9
 7452 1ef8 E8050000 		.4byte	0x5e8
 7453 1efc 09       		.uleb128 0x9
 7454 1efd 021F0000 		.4byte	0x1f02
 7455 1f01 00       		.byte	0
 7456 1f02 07       		.uleb128 0x7
 7457 1f03 FF010000 		.4byte	0x1ff
 7458 1f07 44       		.uleb128 0x44
 7459 1f08 01       		.byte	0x1
 7460 1f09 9A020000 		.4byte	.LASF200
 7461 1f0d 07       		.byte	0x7
 7462 1f0e BE01     		.2byte	0x1be
 7463 1f10 01       		.byte	0x1
 7464 1f11 0C010000 		.4byte	0x10c
 7465 1f15 01       		.byte	0x1
 7466 1f16 201F0000 		.4byte	0x1f20
 7467 1f1a 09       		.uleb128 0x9
 7468 1f1b 021F0000 		.4byte	0x1f02
 7469 1f1f 00       		.byte	0
 7470 1f20 43       		.uleb128 0x43
 7471 1f21 01       		.byte	0x1
 7472 1f22 61040000 		.4byte	.LASF199
 7473 1f26 07       		.byte	0x7
 7474 1f27 AF01     		.2byte	0x1af
 7475 1f29 01       		.byte	0x1
 7476 1f2a 01       		.byte	0x1
 7477 1f2b 3A1F0000 		.4byte	0x1f3a
 7478 1f2f 09       		.uleb128 0x9
 7479 1f30 E8050000 		.4byte	0x5e8
 7480 1f34 09       		.uleb128 0x9
 7481 1f35 021F0000 		.4byte	0x1f02
 7482 1f39 00       		.byte	0
 7483 1f3a 45       		.uleb128 0x45
 7484 1f3b 01       		.byte	0x1
 7485 1f3c CF030000 		.4byte	.LASF201
 7486 1f40 09       		.byte	0x9
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 232


 7487 1f41 AB       		.byte	0xab
 7488 1f42 01       		.byte	0x1
 7489 1f43 9E000000 		.4byte	0x9e
 7490 1f47 01       		.byte	0x1
 7491 1f48 521F0000 		.4byte	0x1f52
 7492 1f4c 09       		.uleb128 0x9
 7493 1f4d 25000000 		.4byte	0x25
 7494 1f51 00       		.byte	0
 7495 1f52 46       		.uleb128 0x46
 7496 1f53 01       		.byte	0x1
 7497 1f54 B8090000 		.4byte	.LASF202
 7498 1f58 09       		.byte	0x9
 7499 1f59 AC       		.byte	0xac
 7500 1f5a 01       		.byte	0x1
 7501 1f5b 01       		.byte	0x1
 7502 1f5c 661F0000 		.4byte	0x1f66
 7503 1f60 09       		.uleb128 0x9
 7504 1f61 9E000000 		.4byte	0x9e
 7505 1f65 00       		.byte	0
 7506 1f66 45       		.uleb128 0x45
 7507 1f67 01       		.byte	0x1
 7508 1f68 33070000 		.4byte	.LASF203
 7509 1f6c 0A       		.byte	0xa
 7510 1f6d 19       		.byte	0x19
 7511 1f6e 01       		.byte	0x1
 7512 1f6f 9E000000 		.4byte	0x9e
 7513 1f73 01       		.byte	0x1
 7514 1f74 881F0000 		.4byte	0x1f88
 7515 1f78 09       		.uleb128 0x9
 7516 1f79 9E000000 		.4byte	0x9e
 7517 1f7d 09       		.uleb128 0x9
 7518 1f7e 37000000 		.4byte	0x37
 7519 1f82 09       		.uleb128 0x9
 7520 1f83 25000000 		.4byte	0x25
 7521 1f87 00       		.byte	0
 7522 1f88 43       		.uleb128 0x43
 7523 1f89 01       		.byte	0x1
 7524 1f8a AA080000 		.4byte	.LASF204
 7525 1f8e 07       		.byte	0x7
 7526 1f8f 8D01     		.2byte	0x18d
 7527 1f91 01       		.byte	0x1
 7528 1f92 01       		.byte	0x1
 7529 1f93 9D1F0000 		.4byte	0x1f9d
 7530 1f97 09       		.uleb128 0x9
 7531 1f98 021F0000 		.4byte	0x1f02
 7532 1f9c 00       		.byte	0
 7533 1f9d 45       		.uleb128 0x45
 7534 1f9e 01       		.byte	0x1
 7535 1f9f 59060000 		.4byte	.LASF205
 7536 1fa3 09       		.byte	0x9
 7537 1fa4 90       		.byte	0x90
 7538 1fa5 01       		.byte	0x1
 7539 1fa6 C8020000 		.4byte	0x2c8
 7540 1faa 01       		.byte	0x1
 7541 1fab BF1F0000 		.4byte	0x1fbf
 7542 1faf 09       		.uleb128 0x9
 7543 1fb0 C8020000 		.4byte	0x2c8
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 233


 7544 1fb4 09       		.uleb128 0x9
 7545 1fb5 D9000000 		.4byte	0xd9
 7546 1fb9 09       		.uleb128 0x9
 7547 1fba 9E000000 		.4byte	0x9e
 7548 1fbe 00       		.byte	0
 7549 1fbf 43       		.uleb128 0x43
 7550 1fc0 01       		.byte	0x1
 7551 1fc1 D30B0000 		.4byte	.LASF206
 7552 1fc5 07       		.byte	0x7
 7553 1fc6 8201     		.2byte	0x182
 7554 1fc8 01       		.byte	0x1
 7555 1fc9 01       		.byte	0x1
 7556 1fca D41F0000 		.4byte	0x1fd4
 7557 1fce 09       		.uleb128 0x9
 7558 1fcf E8050000 		.4byte	0x5e8
 7559 1fd3 00       		.byte	0
 7560 1fd4 47       		.uleb128 0x47
 7561 1fd5 01       		.byte	0x1
 7562 1fd6 17020000 		.4byte	.LASF207
 7563 1fda 02       		.byte	0x2
 7564 1fdb 8B       		.byte	0x8b
 7565 1fdc 01       		.byte	0x1
 7566 1fdd 01       		.byte	0x1
 7567 1fde 47       		.uleb128 0x47
 7568 1fdf 01       		.byte	0x1
 7569 1fe0 1B000000 		.4byte	.LASF208
 7570 1fe4 02       		.byte	0x2
 7571 1fe5 8C       		.byte	0x8c
 7572 1fe6 01       		.byte	0x1
 7573 1fe7 01       		.byte	0x1
 7574 1fe8 48       		.uleb128 0x48
 7575 1fe9 01       		.byte	0x1
 7576 1fea 2D000000 		.4byte	.LASF215
 7577 1fee 09       		.byte	0x9
 7578 1fef B5       		.byte	0xb5
 7579 1ff0 01       		.byte	0x1
 7580 1ff1 01010000 		.4byte	0x101
 7581 1ff5 01       		.byte	0x1
 7582 1ff6 47       		.uleb128 0x47
 7583 1ff7 01       		.byte	0x1
 7584 1ff8 A6090000 		.4byte	.LASF209
 7585 1ffc 09       		.byte	0x9
 7586 1ffd BC       		.byte	0xbc
 7587 1ffe 01       		.byte	0x1
 7588 1fff 01       		.byte	0x1
 7589 2000 49       		.uleb128 0x49
 7590 2001 01       		.byte	0x1
 7591 2002 82080000 		.4byte	.LASF216
 7592 2006 01       		.byte	0x1
 7593 2007 AE01     		.2byte	0x1ae
 7594 2009 01       		.byte	0x1
 7595 200a 01       		.byte	0x1
 7596 200b 09       		.uleb128 0x9
 7597 200c 10020000 		.4byte	0x210
 7598 2010 09       		.uleb128 0x9
 7599 2011 A0000000 		.4byte	0xa0
 7600 2015 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 234


 7601 2016 00       		.byte	0
 7602              		.section	.debug_abbrev,"",%progbits
 7603              	.Ldebug_abbrev0:
 7604 0000 01       		.uleb128 0x1
 7605 0001 11       		.uleb128 0x11
 7606 0002 01       		.byte	0x1
 7607 0003 25       		.uleb128 0x25
 7608 0004 0E       		.uleb128 0xe
 7609 0005 13       		.uleb128 0x13
 7610 0006 0B       		.uleb128 0xb
 7611 0007 03       		.uleb128 0x3
 7612 0008 0E       		.uleb128 0xe
 7613 0009 1B       		.uleb128 0x1b
 7614 000a 0E       		.uleb128 0xe
 7615 000b 11       		.uleb128 0x11
 7616 000c 01       		.uleb128 0x1
 7617 000d 12       		.uleb128 0x12
 7618 000e 01       		.uleb128 0x1
 7619 000f 10       		.uleb128 0x10
 7620 0010 06       		.uleb128 0x6
 7621 0011 00       		.byte	0
 7622 0012 00       		.byte	0
 7623 0013 02       		.uleb128 0x2
 7624 0014 16       		.uleb128 0x16
 7625 0015 00       		.byte	0
 7626 0016 03       		.uleb128 0x3
 7627 0017 0E       		.uleb128 0xe
 7628 0018 3A       		.uleb128 0x3a
 7629 0019 0B       		.uleb128 0xb
 7630 001a 3B       		.uleb128 0x3b
 7631 001b 0B       		.uleb128 0xb
 7632 001c 49       		.uleb128 0x49
 7633 001d 13       		.uleb128 0x13
 7634 001e 00       		.byte	0
 7635 001f 00       		.byte	0
 7636 0020 03       		.uleb128 0x3
 7637 0021 24       		.uleb128 0x24
 7638 0022 00       		.byte	0
 7639 0023 0B       		.uleb128 0xb
 7640 0024 0B       		.uleb128 0xb
 7641 0025 3E       		.uleb128 0x3e
 7642 0026 0B       		.uleb128 0xb
 7643 0027 03       		.uleb128 0x3
 7644 0028 0E       		.uleb128 0xe
 7645 0029 00       		.byte	0
 7646 002a 00       		.byte	0
 7647 002b 04       		.uleb128 0x4
 7648 002c 24       		.uleb128 0x24
 7649 002d 00       		.byte	0
 7650 002e 0B       		.uleb128 0xb
 7651 002f 0B       		.uleb128 0xb
 7652 0030 3E       		.uleb128 0x3e
 7653 0031 0B       		.uleb128 0xb
 7654 0032 03       		.uleb128 0x3
 7655 0033 08       		.uleb128 0x8
 7656 0034 00       		.byte	0
 7657 0035 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 235


 7658 0036 05       		.uleb128 0x5
 7659 0037 0F       		.uleb128 0xf
 7660 0038 00       		.byte	0
 7661 0039 0B       		.uleb128 0xb
 7662 003a 0B       		.uleb128 0xb
 7663 003b 00       		.byte	0
 7664 003c 00       		.byte	0
 7665 003d 06       		.uleb128 0x6
 7666 003e 0F       		.uleb128 0xf
 7667 003f 00       		.byte	0
 7668 0040 0B       		.uleb128 0xb
 7669 0041 0B       		.uleb128 0xb
 7670 0042 49       		.uleb128 0x49
 7671 0043 13       		.uleb128 0x13
 7672 0044 00       		.byte	0
 7673 0045 00       		.byte	0
 7674 0046 07       		.uleb128 0x7
 7675 0047 26       		.uleb128 0x26
 7676 0048 00       		.byte	0
 7677 0049 49       		.uleb128 0x49
 7678 004a 13       		.uleb128 0x13
 7679 004b 00       		.byte	0
 7680 004c 00       		.byte	0
 7681 004d 08       		.uleb128 0x8
 7682 004e 15       		.uleb128 0x15
 7683 004f 01       		.byte	0x1
 7684 0050 27       		.uleb128 0x27
 7685 0051 0C       		.uleb128 0xc
 7686 0052 01       		.uleb128 0x1
 7687 0053 13       		.uleb128 0x13
 7688 0054 00       		.byte	0
 7689 0055 00       		.byte	0
 7690 0056 09       		.uleb128 0x9
 7691 0057 05       		.uleb128 0x5
 7692 0058 00       		.byte	0
 7693 0059 49       		.uleb128 0x49
 7694 005a 13       		.uleb128 0x13
 7695 005b 00       		.byte	0
 7696 005c 00       		.byte	0
 7697 005d 0A       		.uleb128 0xa
 7698 005e 13       		.uleb128 0x13
 7699 005f 01       		.byte	0x1
 7700 0060 03       		.uleb128 0x3
 7701 0061 0E       		.uleb128 0xe
 7702 0062 0B       		.uleb128 0xb
 7703 0063 0B       		.uleb128 0xb
 7704 0064 3A       		.uleb128 0x3a
 7705 0065 0B       		.uleb128 0xb
 7706 0066 3B       		.uleb128 0x3b
 7707 0067 0B       		.uleb128 0xb
 7708 0068 01       		.uleb128 0x1
 7709 0069 13       		.uleb128 0x13
 7710 006a 00       		.byte	0
 7711 006b 00       		.byte	0
 7712 006c 0B       		.uleb128 0xb
 7713 006d 0D       		.uleb128 0xd
 7714 006e 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 236


 7715 006f 03       		.uleb128 0x3
 7716 0070 0E       		.uleb128 0xe
 7717 0071 3A       		.uleb128 0x3a
 7718 0072 0B       		.uleb128 0xb
 7719 0073 3B       		.uleb128 0x3b
 7720 0074 0B       		.uleb128 0xb
 7721 0075 49       		.uleb128 0x49
 7722 0076 13       		.uleb128 0x13
 7723 0077 38       		.uleb128 0x38
 7724 0078 0A       		.uleb128 0xa
 7725 0079 00       		.byte	0
 7726 007a 00       		.byte	0
 7727 007b 0C       		.uleb128 0xc
 7728 007c 04       		.uleb128 0x4
 7729 007d 01       		.byte	0x1
 7730 007e 0B       		.uleb128 0xb
 7731 007f 0B       		.uleb128 0xb
 7732 0080 3A       		.uleb128 0x3a
 7733 0081 0B       		.uleb128 0xb
 7734 0082 3B       		.uleb128 0x3b
 7735 0083 0B       		.uleb128 0xb
 7736 0084 01       		.uleb128 0x1
 7737 0085 13       		.uleb128 0x13
 7738 0086 00       		.byte	0
 7739 0087 00       		.byte	0
 7740 0088 0D       		.uleb128 0xd
 7741 0089 28       		.uleb128 0x28
 7742 008a 00       		.byte	0
 7743 008b 03       		.uleb128 0x3
 7744 008c 0E       		.uleb128 0xe
 7745 008d 1C       		.uleb128 0x1c
 7746 008e 0D       		.uleb128 0xd
 7747 008f 00       		.byte	0
 7748 0090 00       		.byte	0
 7749 0091 0E       		.uleb128 0xe
 7750 0092 13       		.uleb128 0x13
 7751 0093 01       		.byte	0x1
 7752 0094 03       		.uleb128 0x3
 7753 0095 0E       		.uleb128 0xe
 7754 0096 0B       		.uleb128 0xb
 7755 0097 0B       		.uleb128 0xb
 7756 0098 3A       		.uleb128 0x3a
 7757 0099 0B       		.uleb128 0xb
 7758 009a 3B       		.uleb128 0x3b
 7759 009b 05       		.uleb128 0x5
 7760 009c 01       		.uleb128 0x1
 7761 009d 13       		.uleb128 0x13
 7762 009e 00       		.byte	0
 7763 009f 00       		.byte	0
 7764 00a0 0F       		.uleb128 0xf
 7765 00a1 0D       		.uleb128 0xd
 7766 00a2 00       		.byte	0
 7767 00a3 03       		.uleb128 0x3
 7768 00a4 0E       		.uleb128 0xe
 7769 00a5 3A       		.uleb128 0x3a
 7770 00a6 0B       		.uleb128 0xb
 7771 00a7 3B       		.uleb128 0x3b
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 237


 7772 00a8 05       		.uleb128 0x5
 7773 00a9 49       		.uleb128 0x49
 7774 00aa 13       		.uleb128 0x13
 7775 00ab 38       		.uleb128 0x38
 7776 00ac 0A       		.uleb128 0xa
 7777 00ad 00       		.byte	0
 7778 00ae 00       		.byte	0
 7779 00af 10       		.uleb128 0x10
 7780 00b0 35       		.uleb128 0x35
 7781 00b1 00       		.byte	0
 7782 00b2 49       		.uleb128 0x49
 7783 00b3 13       		.uleb128 0x13
 7784 00b4 00       		.byte	0
 7785 00b5 00       		.byte	0
 7786 00b6 11       		.uleb128 0x11
 7787 00b7 01       		.uleb128 0x1
 7788 00b8 01       		.byte	0x1
 7789 00b9 49       		.uleb128 0x49
 7790 00ba 13       		.uleb128 0x13
 7791 00bb 01       		.uleb128 0x1
 7792 00bc 13       		.uleb128 0x13
 7793 00bd 00       		.byte	0
 7794 00be 00       		.byte	0
 7795 00bf 12       		.uleb128 0x12
 7796 00c0 21       		.uleb128 0x21
 7797 00c1 00       		.byte	0
 7798 00c2 49       		.uleb128 0x49
 7799 00c3 13       		.uleb128 0x13
 7800 00c4 2F       		.uleb128 0x2f
 7801 00c5 0B       		.uleb128 0xb
 7802 00c6 00       		.byte	0
 7803 00c7 00       		.byte	0
 7804 00c8 13       		.uleb128 0x13
 7805 00c9 16       		.uleb128 0x16
 7806 00ca 00       		.byte	0
 7807 00cb 03       		.uleb128 0x3
 7808 00cc 0E       		.uleb128 0xe
 7809 00cd 3A       		.uleb128 0x3a
 7810 00ce 0B       		.uleb128 0xb
 7811 00cf 3B       		.uleb128 0x3b
 7812 00d0 05       		.uleb128 0x5
 7813 00d1 49       		.uleb128 0x49
 7814 00d2 13       		.uleb128 0x13
 7815 00d3 00       		.byte	0
 7816 00d4 00       		.byte	0
 7817 00d5 14       		.uleb128 0x14
 7818 00d6 2E       		.uleb128 0x2e
 7819 00d7 01       		.byte	0x1
 7820 00d8 03       		.uleb128 0x3
 7821 00d9 0E       		.uleb128 0xe
 7822 00da 3A       		.uleb128 0x3a
 7823 00db 0B       		.uleb128 0xb
 7824 00dc 3B       		.uleb128 0x3b
 7825 00dd 05       		.uleb128 0x5
 7826 00de 27       		.uleb128 0x27
 7827 00df 0C       		.uleb128 0xc
 7828 00e0 49       		.uleb128 0x49
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 238


 7829 00e1 13       		.uleb128 0x13
 7830 00e2 20       		.uleb128 0x20
 7831 00e3 0B       		.uleb128 0xb
 7832 00e4 01       		.uleb128 0x1
 7833 00e5 13       		.uleb128 0x13
 7834 00e6 00       		.byte	0
 7835 00e7 00       		.byte	0
 7836 00e8 15       		.uleb128 0x15
 7837 00e9 05       		.uleb128 0x5
 7838 00ea 00       		.byte	0
 7839 00eb 03       		.uleb128 0x3
 7840 00ec 0E       		.uleb128 0xe
 7841 00ed 3A       		.uleb128 0x3a
 7842 00ee 0B       		.uleb128 0xb
 7843 00ef 3B       		.uleb128 0x3b
 7844 00f0 05       		.uleb128 0x5
 7845 00f1 49       		.uleb128 0x49
 7846 00f2 13       		.uleb128 0x13
 7847 00f3 00       		.byte	0
 7848 00f4 00       		.byte	0
 7849 00f5 16       		.uleb128 0x16
 7850 00f6 34       		.uleb128 0x34
 7851 00f7 00       		.byte	0
 7852 00f8 03       		.uleb128 0x3
 7853 00f9 0E       		.uleb128 0xe
 7854 00fa 3A       		.uleb128 0x3a
 7855 00fb 0B       		.uleb128 0xb
 7856 00fc 3B       		.uleb128 0x3b
 7857 00fd 05       		.uleb128 0x5
 7858 00fe 49       		.uleb128 0x49
 7859 00ff 13       		.uleb128 0x13
 7860 0100 00       		.byte	0
 7861 0101 00       		.byte	0
 7862 0102 17       		.uleb128 0x17
 7863 0103 2E       		.uleb128 0x2e
 7864 0104 01       		.byte	0x1
 7865 0105 03       		.uleb128 0x3
 7866 0106 0E       		.uleb128 0xe
 7867 0107 3A       		.uleb128 0x3a
 7868 0108 0B       		.uleb128 0xb
 7869 0109 3B       		.uleb128 0x3b
 7870 010a 05       		.uleb128 0x5
 7871 010b 27       		.uleb128 0x27
 7872 010c 0C       		.uleb128 0xc
 7873 010d 20       		.uleb128 0x20
 7874 010e 0B       		.uleb128 0xb
 7875 010f 01       		.uleb128 0x1
 7876 0110 13       		.uleb128 0x13
 7877 0111 00       		.byte	0
 7878 0112 00       		.byte	0
 7879 0113 18       		.uleb128 0x18
 7880 0114 34       		.uleb128 0x34
 7881 0115 00       		.byte	0
 7882 0116 03       		.uleb128 0x3
 7883 0117 08       		.uleb128 0x8
 7884 0118 3A       		.uleb128 0x3a
 7885 0119 0B       		.uleb128 0xb
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 239


 7886 011a 3B       		.uleb128 0x3b
 7887 011b 05       		.uleb128 0x5
 7888 011c 49       		.uleb128 0x49
 7889 011d 13       		.uleb128 0x13
 7890 011e 00       		.byte	0
 7891 011f 00       		.byte	0
 7892 0120 19       		.uleb128 0x19
 7893 0121 2E       		.uleb128 0x2e
 7894 0122 01       		.byte	0x1
 7895 0123 03       		.uleb128 0x3
 7896 0124 0E       		.uleb128 0xe
 7897 0125 3A       		.uleb128 0x3a
 7898 0126 0B       		.uleb128 0xb
 7899 0127 3B       		.uleb128 0x3b
 7900 0128 0B       		.uleb128 0xb
 7901 0129 27       		.uleb128 0x27
 7902 012a 0C       		.uleb128 0xc
 7903 012b 49       		.uleb128 0x49
 7904 012c 13       		.uleb128 0x13
 7905 012d 20       		.uleb128 0x20
 7906 012e 0B       		.uleb128 0xb
 7907 012f 01       		.uleb128 0x1
 7908 0130 13       		.uleb128 0x13
 7909 0131 00       		.byte	0
 7910 0132 00       		.byte	0
 7911 0133 1A       		.uleb128 0x1a
 7912 0134 34       		.uleb128 0x34
 7913 0135 00       		.byte	0
 7914 0136 03       		.uleb128 0x3
 7915 0137 0E       		.uleb128 0xe
 7916 0138 3A       		.uleb128 0x3a
 7917 0139 0B       		.uleb128 0xb
 7918 013a 3B       		.uleb128 0x3b
 7919 013b 0B       		.uleb128 0xb
 7920 013c 49       		.uleb128 0x49
 7921 013d 13       		.uleb128 0x13
 7922 013e 00       		.byte	0
 7923 013f 00       		.byte	0
 7924 0140 1B       		.uleb128 0x1b
 7925 0141 2E       		.uleb128 0x2e
 7926 0142 01       		.byte	0x1
 7927 0143 03       		.uleb128 0x3
 7928 0144 0E       		.uleb128 0xe
 7929 0145 3A       		.uleb128 0x3a
 7930 0146 0B       		.uleb128 0xb
 7931 0147 3B       		.uleb128 0x3b
 7932 0148 0B       		.uleb128 0xb
 7933 0149 27       		.uleb128 0x27
 7934 014a 0C       		.uleb128 0xc
 7935 014b 20       		.uleb128 0x20
 7936 014c 0B       		.uleb128 0xb
 7937 014d 01       		.uleb128 0x1
 7938 014e 13       		.uleb128 0x13
 7939 014f 00       		.byte	0
 7940 0150 00       		.byte	0
 7941 0151 1C       		.uleb128 0x1c
 7942 0152 05       		.uleb128 0x5
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 240


 7943 0153 00       		.byte	0
 7944 0154 03       		.uleb128 0x3
 7945 0155 0E       		.uleb128 0xe
 7946 0156 3A       		.uleb128 0x3a
 7947 0157 0B       		.uleb128 0xb
 7948 0158 3B       		.uleb128 0x3b
 7949 0159 0B       		.uleb128 0xb
 7950 015a 49       		.uleb128 0x49
 7951 015b 13       		.uleb128 0x13
 7952 015c 00       		.byte	0
 7953 015d 00       		.byte	0
 7954 015e 1D       		.uleb128 0x1d
 7955 015f 2E       		.uleb128 0x2e
 7956 0160 01       		.byte	0x1
 7957 0161 3F       		.uleb128 0x3f
 7958 0162 0C       		.uleb128 0xc
 7959 0163 03       		.uleb128 0x3
 7960 0164 0E       		.uleb128 0xe
 7961 0165 3A       		.uleb128 0x3a
 7962 0166 0B       		.uleb128 0xb
 7963 0167 3B       		.uleb128 0x3b
 7964 0168 05       		.uleb128 0x5
 7965 0169 27       		.uleb128 0x27
 7966 016a 0C       		.uleb128 0xc
 7967 016b 20       		.uleb128 0x20
 7968 016c 0B       		.uleb128 0xb
 7969 016d 01       		.uleb128 0x1
 7970 016e 13       		.uleb128 0x13
 7971 016f 00       		.byte	0
 7972 0170 00       		.byte	0
 7973 0171 1E       		.uleb128 0x1e
 7974 0172 0B       		.uleb128 0xb
 7975 0173 01       		.byte	0x1
 7976 0174 01       		.uleb128 0x1
 7977 0175 13       		.uleb128 0x13
 7978 0176 00       		.byte	0
 7979 0177 00       		.byte	0
 7980 0178 1F       		.uleb128 0x1f
 7981 0179 0B       		.uleb128 0xb
 7982 017a 01       		.byte	0x1
 7983 017b 00       		.byte	0
 7984 017c 00       		.byte	0
 7985 017d 20       		.uleb128 0x20
 7986 017e 2E       		.uleb128 0x2e
 7987 017f 01       		.byte	0x1
 7988 0180 31       		.uleb128 0x31
 7989 0181 13       		.uleb128 0x13
 7990 0182 11       		.uleb128 0x11
 7991 0183 01       		.uleb128 0x1
 7992 0184 12       		.uleb128 0x12
 7993 0185 01       		.uleb128 0x1
 7994 0186 40       		.uleb128 0x40
 7995 0187 0A       		.uleb128 0xa
 7996 0188 9742     		.uleb128 0x2117
 7997 018a 0C       		.uleb128 0xc
 7998 018b 01       		.uleb128 0x1
 7999 018c 13       		.uleb128 0x13
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 241


 8000 018d 00       		.byte	0
 8001 018e 00       		.byte	0
 8002 018f 21       		.uleb128 0x21
 8003 0190 05       		.uleb128 0x5
 8004 0191 00       		.byte	0
 8005 0192 31       		.uleb128 0x31
 8006 0193 13       		.uleb128 0x13
 8007 0194 02       		.uleb128 0x2
 8008 0195 06       		.uleb128 0x6
 8009 0196 00       		.byte	0
 8010 0197 00       		.byte	0
 8011 0198 22       		.uleb128 0x22
 8012 0199 34       		.uleb128 0x34
 8013 019a 00       		.byte	0
 8014 019b 31       		.uleb128 0x31
 8015 019c 13       		.uleb128 0x13
 8016 019d 02       		.uleb128 0x2
 8017 019e 06       		.uleb128 0x6
 8018 019f 00       		.byte	0
 8019 01a0 00       		.byte	0
 8020 01a1 23       		.uleb128 0x23
 8021 01a2 0B       		.uleb128 0xb
 8022 01a3 01       		.byte	0x1
 8023 01a4 11       		.uleb128 0x11
 8024 01a5 01       		.uleb128 0x1
 8025 01a6 12       		.uleb128 0x12
 8026 01a7 01       		.uleb128 0x1
 8027 01a8 00       		.byte	0
 8028 01a9 00       		.byte	0
 8029 01aa 24       		.uleb128 0x24
 8030 01ab 34       		.uleb128 0x34
 8031 01ac 00       		.byte	0
 8032 01ad 31       		.uleb128 0x31
 8033 01ae 13       		.uleb128 0x13
 8034 01af 00       		.byte	0
 8035 01b0 00       		.byte	0
 8036 01b1 25       		.uleb128 0x25
 8037 01b2 2E       		.uleb128 0x2e
 8038 01b3 01       		.byte	0x1
 8039 01b4 31       		.uleb128 0x31
 8040 01b5 13       		.uleb128 0x13
 8041 01b6 11       		.uleb128 0x11
 8042 01b7 01       		.uleb128 0x1
 8043 01b8 12       		.uleb128 0x12
 8044 01b9 01       		.uleb128 0x1
 8045 01ba 40       		.uleb128 0x40
 8046 01bb 06       		.uleb128 0x6
 8047 01bc 9742     		.uleb128 0x2117
 8048 01be 0C       		.uleb128 0xc
 8049 01bf 01       		.uleb128 0x1
 8050 01c0 13       		.uleb128 0x13
 8051 01c1 00       		.byte	0
 8052 01c2 00       		.byte	0
 8053 01c3 26       		.uleb128 0x26
 8054 01c4 0B       		.uleb128 0xb
 8055 01c5 01       		.byte	0x1
 8056 01c6 55       		.uleb128 0x55
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 242


 8057 01c7 06       		.uleb128 0x6
 8058 01c8 01       		.uleb128 0x1
 8059 01c9 13       		.uleb128 0x13
 8060 01ca 00       		.byte	0
 8061 01cb 00       		.byte	0
 8062 01cc 27       		.uleb128 0x27
 8063 01cd 0B       		.uleb128 0xb
 8064 01ce 01       		.byte	0x1
 8065 01cf 55       		.uleb128 0x55
 8066 01d0 06       		.uleb128 0x6
 8067 01d1 00       		.byte	0
 8068 01d2 00       		.byte	0
 8069 01d3 28       		.uleb128 0x28
 8070 01d4 898201   		.uleb128 0x4109
 8071 01d7 00       		.byte	0
 8072 01d8 11       		.uleb128 0x11
 8073 01d9 01       		.uleb128 0x1
 8074 01da 9542     		.uleb128 0x2115
 8075 01dc 0C       		.uleb128 0xc
 8076 01dd 31       		.uleb128 0x31
 8077 01de 13       		.uleb128 0x13
 8078 01df 00       		.byte	0
 8079 01e0 00       		.byte	0
 8080 01e1 29       		.uleb128 0x29
 8081 01e2 898201   		.uleb128 0x4109
 8082 01e5 00       		.byte	0
 8083 01e6 11       		.uleb128 0x11
 8084 01e7 01       		.uleb128 0x1
 8085 01e8 31       		.uleb128 0x31
 8086 01e9 13       		.uleb128 0x13
 8087 01ea 00       		.byte	0
 8088 01eb 00       		.byte	0
 8089 01ec 2A       		.uleb128 0x2a
 8090 01ed 898201   		.uleb128 0x4109
 8091 01f0 01       		.byte	0x1
 8092 01f1 11       		.uleb128 0x11
 8093 01f2 01       		.uleb128 0x1
 8094 01f3 9542     		.uleb128 0x2115
 8095 01f5 0C       		.uleb128 0xc
 8096 01f6 31       		.uleb128 0x31
 8097 01f7 13       		.uleb128 0x13
 8098 01f8 01       		.uleb128 0x1
 8099 01f9 13       		.uleb128 0x13
 8100 01fa 00       		.byte	0
 8101 01fb 00       		.byte	0
 8102 01fc 2B       		.uleb128 0x2b
 8103 01fd 8A8201   		.uleb128 0x410a
 8104 0200 00       		.byte	0
 8105 0201 02       		.uleb128 0x2
 8106 0202 0A       		.uleb128 0xa
 8107 0203 9142     		.uleb128 0x2111
 8108 0205 0A       		.uleb128 0xa
 8109 0206 00       		.byte	0
 8110 0207 00       		.byte	0
 8111 0208 2C       		.uleb128 0x2c
 8112 0209 2E       		.uleb128 0x2e
 8113 020a 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 243


 8114 020b 3F       		.uleb128 0x3f
 8115 020c 0C       		.uleb128 0xc
 8116 020d 03       		.uleb128 0x3
 8117 020e 0E       		.uleb128 0xe
 8118 020f 3A       		.uleb128 0x3a
 8119 0210 0B       		.uleb128 0xb
 8120 0211 3B       		.uleb128 0x3b
 8121 0212 05       		.uleb128 0x5
 8122 0213 27       		.uleb128 0x27
 8123 0214 0C       		.uleb128 0xc
 8124 0215 49       		.uleb128 0x49
 8125 0216 13       		.uleb128 0x13
 8126 0217 11       		.uleb128 0x11
 8127 0218 01       		.uleb128 0x1
 8128 0219 12       		.uleb128 0x12
 8129 021a 01       		.uleb128 0x1
 8130 021b 40       		.uleb128 0x40
 8131 021c 06       		.uleb128 0x6
 8132 021d 9742     		.uleb128 0x2117
 8133 021f 0C       		.uleb128 0xc
 8134 0220 01       		.uleb128 0x1
 8135 0221 13       		.uleb128 0x13
 8136 0222 00       		.byte	0
 8137 0223 00       		.byte	0
 8138 0224 2D       		.uleb128 0x2d
 8139 0225 05       		.uleb128 0x5
 8140 0226 00       		.byte	0
 8141 0227 03       		.uleb128 0x3
 8142 0228 0E       		.uleb128 0xe
 8143 0229 3A       		.uleb128 0x3a
 8144 022a 0B       		.uleb128 0xb
 8145 022b 3B       		.uleb128 0x3b
 8146 022c 05       		.uleb128 0x5
 8147 022d 49       		.uleb128 0x49
 8148 022e 13       		.uleb128 0x13
 8149 022f 02       		.uleb128 0x2
 8150 0230 06       		.uleb128 0x6
 8151 0231 00       		.byte	0
 8152 0232 00       		.byte	0
 8153 0233 2E       		.uleb128 0x2e
 8154 0234 34       		.uleb128 0x34
 8155 0235 00       		.byte	0
 8156 0236 03       		.uleb128 0x3
 8157 0237 0E       		.uleb128 0xe
 8158 0238 3A       		.uleb128 0x3a
 8159 0239 0B       		.uleb128 0xb
 8160 023a 3B       		.uleb128 0x3b
 8161 023b 05       		.uleb128 0x5
 8162 023c 49       		.uleb128 0x49
 8163 023d 13       		.uleb128 0x13
 8164 023e 02       		.uleb128 0x2
 8165 023f 06       		.uleb128 0x6
 8166 0240 00       		.byte	0
 8167 0241 00       		.byte	0
 8168 0242 2F       		.uleb128 0x2f
 8169 0243 34       		.uleb128 0x34
 8170 0244 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 244


 8171 0245 03       		.uleb128 0x3
 8172 0246 0E       		.uleb128 0xe
 8173 0247 3A       		.uleb128 0x3a
 8174 0248 0B       		.uleb128 0xb
 8175 0249 3B       		.uleb128 0x3b
 8176 024a 05       		.uleb128 0x5
 8177 024b 49       		.uleb128 0x49
 8178 024c 13       		.uleb128 0x13
 8179 024d 02       		.uleb128 0x2
 8180 024e 0A       		.uleb128 0xa
 8181 024f 00       		.byte	0
 8182 0250 00       		.byte	0
 8183 0251 30       		.uleb128 0x30
 8184 0252 898201   		.uleb128 0x4109
 8185 0255 01       		.byte	0x1
 8186 0256 11       		.uleb128 0x11
 8187 0257 01       		.uleb128 0x1
 8188 0258 31       		.uleb128 0x31
 8189 0259 13       		.uleb128 0x13
 8190 025a 01       		.uleb128 0x1
 8191 025b 13       		.uleb128 0x13
 8192 025c 00       		.byte	0
 8193 025d 00       		.byte	0
 8194 025e 31       		.uleb128 0x31
 8195 025f 898201   		.uleb128 0x4109
 8196 0262 01       		.byte	0x1
 8197 0263 11       		.uleb128 0x11
 8198 0264 01       		.uleb128 0x1
 8199 0265 31       		.uleb128 0x31
 8200 0266 13       		.uleb128 0x13
 8201 0267 00       		.byte	0
 8202 0268 00       		.byte	0
 8203 0269 32       		.uleb128 0x32
 8204 026a 1D       		.uleb128 0x1d
 8205 026b 01       		.byte	0x1
 8206 026c 31       		.uleb128 0x31
 8207 026d 13       		.uleb128 0x13
 8208 026e 52       		.uleb128 0x52
 8209 026f 01       		.uleb128 0x1
 8210 0270 55       		.uleb128 0x55
 8211 0271 06       		.uleb128 0x6
 8212 0272 58       		.uleb128 0x58
 8213 0273 0B       		.uleb128 0xb
 8214 0274 59       		.uleb128 0x59
 8215 0275 05       		.uleb128 0x5
 8216 0276 01       		.uleb128 0x1
 8217 0277 13       		.uleb128 0x13
 8218 0278 00       		.byte	0
 8219 0279 00       		.byte	0
 8220 027a 33       		.uleb128 0x33
 8221 027b 1D       		.uleb128 0x1d
 8222 027c 01       		.byte	0x1
 8223 027d 31       		.uleb128 0x31
 8224 027e 13       		.uleb128 0x13
 8225 027f 11       		.uleb128 0x11
 8226 0280 01       		.uleb128 0x1
 8227 0281 12       		.uleb128 0x12
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 245


 8228 0282 01       		.uleb128 0x1
 8229 0283 58       		.uleb128 0x58
 8230 0284 0B       		.uleb128 0xb
 8231 0285 59       		.uleb128 0x59
 8232 0286 05       		.uleb128 0x5
 8233 0287 00       		.byte	0
 8234 0288 00       		.byte	0
 8235 0289 34       		.uleb128 0x34
 8236 028a 1D       		.uleb128 0x1d
 8237 028b 01       		.byte	0x1
 8238 028c 31       		.uleb128 0x31
 8239 028d 13       		.uleb128 0x13
 8240 028e 11       		.uleb128 0x11
 8241 028f 01       		.uleb128 0x1
 8242 0290 12       		.uleb128 0x12
 8243 0291 01       		.uleb128 0x1
 8244 0292 58       		.uleb128 0x58
 8245 0293 0B       		.uleb128 0xb
 8246 0294 59       		.uleb128 0x59
 8247 0295 05       		.uleb128 0x5
 8248 0296 01       		.uleb128 0x1
 8249 0297 13       		.uleb128 0x13
 8250 0298 00       		.byte	0
 8251 0299 00       		.byte	0
 8252 029a 35       		.uleb128 0x35
 8253 029b 2E       		.uleb128 0x2e
 8254 029c 01       		.byte	0x1
 8255 029d 3F       		.uleb128 0x3f
 8256 029e 0C       		.uleb128 0xc
 8257 029f 03       		.uleb128 0x3
 8258 02a0 0E       		.uleb128 0xe
 8259 02a1 3A       		.uleb128 0x3a
 8260 02a2 0B       		.uleb128 0xb
 8261 02a3 3B       		.uleb128 0x3b
 8262 02a4 05       		.uleb128 0x5
 8263 02a5 27       		.uleb128 0x27
 8264 02a6 0C       		.uleb128 0xc
 8265 02a7 11       		.uleb128 0x11
 8266 02a8 01       		.uleb128 0x1
 8267 02a9 12       		.uleb128 0x12
 8268 02aa 01       		.uleb128 0x1
 8269 02ab 40       		.uleb128 0x40
 8270 02ac 06       		.uleb128 0x6
 8271 02ad 9742     		.uleb128 0x2117
 8272 02af 0C       		.uleb128 0xc
 8273 02b0 01       		.uleb128 0x1
 8274 02b1 13       		.uleb128 0x13
 8275 02b2 00       		.byte	0
 8276 02b3 00       		.byte	0
 8277 02b4 36       		.uleb128 0x36
 8278 02b5 2E       		.uleb128 0x2e
 8279 02b6 01       		.byte	0x1
 8280 02b7 3F       		.uleb128 0x3f
 8281 02b8 0C       		.uleb128 0xc
 8282 02b9 03       		.uleb128 0x3
 8283 02ba 0E       		.uleb128 0xe
 8284 02bb 3A       		.uleb128 0x3a
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 246


 8285 02bc 0B       		.uleb128 0xb
 8286 02bd 3B       		.uleb128 0x3b
 8287 02be 05       		.uleb128 0x5
 8288 02bf 27       		.uleb128 0x27
 8289 02c0 0C       		.uleb128 0xc
 8290 02c1 49       		.uleb128 0x49
 8291 02c2 13       		.uleb128 0x13
 8292 02c3 11       		.uleb128 0x11
 8293 02c4 01       		.uleb128 0x1
 8294 02c5 12       		.uleb128 0x12
 8295 02c6 01       		.uleb128 0x1
 8296 02c7 40       		.uleb128 0x40
 8297 02c8 0A       		.uleb128 0xa
 8298 02c9 9742     		.uleb128 0x2117
 8299 02cb 0C       		.uleb128 0xc
 8300 02cc 01       		.uleb128 0x1
 8301 02cd 13       		.uleb128 0x13
 8302 02ce 00       		.byte	0
 8303 02cf 00       		.byte	0
 8304 02d0 37       		.uleb128 0x37
 8305 02d1 34       		.uleb128 0x34
 8306 02d2 00       		.byte	0
 8307 02d3 31       		.uleb128 0x31
 8308 02d4 13       		.uleb128 0x13
 8309 02d5 02       		.uleb128 0x2
 8310 02d6 0A       		.uleb128 0xa
 8311 02d7 00       		.byte	0
 8312 02d8 00       		.byte	0
 8313 02d9 38       		.uleb128 0x38
 8314 02da 05       		.uleb128 0x5
 8315 02db 00       		.byte	0
 8316 02dc 31       		.uleb128 0x31
 8317 02dd 13       		.uleb128 0x13
 8318 02de 02       		.uleb128 0x2
 8319 02df 0A       		.uleb128 0xa
 8320 02e0 00       		.byte	0
 8321 02e1 00       		.byte	0
 8322 02e2 39       		.uleb128 0x39
 8323 02e3 2E       		.uleb128 0x2e
 8324 02e4 01       		.byte	0x1
 8325 02e5 3F       		.uleb128 0x3f
 8326 02e6 0C       		.uleb128 0xc
 8327 02e7 03       		.uleb128 0x3
 8328 02e8 0E       		.uleb128 0xe
 8329 02e9 3A       		.uleb128 0x3a
 8330 02ea 0B       		.uleb128 0xb
 8331 02eb 3B       		.uleb128 0x3b
 8332 02ec 05       		.uleb128 0x5
 8333 02ed 27       		.uleb128 0x27
 8334 02ee 0C       		.uleb128 0xc
 8335 02ef 11       		.uleb128 0x11
 8336 02f0 01       		.uleb128 0x1
 8337 02f1 12       		.uleb128 0x12
 8338 02f2 01       		.uleb128 0x1
 8339 02f3 40       		.uleb128 0x40
 8340 02f4 0A       		.uleb128 0xa
 8341 02f5 9742     		.uleb128 0x2117
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 247


 8342 02f7 0C       		.uleb128 0xc
 8343 02f8 01       		.uleb128 0x1
 8344 02f9 13       		.uleb128 0x13
 8345 02fa 00       		.byte	0
 8346 02fb 00       		.byte	0
 8347 02fc 3A       		.uleb128 0x3a
 8348 02fd 2E       		.uleb128 0x2e
 8349 02fe 00       		.byte	0
 8350 02ff 3F       		.uleb128 0x3f
 8351 0300 0C       		.uleb128 0xc
 8352 0301 03       		.uleb128 0x3
 8353 0302 0E       		.uleb128 0xe
 8354 0303 3A       		.uleb128 0x3a
 8355 0304 0B       		.uleb128 0xb
 8356 0305 3B       		.uleb128 0x3b
 8357 0306 05       		.uleb128 0x5
 8358 0307 27       		.uleb128 0x27
 8359 0308 0C       		.uleb128 0xc
 8360 0309 11       		.uleb128 0x11
 8361 030a 01       		.uleb128 0x1
 8362 030b 12       		.uleb128 0x12
 8363 030c 01       		.uleb128 0x1
 8364 030d 40       		.uleb128 0x40
 8365 030e 0A       		.uleb128 0xa
 8366 030f 9742     		.uleb128 0x2117
 8367 0311 0C       		.uleb128 0xc
 8368 0312 00       		.byte	0
 8369 0313 00       		.byte	0
 8370 0314 3B       		.uleb128 0x3b
 8371 0315 34       		.uleb128 0x34
 8372 0316 00       		.byte	0
 8373 0317 03       		.uleb128 0x3
 8374 0318 0E       		.uleb128 0xe
 8375 0319 3A       		.uleb128 0x3a
 8376 031a 0B       		.uleb128 0xb
 8377 031b 3B       		.uleb128 0x3b
 8378 031c 05       		.uleb128 0x5
 8379 031d 49       		.uleb128 0x49
 8380 031e 13       		.uleb128 0x13
 8381 031f 1C       		.uleb128 0x1c
 8382 0320 0B       		.uleb128 0xb
 8383 0321 00       		.byte	0
 8384 0322 00       		.byte	0
 8385 0323 3C       		.uleb128 0x3c
 8386 0324 2E       		.uleb128 0x2e
 8387 0325 00       		.byte	0
 8388 0326 3F       		.uleb128 0x3f
 8389 0327 0C       		.uleb128 0xc
 8390 0328 03       		.uleb128 0x3
 8391 0329 0E       		.uleb128 0xe
 8392 032a 3A       		.uleb128 0x3a
 8393 032b 0B       		.uleb128 0xb
 8394 032c 3B       		.uleb128 0x3b
 8395 032d 05       		.uleb128 0x5
 8396 032e 27       		.uleb128 0x27
 8397 032f 0C       		.uleb128 0xc
 8398 0330 49       		.uleb128 0x49
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 248


 8399 0331 13       		.uleb128 0x13
 8400 0332 11       		.uleb128 0x11
 8401 0333 01       		.uleb128 0x1
 8402 0334 12       		.uleb128 0x12
 8403 0335 01       		.uleb128 0x1
 8404 0336 40       		.uleb128 0x40
 8405 0337 0A       		.uleb128 0xa
 8406 0338 9742     		.uleb128 0x2117
 8407 033a 0C       		.uleb128 0xc
 8408 033b 00       		.byte	0
 8409 033c 00       		.byte	0
 8410 033d 3D       		.uleb128 0x3d
 8411 033e 0B       		.uleb128 0xb
 8412 033f 01       		.byte	0x1
 8413 0340 11       		.uleb128 0x11
 8414 0341 01       		.uleb128 0x1
 8415 0342 12       		.uleb128 0x12
 8416 0343 01       		.uleb128 0x1
 8417 0344 01       		.uleb128 0x1
 8418 0345 13       		.uleb128 0x13
 8419 0346 00       		.byte	0
 8420 0347 00       		.byte	0
 8421 0348 3E       		.uleb128 0x3e
 8422 0349 2E       		.uleb128 0x2e
 8423 034a 01       		.byte	0x1
 8424 034b 03       		.uleb128 0x3
 8425 034c 0E       		.uleb128 0xe
 8426 034d 3A       		.uleb128 0x3a
 8427 034e 0B       		.uleb128 0xb
 8428 034f 3B       		.uleb128 0x3b
 8429 0350 05       		.uleb128 0x5
 8430 0351 27       		.uleb128 0x27
 8431 0352 0C       		.uleb128 0xc
 8432 0353 11       		.uleb128 0x11
 8433 0354 01       		.uleb128 0x1
 8434 0355 12       		.uleb128 0x12
 8435 0356 01       		.uleb128 0x1
 8436 0357 40       		.uleb128 0x40
 8437 0358 06       		.uleb128 0x6
 8438 0359 9742     		.uleb128 0x2117
 8439 035b 0C       		.uleb128 0xc
 8440 035c 01       		.uleb128 0x1
 8441 035d 13       		.uleb128 0x13
 8442 035e 00       		.byte	0
 8443 035f 00       		.byte	0
 8444 0360 3F       		.uleb128 0x3f
 8445 0361 34       		.uleb128 0x34
 8446 0362 00       		.byte	0
 8447 0363 31       		.uleb128 0x31
 8448 0364 13       		.uleb128 0x13
 8449 0365 1C       		.uleb128 0x1c
 8450 0366 0D       		.uleb128 0xd
 8451 0367 00       		.byte	0
 8452 0368 00       		.byte	0
 8453 0369 40       		.uleb128 0x40
 8454 036a 898201   		.uleb128 0x4109
 8455 036d 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 249


 8456 036e 11       		.uleb128 0x11
 8457 036f 01       		.uleb128 0x1
 8458 0370 9542     		.uleb128 0x2115
 8459 0372 0C       		.uleb128 0xc
 8460 0373 31       		.uleb128 0x31
 8461 0374 13       		.uleb128 0x13
 8462 0375 00       		.byte	0
 8463 0376 00       		.byte	0
 8464 0377 41       		.uleb128 0x41
 8465 0378 05       		.uleb128 0x5
 8466 0379 00       		.byte	0
 8467 037a 03       		.uleb128 0x3
 8468 037b 0E       		.uleb128 0xe
 8469 037c 3A       		.uleb128 0x3a
 8470 037d 0B       		.uleb128 0xb
 8471 037e 3B       		.uleb128 0x3b
 8472 037f 05       		.uleb128 0x5
 8473 0380 49       		.uleb128 0x49
 8474 0381 13       		.uleb128 0x13
 8475 0382 02       		.uleb128 0x2
 8476 0383 0A       		.uleb128 0xa
 8477 0384 00       		.byte	0
 8478 0385 00       		.byte	0
 8479 0386 42       		.uleb128 0x42
 8480 0387 34       		.uleb128 0x34
 8481 0388 00       		.byte	0
 8482 0389 03       		.uleb128 0x3
 8483 038a 0E       		.uleb128 0xe
 8484 038b 3A       		.uleb128 0x3a
 8485 038c 0B       		.uleb128 0xb
 8486 038d 3B       		.uleb128 0x3b
 8487 038e 05       		.uleb128 0x5
 8488 038f 49       		.uleb128 0x49
 8489 0390 13       		.uleb128 0x13
 8490 0391 3F       		.uleb128 0x3f
 8491 0392 0C       		.uleb128 0xc
 8492 0393 02       		.uleb128 0x2
 8493 0394 0A       		.uleb128 0xa
 8494 0395 00       		.byte	0
 8495 0396 00       		.byte	0
 8496 0397 43       		.uleb128 0x43
 8497 0398 2E       		.uleb128 0x2e
 8498 0399 01       		.byte	0x1
 8499 039a 3F       		.uleb128 0x3f
 8500 039b 0C       		.uleb128 0xc
 8501 039c 03       		.uleb128 0x3
 8502 039d 0E       		.uleb128 0xe
 8503 039e 3A       		.uleb128 0x3a
 8504 039f 0B       		.uleb128 0xb
 8505 03a0 3B       		.uleb128 0x3b
 8506 03a1 05       		.uleb128 0x5
 8507 03a2 27       		.uleb128 0x27
 8508 03a3 0C       		.uleb128 0xc
 8509 03a4 3C       		.uleb128 0x3c
 8510 03a5 0C       		.uleb128 0xc
 8511 03a6 01       		.uleb128 0x1
 8512 03a7 13       		.uleb128 0x13
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 250


 8513 03a8 00       		.byte	0
 8514 03a9 00       		.byte	0
 8515 03aa 44       		.uleb128 0x44
 8516 03ab 2E       		.uleb128 0x2e
 8517 03ac 01       		.byte	0x1
 8518 03ad 3F       		.uleb128 0x3f
 8519 03ae 0C       		.uleb128 0xc
 8520 03af 03       		.uleb128 0x3
 8521 03b0 0E       		.uleb128 0xe
 8522 03b1 3A       		.uleb128 0x3a
 8523 03b2 0B       		.uleb128 0xb
 8524 03b3 3B       		.uleb128 0x3b
 8525 03b4 05       		.uleb128 0x5
 8526 03b5 27       		.uleb128 0x27
 8527 03b6 0C       		.uleb128 0xc
 8528 03b7 49       		.uleb128 0x49
 8529 03b8 13       		.uleb128 0x13
 8530 03b9 3C       		.uleb128 0x3c
 8531 03ba 0C       		.uleb128 0xc
 8532 03bb 01       		.uleb128 0x1
 8533 03bc 13       		.uleb128 0x13
 8534 03bd 00       		.byte	0
 8535 03be 00       		.byte	0
 8536 03bf 45       		.uleb128 0x45
 8537 03c0 2E       		.uleb128 0x2e
 8538 03c1 01       		.byte	0x1
 8539 03c2 3F       		.uleb128 0x3f
 8540 03c3 0C       		.uleb128 0xc
 8541 03c4 03       		.uleb128 0x3
 8542 03c5 0E       		.uleb128 0xe
 8543 03c6 3A       		.uleb128 0x3a
 8544 03c7 0B       		.uleb128 0xb
 8545 03c8 3B       		.uleb128 0x3b
 8546 03c9 0B       		.uleb128 0xb
 8547 03ca 27       		.uleb128 0x27
 8548 03cb 0C       		.uleb128 0xc
 8549 03cc 49       		.uleb128 0x49
 8550 03cd 13       		.uleb128 0x13
 8551 03ce 3C       		.uleb128 0x3c
 8552 03cf 0C       		.uleb128 0xc
 8553 03d0 01       		.uleb128 0x1
 8554 03d1 13       		.uleb128 0x13
 8555 03d2 00       		.byte	0
 8556 03d3 00       		.byte	0
 8557 03d4 46       		.uleb128 0x46
 8558 03d5 2E       		.uleb128 0x2e
 8559 03d6 01       		.byte	0x1
 8560 03d7 3F       		.uleb128 0x3f
 8561 03d8 0C       		.uleb128 0xc
 8562 03d9 03       		.uleb128 0x3
 8563 03da 0E       		.uleb128 0xe
 8564 03db 3A       		.uleb128 0x3a
 8565 03dc 0B       		.uleb128 0xb
 8566 03dd 3B       		.uleb128 0x3b
 8567 03de 0B       		.uleb128 0xb
 8568 03df 27       		.uleb128 0x27
 8569 03e0 0C       		.uleb128 0xc
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 251


 8570 03e1 3C       		.uleb128 0x3c
 8571 03e2 0C       		.uleb128 0xc
 8572 03e3 01       		.uleb128 0x1
 8573 03e4 13       		.uleb128 0x13
 8574 03e5 00       		.byte	0
 8575 03e6 00       		.byte	0
 8576 03e7 47       		.uleb128 0x47
 8577 03e8 2E       		.uleb128 0x2e
 8578 03e9 00       		.byte	0
 8579 03ea 3F       		.uleb128 0x3f
 8580 03eb 0C       		.uleb128 0xc
 8581 03ec 03       		.uleb128 0x3
 8582 03ed 0E       		.uleb128 0xe
 8583 03ee 3A       		.uleb128 0x3a
 8584 03ef 0B       		.uleb128 0xb
 8585 03f0 3B       		.uleb128 0x3b
 8586 03f1 0B       		.uleb128 0xb
 8587 03f2 27       		.uleb128 0x27
 8588 03f3 0C       		.uleb128 0xc
 8589 03f4 3C       		.uleb128 0x3c
 8590 03f5 0C       		.uleb128 0xc
 8591 03f6 00       		.byte	0
 8592 03f7 00       		.byte	0
 8593 03f8 48       		.uleb128 0x48
 8594 03f9 2E       		.uleb128 0x2e
 8595 03fa 00       		.byte	0
 8596 03fb 3F       		.uleb128 0x3f
 8597 03fc 0C       		.uleb128 0xc
 8598 03fd 03       		.uleb128 0x3
 8599 03fe 0E       		.uleb128 0xe
 8600 03ff 3A       		.uleb128 0x3a
 8601 0400 0B       		.uleb128 0xb
 8602 0401 3B       		.uleb128 0x3b
 8603 0402 0B       		.uleb128 0xb
 8604 0403 27       		.uleb128 0x27
 8605 0404 0C       		.uleb128 0xc
 8606 0405 49       		.uleb128 0x49
 8607 0406 13       		.uleb128 0x13
 8608 0407 3C       		.uleb128 0x3c
 8609 0408 0C       		.uleb128 0xc
 8610 0409 00       		.byte	0
 8611 040a 00       		.byte	0
 8612 040b 49       		.uleb128 0x49
 8613 040c 2E       		.uleb128 0x2e
 8614 040d 01       		.byte	0x1
 8615 040e 3F       		.uleb128 0x3f
 8616 040f 0C       		.uleb128 0xc
 8617 0410 03       		.uleb128 0x3
 8618 0411 0E       		.uleb128 0xe
 8619 0412 3A       		.uleb128 0x3a
 8620 0413 0B       		.uleb128 0xb
 8621 0414 3B       		.uleb128 0x3b
 8622 0415 05       		.uleb128 0x5
 8623 0416 27       		.uleb128 0x27
 8624 0417 0C       		.uleb128 0xc
 8625 0418 3C       		.uleb128 0x3c
 8626 0419 0C       		.uleb128 0xc
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 252


 8627 041a 00       		.byte	0
 8628 041b 00       		.byte	0
 8629 041c 00       		.byte	0
 8630              		.section	.debug_loc,"",%progbits
 8631              	.Ldebug_loc0:
 8632              	.LLST0:
 8633 0000 00000000 		.4byte	.LVL0-.Ltext0
 8634 0004 0A000000 		.4byte	.LVL2-.Ltext0
 8635 0008 0100     		.2byte	0x1
 8636 000a 50       		.byte	0x50
 8637 000b 0A000000 		.4byte	.LVL2-.Ltext0
 8638 000f 20000000 		.4byte	.LFE15-.Ltext0
 8639 0013 0400     		.2byte	0x4
 8640 0015 F3       		.byte	0xf3
 8641 0016 01       		.uleb128 0x1
 8642 0017 50       		.byte	0x50
 8643 0018 9F       		.byte	0x9f
 8644 0019 00000000 		.4byte	0
 8645 001d 00000000 		.4byte	0
 8646              	.LLST1:
 8647 0021 00000000 		.4byte	.LVL0-.Ltext0
 8648 0025 1A000000 		.4byte	.LVL4-.Ltext0
 8649 0029 0200     		.2byte	0x2
 8650 002b 30       		.byte	0x30
 8651 002c 9F       		.byte	0x9f
 8652 002d 1A000000 		.4byte	.LVL4-.Ltext0
 8653 0031 20000000 		.4byte	.LFE15-.Ltext0
 8654 0035 0100     		.2byte	0x1
 8655 0037 50       		.byte	0x50
 8656 0038 00000000 		.4byte	0
 8657 003c 00000000 		.4byte	0
 8658              	.LLST3:
 8659 0040 08000000 		.4byte	.LVL1-.Ltext0
 8660 0044 0A000000 		.4byte	.LVL2-.Ltext0
 8661 0048 0100     		.2byte	0x1
 8662 004a 50       		.byte	0x50
 8663 004b 0A000000 		.4byte	.LVL2-.Ltext0
 8664 004f 18000000 		.4byte	.LVL3-.Ltext0
 8665 0053 0400     		.2byte	0x4
 8666 0055 F3       		.byte	0xf3
 8667 0056 01       		.uleb128 0x1
 8668 0057 50       		.byte	0x50
 8669 0058 9F       		.byte	0x9f
 8670 0059 00000000 		.4byte	0
 8671 005d 00000000 		.4byte	0
 8672              	.LLST4:
 8673 0061 30000000 		.4byte	.LVL5-.Ltext0
 8674 0065 32000000 		.4byte	.LVL6-.Ltext0
 8675 0069 0500     		.2byte	0x5
 8676 006b 72       		.byte	0x72
 8677 006c 0C       		.sleb128 12
 8678 006d 06       		.byte	0x6
 8679 006e 23       		.byte	0x23
 8680 006f 0C       		.uleb128 0xc
 8681 0070 32000000 		.4byte	.LVL6-.Ltext0
 8682 0074 34000000 		.4byte	.LVL7-.Ltext0
 8683 0078 0200     		.2byte	0x2
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 253


 8684 007a 72       		.byte	0x72
 8685 007b 0C       		.sleb128 12
 8686 007c 34000000 		.4byte	.LVL7-.Ltext0
 8687 0080 36000000 		.4byte	.LVL8-.Ltext0
 8688 0084 0100     		.2byte	0x1
 8689 0086 52       		.byte	0x52
 8690 0087 00000000 		.4byte	0
 8691 008b 00000000 		.4byte	0
 8692              	.LLST5:
 8693 008f 40000000 		.4byte	.LFB51-.Ltext0
 8694 0093 42000000 		.4byte	.LCFI0-.Ltext0
 8695 0097 0200     		.2byte	0x2
 8696 0099 7D       		.byte	0x7d
 8697 009a 00       		.sleb128 0
 8698 009b 42000000 		.4byte	.LCFI0-.Ltext0
 8699 009f 76000000 		.4byte	.LCFI1-.Ltext0
 8700 00a3 0200     		.2byte	0x2
 8701 00a5 7D       		.byte	0x7d
 8702 00a6 18       		.sleb128 24
 8703 00a7 76000000 		.4byte	.LCFI1-.Ltext0
 8704 00ab 7A000000 		.4byte	.LCFI2-.Ltext0
 8705 00af 0200     		.2byte	0x2
 8706 00b1 7D       		.byte	0x7d
 8707 00b2 00       		.sleb128 0
 8708 00b3 7A000000 		.4byte	.LCFI2-.Ltext0
 8709 00b7 8E000000 		.4byte	.LCFI3-.Ltext0
 8710 00bb 0200     		.2byte	0x2
 8711 00bd 7D       		.byte	0x7d
 8712 00be 18       		.sleb128 24
 8713 00bf 8E000000 		.4byte	.LCFI3-.Ltext0
 8714 00c3 94000000 		.4byte	.LCFI4-.Ltext0
 8715 00c7 0200     		.2byte	0x2
 8716 00c9 7D       		.byte	0x7d
 8717 00ca 00       		.sleb128 0
 8718 00cb 94000000 		.4byte	.LCFI4-.Ltext0
 8719 00cf AC000000 		.4byte	.LFE51-.Ltext0
 8720 00d3 0200     		.2byte	0x2
 8721 00d5 7D       		.byte	0x7d
 8722 00d6 18       		.sleb128 24
 8723 00d7 00000000 		.4byte	0
 8724 00db 00000000 		.4byte	0
 8725              	.LLST6:
 8726 00df 40000000 		.4byte	.LVL9-.Ltext0
 8727 00e3 4A000000 		.4byte	.LVL11-.Ltext0
 8728 00e7 0100     		.2byte	0x1
 8729 00e9 50       		.byte	0x50
 8730 00ea 4A000000 		.4byte	.LVL11-.Ltext0
 8731 00ee 76000000 		.4byte	.LVL13-.Ltext0
 8732 00f2 0100     		.2byte	0x1
 8733 00f4 55       		.byte	0x55
 8734 00f5 76000000 		.4byte	.LVL13-.Ltext0
 8735 00f9 79000000 		.4byte	.LVL14-1-.Ltext0
 8736 00fd 0300     		.2byte	0x3
 8737 00ff 72       		.byte	0x72
 8738 0100 7F       		.sleb128 -1
 8739 0101 9F       		.byte	0x9f
 8740 0102 79000000 		.4byte	.LVL14-1-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 254


 8741 0106 7A000000 		.4byte	.LVL14-.Ltext0
 8742 010a 0400     		.2byte	0x4
 8743 010c F3       		.byte	0xf3
 8744 010d 01       		.uleb128 0x1
 8745 010e 50       		.byte	0x50
 8746 010f 9F       		.byte	0x9f
 8747 0110 7A000000 		.4byte	.LVL14-.Ltext0
 8748 0114 82000000 		.4byte	.LVL16-.Ltext0
 8749 0118 0100     		.2byte	0x1
 8750 011a 55       		.byte	0x55
 8751 011b 82000000 		.4byte	.LVL16-.Ltext0
 8752 011f 93000000 		.4byte	.LVL19-1-.Ltext0
 8753 0123 0300     		.2byte	0x3
 8754 0125 72       		.byte	0x72
 8755 0126 7F       		.sleb128 -1
 8756 0127 9F       		.byte	0x9f
 8757 0128 93000000 		.4byte	.LVL19-1-.Ltext0
 8758 012c AC000000 		.4byte	.LFE51-.Ltext0
 8759 0130 0400     		.2byte	0x4
 8760 0132 F3       		.byte	0xf3
 8761 0133 01       		.uleb128 0x1
 8762 0134 50       		.byte	0x50
 8763 0135 9F       		.byte	0x9f
 8764 0136 00000000 		.4byte	0
 8765 013a 00000000 		.4byte	0
 8766              	.LLST7:
 8767 013e 40000000 		.4byte	.LVL9-.Ltext0
 8768 0142 51000000 		.4byte	.LVL12-1-.Ltext0
 8769 0146 0100     		.2byte	0x1
 8770 0148 51       		.byte	0x51
 8771 0149 51000000 		.4byte	.LVL12-1-.Ltext0
 8772 014d 76000000 		.4byte	.LVL13-.Ltext0
 8773 0151 0100     		.2byte	0x1
 8774 0153 57       		.byte	0x57
 8775 0154 76000000 		.4byte	.LVL13-.Ltext0
 8776 0158 7A000000 		.4byte	.LVL14-.Ltext0
 8777 015c 0400     		.2byte	0x4
 8778 015e F3       		.byte	0xf3
 8779 015f 01       		.uleb128 0x1
 8780 0160 51       		.byte	0x51
 8781 0161 9F       		.byte	0x9f
 8782 0162 7A000000 		.4byte	.LVL14-.Ltext0
 8783 0166 8E000000 		.4byte	.LVL18-.Ltext0
 8784 016a 0100     		.2byte	0x1
 8785 016c 57       		.byte	0x57
 8786 016d 8E000000 		.4byte	.LVL18-.Ltext0
 8787 0171 94000000 		.4byte	.LVL19-.Ltext0
 8788 0175 0400     		.2byte	0x4
 8789 0177 F3       		.byte	0xf3
 8790 0178 01       		.uleb128 0x1
 8791 0179 51       		.byte	0x51
 8792 017a 9F       		.byte	0x9f
 8793 017b 94000000 		.4byte	.LVL19-.Ltext0
 8794 017f A8000000 		.4byte	.LVL21-.Ltext0
 8795 0183 0100     		.2byte	0x1
 8796 0185 57       		.byte	0x57
 8797 0186 A8000000 		.4byte	.LVL21-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 255


 8798 018a AC000000 		.4byte	.LFE51-.Ltext0
 8799 018e 0400     		.2byte	0x4
 8800 0190 F3       		.byte	0xf3
 8801 0191 01       		.uleb128 0x1
 8802 0192 51       		.byte	0x51
 8803 0193 9F       		.byte	0x9f
 8804 0194 00000000 		.4byte	0
 8805 0198 00000000 		.4byte	0
 8806              	.LLST8:
 8807 019c 7C000000 		.4byte	.LVL15-.Ltext0
 8808 01a0 8E000000 		.4byte	.LVL18-.Ltext0
 8809 01a4 0100     		.2byte	0x1
 8810 01a6 54       		.byte	0x54
 8811 01a7 94000000 		.4byte	.LVL19-.Ltext0
 8812 01ab A8000000 		.4byte	.LVL21-.Ltext0
 8813 01af 0100     		.2byte	0x1
 8814 01b1 54       		.byte	0x54
 8815 01b2 00000000 		.4byte	0
 8816 01b6 00000000 		.4byte	0
 8817              	.LLST9:
 8818 01ba 48000000 		.4byte	.LVL10-.Ltext0
 8819 01be 76000000 		.4byte	.LVL13-.Ltext0
 8820 01c2 0100     		.2byte	0x1
 8821 01c4 56       		.byte	0x56
 8822 01c5 7A000000 		.4byte	.LVL14-.Ltext0
 8823 01c9 8E000000 		.4byte	.LVL18-.Ltext0
 8824 01cd 0100     		.2byte	0x1
 8825 01cf 56       		.byte	0x56
 8826 01d0 94000000 		.4byte	.LVL19-.Ltext0
 8827 01d4 A8000000 		.4byte	.LVL21-.Ltext0
 8828 01d8 0100     		.2byte	0x1
 8829 01da 56       		.byte	0x56
 8830 01db 00000000 		.4byte	0
 8831 01df 00000000 		.4byte	0
 8832              	.LLST10:
 8833 01e3 86000000 		.4byte	.LVL17-.Ltext0
 8834 01e7 93000000 		.4byte	.LVL19-1-.Ltext0
 8835 01eb 0300     		.2byte	0x3
 8836 01ed 72       		.byte	0x72
 8837 01ee 7F       		.sleb128 -1
 8838 01ef 9F       		.byte	0x9f
 8839 01f0 93000000 		.4byte	.LVL19-1-.Ltext0
 8840 01f4 94000000 		.4byte	.LVL19-.Ltext0
 8841 01f8 0400     		.2byte	0x4
 8842 01fa F3       		.byte	0xf3
 8843 01fb 01       		.uleb128 0x1
 8844 01fc 50       		.byte	0x50
 8845 01fd 9F       		.byte	0x9f
 8846 01fe 00000000 		.4byte	0
 8847 0202 00000000 		.4byte	0
 8848              	.LLST11:
 8849 0206 86000000 		.4byte	.LVL17-.Ltext0
 8850 020a 8E000000 		.4byte	.LVL18-.Ltext0
 8851 020e 0100     		.2byte	0x1
 8852 0210 57       		.byte	0x57
 8853 0211 8E000000 		.4byte	.LVL18-.Ltext0
 8854 0215 94000000 		.4byte	.LVL19-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 256


 8855 0219 0400     		.2byte	0x4
 8856 021b F3       		.byte	0xf3
 8857 021c 01       		.uleb128 0x1
 8858 021d 51       		.byte	0x51
 8859 021e 9F       		.byte	0x9f
 8860 021f 00000000 		.4byte	0
 8861 0223 00000000 		.4byte	0
 8862              	.LLST12:
 8863 0227 AC000000 		.4byte	.LFB5-.Ltext0
 8864 022b B0000000 		.4byte	.LCFI5-.Ltext0
 8865 022f 0200     		.2byte	0x2
 8866 0231 7D       		.byte	0x7d
 8867 0232 00       		.sleb128 0
 8868 0233 B0000000 		.4byte	.LCFI5-.Ltext0
 8869 0237 30020000 		.4byte	.LFE5-.Ltext0
 8870 023b 0200     		.2byte	0x2
 8871 023d 7D       		.byte	0x7d
 8872 023e 28       		.sleb128 40
 8873 023f 00000000 		.4byte	0
 8874 0243 00000000 		.4byte	0
 8875              	.LLST13:
 8876 0247 AC000000 		.4byte	.LVL22-.Ltext0
 8877 024b B6000000 		.4byte	.LVL23-.Ltext0
 8878 024f 0100     		.2byte	0x1
 8879 0251 50       		.byte	0x50
 8880 0252 B6000000 		.4byte	.LVL23-.Ltext0
 8881 0256 6A010000 		.4byte	.LVL49-.Ltext0
 8882 025a 0100     		.2byte	0x1
 8883 025c 59       		.byte	0x59
 8884 025d 6A010000 		.4byte	.LVL49-.Ltext0
 8885 0261 1E020000 		.4byte	.LVL64-.Ltext0
 8886 0265 0400     		.2byte	0x4
 8887 0267 F3       		.byte	0xf3
 8888 0268 01       		.uleb128 0x1
 8889 0269 50       		.byte	0x50
 8890 026a 9F       		.byte	0x9f
 8891 026b 1E020000 		.4byte	.LVL64-.Ltext0
 8892 026f 26020000 		.4byte	.LVL66-.Ltext0
 8893 0273 0100     		.2byte	0x1
 8894 0275 59       		.byte	0x59
 8895 0276 26020000 		.4byte	.LVL66-.Ltext0
 8896 027a 30020000 		.4byte	.LFE5-.Ltext0
 8897 027e 0400     		.2byte	0x4
 8898 0280 F3       		.byte	0xf3
 8899 0281 01       		.uleb128 0x1
 8900 0282 50       		.byte	0x50
 8901 0283 9F       		.byte	0x9f
 8902 0284 00000000 		.4byte	0
 8903 0288 00000000 		.4byte	0
 8904              	.LLST14:
 8905 028c AC000000 		.4byte	.LVL22-.Ltext0
 8906 0290 BF000000 		.4byte	.LVL24-1-.Ltext0
 8907 0294 0100     		.2byte	0x1
 8908 0296 51       		.byte	0x51
 8909 0297 BF000000 		.4byte	.LVL24-1-.Ltext0
 8910 029b F6000000 		.4byte	.LVL33-.Ltext0
 8911 029f 0100     		.2byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 257


 8912 02a1 58       		.byte	0x58
 8913 02a2 F6000000 		.4byte	.LVL33-.Ltext0
 8914 02a6 F8000000 		.4byte	.LVL34-.Ltext0
 8915 02aa 0300     		.2byte	0x3
 8916 02ac 78       		.byte	0x78
 8917 02ad 71       		.sleb128 -15
 8918 02ae 9F       		.byte	0x9f
 8919 02af F8000000 		.4byte	.LVL34-.Ltext0
 8920 02b3 00010000 		.4byte	.LVL37-.Ltext0
 8921 02b7 0100     		.2byte	0x1
 8922 02b9 58       		.byte	0x58
 8923 02ba 00010000 		.4byte	.LVL37-.Ltext0
 8924 02be 22010000 		.4byte	.LVL42-.Ltext0
 8925 02c2 0300     		.2byte	0x3
 8926 02c4 78       		.byte	0x78
 8927 02c5 71       		.sleb128 -15
 8928 02c6 9F       		.byte	0x9f
 8929 02c7 22010000 		.4byte	.LVL42-.Ltext0
 8930 02cb 1E020000 		.4byte	.LVL64-.Ltext0
 8931 02cf 0400     		.2byte	0x4
 8932 02d1 F3       		.byte	0xf3
 8933 02d2 01       		.uleb128 0x1
 8934 02d3 51       		.byte	0x51
 8935 02d4 9F       		.byte	0x9f
 8936 02d5 1E020000 		.4byte	.LVL64-.Ltext0
 8937 02d9 26020000 		.4byte	.LVL66-.Ltext0
 8938 02dd 0100     		.2byte	0x1
 8939 02df 58       		.byte	0x58
 8940 02e0 26020000 		.4byte	.LVL66-.Ltext0
 8941 02e4 30020000 		.4byte	.LFE5-.Ltext0
 8942 02e8 0400     		.2byte	0x4
 8943 02ea F3       		.byte	0xf3
 8944 02eb 01       		.uleb128 0x1
 8945 02ec 51       		.byte	0x51
 8946 02ed 9F       		.byte	0x9f
 8947 02ee 00000000 		.4byte	0
 8948 02f2 00000000 		.4byte	0
 8949              	.LLST15:
 8950 02f6 AC000000 		.4byte	.LVL22-.Ltext0
 8951 02fa BF000000 		.4byte	.LVL24-1-.Ltext0
 8952 02fe 0100     		.2byte	0x1
 8953 0300 52       		.byte	0x52
 8954 0301 BF000000 		.4byte	.LVL24-1-.Ltext0
 8955 0305 30020000 		.4byte	.LFE5-.Ltext0
 8956 0309 0400     		.2byte	0x4
 8957 030b F3       		.byte	0xf3
 8958 030c 01       		.uleb128 0x1
 8959 030d 52       		.byte	0x52
 8960 030e 9F       		.byte	0x9f
 8961 030f 00000000 		.4byte	0
 8962 0313 00000000 		.4byte	0
 8963              	.LLST16:
 8964 0317 AC000000 		.4byte	.LVL22-.Ltext0
 8965 031b BF000000 		.4byte	.LVL24-1-.Ltext0
 8966 031f 0100     		.2byte	0x1
 8967 0321 53       		.byte	0x53
 8968 0322 BF000000 		.4byte	.LVL24-1-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 258


 8969 0326 70010000 		.4byte	.LVL50-.Ltext0
 8970 032a 0100     		.2byte	0x1
 8971 032c 57       		.byte	0x57
 8972 032d 70010000 		.4byte	.LVL50-.Ltext0
 8973 0331 1E020000 		.4byte	.LVL64-.Ltext0
 8974 0335 0400     		.2byte	0x4
 8975 0337 F3       		.byte	0xf3
 8976 0338 01       		.uleb128 0x1
 8977 0339 53       		.byte	0x53
 8978 033a 9F       		.byte	0x9f
 8979 033b 1E020000 		.4byte	.LVL64-.Ltext0
 8980 033f 26020000 		.4byte	.LVL66-.Ltext0
 8981 0343 0100     		.2byte	0x1
 8982 0345 57       		.byte	0x57
 8983 0346 26020000 		.4byte	.LVL66-.Ltext0
 8984 034a 30020000 		.4byte	.LFE5-.Ltext0
 8985 034e 0400     		.2byte	0x4
 8986 0350 F3       		.byte	0xf3
 8987 0351 01       		.uleb128 0x1
 8988 0352 53       		.byte	0x53
 8989 0353 9F       		.byte	0x9f
 8990 0354 00000000 		.4byte	0
 8991 0358 00000000 		.4byte	0
 8992              	.LLST17:
 8993 035c AC000000 		.4byte	.LVL22-.Ltext0
 8994 0360 1E020000 		.4byte	.LVL64-.Ltext0
 8995 0364 0200     		.2byte	0x2
 8996 0366 91       		.byte	0x91
 8997 0367 00       		.sleb128 0
 8998 0368 1E020000 		.4byte	.LVL64-.Ltext0
 8999 036c 26020000 		.4byte	.LVL66-.Ltext0
 9000 0370 0200     		.2byte	0x2
 9001 0372 91       		.byte	0x91
 9002 0373 00       		.sleb128 0
 9003 0374 26020000 		.4byte	.LVL66-.Ltext0
 9004 0378 30020000 		.4byte	.LFE5-.Ltext0
 9005 037c 0200     		.2byte	0x2
 9006 037e 7D       		.byte	0x7d
 9007 037f 00       		.sleb128 0
 9008 0380 00000000 		.4byte	0
 9009 0384 00000000 		.4byte	0
 9010              	.LLST18:
 9011 0388 AC000000 		.4byte	.LVL22-.Ltext0
 9012 038c 1E020000 		.4byte	.LVL64-.Ltext0
 9013 0390 0200     		.2byte	0x2
 9014 0392 91       		.byte	0x91
 9015 0393 04       		.sleb128 4
 9016 0394 1E020000 		.4byte	.LVL64-.Ltext0
 9017 0398 26020000 		.4byte	.LVL66-.Ltext0
 9018 039c 0200     		.2byte	0x2
 9019 039e 91       		.byte	0x91
 9020 039f 04       		.sleb128 4
 9021 03a0 26020000 		.4byte	.LVL66-.Ltext0
 9022 03a4 30020000 		.4byte	.LFE5-.Ltext0
 9023 03a8 0200     		.2byte	0x2
 9024 03aa 7D       		.byte	0x7d
 9025 03ab 04       		.sleb128 4
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 259


 9026 03ac 00000000 		.4byte	0
 9027 03b0 00000000 		.4byte	0
 9028              	.LLST19:
 9029 03b4 CE000000 		.4byte	.LVL26-.Ltext0
 9030 03b8 DA000000 		.4byte	.LVL28-.Ltext0
 9031 03bc 0100     		.2byte	0x1
 9032 03be 50       		.byte	0x50
 9033 03bf DA000000 		.4byte	.LVL28-.Ltext0
 9034 03c3 F8000000 		.4byte	.LVL34-.Ltext0
 9035 03c7 0100     		.2byte	0x1
 9036 03c9 54       		.byte	0x54
 9037 03ca F8000000 		.4byte	.LVL34-.Ltext0
 9038 03ce FA000000 		.4byte	.LVL35-.Ltext0
 9039 03d2 0100     		.2byte	0x1
 9040 03d4 50       		.byte	0x50
 9041 03d5 FA000000 		.4byte	.LVL35-.Ltext0
 9042 03d9 1E020000 		.4byte	.LVL64-.Ltext0
 9043 03dd 0100     		.2byte	0x1
 9044 03df 54       		.byte	0x54
 9045 03e0 1E020000 		.4byte	.LVL64-.Ltext0
 9046 03e4 30020000 		.4byte	.LFE5-.Ltext0
 9047 03e8 0200     		.2byte	0x2
 9048 03ea 30       		.byte	0x30
 9049 03eb 9F       		.byte	0x9f
 9050 03ec 00000000 		.4byte	0
 9051 03f0 00000000 		.4byte	0
 9052              	.LLST20:
 9053 03f4 C0000000 		.4byte	.LVL24-.Ltext0
 9054 03f8 CA000000 		.4byte	.LVL25-.Ltext0
 9055 03fc 0100     		.2byte	0x1
 9056 03fe 50       		.byte	0x50
 9057 03ff CA000000 		.4byte	.LVL25-.Ltext0
 9058 0403 EA000000 		.4byte	.LVL32-.Ltext0
 9059 0407 0100     		.2byte	0x1
 9060 0409 5A       		.byte	0x5a
 9061 040a F8000000 		.4byte	.LVL34-.Ltext0
 9062 040e 00010000 		.4byte	.LVL37-.Ltext0
 9063 0412 0100     		.2byte	0x1
 9064 0414 5A       		.byte	0x5a
 9065 0415 1E020000 		.4byte	.LVL64-.Ltext0
 9066 0419 26020000 		.4byte	.LVL66-.Ltext0
 9067 041d 0100     		.2byte	0x1
 9068 041f 5A       		.byte	0x5a
 9069 0420 00000000 		.4byte	0
 9070 0424 00000000 		.4byte	0
 9071              	.LLST21:
 9072 0428 D6000000 		.4byte	.LVL27-.Ltext0
 9073 042c F8000000 		.4byte	.LVL34-.Ltext0
 9074 0430 0200     		.2byte	0x2
 9075 0432 30       		.byte	0x30
 9076 0433 9F       		.byte	0x9f
 9077 0434 00010000 		.4byte	.LVL37-.Ltext0
 9078 0438 1E020000 		.4byte	.LVL64-.Ltext0
 9079 043c 0200     		.2byte	0x2
 9080 043e 30       		.byte	0x30
 9081 043f 9F       		.byte	0x9f
 9082 0440 00000000 		.4byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 260


 9083 0444 00000000 		.4byte	0
 9084              	.LLST22:
 9085 0448 D6000000 		.4byte	.LVL27-.Ltext0
 9086 044c DA000000 		.4byte	.LVL28-.Ltext0
 9087 0450 0100     		.2byte	0x1
 9088 0452 50       		.byte	0x50
 9089 0453 DA000000 		.4byte	.LVL28-.Ltext0
 9090 0457 F8000000 		.4byte	.LVL34-.Ltext0
 9091 045b 0100     		.2byte	0x1
 9092 045d 54       		.byte	0x54
 9093 045e 00010000 		.4byte	.LVL37-.Ltext0
 9094 0462 1E020000 		.4byte	.LVL64-.Ltext0
 9095 0466 0100     		.2byte	0x1
 9096 0468 54       		.byte	0x54
 9097 0469 00000000 		.4byte	0
 9098 046d 00000000 		.4byte	0
 9099              	.LLST23:
 9100 0471 D6000000 		.4byte	.LVL27-.Ltext0
 9101 0475 F8000000 		.4byte	.LVL34-.Ltext0
 9102 0479 0100     		.2byte	0x1
 9103 047b 56       		.byte	0x56
 9104 047c 00010000 		.4byte	.LVL37-.Ltext0
 9105 0480 7A010000 		.4byte	.LVL51-.Ltext0
 9106 0484 0100     		.2byte	0x1
 9107 0486 56       		.byte	0x56
 9108 0487 7A010000 		.4byte	.LVL51-.Ltext0
 9109 048b BC010000 		.4byte	.LVL59-.Ltext0
 9110 048f 0200     		.2byte	0x2
 9111 0491 91       		.byte	0x91
 9112 0492 04       		.sleb128 4
 9113 0493 BC010000 		.4byte	.LVL59-.Ltext0
 9114 0497 CE010000 		.4byte	.LVL60-.Ltext0
 9115 049b 0100     		.2byte	0x1
 9116 049d 56       		.byte	0x56
 9117 049e CE010000 		.4byte	.LVL60-.Ltext0
 9118 04a2 1E020000 		.4byte	.LVL64-.Ltext0
 9119 04a6 0200     		.2byte	0x2
 9120 04a8 91       		.byte	0x91
 9121 04a9 04       		.sleb128 4
 9122 04aa 00000000 		.4byte	0
 9123 04ae 00000000 		.4byte	0
 9124              	.LLST24:
 9125 04b2 D6000000 		.4byte	.LVL27-.Ltext0
 9126 04b6 F8000000 		.4byte	.LVL34-.Ltext0
 9127 04ba 0200     		.2byte	0x2
 9128 04bc 91       		.byte	0x91
 9129 04bd 00       		.sleb128 0
 9130 04be 00010000 		.4byte	.LVL37-.Ltext0
 9131 04c2 1E010000 		.4byte	.LVL41-.Ltext0
 9132 04c6 0200     		.2byte	0x2
 9133 04c8 91       		.byte	0x91
 9134 04c9 00       		.sleb128 0
 9135 04ca 1E010000 		.4byte	.LVL41-.Ltext0
 9136 04ce 38010000 		.4byte	.LVL44-.Ltext0
 9137 04d2 0100     		.2byte	0x1
 9138 04d4 55       		.byte	0x55
 9139 04d5 38010000 		.4byte	.LVL44-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 261


 9140 04d9 10020000 		.4byte	.LVL63-.Ltext0
 9141 04dd 1700     		.2byte	0x17
 9142 04df 34       		.byte	0x34
 9143 04e0 91       		.byte	0x91
 9144 04e1 00       		.sleb128 0
 9145 04e2 06       		.byte	0x6
 9146 04e3 91       		.byte	0x91
 9147 04e4 00       		.sleb128 0
 9148 04e5 06       		.byte	0x6
 9149 04e6 40       		.byte	0x40
 9150 04e7 4B       		.byte	0x4b
 9151 04e8 24       		.byte	0x24
 9152 04e9 22       		.byte	0x22
 9153 04ea 0C       		.byte	0xc
 9154 04eb 04000080 		.4byte	0x80000004
 9155 04ef 2A       		.byte	0x2a
 9156 04f0 28       		.byte	0x28
 9157 04f1 0100     		.2byte	0x1
 9158 04f3 16       		.byte	0x16
 9159 04f4 13       		.byte	0x13
 9160 04f5 9F       		.byte	0x9f
 9161 04f6 00000000 		.4byte	0
 9162 04fa 00000000 		.4byte	0
 9163              	.LLST25:
 9164 04fe D6000000 		.4byte	.LVL27-.Ltext0
 9165 0502 F8000000 		.4byte	.LVL34-.Ltext0
 9166 0506 0100     		.2byte	0x1
 9167 0508 57       		.byte	0x57
 9168 0509 00010000 		.4byte	.LVL37-.Ltext0
 9169 050d 70010000 		.4byte	.LVL50-.Ltext0
 9170 0511 0100     		.2byte	0x1
 9171 0513 57       		.byte	0x57
 9172 0514 70010000 		.4byte	.LVL50-.Ltext0
 9173 0518 1E020000 		.4byte	.LVL64-.Ltext0
 9174 051c 0400     		.2byte	0x4
 9175 051e F3       		.byte	0xf3
 9176 051f 01       		.uleb128 0x1
 9177 0520 53       		.byte	0x53
 9178 0521 9F       		.byte	0x9f
 9179 0522 00000000 		.4byte	0
 9180 0526 00000000 		.4byte	0
 9181              	.LLST26:
 9182 052a D6000000 		.4byte	.LVL27-.Ltext0
 9183 052e F8000000 		.4byte	.LVL34-.Ltext0
 9184 0532 0800     		.2byte	0x8
 9185 0534 F3       		.byte	0xf3
 9186 0535 01       		.uleb128 0x1
 9187 0536 52       		.byte	0x52
 9188 0537 0A       		.byte	0xa
 9189 0538 FFFF     		.2byte	0xffff
 9190 053a 1A       		.byte	0x1a
 9191 053b 9F       		.byte	0x9f
 9192 053c 00010000 		.4byte	.LVL37-.Ltext0
 9193 0540 1E020000 		.4byte	.LVL64-.Ltext0
 9194 0544 0800     		.2byte	0x8
 9195 0546 F3       		.byte	0xf3
 9196 0547 01       		.uleb128 0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 262


 9197 0548 52       		.byte	0x52
 9198 0549 0A       		.byte	0xa
 9199 054a FFFF     		.2byte	0xffff
 9200 054c 1A       		.byte	0x1a
 9201 054d 9F       		.byte	0x9f
 9202 054e 00000000 		.4byte	0
 9203 0552 00000000 		.4byte	0
 9204              	.LLST27:
 9205 0556 D6000000 		.4byte	.LVL27-.Ltext0
 9206 055a F6000000 		.4byte	.LVL33-.Ltext0
 9207 055e 0100     		.2byte	0x1
 9208 0560 58       		.byte	0x58
 9209 0561 F6000000 		.4byte	.LVL33-.Ltext0
 9210 0565 F8000000 		.4byte	.LVL34-.Ltext0
 9211 0569 0300     		.2byte	0x3
 9212 056b 78       		.byte	0x78
 9213 056c 71       		.sleb128 -15
 9214 056d 9F       		.byte	0x9f
 9215 056e 00010000 		.4byte	.LVL37-.Ltext0
 9216 0572 22010000 		.4byte	.LVL42-.Ltext0
 9217 0576 0300     		.2byte	0x3
 9218 0578 78       		.byte	0x78
 9219 0579 71       		.sleb128 -15
 9220 057a 9F       		.byte	0x9f
 9221 057b 22010000 		.4byte	.LVL42-.Ltext0
 9222 057f 1E020000 		.4byte	.LVL64-.Ltext0
 9223 0583 0400     		.2byte	0x4
 9224 0585 F3       		.byte	0xf3
 9225 0586 01       		.uleb128 0x1
 9226 0587 51       		.byte	0x51
 9227 0588 9F       		.byte	0x9f
 9228 0589 00000000 		.4byte	0
 9229 058d 00000000 		.4byte	0
 9230              	.LLST28:
 9231 0591 D6000000 		.4byte	.LVL27-.Ltext0
 9232 0595 F8000000 		.4byte	.LVL34-.Ltext0
 9233 0599 0100     		.2byte	0x1
 9234 059b 59       		.byte	0x59
 9235 059c 00010000 		.4byte	.LVL37-.Ltext0
 9236 05a0 6A010000 		.4byte	.LVL49-.Ltext0
 9237 05a4 0100     		.2byte	0x1
 9238 05a6 59       		.byte	0x59
 9239 05a7 6A010000 		.4byte	.LVL49-.Ltext0
 9240 05ab 1E020000 		.4byte	.LVL64-.Ltext0
 9241 05af 0400     		.2byte	0x4
 9242 05b1 F3       		.byte	0xf3
 9243 05b2 01       		.uleb128 0x1
 9244 05b3 50       		.byte	0x50
 9245 05b4 9F       		.byte	0x9f
 9246 05b5 00000000 		.4byte	0
 9247 05b9 00000000 		.4byte	0
 9248              	.LLST29:
 9249 05bd E0000000 		.4byte	.LVL29-.Ltext0
 9250 05c1 E4000000 		.4byte	.LVL30-.Ltext0
 9251 05c5 0900     		.2byte	0x9
 9252 05c7 74       		.byte	0x74
 9253 05c8 30       		.sleb128 48
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 263


 9254 05c9 06       		.byte	0x6
 9255 05ca 75       		.byte	0x75
 9256 05cb 00       		.sleb128 0
 9257 05cc 22       		.byte	0x22
 9258 05cd 34       		.byte	0x34
 9259 05ce 1C       		.byte	0x1c
 9260 05cf 9F       		.byte	0x9f
 9261 05d0 E4000000 		.4byte	.LVL30-.Ltext0
 9262 05d4 E6000000 		.4byte	.LVL31-.Ltext0
 9263 05d8 0700     		.2byte	0x7
 9264 05da 74       		.byte	0x74
 9265 05db 30       		.sleb128 48
 9266 05dc 06       		.byte	0x6
 9267 05dd 75       		.byte	0x75
 9268 05de 00       		.sleb128 0
 9269 05df 22       		.byte	0x22
 9270 05e0 9F       		.byte	0x9f
 9271 05e1 EA000000 		.4byte	.LVL32-.Ltext0
 9272 05e5 F8000000 		.4byte	.LVL34-.Ltext0
 9273 05e9 0100     		.2byte	0x1
 9274 05eb 5A       		.byte	0x5a
 9275 05ec 00010000 		.4byte	.LVL37-.Ltext0
 9276 05f0 8E010000 		.4byte	.LVL53-.Ltext0
 9277 05f4 0100     		.2byte	0x1
 9278 05f6 5A       		.byte	0x5a
 9279 05f7 BC010000 		.4byte	.LVL59-.Ltext0
 9280 05fb CE010000 		.4byte	.LVL60-.Ltext0
 9281 05ff 0100     		.2byte	0x1
 9282 0601 5A       		.byte	0x5a
 9283 0602 00000000 		.4byte	0
 9284 0606 00000000 		.4byte	0
 9285              	.LLST30:
 9286 060a EA000000 		.4byte	.LVL32-.Ltext0
 9287 060e F8000000 		.4byte	.LVL34-.Ltext0
 9288 0612 0200     		.2byte	0x2
 9289 0614 30       		.byte	0x30
 9290 0615 9F       		.byte	0x9f
 9291 0616 00010000 		.4byte	.LVL37-.Ltext0
 9292 061a 08010000 		.4byte	.LVL39-.Ltext0
 9293 061e 0800     		.2byte	0x8
 9294 0620 73       		.byte	0x73
 9295 0621 00       		.sleb128 0
 9296 0622 78       		.byte	0x78
 9297 0623 00       		.sleb128 0
 9298 0624 1C       		.byte	0x1c
 9299 0625 23       		.byte	0x23
 9300 0626 10       		.uleb128 0x10
 9301 0627 9F       		.byte	0x9f
 9302 0628 08010000 		.4byte	.LVL39-.Ltext0
 9303 062c 12010000 		.4byte	.LVL40-.Ltext0
 9304 0630 0800     		.2byte	0x8
 9305 0632 73       		.byte	0x73
 9306 0633 00       		.sleb128 0
 9307 0634 78       		.byte	0x78
 9308 0635 00       		.sleb128 0
 9309 0636 1C       		.byte	0x1c
 9310 0637 23       		.byte	0x23
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 264


 9311 0638 0F       		.uleb128 0xf
 9312 0639 9F       		.byte	0x9f
 9313 063a 00000000 		.4byte	0
 9314 063e 00000000 		.4byte	0
 9315              	.LLST31:
 9316 0642 5E010000 		.4byte	.LVL47-.Ltext0
 9317 0646 1E020000 		.4byte	.LVL64-.Ltext0
 9318 064a 0100     		.2byte	0x1
 9319 064c 54       		.byte	0x54
 9320 064d 00000000 		.4byte	0
 9321 0651 00000000 		.4byte	0
 9322              	.LLST32:
 9323 0655 30020000 		.4byte	.LFB8-.Ltext0
 9324 0659 32020000 		.4byte	.LCFI6-.Ltext0
 9325 065d 0200     		.2byte	0x2
 9326 065f 7D       		.byte	0x7d
 9327 0660 00       		.sleb128 0
 9328 0661 32020000 		.4byte	.LCFI6-.Ltext0
 9329 0665 D8020000 		.4byte	.LFE8-.Ltext0
 9330 0669 0200     		.2byte	0x2
 9331 066b 7D       		.byte	0x7d
 9332 066c 18       		.sleb128 24
 9333 066d 00000000 		.4byte	0
 9334 0671 00000000 		.4byte	0
 9335              	.LLST33:
 9336 0675 30020000 		.4byte	.LVL67-.Ltext0
 9337 0679 39020000 		.4byte	.LVL68-1-.Ltext0
 9338 067d 0100     		.2byte	0x1
 9339 067f 50       		.byte	0x50
 9340 0680 39020000 		.4byte	.LVL68-1-.Ltext0
 9341 0684 3E020000 		.4byte	.LVL69-.Ltext0
 9342 0688 0100     		.2byte	0x1
 9343 068a 54       		.byte	0x54
 9344 068b 00000000 		.4byte	0
 9345 068f 00000000 		.4byte	0
 9346              	.LLST34:
 9347 0693 3E020000 		.4byte	.LVL69-.Ltext0
 9348 0697 D0020000 		.4byte	.LVL78-.Ltext0
 9349 069b 0100     		.2byte	0x1
 9350 069d 54       		.byte	0x54
 9351 069e 00000000 		.4byte	0
 9352 06a2 00000000 		.4byte	0
 9353              	.LLST35:
 9354 06a6 9E020000 		.4byte	.LVL73-.Ltext0
 9355 06aa AC020000 		.4byte	.LVL76-.Ltext0
 9356 06ae 0100     		.2byte	0x1
 9357 06b0 54       		.byte	0x54
 9358 06b1 00000000 		.4byte	0
 9359 06b5 00000000 		.4byte	0
 9360              	.LLST36:
 9361 06b9 D8020000 		.4byte	.LFB11-.Ltext0
 9362 06bd DA020000 		.4byte	.LCFI7-.Ltext0
 9363 06c1 0200     		.2byte	0x2
 9364 06c3 7D       		.byte	0x7d
 9365 06c4 00       		.sleb128 0
 9366 06c5 DA020000 		.4byte	.LCFI7-.Ltext0
 9367 06c9 F4020000 		.4byte	.LFE11-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 265


 9368 06cd 0200     		.2byte	0x2
 9369 06cf 7D       		.byte	0x7d
 9370 06d0 08       		.sleb128 8
 9371 06d1 00000000 		.4byte	0
 9372 06d5 00000000 		.4byte	0
 9373              	.LLST37:
 9374 06d9 D8020000 		.4byte	.LVL79-.Ltext0
 9375 06dd DF020000 		.4byte	.LVL80-1-.Ltext0
 9376 06e1 0100     		.2byte	0x1
 9377 06e3 50       		.byte	0x50
 9378 06e4 DF020000 		.4byte	.LVL80-1-.Ltext0
 9379 06e8 E6020000 		.4byte	.LVL81-.Ltext0
 9380 06ec 0100     		.2byte	0x1
 9381 06ee 54       		.byte	0x54
 9382 06ef 00000000 		.4byte	0
 9383 06f3 00000000 		.4byte	0
 9384              	.LLST38:
 9385 06f7 E6020000 		.4byte	.LVL81-.Ltext0
 9386 06fb E8020000 		.4byte	.LVL82-.Ltext0
 9387 06ff 0100     		.2byte	0x1
 9388 0701 54       		.byte	0x54
 9389 0702 00000000 		.4byte	0
 9390 0706 00000000 		.4byte	0
 9391              	.LLST39:
 9392 070a E8020000 		.4byte	.LVL82-.Ltext0
 9393 070e F0020000 		.4byte	.LVL84-.Ltext0
 9394 0712 0100     		.2byte	0x1
 9395 0714 54       		.byte	0x54
 9396 0715 F0020000 		.4byte	.LVL84-.Ltext0
 9397 0719 F4020000 		.4byte	.LFE11-.Ltext0
 9398 071d 0100     		.2byte	0x1
 9399 071f 50       		.byte	0x50
 9400 0720 00000000 		.4byte	0
 9401 0724 00000000 		.4byte	0
 9402              	.LLST40:
 9403 0728 F4020000 		.4byte	.LVL85-.Ltext0
 9404 072c 0E030000 		.4byte	.LVL87-.Ltext0
 9405 0730 0100     		.2byte	0x1
 9406 0732 50       		.byte	0x50
 9407 0733 00000000 		.4byte	0
 9408 0737 00000000 		.4byte	0
 9409              	.LLST41:
 9410 073b 0E030000 		.4byte	.LVL87-.Ltext0
 9411 073f 14030000 		.4byte	.LVL88-.Ltext0
 9412 0743 0100     		.2byte	0x1
 9413 0745 50       		.byte	0x50
 9414 0746 00000000 		.4byte	0
 9415 074a 00000000 		.4byte	0
 9416              	.LLST42:
 9417 074e 0E030000 		.4byte	.LVL87-.Ltext0
 9418 0752 14030000 		.4byte	.LVL88-.Ltext0
 9419 0756 0200     		.2byte	0x2
 9420 0758 70       		.byte	0x70
 9421 0759 2C       		.sleb128 44
 9422 075a 14030000 		.4byte	.LVL88-.Ltext0
 9423 075e 1C030000 		.4byte	.LFE12-.Ltext0
 9424 0762 0100     		.2byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 266


 9425 0764 50       		.byte	0x50
 9426 0765 00000000 		.4byte	0
 9427 0769 00000000 		.4byte	0
 9428              	.LLST43:
 9429 076d 1C030000 		.4byte	.LFB13-.Ltext0
 9430 0771 20030000 		.4byte	.LCFI8-.Ltext0
 9431 0775 0200     		.2byte	0x2
 9432 0777 7D       		.byte	0x7d
 9433 0778 00       		.sleb128 0
 9434 0779 20030000 		.4byte	.LCFI8-.Ltext0
 9435 077d D8030000 		.4byte	.LCFI9-.Ltext0
 9436 0781 0200     		.2byte	0x2
 9437 0783 7D       		.byte	0x7d
 9438 0784 20       		.sleb128 32
 9439 0785 D8030000 		.4byte	.LCFI9-.Ltext0
 9440 0789 E4030000 		.4byte	.LFE13-.Ltext0
 9441 078d 0200     		.2byte	0x2
 9442 078f 7D       		.byte	0x7d
 9443 0790 00       		.sleb128 0
 9444 0791 00000000 		.4byte	0
 9445 0795 00000000 		.4byte	0
 9446              	.LLST44:
 9447 0799 1C030000 		.4byte	.LVL89-.Ltext0
 9448 079d 2D030000 		.4byte	.LVL92-1-.Ltext0
 9449 07a1 0100     		.2byte	0x1
 9450 07a3 50       		.byte	0x50
 9451 07a4 2D030000 		.4byte	.LVL92-1-.Ltext0
 9452 07a8 34030000 		.4byte	.LVL93-.Ltext0
 9453 07ac 0100     		.2byte	0x1
 9454 07ae 54       		.byte	0x54
 9455 07af 00000000 		.4byte	0
 9456 07b3 00000000 		.4byte	0
 9457              	.LLST45:
 9458 07b7 1C030000 		.4byte	.LVL89-.Ltext0
 9459 07bb 28030000 		.4byte	.LVL90-.Ltext0
 9460 07bf 0100     		.2byte	0x1
 9461 07c1 51       		.byte	0x51
 9462 07c2 28030000 		.4byte	.LVL90-.Ltext0
 9463 07c6 2A030000 		.4byte	.LVL91-.Ltext0
 9464 07ca 0400     		.2byte	0x4
 9465 07cc F3       		.byte	0xf3
 9466 07cd 01       		.uleb128 0x1
 9467 07ce 51       		.byte	0x51
 9468 07cf 9F       		.byte	0x9f
 9469 07d0 2A030000 		.4byte	.LVL91-.Ltext0
 9470 07d4 2D030000 		.4byte	.LVL92-1-.Ltext0
 9471 07d8 0100     		.2byte	0x1
 9472 07da 51       		.byte	0x51
 9473 07db 2D030000 		.4byte	.LVL92-1-.Ltext0
 9474 07df 7A030000 		.4byte	.LVL99-.Ltext0
 9475 07e3 0100     		.2byte	0x1
 9476 07e5 55       		.byte	0x55
 9477 07e6 7A030000 		.4byte	.LVL99-.Ltext0
 9478 07ea 95030000 		.4byte	.LVL100-1-.Ltext0
 9479 07ee 0300     		.2byte	0x3
 9480 07f0 74       		.byte	0x74
 9481 07f1 C400     		.sleb128 68
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 267


 9482 07f3 95030000 		.4byte	.LVL100-1-.Ltext0
 9483 07f7 E4030000 		.4byte	.LFE13-.Ltext0
 9484 07fb 1700     		.2byte	0x17
 9485 07fd 34       		.byte	0x34
 9486 07fe F3       		.byte	0xf3
 9487 07ff 01       		.uleb128 0x1
 9488 0800 51       		.byte	0x51
 9489 0801 F3       		.byte	0xf3
 9490 0802 01       		.uleb128 0x1
 9491 0803 51       		.byte	0x51
 9492 0804 40       		.byte	0x40
 9493 0805 4B       		.byte	0x4b
 9494 0806 24       		.byte	0x24
 9495 0807 22       		.byte	0x22
 9496 0808 0C       		.byte	0xc
 9497 0809 04000080 		.4byte	0x80000004
 9498 080d 2A       		.byte	0x2a
 9499 080e 28       		.byte	0x28
 9500 080f 0100     		.2byte	0x1
 9501 0811 16       		.byte	0x16
 9502 0812 13       		.byte	0x13
 9503 0813 9F       		.byte	0x9f
 9504 0814 00000000 		.4byte	0
 9505 0818 00000000 		.4byte	0
 9506              	.LLST46:
 9507 081c 34030000 		.4byte	.LVL93-.Ltext0
 9508 0820 D8030000 		.4byte	.LVL103-.Ltext0
 9509 0824 0100     		.2byte	0x1
 9510 0826 54       		.byte	0x54
 9511 0827 00000000 		.4byte	0
 9512 082b 00000000 		.4byte	0
 9513              	.LLST47:
 9514 082f 36030000 		.4byte	.LVL94-.Ltext0
 9515 0833 6C030000 		.4byte	.LVL97-.Ltext0
 9516 0837 0100     		.2byte	0x1
 9517 0839 53       		.byte	0x53
 9518 083a 6C030000 		.4byte	.LVL97-.Ltext0
 9519 083e 74030000 		.4byte	.LVL98-.Ltext0
 9520 0842 0300     		.2byte	0x3
 9521 0844 74       		.byte	0x74
 9522 0845 C400     		.sleb128 68
 9523 0847 00000000 		.4byte	0
 9524 084b 00000000 		.4byte	0
 9525              	.LLST48:
 9526 084f 64030000 		.4byte	.LVL96-.Ltext0
 9527 0853 D4030000 		.4byte	.LVL102-.Ltext0
 9528 0857 0100     		.2byte	0x1
 9529 0859 58       		.byte	0x58
 9530 085a 00000000 		.4byte	0
 9531 085e 00000000 		.4byte	0
 9532              	.LLST49:
 9533 0862 1C030000 		.4byte	.LVL89-.Ltext0
 9534 0866 60030000 		.4byte	.LVL95-.Ltext0
 9535 086a 0200     		.2byte	0x2
 9536 086c 30       		.byte	0x30
 9537 086d 9F       		.byte	0x9f
 9538 086e 60030000 		.4byte	.LVL95-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 268


 9539 0872 D4030000 		.4byte	.LVL102-.Ltext0
 9540 0876 0100     		.2byte	0x1
 9541 0878 56       		.byte	0x56
 9542 0879 00000000 		.4byte	0
 9543 087d 00000000 		.4byte	0
 9544              	.LLST50:
 9545 0881 E4030000 		.4byte	.LFB16-.Ltext0
 9546 0885 E6030000 		.4byte	.LCFI10-.Ltext0
 9547 0889 0200     		.2byte	0x2
 9548 088b 7D       		.byte	0x7d
 9549 088c 00       		.sleb128 0
 9550 088d E6030000 		.4byte	.LCFI10-.Ltext0
 9551 0891 40040000 		.4byte	.LCFI11-.Ltext0
 9552 0895 0200     		.2byte	0x2
 9553 0897 7D       		.byte	0x7d
 9554 0898 10       		.sleb128 16
 9555 0899 40040000 		.4byte	.LCFI11-.Ltext0
 9556 089d 44040000 		.4byte	.LCFI12-.Ltext0
 9557 08a1 0200     		.2byte	0x2
 9558 08a3 7D       		.byte	0x7d
 9559 08a4 00       		.sleb128 0
 9560 08a5 44040000 		.4byte	.LCFI12-.Ltext0
 9561 08a9 50040000 		.4byte	.LFE16-.Ltext0
 9562 08ad 0200     		.2byte	0x2
 9563 08af 7D       		.byte	0x7d
 9564 08b0 10       		.sleb128 16
 9565 08b1 00000000 		.4byte	0
 9566 08b5 00000000 		.4byte	0
 9567              	.LLST51:
 9568 08b9 E4030000 		.4byte	.LVL105-.Ltext0
 9569 08bd F5030000 		.4byte	.LVL106-1-.Ltext0
 9570 08c1 0100     		.2byte	0x1
 9571 08c3 50       		.byte	0x50
 9572 08c4 F5030000 		.4byte	.LVL106-1-.Ltext0
 9573 08c8 40040000 		.4byte	.LVL110-.Ltext0
 9574 08cc 0100     		.2byte	0x1
 9575 08ce 54       		.byte	0x54
 9576 08cf 40040000 		.4byte	.LVL110-.Ltext0
 9577 08d3 44040000 		.4byte	.LVL111-.Ltext0
 9578 08d7 0400     		.2byte	0x4
 9579 08d9 F3       		.byte	0xf3
 9580 08da 01       		.uleb128 0x1
 9581 08db 50       		.byte	0x50
 9582 08dc 9F       		.byte	0x9f
 9583 08dd 44040000 		.4byte	.LVL111-.Ltext0
 9584 08e1 50040000 		.4byte	.LFE16-.Ltext0
 9585 08e5 0100     		.2byte	0x1
 9586 08e7 50       		.byte	0x50
 9587 08e8 00000000 		.4byte	0
 9588 08ec 00000000 		.4byte	0
 9589              	.LLST53:
 9590 08f0 50040000 		.4byte	.LFB17-.Ltext0
 9591 08f4 54040000 		.4byte	.LCFI13-.Ltext0
 9592 08f8 0200     		.2byte	0x2
 9593 08fa 7D       		.byte	0x7d
 9594 08fb 00       		.sleb128 0
 9595 08fc 54040000 		.4byte	.LCFI13-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 269


 9596 0900 CC040000 		.4byte	.LFE17-.Ltext0
 9597 0904 0200     		.2byte	0x2
 9598 0906 7D       		.byte	0x7d
 9599 0907 18       		.sleb128 24
 9600 0908 00000000 		.4byte	0
 9601 090c 00000000 		.4byte	0
 9602              	.LLST54:
 9603 0910 50040000 		.4byte	.LVL112-.Ltext0
 9604 0914 6D040000 		.4byte	.LVL115-1-.Ltext0
 9605 0918 0100     		.2byte	0x1
 9606 091a 50       		.byte	0x50
 9607 091b 6D040000 		.4byte	.LVL115-1-.Ltext0
 9608 091f C8040000 		.4byte	.LVL122-.Ltext0
 9609 0923 0100     		.2byte	0x1
 9610 0925 56       		.byte	0x56
 9611 0926 C8040000 		.4byte	.LVL122-.Ltext0
 9612 092a CC040000 		.4byte	.LFE17-.Ltext0
 9613 092e 0400     		.2byte	0x4
 9614 0930 F3       		.byte	0xf3
 9615 0931 01       		.uleb128 0x1
 9616 0932 50       		.byte	0x50
 9617 0933 9F       		.byte	0x9f
 9618 0934 00000000 		.4byte	0
 9619 0938 00000000 		.4byte	0
 9620              	.LLST55:
 9621 093c 50040000 		.4byte	.LVL112-.Ltext0
 9622 0940 8C040000 		.4byte	.LVL116-.Ltext0
 9623 0944 0200     		.2byte	0x2
 9624 0946 30       		.byte	0x30
 9625 0947 9F       		.byte	0x9f
 9626 0948 8C040000 		.4byte	.LVL116-.Ltext0
 9627 094c AC040000 		.4byte	.LVL119-.Ltext0
 9628 0950 0100     		.2byte	0x1
 9629 0952 54       		.byte	0x54
 9630 0953 AC040000 		.4byte	.LVL119-.Ltext0
 9631 0957 BE040000 		.4byte	.LVL121-.Ltext0
 9632 095b 0200     		.2byte	0x2
 9633 095d 30       		.byte	0x30
 9634 095e 9F       		.byte	0x9f
 9635 095f BE040000 		.4byte	.LVL121-.Ltext0
 9636 0963 C8040000 		.4byte	.LVL122-.Ltext0
 9637 0967 0100     		.2byte	0x1
 9638 0969 54       		.byte	0x54
 9639 096a C8040000 		.4byte	.LVL122-.Ltext0
 9640 096e CC040000 		.4byte	.LFE17-.Ltext0
 9641 0972 0100     		.2byte	0x1
 9642 0974 50       		.byte	0x50
 9643 0975 00000000 		.4byte	0
 9644 0979 00000000 		.4byte	0
 9645              	.LLST56:
 9646 097d 56040000 		.4byte	.LVL113-.Ltext0
 9647 0981 6D040000 		.4byte	.LVL115-1-.Ltext0
 9648 0985 0100     		.2byte	0x1
 9649 0987 50       		.byte	0x50
 9650 0988 6D040000 		.4byte	.LVL115-1-.Ltext0
 9651 098c C8040000 		.4byte	.LVL122-.Ltext0
 9652 0990 0100     		.2byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 270


 9653 0992 56       		.byte	0x56
 9654 0993 C8040000 		.4byte	.LVL122-.Ltext0
 9655 0997 CC040000 		.4byte	.LFE17-.Ltext0
 9656 099b 0400     		.2byte	0x4
 9657 099d F3       		.byte	0xf3
 9658 099e 01       		.uleb128 0x1
 9659 099f 50       		.byte	0x50
 9660 09a0 9F       		.byte	0x9f
 9661 09a1 00000000 		.4byte	0
 9662 09a5 00000000 		.4byte	0
 9663              	.LLST57:
 9664 09a9 6A040000 		.4byte	.LVL114-.Ltext0
 9665 09ad C8040000 		.4byte	.LVL122-.Ltext0
 9666 09b1 0100     		.2byte	0x1
 9667 09b3 57       		.byte	0x57
 9668 09b4 00000000 		.4byte	0
 9669 09b8 00000000 		.4byte	0
 9670              	.LLST58:
 9671 09bc BE040000 		.4byte	.LVL121-.Ltext0
 9672 09c0 C8040000 		.4byte	.LVL122-.Ltext0
 9673 09c4 0100     		.2byte	0x1
 9674 09c6 57       		.byte	0x57
 9675 09c7 00000000 		.4byte	0
 9676 09cb 00000000 		.4byte	0
 9677              	.LLST59:
 9678 09cf CC040000 		.4byte	.LFB18-.Ltext0
 9679 09d3 CE040000 		.4byte	.LCFI14-.Ltext0
 9680 09d7 0200     		.2byte	0x2
 9681 09d9 7D       		.byte	0x7d
 9682 09da 00       		.sleb128 0
 9683 09db CE040000 		.4byte	.LCFI14-.Ltext0
 9684 09df 08050000 		.4byte	.LCFI15-.Ltext0
 9685 09e3 0200     		.2byte	0x2
 9686 09e5 7D       		.byte	0x7d
 9687 09e6 18       		.sleb128 24
 9688 09e7 08050000 		.4byte	.LCFI15-.Ltext0
 9689 09eb 0C050000 		.4byte	.LCFI16-.Ltext0
 9690 09ef 0200     		.2byte	0x2
 9691 09f1 7D       		.byte	0x7d
 9692 09f2 0C       		.sleb128 12
 9693 09f3 0C050000 		.4byte	.LCFI16-.Ltext0
 9694 09f7 10050000 		.4byte	.LCFI17-.Ltext0
 9695 09fb 0200     		.2byte	0x2
 9696 09fd 7D       		.byte	0x7d
 9697 09fe 00       		.sleb128 0
 9698 09ff 10050000 		.4byte	.LCFI17-.Ltext0
 9699 0a03 12050000 		.4byte	.LCFI18-.Ltext0
 9700 0a07 0200     		.2byte	0x2
 9701 0a09 7D       		.byte	0x7d
 9702 0a0a 18       		.sleb128 24
 9703 0a0b 12050000 		.4byte	.LCFI18-.Ltext0
 9704 0a0f 20050000 		.4byte	.LFE18-.Ltext0
 9705 0a13 0200     		.2byte	0x2
 9706 0a15 7D       		.byte	0x7d
 9707 0a16 0C       		.sleb128 12
 9708 0a17 00000000 		.4byte	0
 9709 0a1b 00000000 		.4byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 271


 9710              	.LLST60:
 9711 0a1f E6040000 		.4byte	.LVL123-.Ltext0
 9712 0a23 0F050000 		.4byte	.LVL125-1-.Ltext0
 9713 0a27 0100     		.2byte	0x1
 9714 0a29 50       		.byte	0x50
 9715 0a2a 10050000 		.4byte	.LVL125-.Ltext0
 9716 0a2e 20050000 		.4byte	.LFE18-.Ltext0
 9717 0a32 0100     		.2byte	0x1
 9718 0a34 50       		.byte	0x50
 9719 0a35 00000000 		.4byte	0
 9720 0a39 00000000 		.4byte	0
 9721              	.LLST61:
 9722 0a3d 78050000 		.4byte	.LVL131-.Ltext0
 9723 0a41 7E050000 		.4byte	.LVL132-.Ltext0
 9724 0a45 0100     		.2byte	0x1
 9725 0a47 50       		.byte	0x50
 9726 0a48 00000000 		.4byte	0
 9727 0a4c 00000000 		.4byte	0
 9728              	.LLST62:
 9729 0a50 7E050000 		.4byte	.LVL132-.Ltext0
 9730 0a54 80050000 		.4byte	.LVL133-.Ltext0
 9731 0a58 0100     		.2byte	0x1
 9732 0a5a 50       		.byte	0x50
 9733 0a5b 80050000 		.4byte	.LVL133-.Ltext0
 9734 0a5f 88050000 		.4byte	.LFE25-.Ltext0
 9735 0a63 0300     		.2byte	0x3
 9736 0a65 70       		.byte	0x70
 9737 0a66 4C       		.sleb128 -52
 9738 0a67 9F       		.byte	0x9f
 9739 0a68 00000000 		.4byte	0
 9740 0a6c 00000000 		.4byte	0
 9741              	.LLST63:
 9742 0a70 88050000 		.4byte	.LFB26-.Ltext0
 9743 0a74 8C050000 		.4byte	.LCFI19-.Ltext0
 9744 0a78 0200     		.2byte	0x2
 9745 0a7a 7D       		.byte	0x7d
 9746 0a7b 00       		.sleb128 0
 9747 0a7c 8C050000 		.4byte	.LCFI19-.Ltext0
 9748 0a80 50060000 		.4byte	.LFE26-.Ltext0
 9749 0a84 0200     		.2byte	0x2
 9750 0a86 7D       		.byte	0x7d
 9751 0a87 18       		.sleb128 24
 9752 0a88 00000000 		.4byte	0
 9753 0a8c 00000000 		.4byte	0
 9754              	.LLST64:
 9755 0a90 CE050000 		.4byte	.LVL141-.Ltext0
 9756 0a94 D4050000 		.4byte	.LVL143-.Ltext0
 9757 0a98 0100     		.2byte	0x1
 9758 0a9a 57       		.byte	0x57
 9759 0a9b F8050000 		.4byte	.LVL147-.Ltext0
 9760 0a9f 36060000 		.4byte	.LVL152-.Ltext0
 9761 0aa3 0100     		.2byte	0x1
 9762 0aa5 57       		.byte	0x57
 9763 0aa6 00000000 		.4byte	0
 9764 0aaa 00000000 		.4byte	0
 9765              	.LLST65:
 9766 0aae D0050000 		.4byte	.LVL142-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 272


 9767 0ab2 D4050000 		.4byte	.LVL143-.Ltext0
 9768 0ab6 0100     		.2byte	0x1
 9769 0ab8 52       		.byte	0x52
 9770 0ab9 F8050000 		.4byte	.LVL147-.Ltext0
 9771 0abd 01060000 		.4byte	.LVL148-1-.Ltext0
 9772 0ac1 0100     		.2byte	0x1
 9773 0ac3 52       		.byte	0x52
 9774 0ac4 00000000 		.4byte	0
 9775 0ac8 00000000 		.4byte	0
 9776              	.LLST66:
 9777 0acc 88050000 		.4byte	.LVL134-.Ltext0
 9778 0ad0 BA050000 		.4byte	.LVL140-.Ltext0
 9779 0ad4 0200     		.2byte	0x2
 9780 0ad6 30       		.byte	0x30
 9781 0ad7 9F       		.byte	0x9f
 9782 0ad8 BA050000 		.4byte	.LVL140-.Ltext0
 9783 0adc E8050000 		.4byte	.LVL145-.Ltext0
 9784 0ae0 0100     		.2byte	0x1
 9785 0ae2 55       		.byte	0x55
 9786 0ae3 EA050000 		.4byte	.LVL146-.Ltext0
 9787 0ae7 F8050000 		.4byte	.LVL147-.Ltext0
 9788 0aeb 0200     		.2byte	0x2
 9789 0aed 30       		.byte	0x30
 9790 0aee 9F       		.byte	0x9f
 9791 0aef F8050000 		.4byte	.LVL147-.Ltext0
 9792 0af3 34060000 		.4byte	.LVL151-.Ltext0
 9793 0af7 0100     		.2byte	0x1
 9794 0af9 55       		.byte	0x55
 9795 0afa 36060000 		.4byte	.LVL152-.Ltext0
 9796 0afe 40060000 		.4byte	.LVL153-.Ltext0
 9797 0b02 0100     		.2byte	0x1
 9798 0b04 55       		.byte	0x55
 9799 0b05 00000000 		.4byte	0
 9800 0b09 00000000 		.4byte	0
 9801              	.LLST67:
 9802 0b0d 98050000 		.4byte	.LVL135-.Ltext0
 9803 0b11 EA050000 		.4byte	.LVL146-.Ltext0
 9804 0b15 0100     		.2byte	0x1
 9805 0b17 56       		.byte	0x56
 9806 0b18 F8050000 		.4byte	.LVL147-.Ltext0
 9807 0b1c 36060000 		.4byte	.LVL152-.Ltext0
 9808 0b20 0100     		.2byte	0x1
 9809 0b22 56       		.byte	0x56
 9810 0b23 00000000 		.4byte	0
 9811 0b27 00000000 		.4byte	0
 9812              	.LLST68:
 9813 0b2b 9E050000 		.4byte	.LVL136-.Ltext0
 9814 0b2f A8050000 		.4byte	.LVL137-.Ltext0
 9815 0b33 0100     		.2byte	0x1
 9816 0b35 53       		.byte	0x53
 9817 0b36 A8050000 		.4byte	.LVL137-.Ltext0
 9818 0b3a AE050000 		.4byte	.LVL138-.Ltext0
 9819 0b3e 0500     		.2byte	0x5
 9820 0b40 03       		.byte	0x3
 9821 0b41 3C000000 		.4byte	pxOverflowDelayedTaskList
 9822 0b45 00000000 		.4byte	0
 9823 0b49 00000000 		.4byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 273


 9824              	.LLST69:
 9825 0b4d 50060000 		.4byte	.LFB21-.Ltext0
 9826 0b51 54060000 		.4byte	.LCFI20-.Ltext0
 9827 0b55 0200     		.2byte	0x2
 9828 0b57 7D       		.byte	0x7d
 9829 0b58 00       		.sleb128 0
 9830 0b59 54060000 		.4byte	.LCFI20-.Ltext0
 9831 0b5d 0C070000 		.4byte	.LFE21-.Ltext0
 9832 0b61 0200     		.2byte	0x2
 9833 0b63 7D       		.byte	0x7d
 9834 0b64 18       		.sleb128 24
 9835 0b65 00000000 		.4byte	0
 9836 0b69 00000000 		.4byte	0
 9837              	.LLST70:
 9838 0b6d 50060000 		.4byte	.LVL154-.Ltext0
 9839 0b71 6A060000 		.4byte	.LVL156-.Ltext0
 9840 0b75 0200     		.2byte	0x2
 9841 0b77 30       		.byte	0x30
 9842 0b78 9F       		.byte	0x9f
 9843 0b79 6E060000 		.4byte	.LVL157-.Ltext0
 9844 0b7d 74060000 		.4byte	.LVL158-.Ltext0
 9845 0b81 0200     		.2byte	0x2
 9846 0b83 30       		.byte	0x30
 9847 0b84 9F       		.byte	0x9f
 9848 0b85 80060000 		.4byte	.LVL159-.Ltext0
 9849 0b89 BE060000 		.4byte	.LVL163-.Ltext0
 9850 0b8d 0100     		.2byte	0x1
 9851 0b8f 55       		.byte	0x55
 9852 0b90 00000000 		.4byte	0
 9853 0b94 00000000 		.4byte	0
 9854              	.LLST71:
 9855 0b98 50060000 		.4byte	.LVL154-.Ltext0
 9856 0b9c E6060000 		.4byte	.LVL169-.Ltext0
 9857 0ba0 0200     		.2byte	0x2
 9858 0ba2 30       		.byte	0x30
 9859 0ba3 9F       		.byte	0x9f
 9860 0ba4 E6060000 		.4byte	.LVL169-.Ltext0
 9861 0ba8 F8060000 		.4byte	.LVL170-.Ltext0
 9862 0bac 0200     		.2byte	0x2
 9863 0bae 31       		.byte	0x31
 9864 0baf 9F       		.byte	0x9f
 9865 0bb0 F8060000 		.4byte	.LVL170-.Ltext0
 9866 0bb4 02070000 		.4byte	.LVL172-.Ltext0
 9867 0bb8 0100     		.2byte	0x1
 9868 0bba 54       		.byte	0x54
 9869 0bbb 02070000 		.4byte	.LVL172-.Ltext0
 9870 0bbf 0C070000 		.4byte	.LFE21-.Ltext0
 9871 0bc3 0100     		.2byte	0x1
 9872 0bc5 50       		.byte	0x50
 9873 0bc6 00000000 		.4byte	0
 9874 0bca 00000000 		.4byte	0
 9875              	.LLST72:
 9876 0bce C8060000 		.4byte	.LVL165-.Ltext0
 9877 0bd2 D6060000 		.4byte	.LVL167-.Ltext0
 9878 0bd6 0100     		.2byte	0x1
 9879 0bd8 55       		.byte	0x55
 9880 0bd9 D6060000 		.4byte	.LVL167-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 274


 9881 0bdd D8060000 		.4byte	.LVL168-.Ltext0
 9882 0be1 0300     		.2byte	0x3
 9883 0be3 75       		.byte	0x75
 9884 0be4 7F       		.sleb128 -1
 9885 0be5 9F       		.byte	0x9f
 9886 0be6 D8060000 		.4byte	.LVL168-.Ltext0
 9887 0bea F8060000 		.4byte	.LVL170-.Ltext0
 9888 0bee 0100     		.2byte	0x1
 9889 0bf0 55       		.byte	0x55
 9890 0bf1 00000000 		.4byte	0
 9891 0bf5 00000000 		.4byte	0
 9892              	.LLST73:
 9893 0bf9 0C070000 		.4byte	.LFB9-.Ltext0
 9894 0bfd 0E070000 		.4byte	.LCFI21-.Ltext0
 9895 0c01 0200     		.2byte	0x2
 9896 0c03 7D       		.byte	0x7d
 9897 0c04 00       		.sleb128 0
 9898 0c05 0E070000 		.4byte	.LCFI21-.Ltext0
 9899 0c09 68070000 		.4byte	.LFE9-.Ltext0
 9900 0c0d 0200     		.2byte	0x2
 9901 0c0f 7D       		.byte	0x7d
 9902 0c10 10       		.sleb128 16
 9903 0c11 00000000 		.4byte	0
 9904 0c15 00000000 		.4byte	0
 9905              	.LLST74:
 9906 0c19 0C070000 		.4byte	.LVL173-.Ltext0
 9907 0c1d 15070000 		.4byte	.LVL174-1-.Ltext0
 9908 0c21 0100     		.2byte	0x1
 9909 0c23 50       		.byte	0x50
 9910 0c24 15070000 		.4byte	.LVL174-1-.Ltext0
 9911 0c28 60070000 		.4byte	.LVL182-.Ltext0
 9912 0c2c 0100     		.2byte	0x1
 9913 0c2e 55       		.byte	0x55
 9914 0c2f 60070000 		.4byte	.LVL182-.Ltext0
 9915 0c33 68070000 		.4byte	.LFE9-.Ltext0
 9916 0c37 0400     		.2byte	0x4
 9917 0c39 F3       		.byte	0xf3
 9918 0c3a 01       		.uleb128 0x1
 9919 0c3b 50       		.byte	0x50
 9920 0c3c 9F       		.byte	0x9f
 9921 0c3d 00000000 		.4byte	0
 9922 0c41 00000000 		.4byte	0
 9923              	.LLST75:
 9924 0c45 0C070000 		.4byte	.LVL173-.Ltext0
 9925 0c49 15070000 		.4byte	.LVL174-1-.Ltext0
 9926 0c4d 0100     		.2byte	0x1
 9927 0c4f 51       		.byte	0x51
 9928 0c50 15070000 		.4byte	.LVL174-1-.Ltext0
 9929 0c54 60070000 		.4byte	.LVL182-.Ltext0
 9930 0c58 0100     		.2byte	0x1
 9931 0c5a 54       		.byte	0x54
 9932 0c5b 60070000 		.4byte	.LVL182-.Ltext0
 9933 0c5f 68070000 		.4byte	.LFE9-.Ltext0
 9934 0c63 0400     		.2byte	0x4
 9935 0c65 F3       		.byte	0xf3
 9936 0c66 01       		.uleb128 0x1
 9937 0c67 51       		.byte	0x51
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 275


 9938 0c68 9F       		.byte	0x9f
 9939 0c69 00000000 		.4byte	0
 9940 0c6d 00000000 		.4byte	0
 9941              	.LLST76:
 9942 0c71 1E070000 		.4byte	.LVL176-.Ltext0
 9943 0c75 44070000 		.4byte	.LVL179-.Ltext0
 9944 0c79 0100     		.2byte	0x1
 9945 0c7b 51       		.byte	0x51
 9946 0c7c 44070000 		.4byte	.LVL179-.Ltext0
 9947 0c80 47070000 		.4byte	.LVL180-1-.Ltext0
 9948 0c84 0200     		.2byte	0x2
 9949 0c86 75       		.byte	0x75
 9950 0c87 00       		.sleb128 0
 9951 0c88 00000000 		.4byte	0
 9952 0c8c 00000000 		.4byte	0
 9953              	.LLST77:
 9954 0c90 0C070000 		.4byte	.LVL173-.Ltext0
 9955 0c94 3C070000 		.4byte	.LVL177-.Ltext0
 9956 0c98 0200     		.2byte	0x2
 9957 0c9a 30       		.byte	0x30
 9958 0c9b 9F       		.byte	0x9f
 9959 0c9c 00000000 		.4byte	0
 9960 0ca0 00000000 		.4byte	0
 9961              	.LLST78:
 9962 0ca4 1C070000 		.4byte	.LVL175-.Ltext0
 9963 0ca8 42070000 		.4byte	.LVL178-.Ltext0
 9964 0cac 0100     		.2byte	0x1
 9965 0cae 50       		.byte	0x50
 9966 0caf 00000000 		.4byte	0
 9967 0cb3 00000000 		.4byte	0
 9968              	.LLST79:
 9969 0cb7 68070000 		.4byte	.LFB10-.Ltext0
 9970 0cbb 6A070000 		.4byte	.LCFI22-.Ltext0
 9971 0cbf 0200     		.2byte	0x2
 9972 0cc1 7D       		.byte	0x7d
 9973 0cc2 00       		.sleb128 0
 9974 0cc3 6A070000 		.4byte	.LCFI22-.Ltext0
 9975 0cc7 9C070000 		.4byte	.LFE10-.Ltext0
 9976 0ccb 0200     		.2byte	0x2
 9977 0ccd 7D       		.byte	0x7d
 9978 0cce 08       		.sleb128 8
 9979 0ccf 00000000 		.4byte	0
 9980 0cd3 00000000 		.4byte	0
 9981              	.LLST80:
 9982 0cd7 68070000 		.4byte	.LVL183-.Ltext0
 9983 0cdb 6E070000 		.4byte	.LVL184-.Ltext0
 9984 0cdf 0100     		.2byte	0x1
 9985 0ce1 50       		.byte	0x50
 9986 0ce2 6E070000 		.4byte	.LVL184-.Ltext0
 9987 0ce6 80070000 		.4byte	.LVL185-.Ltext0
 9988 0cea 0100     		.2byte	0x1
 9989 0cec 54       		.byte	0x54
 9990 0ced 80070000 		.4byte	.LVL185-.Ltext0
 9991 0cf1 83070000 		.4byte	.LVL186-1-.Ltext0
 9992 0cf5 0100     		.2byte	0x1
 9993 0cf7 50       		.byte	0x50
 9994 0cf8 83070000 		.4byte	.LVL186-1-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 276


 9995 0cfc 96070000 		.4byte	.LVL189-.Ltext0
 9996 0d00 0100     		.2byte	0x1
 9997 0d02 54       		.byte	0x54
 9998 0d03 96070000 		.4byte	.LVL189-.Ltext0
 9999 0d07 9C070000 		.4byte	.LFE10-.Ltext0
 10000 0d0b 0400     		.2byte	0x4
 10001 0d0d F3       		.byte	0xf3
 10002 0d0e 01       		.uleb128 0x1
 10003 0d0f 50       		.byte	0x50
 10004 0d10 9F       		.byte	0x9f
 10005 0d11 00000000 		.4byte	0
 10006 0d15 00000000 		.4byte	0
 10007              	.LLST81:
 10008 0d19 68070000 		.4byte	.LVL183-.Ltext0
 10009 0d1d 6E070000 		.4byte	.LVL184-.Ltext0
 10010 0d21 0200     		.2byte	0x2
 10011 0d23 30       		.byte	0x30
 10012 0d24 9F       		.byte	0x9f
 10013 0d25 80070000 		.4byte	.LVL185-.Ltext0
 10014 0d29 90070000 		.4byte	.LVL188-.Ltext0
 10015 0d2d 0200     		.2byte	0x2
 10016 0d2f 30       		.byte	0x30
 10017 0d30 9F       		.byte	0x9f
 10018 0d31 90070000 		.4byte	.LVL188-.Ltext0
 10019 0d35 9C070000 		.4byte	.LFE10-.Ltext0
 10020 0d39 0100     		.2byte	0x1
 10021 0d3b 50       		.byte	0x50
 10022 0d3c 00000000 		.4byte	0
 10023 0d40 00000000 		.4byte	0
 10024              	.LLST82:
 10025 0d44 9C070000 		.4byte	.LFB35-.Ltext0
 10026 0d48 9E070000 		.4byte	.LCFI23-.Ltext0
 10027 0d4c 0200     		.2byte	0x2
 10028 0d4e 7D       		.byte	0x7d
 10029 0d4f 00       		.sleb128 0
 10030 0d50 9E070000 		.4byte	.LCFI23-.Ltext0
 10031 0d54 08080000 		.4byte	.LFE35-.Ltext0
 10032 0d58 0200     		.2byte	0x2
 10033 0d5a 7D       		.byte	0x7d
 10034 0d5b 08       		.sleb128 8
 10035 0d5c 00000000 		.4byte	0
 10036 0d60 00000000 		.4byte	0
 10037              	.LLST83:
 10038 0d64 9C070000 		.4byte	.LVL190-.Ltext0
 10039 0d68 9E070000 		.4byte	.LVL191-.Ltext0
 10040 0d6c 0100     		.2byte	0x1
 10041 0d6e 50       		.byte	0x50
 10042 0d6f 9E070000 		.4byte	.LVL191-.Ltext0
 10043 0d73 08080000 		.4byte	.LFE35-.Ltext0
 10044 0d77 0400     		.2byte	0x4
 10045 0d79 F3       		.byte	0xf3
 10046 0d7a 01       		.uleb128 0x1
 10047 0d7b 50       		.byte	0x50
 10048 0d7c 9F       		.byte	0x9f
 10049 0d7d 00000000 		.4byte	0
 10050 0d81 00000000 		.4byte	0
 10051              	.LLST84:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 277


 10052 0d85 AE070000 		.4byte	.LVL193-.Ltext0
 10053 0d89 C0070000 		.4byte	.LVL196-.Ltext0
 10054 0d8d 0800     		.2byte	0x8
 10055 0d8f 75       		.byte	0x75
 10056 0d90 00       		.sleb128 0
 10057 0d91 30       		.byte	0x30
 10058 0d92 29       		.byte	0x29
 10059 0d93 08       		.byte	0x8
 10060 0d94 FF       		.byte	0xff
 10061 0d95 1A       		.byte	0x1a
 10062 0d96 9F       		.byte	0x9f
 10063 0d97 00000000 		.4byte	0
 10064 0d9b 00000000 		.4byte	0
 10065              	.LLST85:
 10066 0d9f C0070000 		.4byte	.LVL196-.Ltext0
 10067 0da3 E8070000 		.4byte	.LVL201-.Ltext0
 10068 0da7 0100     		.2byte	0x1
 10069 0da9 55       		.byte	0x55
 10070 0daa 00000000 		.4byte	0
 10071 0dae 00000000 		.4byte	0
 10072              	.LLST86:
 10073 0db2 DA070000 		.4byte	.LVL198-.Ltext0
 10074 0db6 E8070000 		.4byte	.LVL201-.Ltext0
 10075 0dba 0100     		.2byte	0x1
 10076 0dbc 55       		.byte	0x55
 10077 0dbd 00000000 		.4byte	0
 10078 0dc1 00000000 		.4byte	0
 10079              	.LLST87:
 10080 0dc5 08080000 		.4byte	.LFB27-.Ltext0
 10081 0dc9 0C080000 		.4byte	.LCFI24-.Ltext0
 10082 0dcd 0200     		.2byte	0x2
 10083 0dcf 7D       		.byte	0x7d
 10084 0dd0 00       		.sleb128 0
 10085 0dd1 0C080000 		.4byte	.LCFI24-.Ltext0
 10086 0dd5 90080000 		.4byte	.LFE27-.Ltext0
 10087 0dd9 0200     		.2byte	0x2
 10088 0ddb 7D       		.byte	0x7d
 10089 0ddc 10       		.sleb128 16
 10090 0ddd 00000000 		.4byte	0
 10091 0de1 00000000 		.4byte	0
 10092              	.LLST88:
 10093 0de5 24080000 		.4byte	.LVL202-.Ltext0
 10094 0de9 3E080000 		.4byte	.LVL203-.Ltext0
 10095 0ded 0100     		.2byte	0x1
 10096 0def 53       		.byte	0x53
 10097 0df0 00000000 		.4byte	0
 10098 0df4 00000000 		.4byte	0
 10099              	.LLST89:
 10100 0df8 5A080000 		.4byte	.LVL208-.Ltext0
 10101 0dfc 70080000 		.4byte	.LVL209-.Ltext0
 10102 0e00 0100     		.2byte	0x1
 10103 0e02 53       		.byte	0x53
 10104 0e03 00000000 		.4byte	0
 10105 0e07 00000000 		.4byte	0
 10106              	.LLST90:
 10107 0e0b 50080000 		.4byte	.LVL205-.Ltext0
 10108 0e0f 54080000 		.4byte	.LVL206-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 278


 10109 0e13 0100     		.2byte	0x1
 10110 0e15 53       		.byte	0x53
 10111 0e16 00000000 		.4byte	0
 10112 0e1a 00000000 		.4byte	0
 10113              	.LLST91:
 10114 0e1e 56080000 		.4byte	.LVL207-.Ltext0
 10115 0e22 5A080000 		.4byte	.LVL208-.Ltext0
 10116 0e26 0100     		.2byte	0x1
 10117 0e28 53       		.byte	0x53
 10118 0e29 00000000 		.4byte	0
 10119 0e2d 00000000 		.4byte	0
 10120              	.LLST92:
 10121 0e31 5A080000 		.4byte	.LVL208-.Ltext0
 10122 0e35 70080000 		.4byte	.LVL209-.Ltext0
 10123 0e39 0B00     		.2byte	0xb
 10124 0e3b 73       		.byte	0x73
 10125 0e3c 00       		.sleb128 0
 10126 0e3d 44       		.byte	0x44
 10127 0e3e 1E       		.byte	0x1e
 10128 0e3f 03       		.byte	0x3
 10129 0e40 44000000 		.4byte	pxReadyTasksLists
 10130 0e44 22       		.byte	0x22
 10131 0e45 9F       		.byte	0x9f
 10132 0e46 00000000 		.4byte	0
 10133 0e4a 00000000 		.4byte	0
 10134              	.LLST93:
 10135 0e4e 90080000 		.4byte	.LFB14-.Ltext0
 10136 0e52 92080000 		.4byte	.LCFI25-.Ltext0
 10137 0e56 0200     		.2byte	0x2
 10138 0e58 7D       		.byte	0x7d
 10139 0e59 00       		.sleb128 0
 10140 0e5a 92080000 		.4byte	.LCFI25-.Ltext0
 10141 0e5e 1C090000 		.4byte	.LCFI26-.Ltext0
 10142 0e62 0200     		.2byte	0x2
 10143 0e64 7D       		.byte	0x7d
 10144 0e65 10       		.sleb128 16
 10145 0e66 1C090000 		.4byte	.LCFI26-.Ltext0
 10146 0e6a 20090000 		.4byte	.LCFI27-.Ltext0
 10147 0e6e 0200     		.2byte	0x2
 10148 0e70 7D       		.byte	0x7d
 10149 0e71 00       		.sleb128 0
 10150 0e72 20090000 		.4byte	.LCFI27-.Ltext0
 10151 0e76 2C090000 		.4byte	.LFE14-.Ltext0
 10152 0e7a 0200     		.2byte	0x2
 10153 0e7c 7D       		.byte	0x7d
 10154 0e7d 10       		.sleb128 16
 10155 0e7e 00000000 		.4byte	0
 10156 0e82 00000000 		.4byte	0
 10157              	.LLST94:
 10158 0e86 90080000 		.4byte	.LVL210-.Ltext0
 10159 0e8a 99080000 		.4byte	.LVL211-1-.Ltext0
 10160 0e8e 0100     		.2byte	0x1
 10161 0e90 50       		.byte	0x50
 10162 0e91 99080000 		.4byte	.LVL211-1-.Ltext0
 10163 0e95 9E080000 		.4byte	.LVL212-.Ltext0
 10164 0e99 0100     		.2byte	0x1
 10165 0e9b 54       		.byte	0x54
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 279


 10166 0e9c 00000000 		.4byte	0
 10167 0ea0 00000000 		.4byte	0
 10168              	.LLST95:
 10169 0ea4 9E080000 		.4byte	.LVL212-.Ltext0
 10170 0ea8 1C090000 		.4byte	.LVL222-.Ltext0
 10171 0eac 0100     		.2byte	0x1
 10172 0eae 54       		.byte	0x54
 10173 0eaf 20090000 		.4byte	.LVL223-.Ltext0
 10174 0eb3 22090000 		.4byte	.LVL224-.Ltext0
 10175 0eb7 0100     		.2byte	0x1
 10176 0eb9 54       		.byte	0x54
 10177 0eba 00000000 		.4byte	0
 10178 0ebe 00000000 		.4byte	0
 10179              	.LLST96:
 10180 0ec2 2C090000 		.4byte	.LFB28-.Ltext0
 10181 0ec6 2E090000 		.4byte	.LCFI28-.Ltext0
 10182 0eca 0200     		.2byte	0x2
 10183 0ecc 7D       		.byte	0x7d
 10184 0ecd 00       		.sleb128 0
 10185 0ece 2E090000 		.4byte	.LCFI28-.Ltext0
 10186 0ed2 40090000 		.4byte	.LCFI29-.Ltext0
 10187 0ed6 0200     		.2byte	0x2
 10188 0ed8 7D       		.byte	0x7d
 10189 0ed9 08       		.sleb128 8
 10190 0eda 40090000 		.4byte	.LCFI29-.Ltext0
 10191 0ede 4C090000 		.4byte	.LFE28-.Ltext0
 10192 0ee2 0200     		.2byte	0x2
 10193 0ee4 7D       		.byte	0x7d
 10194 0ee5 00       		.sleb128 0
 10195 0ee6 00000000 		.4byte	0
 10196 0eea 00000000 		.4byte	0
 10197              	.LLST97:
 10198 0eee 2C090000 		.4byte	.LVL225-.Ltext0
 10199 0ef2 39090000 		.4byte	.LVL227-1-.Ltext0
 10200 0ef6 0100     		.2byte	0x1
 10201 0ef8 50       		.byte	0x50
 10202 0ef9 39090000 		.4byte	.LVL227-1-.Ltext0
 10203 0efd 4C090000 		.4byte	.LFE28-.Ltext0
 10204 0f01 0400     		.2byte	0x4
 10205 0f03 F3       		.byte	0xf3
 10206 0f04 01       		.uleb128 0x1
 10207 0f05 50       		.byte	0x50
 10208 0f06 9F       		.byte	0x9f
 10209 0f07 00000000 		.4byte	0
 10210 0f0b 00000000 		.4byte	0
 10211              	.LLST98:
 10212 0f0f 2C090000 		.4byte	.LVL225-.Ltext0
 10213 0f13 34090000 		.4byte	.LVL226-.Ltext0
 10214 0f17 0100     		.2byte	0x1
 10215 0f19 51       		.byte	0x51
 10216 0f1a 34090000 		.4byte	.LVL226-.Ltext0
 10217 0f1e 40090000 		.4byte	.LVL228-.Ltext0
 10218 0f22 0100     		.2byte	0x1
 10219 0f24 54       		.byte	0x54
 10220 0f25 40090000 		.4byte	.LVL228-.Ltext0
 10221 0f29 45090000 		.4byte	.LVL229-1-.Ltext0
 10222 0f2d 0100     		.2byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 280


 10223 0f2f 50       		.byte	0x50
 10224 0f30 45090000 		.4byte	.LVL229-1-.Ltext0
 10225 0f34 4C090000 		.4byte	.LFE28-.Ltext0
 10226 0f38 0400     		.2byte	0x4
 10227 0f3a F3       		.byte	0xf3
 10228 0f3b 01       		.uleb128 0x1
 10229 0f3c 51       		.byte	0x51
 10230 0f3d 9F       		.byte	0x9f
 10231 0f3e 00000000 		.4byte	0
 10232 0f42 00000000 		.4byte	0
 10233              	.LLST99:
 10234 0f46 4C090000 		.4byte	.LFB29-.Ltext0
 10235 0f4a 4E090000 		.4byte	.LCFI30-.Ltext0
 10236 0f4e 0200     		.2byte	0x2
 10237 0f50 7D       		.byte	0x7d
 10238 0f51 00       		.sleb128 0
 10239 0f52 4E090000 		.4byte	.LCFI30-.Ltext0
 10240 0f56 68090000 		.4byte	.LCFI31-.Ltext0
 10241 0f5a 0200     		.2byte	0x2
 10242 0f5c 7D       		.byte	0x7d
 10243 0f5d 08       		.sleb128 8
 10244 0f5e 68090000 		.4byte	.LCFI31-.Ltext0
 10245 0f62 74090000 		.4byte	.LFE29-.Ltext0
 10246 0f66 0200     		.2byte	0x2
 10247 0f68 7D       		.byte	0x7d
 10248 0f69 00       		.sleb128 0
 10249 0f6a 00000000 		.4byte	0
 10250 0f6e 00000000 		.4byte	0
 10251              	.LLST100:
 10252 0f72 4C090000 		.4byte	.LVL230-.Ltext0
 10253 0f76 61090000 		.4byte	.LVL233-1-.Ltext0
 10254 0f7a 0100     		.2byte	0x1
 10255 0f7c 50       		.byte	0x50
 10256 0f7d 61090000 		.4byte	.LVL233-1-.Ltext0
 10257 0f81 74090000 		.4byte	.LFE29-.Ltext0
 10258 0f85 0400     		.2byte	0x4
 10259 0f87 F3       		.byte	0xf3
 10260 0f88 01       		.uleb128 0x1
 10261 0f89 50       		.byte	0x50
 10262 0f8a 9F       		.byte	0x9f
 10263 0f8b 00000000 		.4byte	0
 10264 0f8f 00000000 		.4byte	0
 10265              	.LLST101:
 10266 0f93 4C090000 		.4byte	.LVL230-.Ltext0
 10267 0f97 56090000 		.4byte	.LVL231-.Ltext0
 10268 0f9b 0100     		.2byte	0x1
 10269 0f9d 51       		.byte	0x51
 10270 0f9e 56090000 		.4byte	.LVL231-.Ltext0
 10271 0fa2 74090000 		.4byte	.LFE29-.Ltext0
 10272 0fa6 0400     		.2byte	0x4
 10273 0fa8 F3       		.byte	0xf3
 10274 0fa9 01       		.uleb128 0x1
 10275 0faa 51       		.byte	0x51
 10276 0fab 9F       		.byte	0x9f
 10277 0fac 00000000 		.4byte	0
 10278 0fb0 00000000 		.4byte	0
 10279              	.LLST102:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 281


 10280 0fb4 4C090000 		.4byte	.LVL230-.Ltext0
 10281 0fb8 58090000 		.4byte	.LVL232-.Ltext0
 10282 0fbc 0100     		.2byte	0x1
 10283 0fbe 52       		.byte	0x52
 10284 0fbf 58090000 		.4byte	.LVL232-.Ltext0
 10285 0fc3 68090000 		.4byte	.LVL234-.Ltext0
 10286 0fc7 0100     		.2byte	0x1
 10287 0fc9 54       		.byte	0x54
 10288 0fca 68090000 		.4byte	.LVL234-.Ltext0
 10289 0fce 6D090000 		.4byte	.LVL235-1-.Ltext0
 10290 0fd2 0100     		.2byte	0x1
 10291 0fd4 50       		.byte	0x50
 10292 0fd5 6D090000 		.4byte	.LVL235-1-.Ltext0
 10293 0fd9 74090000 		.4byte	.LFE29-.Ltext0
 10294 0fdd 0400     		.2byte	0x4
 10295 0fdf F3       		.byte	0xf3
 10296 0fe0 01       		.uleb128 0x1
 10297 0fe1 52       		.byte	0x52
 10298 0fe2 9F       		.byte	0x9f
 10299 0fe3 00000000 		.4byte	0
 10300 0fe7 00000000 		.4byte	0
 10301              	.LLST103:
 10302 0feb 74090000 		.4byte	.LFB30-.Ltext0
 10303 0fef 78090000 		.4byte	.LCFI32-.Ltext0
 10304 0ff3 0200     		.2byte	0x2
 10305 0ff5 7D       		.byte	0x7d
 10306 0ff6 00       		.sleb128 0
 10307 0ff7 78090000 		.4byte	.LCFI32-.Ltext0
 10308 0ffb D0090000 		.4byte	.LFE30-.Ltext0
 10309 0fff 0200     		.2byte	0x2
 10310 1001 7D       		.byte	0x7d
 10311 1002 10       		.sleb128 16
 10312 1003 00000000 		.4byte	0
 10313 1007 00000000 		.4byte	0
 10314              	.LLST104:
 10315 100b 74090000 		.4byte	.LVL236-.Ltext0
 10316 100f 82090000 		.4byte	.LVL238-.Ltext0
 10317 1013 0100     		.2byte	0x1
 10318 1015 50       		.byte	0x50
 10319 1016 82090000 		.4byte	.LVL238-.Ltext0
 10320 101a D0090000 		.4byte	.LFE30-.Ltext0
 10321 101e 0400     		.2byte	0x4
 10322 1020 F3       		.byte	0xf3
 10323 1021 01       		.uleb128 0x1
 10324 1022 50       		.byte	0x50
 10325 1023 9F       		.byte	0x9f
 10326 1024 00000000 		.4byte	0
 10327 1028 00000000 		.4byte	0
 10328              	.LLST105:
 10329 102c 7A090000 		.4byte	.LVL237-.Ltext0
 10330 1030 CC090000 		.4byte	.LVL244-.Ltext0
 10331 1034 0100     		.2byte	0x1
 10332 1036 55       		.byte	0x55
 10333 1037 00000000 		.4byte	0
 10334 103b 00000000 		.4byte	0
 10335              	.LLST106:
 10336 103f BE090000 		.4byte	.LVL242-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 282


 10337 1043 CA090000 		.4byte	.LVL243-.Ltext0
 10338 1047 0200     		.2byte	0x2
 10339 1049 31       		.byte	0x31
 10340 104a 9F       		.byte	0x9f
 10341 104b CA090000 		.4byte	.LVL243-.Ltext0
 10342 104f D0090000 		.4byte	.LFE30-.Ltext0
 10343 1053 0100     		.2byte	0x1
 10344 1055 50       		.byte	0x50
 10345 1056 00000000 		.4byte	0
 10346 105a 00000000 		.4byte	0
 10347              	.LLST107:
 10348 105e D0090000 		.4byte	.LFB31-.Ltext0
 10349 1062 D2090000 		.4byte	.LCFI33-.Ltext0
 10350 1066 0200     		.2byte	0x2
 10351 1068 7D       		.byte	0x7d
 10352 1069 00       		.sleb128 0
 10353 106a D2090000 		.4byte	.LCFI33-.Ltext0
 10354 106e 200A0000 		.4byte	.LFE31-.Ltext0
 10355 1072 0200     		.2byte	0x2
 10356 1074 7D       		.byte	0x7d
 10357 1075 18       		.sleb128 24
 10358 1076 00000000 		.4byte	0
 10359 107a 00000000 		.4byte	0
 10360              	.LLST108:
 10361 107e D0090000 		.4byte	.LVL245-.Ltext0
 10362 1082 DF090000 		.4byte	.LVL248-1-.Ltext0
 10363 1086 0100     		.2byte	0x1
 10364 1088 50       		.byte	0x50
 10365 1089 DF090000 		.4byte	.LVL248-1-.Ltext0
 10366 108d 200A0000 		.4byte	.LFE31-.Ltext0
 10367 1091 0400     		.2byte	0x4
 10368 1093 F3       		.byte	0xf3
 10369 1094 01       		.uleb128 0x1
 10370 1095 50       		.byte	0x50
 10371 1096 9F       		.byte	0x9f
 10372 1097 00000000 		.4byte	0
 10373 109b 00000000 		.4byte	0
 10374              	.LLST109:
 10375 109f D0090000 		.4byte	.LVL245-.Ltext0
 10376 10a3 D8090000 		.4byte	.LVL247-.Ltext0
 10377 10a7 0100     		.2byte	0x1
 10378 10a9 51       		.byte	0x51
 10379 10aa D8090000 		.4byte	.LVL247-.Ltext0
 10380 10ae 200A0000 		.4byte	.LFE31-.Ltext0
 10381 10b2 0400     		.2byte	0x4
 10382 10b4 F3       		.byte	0xf3
 10383 10b5 01       		.uleb128 0x1
 10384 10b6 51       		.byte	0x51
 10385 10b7 9F       		.byte	0x9f
 10386 10b8 00000000 		.4byte	0
 10387 10bc 00000000 		.4byte	0
 10388              	.LLST110:
 10389 10c0 D4090000 		.4byte	.LVL246-.Ltext0
 10390 10c4 1A0A0000 		.4byte	.LVL253-.Ltext0
 10391 10c8 0100     		.2byte	0x1
 10392 10ca 56       		.byte	0x56
 10393 10cb 00000000 		.4byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 283


 10394 10cf 00000000 		.4byte	0
 10395              	.LLST111:
 10396 10d3 0E0A0000 		.4byte	.LVL251-.Ltext0
 10397 10d7 180A0000 		.4byte	.LVL252-.Ltext0
 10398 10db 0200     		.2byte	0x2
 10399 10dd 31       		.byte	0x31
 10400 10de 9F       		.byte	0x9f
 10401 10df 180A0000 		.4byte	.LVL252-.Ltext0
 10402 10e3 200A0000 		.4byte	.LFE31-.Ltext0
 10403 10e7 0100     		.2byte	0x1
 10404 10e9 50       		.byte	0x50
 10405 10ea 00000000 		.4byte	0
 10406 10ee 00000000 		.4byte	0
 10407              	.LLST112:
 10408 10f2 340A0000 		.4byte	.LFB33-.Ltext0
 10409 10f6 360A0000 		.4byte	.LCFI34-.Ltext0
 10410 10fa 0200     		.2byte	0x2
 10411 10fc 7D       		.byte	0x7d
 10412 10fd 00       		.sleb128 0
 10413 10fe 360A0000 		.4byte	.LCFI34-.Ltext0
 10414 1102 7C0A0000 		.4byte	.LFE33-.Ltext0
 10415 1106 0200     		.2byte	0x2
 10416 1108 7D       		.byte	0x7d
 10417 1109 10       		.sleb128 16
 10418 110a 00000000 		.4byte	0
 10419 110e 00000000 		.4byte	0
 10420              	.LLST113:
 10421 1112 340A0000 		.4byte	.LVL255-.Ltext0
 10422 1116 3D0A0000 		.4byte	.LVL256-1-.Ltext0
 10423 111a 0100     		.2byte	0x1
 10424 111c 50       		.byte	0x50
 10425 111d 3D0A0000 		.4byte	.LVL256-1-.Ltext0
 10426 1121 6C0A0000 		.4byte	.LVL260-.Ltext0
 10427 1125 0100     		.2byte	0x1
 10428 1127 54       		.byte	0x54
 10429 1128 6C0A0000 		.4byte	.LVL260-.Ltext0
 10430 112c 6E0A0000 		.4byte	.LVL261-.Ltext0
 10431 1130 0400     		.2byte	0x4
 10432 1132 F3       		.byte	0xf3
 10433 1133 01       		.uleb128 0x1
 10434 1134 50       		.byte	0x50
 10435 1135 9F       		.byte	0x9f
 10436 1136 6E0A0000 		.4byte	.LVL261-.Ltext0
 10437 113a 700A0000 		.4byte	.LVL262-.Ltext0
 10438 113e 0100     		.2byte	0x1
 10439 1140 54       		.byte	0x54
 10440 1141 700A0000 		.4byte	.LVL262-.Ltext0
 10441 1145 7C0A0000 		.4byte	.LFE33-.Ltext0
 10442 1149 0400     		.2byte	0x4
 10443 114b F3       		.byte	0xf3
 10444 114c 01       		.uleb128 0x1
 10445 114d 50       		.byte	0x50
 10446 114e 9F       		.byte	0x9f
 10447 114f 00000000 		.4byte	0
 10448 1153 00000000 		.4byte	0
 10449              	.LLST114:
 10450 1157 340A0000 		.4byte	.LVL255-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 284


 10451 115b 3D0A0000 		.4byte	.LVL256-1-.Ltext0
 10452 115f 0100     		.2byte	0x1
 10453 1161 51       		.byte	0x51
 10454 1162 3D0A0000 		.4byte	.LVL256-1-.Ltext0
 10455 1166 780A0000 		.4byte	.LVL264-.Ltext0
 10456 116a 0100     		.2byte	0x1
 10457 116c 55       		.byte	0x55
 10458 116d 780A0000 		.4byte	.LVL264-.Ltext0
 10459 1171 7C0A0000 		.4byte	.LFE33-.Ltext0
 10460 1175 0400     		.2byte	0x4
 10461 1177 F3       		.byte	0xf3
 10462 1178 01       		.uleb128 0x1
 10463 1179 51       		.byte	0x51
 10464 117a 9F       		.byte	0x9f
 10465 117b 00000000 		.4byte	0
 10466 117f 00000000 		.4byte	0
 10467              	.LLST115:
 10468 1183 700A0000 		.4byte	.LVL262-.Ltext0
 10469 1187 780A0000 		.4byte	.LVL264-.Ltext0
 10470 118b 0100     		.2byte	0x1
 10471 118d 54       		.byte	0x54
 10472 118e 780A0000 		.4byte	.LVL264-.Ltext0
 10473 1192 7C0A0000 		.4byte	.LFE33-.Ltext0
 10474 1196 0100     		.2byte	0x1
 10475 1198 50       		.byte	0x50
 10476 1199 00000000 		.4byte	0
 10477 119d 00000000 		.4byte	0
 10478              	.LLST116:
 10479 11a1 460A0000 		.4byte	.LVL257-.Ltext0
 10480 11a5 660A0000 		.4byte	.LVL258-.Ltext0
 10481 11a9 0100     		.2byte	0x1
 10482 11ab 50       		.byte	0x50
 10483 11ac 6E0A0000 		.4byte	.LVL261-.Ltext0
 10484 11b0 700A0000 		.4byte	.LVL262-.Ltext0
 10485 11b4 0100     		.2byte	0x1
 10486 11b6 50       		.byte	0x50
 10487 11b7 00000000 		.4byte	0
 10488 11bb 00000000 		.4byte	0
 10489              	.LLST117:
 10490 11bf 980A0000 		.4byte	.LFB41-.Ltext0
 10491 11c3 9C0A0000 		.4byte	.LCFI35-.Ltext0
 10492 11c7 0200     		.2byte	0x2
 10493 11c9 7D       		.byte	0x7d
 10494 11ca 00       		.sleb128 0
 10495 11cb 9C0A0000 		.4byte	.LCFI35-.Ltext0
 10496 11cf 160B0000 		.4byte	.LCFI36-.Ltext0
 10497 11d3 0200     		.2byte	0x2
 10498 11d5 7D       		.byte	0x7d
 10499 11d6 20       		.sleb128 32
 10500 11d7 160B0000 		.4byte	.LCFI36-.Ltext0
 10501 11db 1A0B0000 		.4byte	.LCFI37-.Ltext0
 10502 11df 0200     		.2byte	0x2
 10503 11e1 7D       		.byte	0x7d
 10504 11e2 00       		.sleb128 0
 10505 11e3 1A0B0000 		.4byte	.LCFI37-.Ltext0
 10506 11e7 280B0000 		.4byte	.LFE41-.Ltext0
 10507 11eb 0200     		.2byte	0x2
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 285


 10508 11ed 7D       		.byte	0x7d
 10509 11ee 20       		.sleb128 32
 10510 11ef 00000000 		.4byte	0
 10511 11f3 00000000 		.4byte	0
 10512              	.LLST118:
 10513 11f7 980A0000 		.4byte	.LVL266-.Ltext0
 10514 11fb DC0A0000 		.4byte	.LVL267-.Ltext0
 10515 11ff 0100     		.2byte	0x1
 10516 1201 50       		.byte	0x50
 10517 1202 DC0A0000 		.4byte	.LVL267-.Ltext0
 10518 1206 160B0000 		.4byte	.LVL269-.Ltext0
 10519 120a 0100     		.2byte	0x1
 10520 120c 54       		.byte	0x54
 10521 120d 160B0000 		.4byte	.LVL269-.Ltext0
 10522 1211 190B0000 		.4byte	.LVL270-1-.Ltext0
 10523 1215 0300     		.2byte	0x3
 10524 1217 71       		.byte	0x71
 10525 1218 7C       		.sleb128 -4
 10526 1219 9F       		.byte	0x9f
 10527 121a 190B0000 		.4byte	.LVL270-1-.Ltext0
 10528 121e 1A0B0000 		.4byte	.LVL270-.Ltext0
 10529 1222 0400     		.2byte	0x4
 10530 1224 F3       		.byte	0xf3
 10531 1225 01       		.uleb128 0x1
 10532 1226 50       		.byte	0x50
 10533 1227 9F       		.byte	0x9f
 10534 1228 1A0B0000 		.4byte	.LVL270-.Ltext0
 10535 122c 280B0000 		.4byte	.LFE41-.Ltext0
 10536 1230 0100     		.2byte	0x1
 10537 1232 50       		.byte	0x50
 10538 1233 00000000 		.4byte	0
 10539 1237 00000000 		.4byte	0
 10540              	.LLST120:
 10541 123b 280B0000 		.4byte	.LFB42-.Ltext0
 10542 123f 2A0B0000 		.4byte	.LCFI38-.Ltext0
 10543 1243 0200     		.2byte	0x2
 10544 1245 7D       		.byte	0x7d
 10545 1246 00       		.sleb128 0
 10546 1247 2A0B0000 		.4byte	.LCFI38-.Ltext0
 10547 124b 980B0000 		.4byte	.LFE42-.Ltext0
 10548 124f 0200     		.2byte	0x2
 10549 1251 7D       		.byte	0x7d
 10550 1252 10       		.sleb128 16
 10551 1253 00000000 		.4byte	0
 10552 1257 00000000 		.4byte	0
 10553              	.LLST121:
 10554 125b 280B0000 		.4byte	.LVL271-.Ltext0
 10555 125f 300B0000 		.4byte	.LVL272-.Ltext0
 10556 1263 0100     		.2byte	0x1
 10557 1265 50       		.byte	0x50
 10558 1266 300B0000 		.4byte	.LVL272-.Ltext0
 10559 126a 320B0000 		.4byte	.LVL273-.Ltext0
 10560 126e 0100     		.2byte	0x1
 10561 1270 54       		.byte	0x54
 10562 1271 320B0000 		.4byte	.LVL273-.Ltext0
 10563 1275 480B0000 		.4byte	.LVL274-.Ltext0
 10564 1279 0100     		.2byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 286


 10565 127b 50       		.byte	0x50
 10566 127c 480B0000 		.4byte	.LVL274-.Ltext0
 10567 1280 760B0000 		.4byte	.LVL276-.Ltext0
 10568 1284 0100     		.2byte	0x1
 10569 1286 54       		.byte	0x54
 10570 1287 760B0000 		.4byte	.LVL276-.Ltext0
 10571 128b 900B0000 		.4byte	.LVL279-.Ltext0
 10572 128f 0300     		.2byte	0x3
 10573 1291 75       		.byte	0x75
 10574 1292 7C       		.sleb128 -4
 10575 1293 9F       		.byte	0x9f
 10576 1294 900B0000 		.4byte	.LVL279-.Ltext0
 10577 1298 980B0000 		.4byte	.LFE42-.Ltext0
 10578 129c 0400     		.2byte	0x4
 10579 129e F3       		.byte	0xf3
 10580 129f 01       		.uleb128 0x1
 10581 12a0 50       		.byte	0x50
 10582 12a1 9F       		.byte	0x9f
 10583 12a2 00000000 		.4byte	0
 10584 12a6 00000000 		.4byte	0
 10585              	.LLST123:
 10586 12aa 280B0000 		.4byte	.LVL271-.Ltext0
 10587 12ae 8C0B0000 		.4byte	.LVL277-.Ltext0
 10588 12b2 0200     		.2byte	0x2
 10589 12b4 30       		.byte	0x30
 10590 12b5 9F       		.byte	0x9f
 10591 12b6 8C0B0000 		.4byte	.LVL277-.Ltext0
 10592 12ba 8E0B0000 		.4byte	.LVL278-.Ltext0
 10593 12be 0200     		.2byte	0x2
 10594 12c0 31       		.byte	0x31
 10595 12c1 9F       		.byte	0x9f
 10596 12c2 8E0B0000 		.4byte	.LVL278-.Ltext0
 10597 12c6 980B0000 		.4byte	.LFE42-.Ltext0
 10598 12ca 0100     		.2byte	0x1
 10599 12cc 50       		.byte	0x50
 10600 12cd 00000000 		.4byte	0
 10601 12d1 00000000 		.4byte	0
 10602              	.LLST124:
 10603 12d5 C80B0000 		.4byte	.LFB45-.Ltext0
 10604 12d9 CA0B0000 		.4byte	.LCFI39-.Ltext0
 10605 12dd 0200     		.2byte	0x2
 10606 12df 7D       		.byte	0x7d
 10607 12e0 00       		.sleb128 0
 10608 12e1 CA0B0000 		.4byte	.LCFI39-.Ltext0
 10609 12e5 300C0000 		.4byte	.LFE45-.Ltext0
 10610 12e9 0200     		.2byte	0x2
 10611 12eb 7D       		.byte	0x7d
 10612 12ec 10       		.sleb128 16
 10613 12ed 00000000 		.4byte	0
 10614 12f1 00000000 		.4byte	0
 10615              	.LLST125:
 10616 12f5 C80B0000 		.4byte	.LVL281-.Ltext0
 10617 12f9 D30B0000 		.4byte	.LVL282-1-.Ltext0
 10618 12fd 0100     		.2byte	0x1
 10619 12ff 50       		.byte	0x50
 10620 1300 D30B0000 		.4byte	.LVL282-1-.Ltext0
 10621 1304 260C0000 		.4byte	.LVL288-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 287


 10622 1308 0100     		.2byte	0x1
 10623 130a 56       		.byte	0x56
 10624 130b 260C0000 		.4byte	.LVL288-.Ltext0
 10625 130f 300C0000 		.4byte	.LFE45-.Ltext0
 10626 1313 0400     		.2byte	0x4
 10627 1315 F3       		.byte	0xf3
 10628 1316 01       		.uleb128 0x1
 10629 1317 50       		.byte	0x50
 10630 1318 9F       		.byte	0x9f
 10631 1319 00000000 		.4byte	0
 10632 131d 00000000 		.4byte	0
 10633              	.LLST126:
 10634 1321 C80B0000 		.4byte	.LVL281-.Ltext0
 10635 1325 D30B0000 		.4byte	.LVL282-1-.Ltext0
 10636 1329 0100     		.2byte	0x1
 10637 132b 51       		.byte	0x51
 10638 132c D30B0000 		.4byte	.LVL282-1-.Ltext0
 10639 1330 080C0000 		.4byte	.LVL286-.Ltext0
 10640 1334 0100     		.2byte	0x1
 10641 1336 55       		.byte	0x55
 10642 1337 080C0000 		.4byte	.LVL286-.Ltext0
 10643 133b 300C0000 		.4byte	.LFE45-.Ltext0
 10644 133f 0400     		.2byte	0x4
 10645 1341 F3       		.byte	0xf3
 10646 1342 01       		.uleb128 0x1
 10647 1343 51       		.byte	0x51
 10648 1344 9F       		.byte	0x9f
 10649 1345 00000000 		.4byte	0
 10650 1349 00000000 		.4byte	0
 10651              	.LLST127:
 10652 134d 080C0000 		.4byte	.LVL286-.Ltext0
 10653 1351 260C0000 		.4byte	.LVL288-.Ltext0
 10654 1355 0100     		.2byte	0x1
 10655 1357 55       		.byte	0x55
 10656 1358 260C0000 		.4byte	.LVL288-.Ltext0
 10657 135c 300C0000 		.4byte	.LFE45-.Ltext0
 10658 1360 0100     		.2byte	0x1
 10659 1362 50       		.byte	0x50
 10660 1363 00000000 		.4byte	0
 10661 1367 00000000 		.4byte	0
 10662              	.LLST128:
 10663 136b 300C0000 		.4byte	.LFB46-.Ltext0
 10664 136f 340C0000 		.4byte	.LCFI40-.Ltext0
 10665 1373 0200     		.2byte	0x2
 10666 1375 7D       		.byte	0x7d
 10667 1376 00       		.sleb128 0
 10668 1377 340C0000 		.4byte	.LCFI40-.Ltext0
 10669 137b BC0C0000 		.4byte	.LFE46-.Ltext0
 10670 137f 0200     		.2byte	0x2
 10671 1381 7D       		.byte	0x7d
 10672 1382 18       		.sleb128 24
 10673 1383 00000000 		.4byte	0
 10674 1387 00000000 		.4byte	0
 10675              	.LLST129:
 10676 138b 300C0000 		.4byte	.LVL289-.Ltext0
 10677 138f 410C0000 		.4byte	.LVL290-1-.Ltext0
 10678 1393 0100     		.2byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 288


 10679 1395 50       		.byte	0x50
 10680 1396 410C0000 		.4byte	.LVL290-1-.Ltext0
 10681 139a B20C0000 		.4byte	.LVL297-.Ltext0
 10682 139e 0100     		.2byte	0x1
 10683 13a0 58       		.byte	0x58
 10684 13a1 B20C0000 		.4byte	.LVL297-.Ltext0
 10685 13a5 BC0C0000 		.4byte	.LFE46-.Ltext0
 10686 13a9 0400     		.2byte	0x4
 10687 13ab F3       		.byte	0xf3
 10688 13ac 01       		.uleb128 0x1
 10689 13ad 50       		.byte	0x50
 10690 13ae 9F       		.byte	0x9f
 10691 13af 00000000 		.4byte	0
 10692 13b3 00000000 		.4byte	0
 10693              	.LLST130:
 10694 13b7 300C0000 		.4byte	.LVL289-.Ltext0
 10695 13bb 410C0000 		.4byte	.LVL290-1-.Ltext0
 10696 13bf 0100     		.2byte	0x1
 10697 13c1 51       		.byte	0x51
 10698 13c2 410C0000 		.4byte	.LVL290-1-.Ltext0
 10699 13c6 B20C0000 		.4byte	.LVL297-.Ltext0
 10700 13ca 0100     		.2byte	0x1
 10701 13cc 56       		.byte	0x56
 10702 13cd B20C0000 		.4byte	.LVL297-.Ltext0
 10703 13d1 BC0C0000 		.4byte	.LFE46-.Ltext0
 10704 13d5 0400     		.2byte	0x4
 10705 13d7 F3       		.byte	0xf3
 10706 13d8 01       		.uleb128 0x1
 10707 13d9 51       		.byte	0x51
 10708 13da 9F       		.byte	0x9f
 10709 13db 00000000 		.4byte	0
 10710 13df 00000000 		.4byte	0
 10711              	.LLST131:
 10712 13e3 300C0000 		.4byte	.LVL289-.Ltext0
 10713 13e7 410C0000 		.4byte	.LVL290-1-.Ltext0
 10714 13eb 0100     		.2byte	0x1
 10715 13ed 52       		.byte	0x52
 10716 13ee 410C0000 		.4byte	.LVL290-1-.Ltext0
 10717 13f2 960C0000 		.4byte	.LVL294-.Ltext0
 10718 13f6 0100     		.2byte	0x1
 10719 13f8 55       		.byte	0x55
 10720 13f9 960C0000 		.4byte	.LVL294-.Ltext0
 10721 13fd BC0C0000 		.4byte	.LFE46-.Ltext0
 10722 1401 0400     		.2byte	0x4
 10723 1403 F3       		.byte	0xf3
 10724 1404 01       		.uleb128 0x1
 10725 1405 52       		.byte	0x52
 10726 1406 9F       		.byte	0x9f
 10727 1407 00000000 		.4byte	0
 10728 140b 00000000 		.4byte	0
 10729              	.LLST132:
 10730 140f 300C0000 		.4byte	.LVL289-.Ltext0
 10731 1413 410C0000 		.4byte	.LVL290-1-.Ltext0
 10732 1417 0100     		.2byte	0x1
 10733 1419 53       		.byte	0x53
 10734 141a 410C0000 		.4byte	.LVL290-1-.Ltext0
 10735 141e B20C0000 		.4byte	.LVL297-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 289


 10736 1422 0100     		.2byte	0x1
 10737 1424 57       		.byte	0x57
 10738 1425 B20C0000 		.4byte	.LVL297-.Ltext0
 10739 1429 BC0C0000 		.4byte	.LFE46-.Ltext0
 10740 142d 0400     		.2byte	0x4
 10741 142f F3       		.byte	0xf3
 10742 1430 01       		.uleb128 0x1
 10743 1431 53       		.byte	0x53
 10744 1432 9F       		.byte	0x9f
 10745 1433 00000000 		.4byte	0
 10746 1437 00000000 		.4byte	0
 10747              	.LLST133:
 10748 143b A20C0000 		.4byte	.LVL295-.Ltext0
 10749 143f B20C0000 		.4byte	.LVL297-.Ltext0
 10750 1443 0100     		.2byte	0x1
 10751 1445 55       		.byte	0x55
 10752 1446 B20C0000 		.4byte	.LVL297-.Ltext0
 10753 144a BC0C0000 		.4byte	.LFE46-.Ltext0
 10754 144e 0100     		.2byte	0x1
 10755 1450 50       		.byte	0x50
 10756 1451 00000000 		.4byte	0
 10757 1455 00000000 		.4byte	0
 10758              	.LLST134:
 10759 1459 BC0C0000 		.4byte	.LFB47-.Ltext0
 10760 145d BE0C0000 		.4byte	.LCFI41-.Ltext0
 10761 1461 0200     		.2byte	0x2
 10762 1463 7D       		.byte	0x7d
 10763 1464 00       		.sleb128 0
 10764 1465 BE0C0000 		.4byte	.LCFI41-.Ltext0
 10765 1469 5C0D0000 		.4byte	.LFE47-.Ltext0
 10766 146d 0200     		.2byte	0x2
 10767 146f 7D       		.byte	0x7d
 10768 1470 18       		.sleb128 24
 10769 1471 00000000 		.4byte	0
 10770 1475 00000000 		.4byte	0
 10771              	.LLST135:
 10772 1479 BC0C0000 		.4byte	.LVL298-.Ltext0
 10773 147d C90C0000 		.4byte	.LVL300-1-.Ltext0
 10774 1481 0100     		.2byte	0x1
 10775 1483 50       		.byte	0x50
 10776 1484 C90C0000 		.4byte	.LVL300-1-.Ltext0
 10777 1488 520D0000 		.4byte	.LVL313-.Ltext0
 10778 148c 0100     		.2byte	0x1
 10779 148e 54       		.byte	0x54
 10780 148f 520D0000 		.4byte	.LVL313-.Ltext0
 10781 1493 5C0D0000 		.4byte	.LFE47-.Ltext0
 10782 1497 0400     		.2byte	0x4
 10783 1499 F3       		.byte	0xf3
 10784 149a 01       		.uleb128 0x1
 10785 149b 50       		.byte	0x50
 10786 149c 9F       		.byte	0x9f
 10787 149d 00000000 		.4byte	0
 10788 14a1 00000000 		.4byte	0
 10789              	.LLST136:
 10790 14a5 BC0C0000 		.4byte	.LVL298-.Ltext0
 10791 14a9 C90C0000 		.4byte	.LVL300-1-.Ltext0
 10792 14ad 0100     		.2byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 290


 10793 14af 51       		.byte	0x51
 10794 14b0 C90C0000 		.4byte	.LVL300-1-.Ltext0
 10795 14b4 EE0C0000 		.4byte	.LVL303-.Ltext0
 10796 14b8 0100     		.2byte	0x1
 10797 14ba 57       		.byte	0x57
 10798 14bb EE0C0000 		.4byte	.LVL303-.Ltext0
 10799 14bf F00C0000 		.4byte	.LVL304-.Ltext0
 10800 14c3 0400     		.2byte	0x4
 10801 14c5 F3       		.byte	0xf3
 10802 14c6 01       		.uleb128 0x1
 10803 14c7 51       		.byte	0x51
 10804 14c8 9F       		.byte	0x9f
 10805 14c9 F00C0000 		.4byte	.LVL304-.Ltext0
 10806 14cd FC0C0000 		.4byte	.LVL305-.Ltext0
 10807 14d1 0100     		.2byte	0x1
 10808 14d3 57       		.byte	0x57
 10809 14d4 FC0C0000 		.4byte	.LVL305-.Ltext0
 10810 14d8 480D0000 		.4byte	.LVL310-.Ltext0
 10811 14dc 0400     		.2byte	0x4
 10812 14de F3       		.byte	0xf3
 10813 14df 01       		.uleb128 0x1
 10814 14e0 51       		.byte	0x51
 10815 14e1 9F       		.byte	0x9f
 10816 14e2 480D0000 		.4byte	.LVL310-.Ltext0
 10817 14e6 4A0D0000 		.4byte	.LVL311-.Ltext0
 10818 14ea 0100     		.2byte	0x1
 10819 14ec 57       		.byte	0x57
 10820 14ed 4A0D0000 		.4byte	.LVL311-.Ltext0
 10821 14f1 5C0D0000 		.4byte	.LFE47-.Ltext0
 10822 14f5 0400     		.2byte	0x4
 10823 14f7 F3       		.byte	0xf3
 10824 14f8 01       		.uleb128 0x1
 10825 14f9 51       		.byte	0x51
 10826 14fa 9F       		.byte	0x9f
 10827 14fb 00000000 		.4byte	0
 10828 14ff 00000000 		.4byte	0
 10829              	.LLST137:
 10830 1503 BC0C0000 		.4byte	.LVL298-.Ltext0
 10831 1507 C90C0000 		.4byte	.LVL300-1-.Ltext0
 10832 150b 0100     		.2byte	0x1
 10833 150d 52       		.byte	0x52
 10834 150e C90C0000 		.4byte	.LVL300-1-.Ltext0
 10835 1512 5C0D0000 		.4byte	.LFE47-.Ltext0
 10836 1516 0400     		.2byte	0x4
 10837 1518 F3       		.byte	0xf3
 10838 1519 01       		.uleb128 0x1
 10839 151a 52       		.byte	0x52
 10840 151b 9F       		.byte	0x9f
 10841 151c 00000000 		.4byte	0
 10842 1520 00000000 		.4byte	0
 10843              	.LLST138:
 10844 1524 BC0C0000 		.4byte	.LVL298-.Ltext0
 10845 1528 C90C0000 		.4byte	.LVL300-1-.Ltext0
 10846 152c 0100     		.2byte	0x1
 10847 152e 53       		.byte	0x53
 10848 152f C90C0000 		.4byte	.LVL300-1-.Ltext0
 10849 1533 D40C0000 		.4byte	.LVL301-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 291


 10850 1537 0100     		.2byte	0x1
 10851 1539 55       		.byte	0x55
 10852 153a D40C0000 		.4byte	.LVL301-.Ltext0
 10853 153e 5C0D0000 		.4byte	.LFE47-.Ltext0
 10854 1542 0400     		.2byte	0x4
 10855 1544 F3       		.byte	0xf3
 10856 1545 01       		.uleb128 0x1
 10857 1546 53       		.byte	0x53
 10858 1547 9F       		.byte	0x9f
 10859 1548 00000000 		.4byte	0
 10860 154c 00000000 		.4byte	0
 10861              	.LLST139:
 10862 1550 C20C0000 		.4byte	.LVL299-.Ltext0
 10863 1554 C90C0000 		.4byte	.LVL300-1-.Ltext0
 10864 1558 0100     		.2byte	0x1
 10865 155a 50       		.byte	0x50
 10866 155b C90C0000 		.4byte	.LVL300-1-.Ltext0
 10867 155f 520D0000 		.4byte	.LVL313-.Ltext0
 10868 1563 0100     		.2byte	0x1
 10869 1565 54       		.byte	0x54
 10870 1566 520D0000 		.4byte	.LVL313-.Ltext0
 10871 156a 5C0D0000 		.4byte	.LFE47-.Ltext0
 10872 156e 0400     		.2byte	0x4
 10873 1570 F3       		.byte	0xf3
 10874 1571 01       		.uleb128 0x1
 10875 1572 50       		.byte	0x50
 10876 1573 9F       		.byte	0x9f
 10877 1574 00000000 		.4byte	0
 10878 1578 00000000 		.4byte	0
 10879              	.LLST140:
 10880 157c DA0C0000 		.4byte	.LVL302-.Ltext0
 10881 1580 040D0000 		.4byte	.LVL306-.Ltext0
 10882 1584 0100     		.2byte	0x1
 10883 1586 55       		.byte	0x55
 10884 1587 060D0000 		.4byte	.LVL307-.Ltext0
 10885 158b 4A0D0000 		.4byte	.LVL311-.Ltext0
 10886 158f 0100     		.2byte	0x1
 10887 1591 55       		.byte	0x55
 10888 1592 00000000 		.4byte	0
 10889 1596 00000000 		.4byte	0
 10890              	.LLST141:
 10891 159a 5C0D0000 		.4byte	.LFB48-.Ltext0
 10892 159e 600D0000 		.4byte	.LCFI42-.Ltext0
 10893 15a2 0200     		.2byte	0x2
 10894 15a4 7D       		.byte	0x7d
 10895 15a5 00       		.sleb128 0
 10896 15a6 600D0000 		.4byte	.LCFI42-.Ltext0
 10897 15aa 1C0E0000 		.4byte	.LFE48-.Ltext0
 10898 15ae 0200     		.2byte	0x2
 10899 15b0 7D       		.byte	0x7d
 10900 15b1 20       		.sleb128 32
 10901 15b2 00000000 		.4byte	0
 10902 15b6 00000000 		.4byte	0
 10903              	.LLST142:
 10904 15ba 5C0D0000 		.4byte	.LVL314-.Ltext0
 10905 15be 7A0D0000 		.4byte	.LVL316-.Ltext0
 10906 15c2 0100     		.2byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 292


 10907 15c4 50       		.byte	0x50
 10908 15c5 7A0D0000 		.4byte	.LVL316-.Ltext0
 10909 15c9 160E0000 		.4byte	.LVL332-.Ltext0
 10910 15cd 0100     		.2byte	0x1
 10911 15cf 54       		.byte	0x54
 10912 15d0 160E0000 		.4byte	.LVL332-.Ltext0
 10913 15d4 1C0E0000 		.4byte	.LFE48-.Ltext0
 10914 15d8 0400     		.2byte	0x4
 10915 15da F3       		.byte	0xf3
 10916 15db 01       		.uleb128 0x1
 10917 15dc 50       		.byte	0x50
 10918 15dd 9F       		.byte	0x9f
 10919 15de 00000000 		.4byte	0
 10920 15e2 00000000 		.4byte	0
 10921              	.LLST143:
 10922 15e6 5C0D0000 		.4byte	.LVL314-.Ltext0
 10923 15ea 9E0D0000 		.4byte	.LVL320-.Ltext0
 10924 15ee 0100     		.2byte	0x1
 10925 15f0 51       		.byte	0x51
 10926 15f1 9E0D0000 		.4byte	.LVL320-.Ltext0
 10927 15f5 A00D0000 		.4byte	.LVL321-.Ltext0
 10928 15f9 0400     		.2byte	0x4
 10929 15fb F3       		.byte	0xf3
 10930 15fc 01       		.uleb128 0x1
 10931 15fd 51       		.byte	0x51
 10932 15fe 9F       		.byte	0x9f
 10933 15ff A00D0000 		.4byte	.LVL321-.Ltext0
 10934 1603 AC0D0000 		.4byte	.LVL322-.Ltext0
 10935 1607 0100     		.2byte	0x1
 10936 1609 51       		.byte	0x51
 10937 160a AC0D0000 		.4byte	.LVL322-.Ltext0
 10938 160e 0C0E0000 		.4byte	.LVL330-.Ltext0
 10939 1612 0400     		.2byte	0x4
 10940 1614 F3       		.byte	0xf3
 10941 1615 01       		.uleb128 0x1
 10942 1616 51       		.byte	0x51
 10943 1617 9F       		.byte	0x9f
 10944 1618 0C0E0000 		.4byte	.LVL330-.Ltext0
 10945 161c 0E0E0000 		.4byte	.LVL331-.Ltext0
 10946 1620 0100     		.2byte	0x1
 10947 1622 51       		.byte	0x51
 10948 1623 0E0E0000 		.4byte	.LVL331-.Ltext0
 10949 1627 1C0E0000 		.4byte	.LFE48-.Ltext0
 10950 162b 0400     		.2byte	0x4
 10951 162d F3       		.byte	0xf3
 10952 162e 01       		.uleb128 0x1
 10953 162f 51       		.byte	0x51
 10954 1630 9F       		.byte	0x9f
 10955 1631 00000000 		.4byte	0
 10956 1635 00000000 		.4byte	0
 10957              	.LLST144:
 10958 1639 5C0D0000 		.4byte	.LVL314-.Ltext0
 10959 163d 880D0000 		.4byte	.LVL318-.Ltext0
 10960 1641 0100     		.2byte	0x1
 10961 1643 52       		.byte	0x52
 10962 1644 880D0000 		.4byte	.LVL318-.Ltext0
 10963 1648 1C0E0000 		.4byte	.LFE48-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 293


 10964 164c 0400     		.2byte	0x4
 10965 164e F3       		.byte	0xf3
 10966 164f 01       		.uleb128 0x1
 10967 1650 52       		.byte	0x52
 10968 1651 9F       		.byte	0x9f
 10969 1652 00000000 		.4byte	0
 10970 1656 00000000 		.4byte	0
 10971              	.LLST145:
 10972 165a 5C0D0000 		.4byte	.LVL314-.Ltext0
 10973 165e 860D0000 		.4byte	.LVL317-.Ltext0
 10974 1662 0100     		.2byte	0x1
 10975 1664 53       		.byte	0x53
 10976 1665 860D0000 		.4byte	.LVL317-.Ltext0
 10977 1669 1C0E0000 		.4byte	.LFE48-.Ltext0
 10978 166d 0400     		.2byte	0x4
 10979 166f F3       		.byte	0xf3
 10980 1670 01       		.uleb128 0x1
 10981 1671 53       		.byte	0x53
 10982 1672 9F       		.byte	0x9f
 10983 1673 00000000 		.4byte	0
 10984 1677 00000000 		.4byte	0
 10985              	.LLST146:
 10986 167b 5C0D0000 		.4byte	.LVL314-.Ltext0
 10987 167f 160E0000 		.4byte	.LVL332-.Ltext0
 10988 1683 0200     		.2byte	0x2
 10989 1685 91       		.byte	0x91
 10990 1686 00       		.sleb128 0
 10991 1687 160E0000 		.4byte	.LVL332-.Ltext0
 10992 168b 1C0E0000 		.4byte	.LFE48-.Ltext0
 10993 168f 0200     		.2byte	0x2
 10994 1691 7D       		.byte	0x7d
 10995 1692 00       		.sleb128 0
 10996 1693 00000000 		.4byte	0
 10997 1697 00000000 		.4byte	0
 10998              	.LLST147:
 10999 169b 660D0000 		.4byte	.LVL315-.Ltext0
 11000 169f 7A0D0000 		.4byte	.LVL316-.Ltext0
 11001 16a3 0100     		.2byte	0x1
 11002 16a5 50       		.byte	0x50
 11003 16a6 7A0D0000 		.4byte	.LVL316-.Ltext0
 11004 16aa 160E0000 		.4byte	.LVL332-.Ltext0
 11005 16ae 0100     		.2byte	0x1
 11006 16b0 54       		.byte	0x54
 11007 16b1 160E0000 		.4byte	.LVL332-.Ltext0
 11008 16b5 1C0E0000 		.4byte	.LFE48-.Ltext0
 11009 16b9 0400     		.2byte	0x4
 11010 16bb F3       		.byte	0xf3
 11011 16bc 01       		.uleb128 0x1
 11012 16bd 50       		.byte	0x50
 11013 16be 9F       		.byte	0x9f
 11014 16bf 00000000 		.4byte	0
 11015 16c3 00000000 		.4byte	0
 11016              	.LLST148:
 11017 16c7 8A0D0000 		.4byte	.LVL319-.Ltext0
 11018 16cb B20D0000 		.4byte	.LVL323-.Ltext0
 11019 16cf 0100     		.2byte	0x1
 11020 16d1 56       		.byte	0x56
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 294


 11021 16d2 B60D0000 		.4byte	.LVL324-.Ltext0
 11022 16d6 CE0D0000 		.4byte	.LVL326-.Ltext0
 11023 16da 0100     		.2byte	0x1
 11024 16dc 56       		.byte	0x56
 11025 16dd E00D0000 		.4byte	.LVL327-.Ltext0
 11026 16e1 E80D0000 		.4byte	.LVL328-.Ltext0
 11027 16e5 0100     		.2byte	0x1
 11028 16e7 56       		.byte	0x56
 11029 16e8 0C0E0000 		.4byte	.LVL330-.Ltext0
 11030 16ec 0E0E0000 		.4byte	.LVL331-.Ltext0
 11031 16f0 0100     		.2byte	0x1
 11032 16f2 56       		.byte	0x56
 11033 16f3 00000000 		.4byte	0
 11034 16f7 00000000 		.4byte	0
 11035              	.LLST149:
 11036 16fb 7A0D0000 		.4byte	.LVL316-.Ltext0
 11037 16ff 160E0000 		.4byte	.LVL332-.Ltext0
 11038 1703 0100     		.2byte	0x1
 11039 1705 57       		.byte	0x57
 11040 1706 00000000 		.4byte	0
 11041 170a 00000000 		.4byte	0
 11042              	.LLST150:
 11043 170e 0E0E0000 		.4byte	.LVL331-.Ltext0
 11044 1712 160E0000 		.4byte	.LVL332-.Ltext0
 11045 1716 0100     		.2byte	0x1
 11046 1718 57       		.byte	0x57
 11047 1719 00000000 		.4byte	0
 11048 171d 00000000 		.4byte	0
 11049              	.LLST151:
 11050 1721 1C0E0000 		.4byte	.LFB49-.Ltext0
 11051 1725 200E0000 		.4byte	.LCFI43-.Ltext0
 11052 1729 0200     		.2byte	0x2
 11053 172b 7D       		.byte	0x7d
 11054 172c 00       		.sleb128 0
 11055 172d 200E0000 		.4byte	.LCFI43-.Ltext0
 11056 1731 A80E0000 		.4byte	.LFE49-.Ltext0
 11057 1735 0200     		.2byte	0x2
 11058 1737 7D       		.byte	0x7d
 11059 1738 20       		.sleb128 32
 11060 1739 00000000 		.4byte	0
 11061 173d 00000000 		.4byte	0
 11062              	.LLST152:
 11063 1741 1C0E0000 		.4byte	.LVL333-.Ltext0
 11064 1745 5C0E0000 		.4byte	.LVL336-.Ltext0
 11065 1749 0100     		.2byte	0x1
 11066 174b 50       		.byte	0x50
 11067 174c 5C0E0000 		.4byte	.LVL336-.Ltext0
 11068 1750 780E0000 		.4byte	.LVL339-.Ltext0
 11069 1754 0100     		.2byte	0x1
 11070 1756 54       		.byte	0x54
 11071 1757 780E0000 		.4byte	.LVL339-.Ltext0
 11072 175b 7C0E0000 		.4byte	.LVL340-.Ltext0
 11073 175f 0100     		.2byte	0x1
 11074 1761 50       		.byte	0x50
 11075 1762 7C0E0000 		.4byte	.LVL340-.Ltext0
 11076 1766 A40E0000 		.4byte	.LVL344-.Ltext0
 11077 176a 0100     		.2byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 295


 11078 176c 54       		.byte	0x54
 11079 176d A40E0000 		.4byte	.LVL344-.Ltext0
 11080 1771 A80E0000 		.4byte	.LFE49-.Ltext0
 11081 1775 0400     		.2byte	0x4
 11082 1777 F3       		.byte	0xf3
 11083 1778 01       		.uleb128 0x1
 11084 1779 50       		.byte	0x50
 11085 177a 9F       		.byte	0x9f
 11086 177b 00000000 		.4byte	0
 11087 177f 00000000 		.4byte	0
 11088              	.LLST153:
 11089 1783 1C0E0000 		.4byte	.LVL333-.Ltext0
 11090 1787 5F0E0000 		.4byte	.LVL337-1-.Ltext0
 11091 178b 0100     		.2byte	0x1
 11092 178d 51       		.byte	0x51
 11093 178e 5F0E0000 		.4byte	.LVL337-1-.Ltext0
 11094 1792 780E0000 		.4byte	.LVL339-.Ltext0
 11095 1796 0100     		.2byte	0x1
 11096 1798 57       		.byte	0x57
 11097 1799 780E0000 		.4byte	.LVL339-.Ltext0
 11098 179d 800E0000 		.4byte	.LVL341-.Ltext0
 11099 17a1 0100     		.2byte	0x1
 11100 17a3 51       		.byte	0x51
 11101 17a4 800E0000 		.4byte	.LVL341-.Ltext0
 11102 17a8 A40E0000 		.4byte	.LVL344-.Ltext0
 11103 17ac 0100     		.2byte	0x1
 11104 17ae 57       		.byte	0x57
 11105 17af A40E0000 		.4byte	.LVL344-.Ltext0
 11106 17b3 A80E0000 		.4byte	.LFE49-.Ltext0
 11107 17b7 0400     		.2byte	0x4
 11108 17b9 F3       		.byte	0xf3
 11109 17ba 01       		.uleb128 0x1
 11110 17bb 51       		.byte	0x51
 11111 17bc 9F       		.byte	0x9f
 11112 17bd 00000000 		.4byte	0
 11113 17c1 00000000 		.4byte	0
 11114              	.LLST155:
 11115 17c5 460E0000 		.4byte	.LVL335-.Ltext0
 11116 17c9 660E0000 		.4byte	.LVL338-.Ltext0
 11117 17cd 0100     		.2byte	0x1
 11118 17cf 56       		.byte	0x56
 11119 17d0 780E0000 		.4byte	.LVL339-.Ltext0
 11120 17d4 800E0000 		.4byte	.LVL341-.Ltext0
 11121 17d8 0100     		.2byte	0x1
 11122 17da 56       		.byte	0x56
 11123 17db 00000000 		.4byte	0
 11124 17df 00000000 		.4byte	0
 11125              	.LLST156:
 11126 17e3 380E0000 		.4byte	.LVL334-.Ltext0
 11127 17e7 A40E0000 		.4byte	.LVL344-.Ltext0
 11128 17eb 0100     		.2byte	0x1
 11129 17ed 58       		.byte	0x58
 11130 17ee 00000000 		.4byte	0
 11131 17f2 00000000 		.4byte	0
 11132              	.LLST157:
 11133 17f6 9C0E0000 		.4byte	.LVL343-.Ltext0
 11134 17fa A40E0000 		.4byte	.LVL344-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 296


 11135 17fe 0100     		.2byte	0x1
 11136 1800 58       		.byte	0x58
 11137 1801 00000000 		.4byte	0
 11138 1805 00000000 		.4byte	0
 11139              	.LLST158:
 11140 1809 A80E0000 		.4byte	.LFB50-.Ltext0
 11141 180d AA0E0000 		.4byte	.LCFI44-.Ltext0
 11142 1811 0200     		.2byte	0x2
 11143 1813 7D       		.byte	0x7d
 11144 1814 00       		.sleb128 0
 11145 1815 AA0E0000 		.4byte	.LCFI44-.Ltext0
 11146 1819 D40E0000 		.4byte	.LFE50-.Ltext0
 11147 181d 0200     		.2byte	0x2
 11148 181f 7D       		.byte	0x7d
 11149 1820 10       		.sleb128 16
 11150 1821 00000000 		.4byte	0
 11151 1825 00000000 		.4byte	0
 11152              	.LLST159:
 11153 1829 A80E0000 		.4byte	.LVL345-.Ltext0
 11154 182d B20E0000 		.4byte	.LVL346-.Ltext0
 11155 1831 0100     		.2byte	0x1
 11156 1833 50       		.byte	0x50
 11157 1834 00000000 		.4byte	0
 11158 1838 00000000 		.4byte	0
 11159              	.LLST160:
 11160 183c B20E0000 		.4byte	.LVL346-.Ltext0
 11161 1840 CE0E0000 		.4byte	.LVL351-.Ltext0
 11162 1844 0100     		.2byte	0x1
 11163 1846 55       		.byte	0x55
 11164 1847 00000000 		.4byte	0
 11165 184b 00000000 		.4byte	0
 11166              	.LLST161:
 11167 184f C40E0000 		.4byte	.LVL348-.Ltext0
 11168 1853 C60E0000 		.4byte	.LVL349-.Ltext0
 11169 1857 0200     		.2byte	0x2
 11170 1859 31       		.byte	0x31
 11171 185a 9F       		.byte	0x9f
 11172 185b C60E0000 		.4byte	.LVL349-.Ltext0
 11173 185f CE0E0000 		.4byte	.LVL351-.Ltext0
 11174 1863 0100     		.2byte	0x1
 11175 1865 54       		.byte	0x54
 11176 1866 CE0E0000 		.4byte	.LVL351-.Ltext0
 11177 186a D40E0000 		.4byte	.LFE50-.Ltext0
 11178 186e 0100     		.2byte	0x1
 11179 1870 50       		.byte	0x50
 11180 1871 00000000 		.4byte	0
 11181 1875 00000000 		.4byte	0
 11182              		.section	.debug_aranges,"",%progbits
 11183 0000 1C000000 		.4byte	0x1c
 11184 0004 0200     		.2byte	0x2
 11185 0006 00000000 		.4byte	.Ldebug_info0
 11186 000a 04       		.byte	0x4
 11187 000b 00       		.byte	0
 11188 000c 0000     		.2byte	0
 11189 000e 0000     		.2byte	0
 11190 0010 00000000 		.4byte	.Ltext0
 11191 0014 D40E0000 		.4byte	.Letext0-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 297


 11192 0018 00000000 		.4byte	0
 11193 001c 00000000 		.4byte	0
 11194              		.section	.debug_ranges,"",%progbits
 11195              	.Ldebug_ranges0:
 11196 0000 86000000 		.4byte	.LBB42-.Ltext0
 11197 0004 8A000000 		.4byte	.LBE42-.Ltext0
 11198 0008 8E000000 		.4byte	.LBB45-.Ltext0
 11199 000c 94000000 		.4byte	.LBE45-.Ltext0
 11200 0010 00000000 		.4byte	0
 11201 0014 00000000 		.4byte	0
 11202 0018 B0000000 		.4byte	.LBB53-.Ltext0
 11203 001c B2000000 		.4byte	.LBE53-.Ltext0
 11204 0020 B4000000 		.4byte	.LBB54-.Ltext0
 11205 0024 B6000000 		.4byte	.LBE54-.Ltext0
 11206 0028 BC000000 		.4byte	.LBB55-.Ltext0
 11207 002c D6000000 		.4byte	.LBE55-.Ltext0
 11208 0030 F8000000 		.4byte	.LBB59-.Ltext0
 11209 0034 00010000 		.4byte	.LBE59-.Ltext0
 11210 0038 00000000 		.4byte	0
 11211 003c 00000000 		.4byte	0
 11212 0040 D6000000 		.4byte	.LBB56-.Ltext0
 11213 0044 F8000000 		.4byte	.LBE56-.Ltext0
 11214 0048 00010000 		.4byte	.LBB60-.Ltext0
 11215 004c 5E010000 		.4byte	.LBE60-.Ltext0
 11216 0050 00000000 		.4byte	0
 11217 0054 00000000 		.4byte	0
 11218 0058 98020000 		.4byte	.LBB67-.Ltext0
 11219 005c 9A020000 		.4byte	.LBE67-.Ltext0
 11220 0060 9E020000 		.4byte	.LBB70-.Ltext0
 11221 0064 A8020000 		.4byte	.LBE70-.Ltext0
 11222 0068 00000000 		.4byte	0
 11223 006c 00000000 		.4byte	0
 11224 0070 94050000 		.4byte	.LBB83-.Ltext0
 11225 0074 EA050000 		.4byte	.LBE83-.Ltext0
 11226 0078 F8050000 		.4byte	.LBB85-.Ltext0
 11227 007c 36060000 		.4byte	.LBE85-.Ltext0
 11228 0080 00000000 		.4byte	0
 11229 0084 00000000 		.4byte	0
 11230 0088 16070000 		.4byte	.LBB87-.Ltext0
 11231 008c 36070000 		.4byte	.LBE87-.Ltext0
 11232 0090 3A070000 		.4byte	.LBB88-.Ltext0
 11233 0094 48070000 		.4byte	.LBE88-.Ltext0
 11234 0098 00000000 		.4byte	0
 11235 009c 00000000 		.4byte	0
 11236              		.section	.debug_line,"",%progbits
 11237              	.Ldebug_line0:
 11238 0000 24070000 		.section	.debug_str,"MS",%progbits,1
 11238      02002202 
 11238      00000201 
 11238      FB0E0D00 
 11238      01010101 
 11239              	.LASF59:
 11240 0000 70635461 		.ascii	"pcTaskName\000"
 11240      736B4E61 
 11240      6D6500
 11241              	.LASF33:
 11242 000b 75784E75 		.ascii	"uxNumberOfItems\000"
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 298


 11242      6D626572 
 11242      4F664974 
 11242      656D7300 
 11243              	.LASF208:
 11244 001b 76506F72 		.ascii	"vPortExitCritical\000"
 11244      74457869 
 11244      74437269 
 11244      74696361 
 11244      6C00
 11245              	.LASF215:
 11246 002d 78506F72 		.ascii	"xPortStartScheduler\000"
 11246      74537461 
 11246      72745363 
 11246      68656475 
 11246      6C657200 
 11247              	.LASF57:
 11248 0041 75785072 		.ascii	"uxPriority\000"
 11248      696F7269 
 11248      747900
 11249              	.LASF96:
 11250 004c 7078436F 		.ascii	"pxConstList\000"
 11250      6E73744C 
 11250      69737400 
 11251              	.LASF53:
 11252 0058 74736B54 		.ascii	"tskTaskControlBlock\000"
 11252      61736B43 
 11252      6F6E7472 
 11252      6F6C426C 
 11252      6F636B00 
 11253              	.LASF129:
 11254 006c 75785065 		.ascii	"uxPendedCounts\000"
 11254      6E646564 
 11254      436F756E 
 11254      747300
 11255              	.LASF165:
 11256 007b 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 11256      7473546F 
 11256      436C6561 
 11256      724F6E45 
 11256      78697400 
 11257              	.LASF69:
 11258 008f 70727649 		.ascii	"prvInitialiseNewTask\000"
 11258      6E697469 
 11258      616C6973 
 11258      654E6577 
 11258      5461736B 
 11259              	.LASF174:
 11260 00a4 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 11260      67686572 
 11260      5072696F 
 11260      72697479 
 11260      5461736B 
 11261              	.LASF38:
 11262 00be 654E6F41 		.ascii	"eNoAction\000"
 11262      6374696F 
 11262      6E00
 11263              	.LASF188:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 299


 11264 00c8 7578546F 		.ascii	"uxTopReadyPriority\000"
 11264      70526561 
 11264      64795072 
 11264      696F7269 
 11264      747900
 11265              	.LASF0:
 11266 00db 756E7369 		.ascii	"unsigned int\000"
 11266      676E6564 
 11266      20696E74 
 11266      00
 11267              	.LASF141:
 11268 00e8 70784576 		.ascii	"pxEventList\000"
 11268      656E744C 
 11268      69737400 
 11269              	.LASF189:
 11270 00f4 78536368 		.ascii	"xSchedulerRunning\000"
 11270      6564756C 
 11270      65725275 
 11270      6E6E696E 
 11270      6700
 11271              	.LASF34:
 11272 0106 7078496E 		.ascii	"pxIndex\000"
 11272      64657800 
 11273              	.LASF154:
 11274 010e 76546173 		.ascii	"vTaskPriorityInherit\000"
 11274      6B507269 
 11274      6F726974 
 11274      79496E68 
 11274      65726974 
 11275              	.LASF19:
 11276 0123 53746163 		.ascii	"StackType_t\000"
 11276      6B547970 
 11276      655F7400 
 11277              	.LASF44:
 11278 012f 7854494D 		.ascii	"xTIME_OUT\000"
 11278      455F4F55 
 11278      5400
 11279              	.LASF184:
 11280 0139 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 11280      6C657465 
 11280      64546173 
 11280      6B735761 
 11280      6974696E 
 11281              	.LASF29:
 11282 0156 784C4953 		.ascii	"xLIST_ITEM\000"
 11282      545F4954 
 11282      454D00
 11283              	.LASF177:
 11284 0161 70785265 		.ascii	"pxReadyTasksLists\000"
 11284      61647954 
 11284      61736B73 
 11284      4C697374 
 11284      7300
 11285              	.LASF172:
 11286 0173 75634F72 		.ascii	"ucOriginalNotifyState\000"
 11286      6967696E 
 11286      616C4E6F 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 300


 11286      74696679 
 11286      53746174 
 11287              	.LASF147:
 11288 0189 76546173 		.ascii	"vTaskSetTimeOutState\000"
 11288      6B536574 
 11288      54696D65 
 11288      4F757453 
 11288      74617465 
 11289              	.LASF173:
 11290 019e 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 11290      6B47656E 
 11290      65726963 
 11290      4E6F7469 
 11290      66794672 
 11291              	.LASF124:
 11292 01b8 78546173 		.ascii	"xTaskIncrementTick\000"
 11292      6B496E63 
 11292      72656D65 
 11292      6E745469 
 11292      636B00
 11293              	.LASF91:
 11294 01cb 756C4269 		.ascii	"ulBitmap\000"
 11294      746D6170 
 11294      00
 11295              	.LASF178:
 11296 01d4 7844656C 		.ascii	"xDelayedTaskList1\000"
 11296      61796564 
 11296      5461736B 
 11296      4C697374 
 11296      3100
 11297              	.LASF179:
 11298 01e6 7844656C 		.ascii	"xDelayedTaskList2\000"
 11298      61796564 
 11298      5461736B 
 11298      4C697374 
 11298      3200
 11299              	.LASF45:
 11300 01f8 784F7665 		.ascii	"xOverflowCount\000"
 11300      72666C6F 
 11300      77436F75 
 11300      6E7400
 11301              	.LASF87:
 11302 0207 76506F72 		.ascii	"vPortSetBASEPRI\000"
 11302      74536574 
 11302      42415345 
 11302      50524900 
 11303              	.LASF207:
 11304 0217 76506F72 		.ascii	"vPortEnterCritical\000"
 11304      74456E74 
 11304      65724372 
 11304      69746963 
 11304      616C00
 11305              	.LASF51:
 11306 022a 756C5061 		.ascii	"ulParameters\000"
 11306      72616D65 
 11306      74657273 
 11306      00
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 301


 11307              	.LASF114:
 11308 0237 78546173 		.ascii	"xTaskToResume\000"
 11308      6B546F52 
 11308      6573756D 
 11308      6500
 11309              	.LASF104:
 11310 0245 75785265 		.ascii	"uxReturn\000"
 11310      7475726E 
 11310      00
 11311              	.LASF158:
 11312 024e 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 11312      736B4765 
 11312      744E756D 
 11312      6265724F 
 11312      66546173 
 11313              	.LASF64:
 11314 0265 74736B54 		.ascii	"tskTCB\000"
 11314      434200
 11315              	.LASF116:
 11316 026c 75785361 		.ascii	"uxSavedInterruptStatus\000"
 11316      76656449 
 11316      6E746572 
 11316      72757074 
 11316      53746174 
 11317              	.LASF17:
 11318 0283 75696E74 		.ascii	"uint32_t\000"
 11318      33325F74 
 11318      00
 11319              	.LASF63:
 11320 028c 75634E6F 		.ascii	"ucNotifyState\000"
 11320      74696679 
 11320      53746174 
 11320      6500
 11321              	.LASF200:
 11322 029a 75784C69 		.ascii	"uxListRemove\000"
 11322      73745265 
 11322      6D6F7665 
 11322      00
 11323              	.LASF112:
 11324 02a7 78596965 		.ascii	"xYieldRequired\000"
 11324      6C645265 
 11324      71756972 
 11324      656400
 11325              	.LASF85:
 11326 02b6 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 11326      6967696E 
 11326      616C4241 
 11326      53455052 
 11326      4900
 11327              	.LASF167:
 11328 02c8 78546173 		.ascii	"xTaskGenericNotify\000"
 11328      6B47656E 
 11328      65726963 
 11328      4E6F7469 
 11328      667900
 11329              	.LASF144:
 11330 02db 7078556E 		.ascii	"pxUnblockedTCB\000"
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 302


 11330      626C6F63 
 11330      6B656454 
 11330      434200
 11331              	.LASF99:
 11332 02ea 75735374 		.ascii	"usStackDepth\000"
 11332      61636B44 
 11332      65707468 
 11332      00
 11333              	.LASF161:
 11334 02f7 78436C65 		.ascii	"xClearCountOnExit\000"
 11334      6172436F 
 11334      756E744F 
 11334      6E457869 
 11334      7400
 11335              	.LASF41:
 11336 0309 65536574 		.ascii	"eSetValueWithOverwrite\000"
 11336      56616C75 
 11336      65576974 
 11336      684F7665 
 11336      72777269 
 11337              	.LASF12:
 11338 0320 6C6F6E67 		.ascii	"long long unsigned int\000"
 11338      206C6F6E 
 11338      6720756E 
 11338      7369676E 
 11338      65642069 
 11339              	.LASF121:
 11340 0337 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11340      6B476574 
 11340      5469636B 
 11340      436F756E 
 11340      7446726F 
 11341              	.LASF106:
 11342 0350 75785361 		.ascii	"uxSavedInterruptState\000"
 11342      76656449 
 11342      6E746572 
 11342      72757074 
 11342      53746174 
 11343              	.LASF164:
 11344 0366 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 11344      7473546F 
 11344      436C6561 
 11344      724F6E45 
 11344      6E747279 
 11345              	.LASF182:
 11346 037b 7850656E 		.ascii	"xPendingReadyList\000"
 11346      64696E67 
 11346      52656164 
 11346      794C6973 
 11346      7400
 11347              	.LASF25:
 11348 038d 70785072 		.ascii	"pxPrevious\000"
 11348      6576696F 
 11348      757300
 11349              	.LASF183:
 11350 0398 78546173 		.ascii	"xTasksWaitingTermination\000"
 11350      6B735761 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 303


 11350      6974696E 
 11350      67546572 
 11350      6D696E61 
 11351              	.LASF6:
 11352 03b1 5F5F7569 		.ascii	"__uint16_t\000"
 11352      6E743136 
 11352      5F7400
 11353              	.LASF115:
 11354 03bc 78546173 		.ascii	"xTaskResumeFromISR\000"
 11354      6B526573 
 11354      756D6546 
 11354      726F6D49 
 11354      535200
 11355              	.LASF201:
 11356 03cf 7076506F 		.ascii	"pvPortMalloc\000"
 11356      72744D61 
 11356      6C6C6F63 
 11356      00
 11357              	.LASF151:
 11358 03dc 76546173 		.ascii	"vTaskSuspendAll\000"
 11358      6B537573 
 11358      70656E64 
 11358      416C6C00 
 11359              	.LASF43:
 11360 03ec 654E6F74 		.ascii	"eNotifyAction\000"
 11360      69667941 
 11360      6374696F 
 11360      6E00
 11361              	.LASF2:
 11362 03fa 73697A65 		.ascii	"size_t\000"
 11362      5F7400
 11363              	.LASF40:
 11364 0401 65496E63 		.ascii	"eIncrement\000"
 11364      72656D65 
 11364      6E7400
 11365              	.LASF30:
 11366 040c 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 11366      495F4C49 
 11366      53545F49 
 11366      54454D00 
 11367              	.LASF187:
 11368 041c 78546963 		.ascii	"xTickCount\000"
 11368      6B436F75 
 11368      6E7400
 11369              	.LASF32:
 11370 0427 784C4953 		.ascii	"xLIST\000"
 11370      5400
 11371              	.LASF118:
 11372 042d 76546173 		.ascii	"vTaskEndScheduler\000"
 11372      6B456E64 
 11372      53636865 
 11372      64756C65 
 11372      7200
 11373              	.LASF103:
 11374 043f 75785461 		.ascii	"uxTaskPriorityGet\000"
 11374      736B5072 
 11374      696F7269 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 304


 11374      74794765 
 11374      7400
 11375              	.LASF82:
 11376 0451 78436F6E 		.ascii	"xConstTickCount\000"
 11376      73745469 
 11376      636B436F 
 11376      756E7400 
 11377              	.LASF199:
 11378 0461 764C6973 		.ascii	"vListInsertEnd\000"
 11378      74496E73 
 11378      65727445 
 11378      6E6400
 11379              	.LASF185:
 11380 0470 78537573 		.ascii	"xSuspendedTaskList\000"
 11380      70656E64 
 11380      65645461 
 11380      736B4C69 
 11380      737400
 11381              	.LASF72:
 11382 0483 70634E61 		.ascii	"pcName\000"
 11382      6D6500
 11383              	.LASF181:
 11384 048a 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 11384      6572666C 
 11384      6F774465 
 11384      6C617965 
 11384      64546173 
 11385              	.LASF140:
 11386 04a4 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11386      6B506C61 
 11386      63654F6E 
 11386      4576656E 
 11386      744C6973 
 11387              	.LASF134:
 11388 04ba 76546173 		.ascii	"vTaskDelay\000"
 11388      6B44656C 
 11388      617900
 11389              	.LASF159:
 11390 04c5 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 11390      736B496E 
 11390      6372656D 
 11390      656E744D 
 11390      75746578 
 11391              	.LASF62:
 11392 04e3 756C4E6F 		.ascii	"ulNotifiedValue\000"
 11392      74696669 
 11392      65645661 
 11392      6C756500 
 11393              	.LASF61:
 11394 04f3 75784D75 		.ascii	"uxMutexesHeld\000"
 11394      74657865 
 11394      7348656C 
 11394      6400
 11395              	.LASF156:
 11396 0501 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11396      6B507269 
 11396      6F726974 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 305


 11396      79446973 
 11396      696E6865 
 11397              	.LASF143:
 11398 0519 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11398      6B52656D 
 11398      6F766546 
 11398      726F6D45 
 11398      76656E74 
 11399              	.LASF14:
 11400 0532 63686172 		.ascii	"char\000"
 11400      00
 11401              	.LASF28:
 11402 0537 4C697374 		.ascii	"ListItem_t\000"
 11402      4974656D 
 11402      5F7400
 11403              	.LASF42:
 11404 0542 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 11404      56616C75 
 11404      65576974 
 11404      686F7574 
 11404      4F766572 
 11405              	.LASF86:
 11406 055c 756C4E65 		.ascii	"ulNewBASEPRI\000"
 11406      77424153 
 11406      45505249 
 11406      00
 11407              	.LASF21:
 11408 0569 55426173 		.ascii	"UBaseType_t\000"
 11408      65547970 
 11408      655F7400 
 11409              	.LASF73:
 11410 0575 756C5374 		.ascii	"ulStackDepth\000"
 11410      61636B44 
 11410      65707468 
 11410      00
 11411              	.LASF133:
 11412 0582 7853686F 		.ascii	"xShouldDelay\000"
 11412      756C6444 
 11412      656C6179 
 11412      00
 11413              	.LASF213:
 11414 058f 70727649 		.ascii	"prvIdleTask\000"
 11414      646C6554 
 11414      61736B00 
 11415              	.LASF35:
 11416 059b 784C6973 		.ascii	"xListEnd\000"
 11416      74456E64 
 11416      00
 11417              	.LASF137:
 11418 05a4 784C6973 		.ascii	"xListIsEmpty\000"
 11418      74497345 
 11418      6D707479 
 11418      00
 11419              	.LASF160:
 11420 05b1 756C5461 		.ascii	"ulTaskNotifyTake\000"
 11420      736B4E6F 
 11420      74696679 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 306


 11420      54616B65 
 11420      00
 11421              	.LASF31:
 11422 05c2 4D696E69 		.ascii	"MiniListItem_t\000"
 11422      4C697374 
 11422      4974656D 
 11422      5F7400
 11423              	.LASF163:
 11424 05d1 78546173 		.ascii	"xTaskNotifyWait\000"
 11424      6B4E6F74 
 11424      69667957 
 11424      61697400 
 11425              	.LASF102:
 11426 05e1 78546173 		.ascii	"xTaskCreate\000"
 11426      6B437265 
 11426      61746500 
 11427              	.LASF97:
 11428 05ed 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 11428      64644E65 
 11428      77546173 
 11428      6B546F52 
 11428      65616479 
 11429              	.LASF15:
 11430 0606 75696E74 		.ascii	"uint8_t\000"
 11430      385F7400 
 11431              	.LASF76:
 11432 060e 70784E65 		.ascii	"pxNewTCB\000"
 11432      77544342 
 11432      00
 11433              	.LASF71:
 11434 0617 70785461 		.ascii	"pxTaskCode\000"
 11434      736B436F 
 11434      646500
 11435              	.LASF52:
 11436 0622 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11436      72795265 
 11436      67696F6E 
 11436      5F7400
 11437              	.LASF194:
 11438 0631 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 11438      74546173 
 11438      6B556E62 
 11438      6C6F636B 
 11438      54696D65 
 11439              	.LASF84:
 11440 0646 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 11440      72745261 
 11440      69736542 
 11440      41534550 
 11440      524900
 11441              	.LASF205:
 11442 0659 7078506F 		.ascii	"pxPortInitialiseStack\000"
 11442      7274496E 
 11442      69746961 
 11442      6C697365 
 11442      53746163 
 11443              	.LASF11:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 307


 11444 066f 6C6F6E67 		.ascii	"long long int\000"
 11444      206C6F6E 
 11444      6720696E 
 11444      7400
 11445              	.LASF162:
 11446 067d 756C5265 		.ascii	"ulReturn\000"
 11446      7475726E 
 11446      00
 11447              	.LASF90:
 11448 0686 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 11448      7274436F 
 11448      756E744C 
 11448      65616469 
 11448      6E675A65 
 11449              	.LASF50:
 11450 069e 756C4C65 		.ascii	"ulLengthInBytes\000"
 11450      6E677468 
 11450      496E4279 
 11450      74657300 
 11451              	.LASF20:
 11452 06ae 42617365 		.ascii	"BaseType_t\000"
 11452      54797065 
 11452      5F7400
 11453              	.LASF94:
 11454 06b9 756C4368 		.ascii	"ulCheckValue\000"
 11454      65636B56 
 11454      616C7565 
 11454      00
 11455              	.LASF68:
 11456 06c6 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 11456      65736574 
 11456      4E657874 
 11456      5461736B 
 11456      556E626C 
 11457              	.LASF46:
 11458 06e2 7854696D 		.ascii	"xTimeOnEntering\000"
 11458      654F6E45 
 11458      6E746572 
 11458      696E6700 
 11459              	.LASF109:
 11460 06f2 75784E65 		.ascii	"uxNewPriority\000"
 11460      77507269 
 11460      6F726974 
 11460      7900
 11461              	.LASF18:
 11462 0700 5461736B 		.ascii	"TaskFunction_t\000"
 11462      46756E63 
 11462      74696F6E 
 11462      5F7400
 11463              	.LASF24:
 11464 070f 70784E65 		.ascii	"pxNext\000"
 11464      787400
 11465              	.LASF171:
 11466 0716 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 11466      72657669 
 11466      6F75734E 
 11466      6F746966 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 308


 11466      69636174 
 11467              	.LASF203:
 11468 0733 6D656D73 		.ascii	"memset\000"
 11468      657400
 11469              	.LASF148:
 11470 073a 70785469 		.ascii	"pxTimeOut\000"
 11470      6D654F75 
 11470      7400
 11471              	.LASF135:
 11472 0744 78546963 		.ascii	"xTicksToDelay\000"
 11472      6B73546F 
 11472      44656C61 
 11472      7900
 11473              	.LASF105:
 11474 0752 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 11474      736B5072 
 11474      696F7269 
 11474      74794765 
 11474      7446726F 
 11475              	.LASF119:
 11476 076b 78546173 		.ascii	"xTaskGetTickCount\000"
 11476      6B476574 
 11476      5469636B 
 11476      436F756E 
 11476      7400
 11477              	.LASF47:
 11478 077d 54696D65 		.ascii	"TimeOut_t\000"
 11478      4F75745F 
 11478      7400
 11479              	.LASF193:
 11480 0787 75785461 		.ascii	"uxTaskNumber\000"
 11480      736B4E75 
 11480      6D626572 
 11480      00
 11481              	.LASF37:
 11482 0794 5461736B 		.ascii	"TaskHandle_t\000"
 11482      48616E64 
 11482      6C655F74 
 11482      00
 11483              	.LASF170:
 11484 07a1 65416374 		.ascii	"eAction\000"
 11484      696F6E00 
 11485              	.LASF88:
 11486 07a9 756C4E65 		.ascii	"ulNewMaskValue\000"
 11486      774D6173 
 11486      6B56616C 
 11486      756500
 11487              	.LASF157:
 11488 07b8 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 11488      736B5265 
 11488      73657445 
 11488      76656E74 
 11488      4974656D 
 11489              	.LASF108:
 11490 07d2 76546173 		.ascii	"vTaskPrioritySet\000"
 11490      6B507269 
 11490      6F726974 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 309


 11490      79536574 
 11490      00
 11491              	.LASF36:
 11492 07e3 4C697374 		.ascii	"List_t\000"
 11492      5F7400
 11493              	.LASF123:
 11494 07ea 78546173 		.ascii	"xTaskToQuery\000"
 11494      6B546F51 
 11494      75657279 
 11494      00
 11495              	.LASF22:
 11496 07f7 5469636B 		.ascii	"TickType_t\000"
 11496      54797065 
 11496      5F7400
 11497              	.LASF168:
 11498 0802 78546173 		.ascii	"xTaskToNotify\000"
 11498      6B546F4E 
 11498      6F746966 
 11498      7900
 11499              	.LASF70:
 11500 0810 78546173 		.ascii	"xTask\000"
 11500      6B00
 11501              	.LASF39:
 11502 0816 65536574 		.ascii	"eSetBits\000"
 11502      42697473 
 11502      00
 11503              	.LASF48:
 11504 081f 784D454D 		.ascii	"xMEMORY_REGION\000"
 11504      4F52595F 
 11504      52454749 
 11504      4F4E00
 11505              	.LASF16:
 11506 082e 75696E74 		.ascii	"uint16_t\000"
 11506      31365F74 
 11506      00
 11507              	.LASF107:
 11508 0837 76546173 		.ascii	"vTaskDelete\000"
 11508      6B44656C 
 11508      65746500 
 11509              	.LASF197:
 11510 0843 76546173 		.ascii	"vTaskSwitchContext\000"
 11510      6B537769 
 11510      74636843 
 11510      6F6E7465 
 11510      787400
 11511              	.LASF192:
 11512 0856 784E756D 		.ascii	"xNumOfOverflows\000"
 11512      4F664F76 
 11512      6572666C 
 11512      6F777300 
 11513              	.LASF27:
 11514 0866 7076436F 		.ascii	"pvContainer\000"
 11514      6E746169 
 11514      6E657200 
 11515              	.LASF195:
 11516 0872 7849646C 		.ascii	"xIdleTaskHandle\000"
 11516      65546173 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 310


 11516      6B48616E 
 11516      646C6500 
 11517              	.LASF216:
 11518 0882 76417070 		.ascii	"vApplicationStackOverflowHook\000"
 11518      6C696361 
 11518      74696F6E 
 11518      53746163 
 11518      6B4F7665 
 11519              	.LASF5:
 11520 08a0 73686F72 		.ascii	"short int\000"
 11520      7420696E 
 11520      7400
 11521              	.LASF204:
 11522 08aa 764C6973 		.ascii	"vListInitialiseItem\000"
 11522      74496E69 
 11522      7469616C 
 11522      69736549 
 11522      74656D00 
 11523              	.LASF74:
 11524 08be 70765061 		.ascii	"pvParameters\000"
 11524      72616D65 
 11524      74657273 
 11524      00
 11525              	.LASF23:
 11526 08cb 78497465 		.ascii	"xItemValue\000"
 11526      6D56616C 
 11526      756500
 11527              	.LASF8:
 11528 08d6 6C6F6E67 		.ascii	"long int\000"
 11528      20696E74 
 11528      00
 11529              	.LASF127:
 11530 08df 78546173 		.ascii	"xTaskResumeAll\000"
 11530      6B526573 
 11530      756D6541 
 11530      6C6C00
 11531              	.LASF175:
 11532 08ee 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 11532      6B4E6F74 
 11532      69667947 
 11532      69766546 
 11532      726F6D49 
 11533              	.LASF180:
 11534 0905 70784465 		.ascii	"pxDelayedTaskList\000"
 11534      6C617965 
 11534      64546173 
 11534      6B4C6973 
 11534      7400
 11535              	.LASF83:
 11536 0917 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 11536      61736B49 
 11536      73546173 
 11536      6B537573 
 11536      70656E64 
 11537              	.LASF211:
 11538 092e 46726565 		.ascii	"FreeRTOS/Source/tasks.c\000"
 11538      52544F53 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 311


 11538      2F536F75 
 11538      7263652F 
 11538      7461736B 
 11539              	.LASF125:
 11540 0946 78537769 		.ascii	"xSwitchRequired\000"
 11540      74636852 
 11540      65717569 
 11540      72656400 
 11541              	.LASF155:
 11542 0956 70784D75 		.ascii	"pxMutexHolder\000"
 11542      74657848 
 11542      6F6C6465 
 11542      7200
 11543              	.LASF58:
 11544 0964 70785374 		.ascii	"pxStack\000"
 11544      61636B00 
 11545              	.LASF101:
 11546 096c 78546173 		.ascii	"xTaskToDelete\000"
 11546      6B546F44 
 11546      656C6574 
 11546      6500
 11547              	.LASF169:
 11548 097a 756C5661 		.ascii	"ulValue\000"
 11548      6C756500 
 11549              	.LASF139:
 11550 0982 78546173 		.ascii	"xTaskToSuspend\000"
 11550      6B546F53 
 11550      75737065 
 11550      6E6400
 11551              	.LASF149:
 11552 0991 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 11552      6B436865 
 11552      636B466F 
 11552      7254696D 
 11552      654F7574 
 11553              	.LASF209:
 11554 09a6 76506F72 		.ascii	"vPortEndScheduler\000"
 11554      74456E64 
 11554      53636865 
 11554      64756C65 
 11554      7200
 11555              	.LASF202:
 11556 09b8 76506F72 		.ascii	"vPortFree\000"
 11556      74467265 
 11556      6500
 11557              	.LASF131:
 11558 09c2 70785072 		.ascii	"pxPreviousWakeTime\000"
 11558      6576696F 
 11558      75735761 
 11558      6B655469 
 11558      6D6500
 11559              	.LASF3:
 11560 09d5 5F5F7569 		.ascii	"__uint8_t\000"
 11560      6E74385F 
 11560      7400
 11561              	.LASF92:
 11562 09df 75635265 		.ascii	"ucReturn\000"
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 312


 11562      7475726E 
 11562      00
 11563              	.LASF166:
 11564 09e8 70756C4E 		.ascii	"pulNotificationValue\000"
 11564      6F746966 
 11564      69636174 
 11564      696F6E56 
 11564      616C7565 
 11565              	.LASF210:
 11566 09fd 474E5520 		.ascii	"GNU C 4.9.3 20150529 (release) [ARM/embedded-4_9-br"
 11566      4320342E 
 11566      392E3320 
 11566      32303135 
 11566      30353239 
 11567 0a30 616E6368 		.ascii	"anch revision 227977] -mcpu=cortex-m3 -mthumb -gdwa"
 11567      20726576 
 11567      6973696F 
 11567      6E203232 
 11567      37393737 
 11568 0a63 72662D32 		.ascii	"rf-2 -Os -fomit-frame-pointer\000"
 11568      202D4F73 
 11568      202D666F 
 11568      6D69742D 
 11568      6672616D 
 11569              	.LASF66:
 11570 0a81 78526574 		.ascii	"xReturn\000"
 11570      75726E00 
 11571              	.LASF13:
 11572 0a89 73697A65 		.ascii	"sizetype\000"
 11572      74797065 
 11572      00
 11573              	.LASF152:
 11574 0a92 76546173 		.ascii	"vTaskMissedYield\000"
 11574      6B4D6973 
 11574      73656459 
 11574      69656C64 
 11574      00
 11575              	.LASF190:
 11576 0aa3 75785065 		.ascii	"uxPendedTicks\000"
 11576      6E646564 
 11576      5469636B 
 11576      7300
 11577              	.LASF10:
 11578 0ab1 6C6F6E67 		.ascii	"long unsigned int\000"
 11578      20756E73 
 11578      69676E65 
 11578      6420696E 
 11578      7400
 11579              	.LASF89:
 11580 0ac3 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 11580      74526169 
 11580      73654241 
 11580      53455052 
 11580      4900
 11581              	.LASF122:
 11582 0ad5 70635461 		.ascii	"pcTaskGetName\000"
 11582      736B4765 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 313


 11582      744E616D 
 11582      6500
 11583              	.LASF212:
 11584 0ae3 2F557365 		.ascii	"/Users/ingamedeo/Downloads/STM32F103ZET6FreeRTOS\000"
 11584      72732F69 
 11584      6E67616D 
 11584      6564656F 
 11584      2F446F77 
 11585              	.LASF120:
 11586 0b14 78546963 		.ascii	"xTicks\000"
 11586      6B7300
 11587              	.LASF117:
 11588 0b1b 76546173 		.ascii	"vTaskStartScheduler\000"
 11588      6B537461 
 11588      72745363 
 11588      68656475 
 11588      6C657200 
 11589              	.LASF80:
 11590 0b2f 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 11590      426C6F63 
 11590      6B496E64 
 11590      6566696E 
 11590      6974656C 
 11591              	.LASF93:
 11592 0b45 70756C53 		.ascii	"pulStack\000"
 11592      7461636B 
 11592      00
 11593              	.LASF49:
 11594 0b4e 70764261 		.ascii	"pvBaseAddress\000"
 11594      73654164 
 11594      64726573 
 11594      7300
 11595              	.LASF126:
 11596 0b5c 70785465 		.ascii	"pxTemp\000"
 11596      6D7000
 11597              	.LASF4:
 11598 0b63 756E7369 		.ascii	"unsigned char\000"
 11598      676E6564 
 11598      20636861 
 11598      7200
 11599              	.LASF142:
 11600 0b71 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11600      6B506C61 
 11600      63654F6E 
 11600      556E6F72 
 11600      64657265 
 11601              	.LASF145:
 11602 0b90 78546173 		.ascii	"xTaskRemoveFromUnorderedEventList\000"
 11602      6B52656D 
 11602      6F766546 
 11602      726F6D55 
 11602      6E6F7264 
 11603              	.LASF9:
 11604 0bb2 5F5F7569 		.ascii	"__uint32_t\000"
 11604      6E743332 
 11604      5F7400
 11605              	.LASF176:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 314


 11606 0bbd 78546173 		.ascii	"xTaskNotifyStateClear\000"
 11606      6B4E6F74 
 11606      69667953 
 11606      74617465 
 11606      436C6561 
 11607              	.LASF206:
 11608 0bd3 764C6973 		.ascii	"vListInitialise\000"
 11608      74496E69 
 11608      7469616C 
 11608      69736500 
 11609              	.LASF150:
 11610 0be3 70785469 		.ascii	"pxTicksToWait\000"
 11610      636B7354 
 11610      6F576169 
 11610      7400
 11611              	.LASF198:
 11612 0bf1 764C6973 		.ascii	"vListInsert\000"
 11612      74496E73 
 11612      65727400 
 11613              	.LASF95:
 11614 0bfd 7578546F 		.ascii	"uxTopPriority\000"
 11614      70507269 
 11614      6F726974 
 11614      7900
 11615              	.LASF60:
 11616 0c0b 75784261 		.ascii	"uxBasePriority\000"
 11616      73655072 
 11616      696F7269 
 11616      747900
 11617              	.LASF130:
 11618 0c1a 76546173 		.ascii	"vTaskDelayUntil\000"
 11618      6B44656C 
 11618      6179556E 
 11618      74696C00 
 11619              	.LASF56:
 11620 0c2a 78457665 		.ascii	"xEventListItem\000"
 11620      6E744C69 
 11620      73744974 
 11620      656D00
 11621              	.LASF111:
 11622 0c39 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 11622      696F7269 
 11622      74795573 
 11622      65644F6E 
 11622      456E7472 
 11623              	.LASF65:
 11624 0c4f 5443425F 		.ascii	"TCB_t\000"
 11624      7400
 11625              	.LASF79:
 11626 0c55 78546963 		.ascii	"xTicksToWait\000"
 11626      6B73546F 
 11626      57616974 
 11626      00
 11627              	.LASF26:
 11628 0c62 70764F77 		.ascii	"pvOwner\000"
 11628      6E657200 
 11629              	.LASF100:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 315


 11630 0c6a 70727644 		.ascii	"prvDeleteTCB\000"
 11630      656C6574 
 11630      65544342 
 11630      00
 11631              	.LASF138:
 11632 0c77 76546173 		.ascii	"vTaskSuspend\000"
 11632      6B537573 
 11632      70656E64 
 11632      00
 11633              	.LASF128:
 11634 0c84 78416C72 		.ascii	"xAlreadyYielded\000"
 11634      65616479 
 11634      5969656C 
 11634      64656400 
 11635              	.LASF153:
 11636 0c94 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 11636      6B476574 
 11636      43757272 
 11636      656E7454 
 11636      61736B48 
 11637              	.LASF77:
 11638 0cae 78526567 		.ascii	"xRegions\000"
 11638      696F6E73 
 11638      00
 11639              	.LASF78:
 11640 0cb7 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 11640      64644375 
 11640      7272656E 
 11640      74546173 
 11640      6B546F44 
 11641              	.LASF214:
 11642 0cd6 70784375 		.ascii	"pxCurrentTCB\000"
 11642      7272656E 
 11642      74544342 
 11642      00
 11643              	.LASF186:
 11644 0ce3 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 11644      7272656E 
 11644      744E756D 
 11644      6265724F 
 11644      66546173 
 11645              	.LASF132:
 11646 0cfa 7854696D 		.ascii	"xTimeIncrement\000"
 11646      65496E63 
 11646      72656D65 
 11646      6E7400
 11647              	.LASF1:
 11648 0d09 7369676E 		.ascii	"signed char\000"
 11648      65642063 
 11648      68617200 
 11649              	.LASF7:
 11650 0d15 73686F72 		.ascii	"short unsigned int\000"
 11650      7420756E 
 11650      7369676E 
 11650      65642069 
 11650      6E7400
 11651              	.LASF81:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 316


 11652 0d28 7854696D 		.ascii	"xTimeToWake\000"
 11652      65546F57 
 11652      616B6500 
 11653              	.LASF55:
 11654 0d34 78537461 		.ascii	"xStateListItem\000"
 11654      74654C69 
 11654      73744974 
 11654      656D00
 11655              	.LASF67:
 11656 0d43 70785443 		.ascii	"pxTCB\000"
 11656      4200
 11657              	.LASF196:
 11658 0d49 75785363 		.ascii	"uxSchedulerSuspended\000"
 11658      68656475 
 11658      6C657253 
 11658      75737065 
 11658      6E646564 
 11659              	.LASF54:
 11660 0d5e 7078546F 		.ascii	"pxTopOfStack\000"
 11660      704F6653 
 11660      7461636B 
 11660      00
 11661              	.LASF113:
 11662 0d6b 76546173 		.ascii	"vTaskResume\000"
 11662      6B526573 
 11662      756D6500 
 11663              	.LASF98:
 11664 0d77 70727649 		.ascii	"prvInitialiseTaskLists\000"
 11664      6E697469 
 11664      616C6973 
 11664      65546173 
 11664      6B4C6973 
 11665              	.LASF146:
 11666 0d8e 70784576 		.ascii	"pxEventListItem\000"
 11666      656E744C 
 11666      69737449 
 11666      74656D00 
 11667              	.LASF75:
 11668 0d9e 70784372 		.ascii	"pxCreatedTask\000"
 11668      65617465 
 11668      64546173 
 11668      6B00
 11669              	.LASF136:
 11670 0dac 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 11670      6865636B 
 11670      5461736B 
 11670      73576169 
 11670      74696E67 
 11671              	.LASF110:
 11672 0dcc 75784375 		.ascii	"uxCurrentBasePriority\000"
 11672      7272656E 
 11672      74426173 
 11672      65507269 
 11672      6F726974 
 11673              	.LASF191:
 11674 0de2 78596965 		.ascii	"xYieldPending\000"
 11674      6C645065 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 317


 11674      6E64696E 
 11674      6700
 11675              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150529 (release) [ARM/embedded-4_9-br
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 318


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:73     .text:0000000000000000 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:77     .text:0000000000000000 prvTaskIsTaskSuspended
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:116    .text:000000000000001c $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:120    .text:0000000000000020 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:124    .text:0000000000000020 prvResetNextTaskUnblockTime
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:158    .text:000000000000003c $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:164    .text:0000000000000040 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:168    .text:0000000000000040 prvAddCurrentTaskToDelayedList
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:299    .text:00000000000000a8 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:303    .text:00000000000000ac $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:308    .text:00000000000000ac xTaskCreate
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:615    .text:0000000000000228 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:620    .text:0000000000000230 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:625    .text:0000000000000230 vTaskDelete
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:756    .text:00000000000002d0 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:761    .text:00000000000002d8 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:766    .text:00000000000002d8 uxTaskPriorityGet
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:803    .text:00000000000002f0 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:807    .text:00000000000002f4 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:812    .text:00000000000002f4 uxTaskPriorityGetFromISR
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:859    .text:0000000000000318 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:863    .text:000000000000031c $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:868    .text:000000000000031c vTaskPrioritySet
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1028   .text:00000000000003dc $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1033   .text:00000000000003e4 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1038   .text:00000000000003e4 vTaskResume
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1124   .text:0000000000000448 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1129   .text:0000000000000450 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1134   .text:0000000000000450 xTaskResumeFromISR
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1238   .text:00000000000004c8 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1242   .text:00000000000004cc $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1247   .text:00000000000004cc vTaskStartScheduler
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1322   .text:0000000000000514 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1988   .text:000000000000079c prvIdleTask
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1328   .text:0000000000000520 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1333   .text:0000000000000520 vTaskEndScheduler
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1364   .text:000000000000053c $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1368   .text:0000000000000540 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1373   .text:0000000000000540 vTaskSuspendAll
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1389   .text:0000000000000550 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1393   .text:0000000000000554 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1398   .text:0000000000000554 xTaskGetTickCount
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1414   .text:000000000000055c $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1418   .text:0000000000000560 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1423   .text:0000000000000560 xTaskGetTickCountFromISR
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1440   .text:0000000000000568 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1444   .text:000000000000056c $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1449   .text:000000000000056c uxTaskGetNumberOfTasks
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1464   .text:0000000000000574 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1468   .text:0000000000000578 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1473   .text:0000000000000578 pcTaskGetName
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1495   .text:0000000000000584 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1499   .text:0000000000000588 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1504   .text:0000000000000588 xTaskIncrementTick
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1660   .text:0000000000000648 $d
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 319


/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1665   .text:0000000000000650 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1670   .text:0000000000000650 xTaskResumeAll
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1815   .text:0000000000000704 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1820   .text:000000000000070c $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1825   .text:000000000000070c vTaskDelayUntil
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1920   .text:0000000000000760 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1925   .text:0000000000000768 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1930   .text:0000000000000768 vTaskDelay
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1980   .text:0000000000000798 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:1984   .text:000000000000079c $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2081   .text:0000000000000800 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2086   .text:0000000000000808 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2091   .text:0000000000000808 vTaskSwitchContext
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2189   .text:0000000000000888 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2198   .text:0000000000000890 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2203   .text:0000000000000890 vTaskSuspend
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2331   .text:0000000000000924 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2336   .text:000000000000092c $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2341   .text:000000000000092c vTaskPlaceOnEventList
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2378   .text:0000000000000948 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2382   .text:000000000000094c $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2387   .text:000000000000094c vTaskPlaceOnUnorderedEventList
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2429   .text:0000000000000970 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2433   .text:0000000000000974 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2438   .text:0000000000000974 xTaskRemoveFromEventList
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2512   .text:00000000000009cc $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2516   .text:00000000000009d0 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2521   .text:00000000000009d0 xTaskRemoveFromUnorderedEventList
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2588   .text:0000000000000a1c $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2592   .text:0000000000000a20 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2597   .text:0000000000000a20 vTaskSetTimeOutState
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2618   .text:0000000000000a30 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2622   .text:0000000000000a34 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2627   .text:0000000000000a34 xTaskCheckForTimeOut
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2704   .text:0000000000000a78 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2708   .text:0000000000000a7c $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2713   .text:0000000000000a7c vTaskMissedYield
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2728   .text:0000000000000a88 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2732   .text:0000000000000a8c $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2737   .text:0000000000000a8c xTaskGetCurrentTaskHandle
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2753   .text:0000000000000a94 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2757   .text:0000000000000a98 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2762   .text:0000000000000a98 vTaskPriorityInherit
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2881   .text:0000000000000b24 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2885   .text:0000000000000b28 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2890   .text:0000000000000b28 xTaskPriorityDisinherit
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2982   .text:0000000000000b90 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2987   .text:0000000000000b98 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:2992   .text:0000000000000b98 uxTaskResetEventItemValue
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3015   .text:0000000000000bac $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3019   .text:0000000000000bb0 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3024   .text:0000000000000bb0 pvTaskIncrementMutexHeldCount
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3048   .text:0000000000000bc4 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3052   .text:0000000000000bc8 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3057   .text:0000000000000bc8 ulTaskNotifyTake
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3145   .text:0000000000000c28 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3150   .text:0000000000000c30 $t
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 320


/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3155   .text:0000000000000c30 xTaskNotifyWait
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3264   .text:0000000000000cb4 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3269   .text:0000000000000cbc $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3274   .text:0000000000000cbc xTaskGenericNotify
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3322   .text:0000000000000ce6 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3326   .text:0000000000000cea $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3414   .text:0000000000000d54 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3419   .text:0000000000000d5c $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3424   .text:0000000000000d5c xTaskGenericNotifyFromISR
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3485   .text:0000000000000d96 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3489   .text:0000000000000d9a $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3592   .text:0000000000000e18 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3596   .text:0000000000000e1c $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3601   .text:0000000000000e1c vTaskNotifyGiveFromISR
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3718   .text:0000000000000ea4 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3724   .text:0000000000000ea8 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3729   .text:0000000000000ea8 xTaskNotifyStateClear
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3775   .text:0000000000000ed0 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3808   .bss:0000000000000034 pxCurrentTCB
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3784   .bss:0000000000000000 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3788   .bss:0000000000000000 xSuspendedTaskList
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3792   .bss:0000000000000014 xPendingReadyList
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3796   .bss:0000000000000028 pxDelayedTaskList
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3800   .bss:000000000000002c xNextTaskUnblockTime
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3804   .bss:0000000000000030 xTickCount
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3812   .bss:0000000000000038 uxTopReadyPriority
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3816   .bss:000000000000003c pxOverflowDelayedTaskList
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3820   .bss:0000000000000040 uxCurrentNumberOfTasks
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3824   .bss:0000000000000044 pxReadyTasksLists
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3828   .bss:00000000000000a8 xDelayedTaskList1
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3832   .bss:00000000000000bc xDelayedTaskList2
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3836   .bss:00000000000000d0 xTasksWaitingTermination
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3840   .bss:00000000000000e4 xSchedulerRunning
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3844   .bss:00000000000000e8 uxTaskNumber
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3848   .bss:00000000000000ec uxDeletedTasksWaitingCleanUp
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3852   .bss:00000000000000f0 uxSchedulerSuspended
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3856   .bss:00000000000000f4 xIdleTaskHandle
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3860   .bss:00000000000000f8 xNumOfOverflows
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3864   .bss:00000000000000fc uxPendedTicks
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s:3868   .bss:0000000000000100 xYieldPending
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
uxListRemove
vListInsertEnd
vListInsert
pvPortMalloc
memset
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInitialise
vPortExitCritical
xPortStartScheduler
vPortEndScheduler
vApplicationStackOverflowHook
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccITnnom.s 			page 321


