ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"queue.c"
  14              	@ GNU C (GNU Tools for ARM Embedded Processors) version 4.9.3 20150529 (release) [ARM/embedded-4_9-
  15              	@	compiled by GNU C version 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.9.00), GMP vers
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./Libraries/CMSIS/CM3/CoreSupport
  18              	@ -I ./Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x
  19              	@ -I ./Libraries/STM32F10x_StdPeriph_Driver/inc -I ./Libraries/Drivers/Leds
  20              	@ -I ./Libraries/Drivers/Buttons -I ./Libraries/Drivers/Usart
  21              	@ -I ./Libraries/Drivers/i2c -I ./Libraries/Drivers/BH1750
  22              	@ -I ./Libraries/Drivers/Utilities -I ./FreeRTOS/Source/include
  23              	@ -I ./FreeRTOS/Source/portable/GCC/ARM_CM3 -imultilib armv7-m
  24              	@ -iprefix /usr/local/Cellar/arm-none-eabi-gcc/20150921/bin/../lib/gcc/arm-none-eabi/4.9.3/
  25              	@ -isysroot /usr/local/Cellar/arm-none-eabi-gcc/20150921/bin/../arm-none-eabi
  26              	@ -MD FreeRTOS/Source/queue.d -MF .dep/queue.o.d -MP
  27              	@ -MQ FreeRTOS/Source/queue.o -D__USES_INITFINI__ -D STM32F10X_MD
  28              	@ -D USE_STDPERIPH_DRIVER -D GCC_ARMCM3 -D RUN_FROM_FLASH=1
  29              	@ FreeRTOS/Source/queue.c -mcpu=cortex-m3 -mthumb
  30              	@ -auxbase-strip FreeRTOS/Source/queue.o -gdwarf-2 -Os -Wall
  31              	@ -Wstrict-prototypes -fomit-frame-pointer -fverbose-asm
  32              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  33              	@ -fbranch-count-reg -fcaller-saves -fcombine-stack-adjustments -fcommon
  34              	@ -fcompare-elim -fcprop-registers -fcrossjumping -fcse-follow-jumps
  35              	@ -fdefer-pop -fdelete-null-pointer-checks -fdevirtualize
  36              	@ -fdevirtualize-speculatively -fdwarf2-cfi-asm -fearly-inlining
  37              	@ -feliminate-unused-debug-types -fexpensive-optimizations
  38              	@ -fforward-propagate -ffunction-cse -fgcse -fgcse-lm -fgnu-runtime
  39              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  40              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  41              	@ -finline-atomics -finline-functions -finline-functions-called-once
  42              	@ -finline-small-functions -fipa-cp -fipa-profile -fipa-pure-const
  43              	@ -fipa-reference -fipa-sra -fira-hoist-pressure -fira-share-save-slots
  44              	@ -fira-share-spill-slots -fisolate-erroneous-paths-dereference -fivopts
  45              	@ -fkeep-static-consts -fleading-underscore -flifetime-dse -fmath-errno
  46              	@ -fmerge-constants -fmerge-debug-strings -fomit-frame-pointer
  47              	@ -foptimize-sibling-calls -fpartial-inlining -fpeephole -fpeephole2
  48              	@ -fprefetch-loop-arrays -freg-struct-return -freorder-blocks
  49              	@ -freorder-functions -frerun-cse-after-loop
  50              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  51              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  52              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  53              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns2
  54              	@ -fsection-anchors -fshow-column -fsigned-zeros -fsplit-ivs-in-unroller
  55              	@ -fsplit-wide-types -fstrict-aliasing -fstrict-overflow
  56              	@ -fstrict-volatile-bitfields -fsync-libcalls -fthread-jumps
  57              	@ -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 2


  58              	@ -ftree-ccp -ftree-ch -ftree-coalesce-vars -ftree-copy-prop
  59              	@ -ftree-copyrename -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  61              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  62              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  63              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  64              	@ -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
  65              	@ -funit-at-a-time -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  66              	@ -fzero-initialized-in-bss -mfix-cortex-m3-ldrd -mlittle-endian -mlra
  67              	@ -mpic-data-is-text-relative -msched-prolog -mthumb -munaligned-access
  68              	@ -mvectorize-with-neon-quad
  69              	
  70              		.text
  71              	.Ltext0:
  72              		.cfi_sections	.debug_frame
  73              		.align	1
  74              		.thumb
  75              		.thumb_func
  76              		.type	prvCopyDataToQueue, %function
  77              	prvCopyDataToQueue:
  78              	.LFB23:
  79              		.file 1 "FreeRTOS/Source/queue.c"
   1:FreeRTOS/Source/queue.c **** /*
   2:FreeRTOS/Source/queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:FreeRTOS/Source/queue.c ****     All rights reserved
   4:FreeRTOS/Source/queue.c **** 
   5:FreeRTOS/Source/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/Source/queue.c **** 
   7:FreeRTOS/Source/queue.c ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/Source/queue.c **** 
   9:FreeRTOS/Source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/Source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/Source/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/Source/queue.c **** 
  13:FreeRTOS/Source/queue.c ****     ***************************************************************************
  14:FreeRTOS/Source/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/Source/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/Source/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/Source/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/Source/queue.c ****     ***************************************************************************
  19:FreeRTOS/Source/queue.c **** 
  20:FreeRTOS/Source/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/Source/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/Source/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/Source/queue.c ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/Source/queue.c **** 
  25:FreeRTOS/Source/queue.c ****     ***************************************************************************
  26:FreeRTOS/Source/queue.c ****      *                                                                       *
  27:FreeRTOS/Source/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/Source/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/Source/queue.c ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/Source/queue.c ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/Source/queue.c ****      *                                                                       *
  32:FreeRTOS/Source/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/Source/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/Source/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/Source/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 3


  36:FreeRTOS/Source/queue.c ****      *                                                                       *
  37:FreeRTOS/Source/queue.c ****     ***************************************************************************
  38:FreeRTOS/Source/queue.c **** 
  39:FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/Source/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/Source/queue.c ****     defined configASSERT()?
  42:FreeRTOS/Source/queue.c **** 
  43:FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/Source/queue.c ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/Source/queue.c ****     participating in the support forum.
  46:FreeRTOS/Source/queue.c **** 
  47:FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/Source/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/Source/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/Source/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/Source/queue.c **** 
  52:FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/Source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/Source/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/Source/queue.c **** 
  56:FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/Source/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/Source/queue.c **** 
  59:FreeRTOS/Source/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/Source/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/Source/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/Source/queue.c **** 
  63:FreeRTOS/Source/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/Source/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/Source/queue.c ****     mission critical applications that require provable dependability.
  66:FreeRTOS/Source/queue.c **** 
  67:FreeRTOS/Source/queue.c ****     1 tab == 4 spaces!
  68:FreeRTOS/Source/queue.c **** */
  69:FreeRTOS/Source/queue.c **** 
  70:FreeRTOS/Source/queue.c **** #include <stdlib.h>
  71:FreeRTOS/Source/queue.c **** #include <string.h>
  72:FreeRTOS/Source/queue.c **** 
  73:FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  76:FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:FreeRTOS/Source/queue.c **** 
  78:FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  79:FreeRTOS/Source/queue.c **** #include "task.h"
  80:FreeRTOS/Source/queue.c **** #include "queue.h"
  81:FreeRTOS/Source/queue.c **** 
  82:FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  84:FreeRTOS/Source/queue.c **** #endif
  85:FreeRTOS/Source/queue.c **** 
  86:FreeRTOS/Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:FreeRTOS/Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:FreeRTOS/Source/queue.c **** header files above, but not in this file, in order to generate the correct
  89:FreeRTOS/Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  90:FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:FreeRTOS/Source/queue.c **** 
  92:FreeRTOS/Source/queue.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 4


  93:FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  94:FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  95:FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  96:FreeRTOS/Source/queue.c **** 
  97:FreeRTOS/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:FreeRTOS/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:FreeRTOS/Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:FreeRTOS/Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:FreeRTOS/Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:FreeRTOS/Source/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:FreeRTOS/Source/queue.c **** against the coding standard (although an exception to the standard has been
 106:FreeRTOS/Source/queue.c **** permitted where the dual use also significantly changes the type of the
 107:FreeRTOS/Source/queue.c **** structure member). */
 108:FreeRTOS/Source/queue.c **** #define pxMutexHolder					pcTail
 109:FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
 110:FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:FreeRTOS/Source/queue.c **** 
 112:FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:FreeRTOS/Source/queue.c **** zero. */
 114:FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:FreeRTOS/Source/queue.c **** 
 117:FreeRTOS/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:FreeRTOS/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:FreeRTOS/Source/queue.c **** 	performed just because a higher priority task has been woken. */
 120:FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:FreeRTOS/Source/queue.c **** #else
 122:FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:FreeRTOS/Source/queue.c **** #endif
 124:FreeRTOS/Source/queue.c **** 
 125:FreeRTOS/Source/queue.c **** /*
 126:FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
 127:FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:FreeRTOS/Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:FreeRTOS/Source/queue.c ****  */
 130:FreeRTOS/Source/queue.c **** typedef struct QueueDefinition
 131:FreeRTOS/Source/queue.c **** {
 132:FreeRTOS/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:FreeRTOS/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:FreeRTOS/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:FreeRTOS/Source/queue.c **** 
 136:FreeRTOS/Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:FreeRTOS/Source/queue.c **** 	{
 138:FreeRTOS/Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:FreeRTOS/Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:FreeRTOS/Source/queue.c **** 	} u;
 141:FreeRTOS/Source/queue.c **** 
 142:FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 144:FreeRTOS/Source/queue.c **** 
 145:FreeRTOS/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:FreeRTOS/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 147:FreeRTOS/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:FreeRTOS/Source/queue.c **** 
 149:FreeRTOS/Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 5


 150:FreeRTOS/Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 151:FreeRTOS/Source/queue.c **** 
 152:FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 153:FreeRTOS/Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 154:FreeRTOS/Source/queue.c **** 	#endif
 155:FreeRTOS/Source/queue.c **** 
 156:FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 157:FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 158:FreeRTOS/Source/queue.c **** 	#endif
 159:FreeRTOS/Source/queue.c **** 
 160:FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 161:FreeRTOS/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 162:FreeRTOS/Source/queue.c **** 		uint8_t ucQueueType;
 163:FreeRTOS/Source/queue.c **** 	#endif
 164:FreeRTOS/Source/queue.c **** 
 165:FreeRTOS/Source/queue.c **** } xQUEUE;
 166:FreeRTOS/Source/queue.c **** 
 167:FreeRTOS/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 168:FreeRTOS/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 169:FreeRTOS/Source/queue.c **** typedef xQUEUE Queue_t;
 170:FreeRTOS/Source/queue.c **** 
 171:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 172:FreeRTOS/Source/queue.c **** 
 173:FreeRTOS/Source/queue.c **** /*
 174:FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 175:FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 176:FreeRTOS/Source/queue.c ****  */
 177:FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 178:FreeRTOS/Source/queue.c **** 
 179:FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 180:FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 181:FreeRTOS/Source/queue.c **** 	more user friendly. */
 182:FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 183:FreeRTOS/Source/queue.c **** 	{
 184:FreeRTOS/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 185:FreeRTOS/Source/queue.c **** 		QueueHandle_t xHandle;
 186:FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 187:FreeRTOS/Source/queue.c **** 
 188:FreeRTOS/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 189:FreeRTOS/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 190:FreeRTOS/Source/queue.c **** 	debuggers. */
 191:FreeRTOS/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 192:FreeRTOS/Source/queue.c **** 
 193:FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 194:FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 195:FreeRTOS/Source/queue.c **** 	array position being vacant. */
 196:FreeRTOS/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 197:FreeRTOS/Source/queue.c **** 
 198:FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 199:FreeRTOS/Source/queue.c **** 
 200:FreeRTOS/Source/queue.c **** /*
 201:FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 202:FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 203:FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 204:FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 205:FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 206:FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 6


 207:FreeRTOS/Source/queue.c ****  */
 208:FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 209:FreeRTOS/Source/queue.c **** 
 210:FreeRTOS/Source/queue.c **** /*
 211:FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 212:FreeRTOS/Source/queue.c ****  *
 213:FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 214:FreeRTOS/Source/queue.c ****  */
 215:FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 216:FreeRTOS/Source/queue.c **** 
 217:FreeRTOS/Source/queue.c **** /*
 218:FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 219:FreeRTOS/Source/queue.c ****  *
 220:FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 221:FreeRTOS/Source/queue.c ****  */
 222:FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 223:FreeRTOS/Source/queue.c **** 
 224:FreeRTOS/Source/queue.c **** /*
 225:FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 226:FreeRTOS/Source/queue.c ****  * back of the queue.
 227:FreeRTOS/Source/queue.c ****  */
 228:FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 229:FreeRTOS/Source/queue.c **** 
 230:FreeRTOS/Source/queue.c **** /*
 231:FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 232:FreeRTOS/Source/queue.c ****  */
 233:FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 234:FreeRTOS/Source/queue.c **** 
 235:FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 236:FreeRTOS/Source/queue.c **** 	/*
 237:FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 238:FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 239:FreeRTOS/Source/queue.c **** 	 */
 240:FreeRTOS/Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 241:FreeRTOS/Source/queue.c **** #endif
 242:FreeRTOS/Source/queue.c **** 
 243:FreeRTOS/Source/queue.c **** /*
 244:FreeRTOS/Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 245:FreeRTOS/Source/queue.c ****  * dynamically to fill in the structure's members.
 246:FreeRTOS/Source/queue.c ****  */
 247:FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 248:FreeRTOS/Source/queue.c **** 
 249:FreeRTOS/Source/queue.c **** /*
 250:FreeRTOS/Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 251:FreeRTOS/Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 252:FreeRTOS/Source/queue.c ****  * as a mutex.
 253:FreeRTOS/Source/queue.c ****  */
 254:FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 255:FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 256:FreeRTOS/Source/queue.c **** #endif
 257:FreeRTOS/Source/queue.c **** 
 258:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 259:FreeRTOS/Source/queue.c **** 
 260:FreeRTOS/Source/queue.c **** /*
 261:FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 262:FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 263:FreeRTOS/Source/queue.c ****  */
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 7


 264:FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 265:FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 266:FreeRTOS/Source/queue.c **** 	{														\
 267:FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 268:FreeRTOS/Source/queue.c **** 		{													\
 269:FreeRTOS/Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 270:FreeRTOS/Source/queue.c **** 		}													\
 271:FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 272:FreeRTOS/Source/queue.c **** 		{													\
 273:FreeRTOS/Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 274:FreeRTOS/Source/queue.c **** 		}													\
 275:FreeRTOS/Source/queue.c **** 	}														\
 276:FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 277:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 278:FreeRTOS/Source/queue.c **** 
 279:FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 280:FreeRTOS/Source/queue.c **** {
 281:FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 282:FreeRTOS/Source/queue.c **** 
 283:FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 284:FreeRTOS/Source/queue.c **** 
 285:FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 286:FreeRTOS/Source/queue.c **** 	{
 287:FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 288:FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 289:FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 290:FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 291:FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 292:FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 293:FreeRTOS/Source/queue.c **** 
 294:FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 295:FreeRTOS/Source/queue.c **** 		{
 296:FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 299:FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 301:FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 302:FreeRTOS/Source/queue.c **** 			{
 303:FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 304:FreeRTOS/Source/queue.c **** 				{
 305:FreeRTOS/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 306:FreeRTOS/Source/queue.c **** 				}
 307:FreeRTOS/Source/queue.c **** 				else
 308:FreeRTOS/Source/queue.c **** 				{
 309:FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 310:FreeRTOS/Source/queue.c **** 				}
 311:FreeRTOS/Source/queue.c **** 			}
 312:FreeRTOS/Source/queue.c **** 			else
 313:FreeRTOS/Source/queue.c **** 			{
 314:FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 315:FreeRTOS/Source/queue.c **** 			}
 316:FreeRTOS/Source/queue.c **** 		}
 317:FreeRTOS/Source/queue.c **** 		else
 318:FreeRTOS/Source/queue.c **** 		{
 319:FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 320:FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 8


 321:FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 322:FreeRTOS/Source/queue.c **** 		}
 323:FreeRTOS/Source/queue.c **** 	}
 324:FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 325:FreeRTOS/Source/queue.c **** 
 326:FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 327:FreeRTOS/Source/queue.c **** 	versions. */
 328:FreeRTOS/Source/queue.c **** 	return pdPASS;
 329:FreeRTOS/Source/queue.c **** }
 330:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 331:FreeRTOS/Source/queue.c **** 
 332:FreeRTOS/Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 333:FreeRTOS/Source/queue.c **** 
 334:FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 335:FreeRTOS/Source/queue.c **** 	{
 336:FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 337:FreeRTOS/Source/queue.c **** 
 338:FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 339:FreeRTOS/Source/queue.c **** 
 340:FreeRTOS/Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 341:FreeRTOS/Source/queue.c **** 		supplied. */
 342:FreeRTOS/Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 343:FreeRTOS/Source/queue.c **** 
 344:FreeRTOS/Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 345:FreeRTOS/Source/queue.c **** 		should not be provided if the item size is 0. */
 346:FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 347:FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 348:FreeRTOS/Source/queue.c **** 
 349:FreeRTOS/Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 350:FreeRTOS/Source/queue.c **** 		{
 351:FreeRTOS/Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 352:FreeRTOS/Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 353:FreeRTOS/Source/queue.c **** 			the real queue and semaphore structures. */
 354:FreeRTOS/Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 355:FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 356:FreeRTOS/Source/queue.c **** 		}
 357:FreeRTOS/Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 358:FreeRTOS/Source/queue.c **** 
 359:FreeRTOS/Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 360:FreeRTOS/Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 361:FreeRTOS/Source/queue.c **** 		but is already set. */
 362:FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 363:FreeRTOS/Source/queue.c **** 
 364:FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 365:FreeRTOS/Source/queue.c **** 		{
 366:FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:FreeRTOS/Source/queue.c **** 			{
 368:FreeRTOS/Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 369:FreeRTOS/Source/queue.c **** 				note this queue was allocated statically in case the queue is
 370:FreeRTOS/Source/queue.c **** 				later deleted. */
 371:FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 372:FreeRTOS/Source/queue.c **** 			}
 373:FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 374:FreeRTOS/Source/queue.c **** 
 375:FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 376:FreeRTOS/Source/queue.c **** 		}
 377:FreeRTOS/Source/queue.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 9


 378:FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 379:FreeRTOS/Source/queue.c **** 	}
 380:FreeRTOS/Source/queue.c **** 
 381:FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 382:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 383:FreeRTOS/Source/queue.c **** 
 384:FreeRTOS/Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 385:FreeRTOS/Source/queue.c **** 
 386:FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 387:FreeRTOS/Source/queue.c **** 	{
 388:FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 389:FreeRTOS/Source/queue.c **** 	size_t xQueueSizeInBytes;
 390:FreeRTOS/Source/queue.c **** 	uint8_t *pucQueueStorage;
 391:FreeRTOS/Source/queue.c **** 
 392:FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 393:FreeRTOS/Source/queue.c **** 
 394:FreeRTOS/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 395:FreeRTOS/Source/queue.c **** 		{
 396:FreeRTOS/Source/queue.c **** 			/* There is not going to be a queue storage area. */
 397:FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 398:FreeRTOS/Source/queue.c **** 		}
 399:FreeRTOS/Source/queue.c **** 		else
 400:FreeRTOS/Source/queue.c **** 		{
 401:FreeRTOS/Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 402:FreeRTOS/Source/queue.c **** 			can be in the queue at any time. */
 403:FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 404:FreeRTOS/Source/queue.c **** 		}
 405:FreeRTOS/Source/queue.c **** 
 406:FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 407:FreeRTOS/Source/queue.c **** 
 408:FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 409:FreeRTOS/Source/queue.c **** 		{
 410:FreeRTOS/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 411:FreeRTOS/Source/queue.c **** 			storage area. */
 412:FreeRTOS/Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 413:FreeRTOS/Source/queue.c **** 
 414:FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:FreeRTOS/Source/queue.c **** 			{
 416:FreeRTOS/Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 417:FreeRTOS/Source/queue.c **** 				note this task was created dynamically in case it is later
 418:FreeRTOS/Source/queue.c **** 				deleted. */
 419:FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 420:FreeRTOS/Source/queue.c **** 			}
 421:FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 422:FreeRTOS/Source/queue.c **** 
 423:FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 424:FreeRTOS/Source/queue.c **** 		}
 425:FreeRTOS/Source/queue.c **** 
 426:FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 427:FreeRTOS/Source/queue.c **** 	}
 428:FreeRTOS/Source/queue.c **** 
 429:FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 430:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 431:FreeRTOS/Source/queue.c **** 
 432:FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 433:FreeRTOS/Source/queue.c **** {
 434:FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 10


 435:FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 436:FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 437:FreeRTOS/Source/queue.c **** 
 438:FreeRTOS/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 439:FreeRTOS/Source/queue.c **** 	{
 440:FreeRTOS/Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 441:FreeRTOS/Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 442:FreeRTOS/Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 443:FreeRTOS/Source/queue.c **** 		value that is known to be within the memory map. */
 444:FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 445:FreeRTOS/Source/queue.c **** 	}
 446:FreeRTOS/Source/queue.c **** 	else
 447:FreeRTOS/Source/queue.c **** 	{
 448:FreeRTOS/Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 449:FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 450:FreeRTOS/Source/queue.c **** 	}
 451:FreeRTOS/Source/queue.c **** 
 452:FreeRTOS/Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 453:FreeRTOS/Source/queue.c **** 	defined. */
 454:FreeRTOS/Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 455:FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 456:FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 457:FreeRTOS/Source/queue.c **** 
 458:FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 459:FreeRTOS/Source/queue.c **** 	{
 460:FreeRTOS/Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 461:FreeRTOS/Source/queue.c **** 	}
 462:FreeRTOS/Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 463:FreeRTOS/Source/queue.c **** 
 464:FreeRTOS/Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 465:FreeRTOS/Source/queue.c **** 	{
 466:FreeRTOS/Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 467:FreeRTOS/Source/queue.c **** 	}
 468:FreeRTOS/Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 469:FreeRTOS/Source/queue.c **** 
 470:FreeRTOS/Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 471:FreeRTOS/Source/queue.c **** }
 472:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 473:FreeRTOS/Source/queue.c **** 
 474:FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 475:FreeRTOS/Source/queue.c **** 
 476:FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 477:FreeRTOS/Source/queue.c **** 	{
 478:FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 479:FreeRTOS/Source/queue.c **** 		{
 480:FreeRTOS/Source/queue.c **** 			/* The queue create function will set all the queue structure members
 481:FreeRTOS/Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 482:FreeRTOS/Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 483:FreeRTOS/Source/queue.c **** 			in particular the information required for priority inheritance. */
 484:FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 485:FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 486:FreeRTOS/Source/queue.c **** 
 487:FreeRTOS/Source/queue.c **** 			/* In case this is a recursive mutex. */
 488:FreeRTOS/Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 489:FreeRTOS/Source/queue.c **** 
 490:FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 491:FreeRTOS/Source/queue.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 11


 492:FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 493:FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 494:FreeRTOS/Source/queue.c **** 		}
 495:FreeRTOS/Source/queue.c **** 		else
 496:FreeRTOS/Source/queue.c **** 		{
 497:FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 498:FreeRTOS/Source/queue.c **** 		}
 499:FreeRTOS/Source/queue.c **** 	}
 500:FreeRTOS/Source/queue.c **** 
 501:FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 502:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 503:FreeRTOS/Source/queue.c **** 
 504:FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 505:FreeRTOS/Source/queue.c **** 
 506:FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 507:FreeRTOS/Source/queue.c **** 	{
 508:FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 509:FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 510:FreeRTOS/Source/queue.c **** 
 511:FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 512:FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 513:FreeRTOS/Source/queue.c **** 
 514:FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 515:FreeRTOS/Source/queue.c **** 	}
 516:FreeRTOS/Source/queue.c **** 
 517:FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 518:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 519:FreeRTOS/Source/queue.c **** 
 520:FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 521:FreeRTOS/Source/queue.c **** 
 522:FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 523:FreeRTOS/Source/queue.c **** 	{
 524:FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 525:FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:FreeRTOS/Source/queue.c **** 
 527:FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 528:FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 529:FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 530:FreeRTOS/Source/queue.c **** 
 531:FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 532:FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 533:FreeRTOS/Source/queue.c **** 
 534:FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 535:FreeRTOS/Source/queue.c **** 	}
 536:FreeRTOS/Source/queue.c **** 
 537:FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 538:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 539:FreeRTOS/Source/queue.c **** 
 540:FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 541:FreeRTOS/Source/queue.c **** 
 542:FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 543:FreeRTOS/Source/queue.c **** 	{
 544:FreeRTOS/Source/queue.c **** 	void *pxReturn;
 545:FreeRTOS/Source/queue.c **** 
 546:FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 547:FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 548:FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 12


 549:FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 550:FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 551:FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 552:FreeRTOS/Source/queue.c **** 		{
 553:FreeRTOS/Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 554:FreeRTOS/Source/queue.c **** 			{
 555:FreeRTOS/Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 556:FreeRTOS/Source/queue.c **** 			}
 557:FreeRTOS/Source/queue.c **** 			else
 558:FreeRTOS/Source/queue.c **** 			{
 559:FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 560:FreeRTOS/Source/queue.c **** 			}
 561:FreeRTOS/Source/queue.c **** 		}
 562:FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 563:FreeRTOS/Source/queue.c **** 
 564:FreeRTOS/Source/queue.c **** 		return pxReturn;
 565:FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 566:FreeRTOS/Source/queue.c **** 
 567:FreeRTOS/Source/queue.c **** #endif
 568:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 569:FreeRTOS/Source/queue.c **** 
 570:FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 571:FreeRTOS/Source/queue.c **** 
 572:FreeRTOS/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 573:FreeRTOS/Source/queue.c **** 	{
 574:FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 575:FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 576:FreeRTOS/Source/queue.c **** 
 577:FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 578:FreeRTOS/Source/queue.c **** 
 579:FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 580:FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 581:FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 582:FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 583:FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 584:FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 585:FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 586:FreeRTOS/Source/queue.c **** 		{
 587:FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 588:FreeRTOS/Source/queue.c **** 
 589:FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 590:FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 591:FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 592:FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 593:FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 594:FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 595:FreeRTOS/Source/queue.c **** 
 596:FreeRTOS/Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 597:FreeRTOS/Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 598:FreeRTOS/Source/queue.c **** 			{
 599:FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 600:FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
 601:FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 602:FreeRTOS/Source/queue.c **** 			}
 603:FreeRTOS/Source/queue.c **** 			else
 604:FreeRTOS/Source/queue.c **** 			{
 605:FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 13


 606:FreeRTOS/Source/queue.c **** 			}
 607:FreeRTOS/Source/queue.c **** 
 608:FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 609:FreeRTOS/Source/queue.c **** 		}
 610:FreeRTOS/Source/queue.c **** 		else
 611:FreeRTOS/Source/queue.c **** 		{
 612:FreeRTOS/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 613:FreeRTOS/Source/queue.c **** 			holder. */
 614:FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 615:FreeRTOS/Source/queue.c **** 
 616:FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 617:FreeRTOS/Source/queue.c **** 		}
 618:FreeRTOS/Source/queue.c **** 
 619:FreeRTOS/Source/queue.c **** 		return xReturn;
 620:FreeRTOS/Source/queue.c **** 	}
 621:FreeRTOS/Source/queue.c **** 
 622:FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 623:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 624:FreeRTOS/Source/queue.c **** 
 625:FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 626:FreeRTOS/Source/queue.c **** 
 627:FreeRTOS/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 628:FreeRTOS/Source/queue.c **** 	{
 629:FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 630:FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 631:FreeRTOS/Source/queue.c **** 
 632:FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 633:FreeRTOS/Source/queue.c **** 
 634:FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 635:FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 636:FreeRTOS/Source/queue.c **** 
 637:FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 638:FreeRTOS/Source/queue.c **** 
 639:FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 640:FreeRTOS/Source/queue.c **** 		{
 641:FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 642:FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 643:FreeRTOS/Source/queue.c **** 		}
 644:FreeRTOS/Source/queue.c **** 		else
 645:FreeRTOS/Source/queue.c **** 		{
 646:FreeRTOS/Source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 647:FreeRTOS/Source/queue.c **** 
 648:FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 649:FreeRTOS/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 650:FreeRTOS/Source/queue.c **** 			before reaching here. */
 651:FreeRTOS/Source/queue.c **** 			if( xReturn != pdFAIL )
 652:FreeRTOS/Source/queue.c **** 			{
 653:FreeRTOS/Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 654:FreeRTOS/Source/queue.c **** 			}
 655:FreeRTOS/Source/queue.c **** 			else
 656:FreeRTOS/Source/queue.c **** 			{
 657:FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 658:FreeRTOS/Source/queue.c **** 			}
 659:FreeRTOS/Source/queue.c **** 		}
 660:FreeRTOS/Source/queue.c **** 
 661:FreeRTOS/Source/queue.c **** 		return xReturn;
 662:FreeRTOS/Source/queue.c **** 	}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 14


 663:FreeRTOS/Source/queue.c **** 
 664:FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 665:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 666:FreeRTOS/Source/queue.c **** 
 667:FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 668:FreeRTOS/Source/queue.c **** 
 669:FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 670:FreeRTOS/Source/queue.c **** 	{
 671:FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 672:FreeRTOS/Source/queue.c **** 
 673:FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 674:FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 675:FreeRTOS/Source/queue.c **** 
 676:FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 677:FreeRTOS/Source/queue.c **** 
 678:FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 679:FreeRTOS/Source/queue.c **** 		{
 680:FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 681:FreeRTOS/Source/queue.c **** 
 682:FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 683:FreeRTOS/Source/queue.c **** 		}
 684:FreeRTOS/Source/queue.c **** 		else
 685:FreeRTOS/Source/queue.c **** 		{
 686:FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 687:FreeRTOS/Source/queue.c **** 		}
 688:FreeRTOS/Source/queue.c **** 
 689:FreeRTOS/Source/queue.c **** 		return xHandle;
 690:FreeRTOS/Source/queue.c **** 	}
 691:FreeRTOS/Source/queue.c **** 
 692:FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 693:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 694:FreeRTOS/Source/queue.c **** 
 695:FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 696:FreeRTOS/Source/queue.c **** 
 697:FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 698:FreeRTOS/Source/queue.c **** 	{
 699:FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 700:FreeRTOS/Source/queue.c **** 
 701:FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 702:FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 703:FreeRTOS/Source/queue.c **** 
 704:FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 705:FreeRTOS/Source/queue.c **** 
 706:FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 707:FreeRTOS/Source/queue.c **** 		{
 708:FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 709:FreeRTOS/Source/queue.c **** 
 710:FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 711:FreeRTOS/Source/queue.c **** 		}
 712:FreeRTOS/Source/queue.c **** 		else
 713:FreeRTOS/Source/queue.c **** 		{
 714:FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 715:FreeRTOS/Source/queue.c **** 		}
 716:FreeRTOS/Source/queue.c **** 
 717:FreeRTOS/Source/queue.c **** 		return xHandle;
 718:FreeRTOS/Source/queue.c **** 	}
 719:FreeRTOS/Source/queue.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 15


 720:FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 721:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 722:FreeRTOS/Source/queue.c **** 
 723:FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 724:FreeRTOS/Source/queue.c **** {
 725:FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 726:FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 727:FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 728:FreeRTOS/Source/queue.c **** 
 729:FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 730:FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 731:FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 732:FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733:FreeRTOS/Source/queue.c **** 	{
 734:FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 735:FreeRTOS/Source/queue.c **** 	}
 736:FreeRTOS/Source/queue.c **** 	#endif
 737:FreeRTOS/Source/queue.c **** 
 738:FreeRTOS/Source/queue.c **** 
 739:FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 740:FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 741:FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
 742:FreeRTOS/Source/queue.c **** 	for( ;; )
 743:FreeRTOS/Source/queue.c **** 	{
 744:FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 745:FreeRTOS/Source/queue.c **** 		{
 746:FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 747:FreeRTOS/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 748:FreeRTOS/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 749:FreeRTOS/Source/queue.c **** 			queue is full. */
 750:FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 751:FreeRTOS/Source/queue.c **** 			{
 752:FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 753:FreeRTOS/Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 754:FreeRTOS/Source/queue.c **** 
 755:FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 756:FreeRTOS/Source/queue.c **** 				{
 757:FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 758:FreeRTOS/Source/queue.c **** 					{
 759:FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 760:FreeRTOS/Source/queue.c **** 						{
 761:FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 762:FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 763:FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 764:FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 765:FreeRTOS/Source/queue.c **** 						}
 766:FreeRTOS/Source/queue.c **** 						else
 767:FreeRTOS/Source/queue.c **** 						{
 768:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 769:FreeRTOS/Source/queue.c **** 						}
 770:FreeRTOS/Source/queue.c **** 					}
 771:FreeRTOS/Source/queue.c **** 					else
 772:FreeRTOS/Source/queue.c **** 					{
 773:FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 774:FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 775:FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 776:FreeRTOS/Source/queue.c **** 						{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 16


 777:FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 778:FreeRTOS/Source/queue.c **** 							{
 779:FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 780:FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 781:FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 782:FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 783:FreeRTOS/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 784:FreeRTOS/Source/queue.c **** 							}
 785:FreeRTOS/Source/queue.c **** 							else
 786:FreeRTOS/Source/queue.c **** 							{
 787:FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 788:FreeRTOS/Source/queue.c **** 							}
 789:FreeRTOS/Source/queue.c **** 						}
 790:FreeRTOS/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 791:FreeRTOS/Source/queue.c **** 						{
 792:FreeRTOS/Source/queue.c **** 							/* This path is a special case that will only get
 793:FreeRTOS/Source/queue.c **** 							executed if the task was holding multiple mutexes
 794:FreeRTOS/Source/queue.c **** 							and the mutexes were given back in an order that is
 795:FreeRTOS/Source/queue.c **** 							different to that in which they were taken. */
 796:FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 797:FreeRTOS/Source/queue.c **** 						}
 798:FreeRTOS/Source/queue.c **** 						else
 799:FreeRTOS/Source/queue.c **** 						{
 800:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 801:FreeRTOS/Source/queue.c **** 						}
 802:FreeRTOS/Source/queue.c **** 					}
 803:FreeRTOS/Source/queue.c **** 				}
 804:FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 805:FreeRTOS/Source/queue.c **** 				{
 806:FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 807:FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 808:FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 809:FreeRTOS/Source/queue.c **** 					{
 810:FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 811:FreeRTOS/Source/queue.c **** 						{
 812:FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 813:FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 814:FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 815:FreeRTOS/Source/queue.c **** 							takes care of that. */
 816:FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 817:FreeRTOS/Source/queue.c **** 						}
 818:FreeRTOS/Source/queue.c **** 						else
 819:FreeRTOS/Source/queue.c **** 						{
 820:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 821:FreeRTOS/Source/queue.c **** 						}
 822:FreeRTOS/Source/queue.c **** 					}
 823:FreeRTOS/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 824:FreeRTOS/Source/queue.c **** 					{
 825:FreeRTOS/Source/queue.c **** 						/* This path is a special case that will only get
 826:FreeRTOS/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 827:FreeRTOS/Source/queue.c **** 						the mutexes were given back in an order that is
 828:FreeRTOS/Source/queue.c **** 						different to that in which they were taken. */
 829:FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 830:FreeRTOS/Source/queue.c **** 					}
 831:FreeRTOS/Source/queue.c **** 					else
 832:FreeRTOS/Source/queue.c **** 					{
 833:FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 17


 834:FreeRTOS/Source/queue.c **** 					}
 835:FreeRTOS/Source/queue.c **** 				}
 836:FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 837:FreeRTOS/Source/queue.c **** 
 838:FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 839:FreeRTOS/Source/queue.c **** 				return pdPASS;
 840:FreeRTOS/Source/queue.c **** 			}
 841:FreeRTOS/Source/queue.c **** 			else
 842:FreeRTOS/Source/queue.c **** 			{
 843:FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 844:FreeRTOS/Source/queue.c **** 				{
 845:FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 846:FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 847:FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 848:FreeRTOS/Source/queue.c **** 
 849:FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 850:FreeRTOS/Source/queue.c **** 					the function. */
 851:FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 852:FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 853:FreeRTOS/Source/queue.c **** 				}
 854:FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 855:FreeRTOS/Source/queue.c **** 				{
 856:FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 857:FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 858:FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 859:FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 860:FreeRTOS/Source/queue.c **** 				}
 861:FreeRTOS/Source/queue.c **** 				else
 862:FreeRTOS/Source/queue.c **** 				{
 863:FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 864:FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 865:FreeRTOS/Source/queue.c **** 				}
 866:FreeRTOS/Source/queue.c **** 			}
 867:FreeRTOS/Source/queue.c **** 		}
 868:FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 869:FreeRTOS/Source/queue.c **** 
 870:FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 871:FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 872:FreeRTOS/Source/queue.c **** 
 873:FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 874:FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 875:FreeRTOS/Source/queue.c **** 
 876:FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 877:FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 878:FreeRTOS/Source/queue.c **** 		{
 879:FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 880:FreeRTOS/Source/queue.c **** 			{
 881:FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 882:FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 883:FreeRTOS/Source/queue.c **** 
 884:FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 885:FreeRTOS/Source/queue.c **** 				event list.  It is possible	that interrupts occurring now
 886:FreeRTOS/Source/queue.c **** 				remove this task from the event	list again - but as the
 887:FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 888:FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 889:FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 890:FreeRTOS/Source/queue.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 18


 891:FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 892:FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 893:FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 894:FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 895:FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 896:FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 897:FreeRTOS/Source/queue.c **** 				{
 898:FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 899:FreeRTOS/Source/queue.c **** 				}
 900:FreeRTOS/Source/queue.c **** 			}
 901:FreeRTOS/Source/queue.c **** 			else
 902:FreeRTOS/Source/queue.c **** 			{
 903:FreeRTOS/Source/queue.c **** 				/* Try again. */
 904:FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 905:FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 906:FreeRTOS/Source/queue.c **** 			}
 907:FreeRTOS/Source/queue.c **** 		}
 908:FreeRTOS/Source/queue.c **** 		else
 909:FreeRTOS/Source/queue.c **** 		{
 910:FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 911:FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 912:FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 913:FreeRTOS/Source/queue.c **** 
 914:FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 915:FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 916:FreeRTOS/Source/queue.c **** 		}
 917:FreeRTOS/Source/queue.c **** 	}
 918:FreeRTOS/Source/queue.c **** }
 919:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 920:FreeRTOS/Source/queue.c **** 
 921:FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 922:FreeRTOS/Source/queue.c **** {
 923:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 924:FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 925:FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 926:FreeRTOS/Source/queue.c **** 
 927:FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 928:FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 929:FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 930:FreeRTOS/Source/queue.c **** 
 931:FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 932:FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 933:FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 934:FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 935:FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 936:FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 937:FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 938:FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 939:FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 940:FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 941:FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 942:FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 943:FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 944:FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 945:FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 946:FreeRTOS/Source/queue.c **** 
 947:FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 19


 948:FreeRTOS/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 949:FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 950:FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 951:FreeRTOS/Source/queue.c **** 	post). */
 952:FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 953:FreeRTOS/Source/queue.c **** 	{
 954:FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 955:FreeRTOS/Source/queue.c **** 		{
 956:FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 957:FreeRTOS/Source/queue.c **** 
 958:FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 959:FreeRTOS/Source/queue.c **** 
 960:FreeRTOS/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 961:FreeRTOS/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 962:FreeRTOS/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 963:FreeRTOS/Source/queue.c **** 			called here even though the disinherit function does not check if
 964:FreeRTOS/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 965:FreeRTOS/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 966:FreeRTOS/Source/queue.c **** 
 967:FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 968:FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
 969:FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 970:FreeRTOS/Source/queue.c **** 			{
 971:FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 972:FreeRTOS/Source/queue.c **** 				{
 973:FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 974:FreeRTOS/Source/queue.c **** 					{
 975:FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 976:FreeRTOS/Source/queue.c **** 						{
 977:FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 978:FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 979:FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
 980:FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 981:FreeRTOS/Source/queue.c **** 							{
 982:FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 983:FreeRTOS/Source/queue.c **** 							}
 984:FreeRTOS/Source/queue.c **** 							else
 985:FreeRTOS/Source/queue.c **** 							{
 986:FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 987:FreeRTOS/Source/queue.c **** 							}
 988:FreeRTOS/Source/queue.c **** 						}
 989:FreeRTOS/Source/queue.c **** 						else
 990:FreeRTOS/Source/queue.c **** 						{
 991:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 992:FreeRTOS/Source/queue.c **** 						}
 993:FreeRTOS/Source/queue.c **** 					}
 994:FreeRTOS/Source/queue.c **** 					else
 995:FreeRTOS/Source/queue.c **** 					{
 996:FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 997:FreeRTOS/Source/queue.c **** 						{
 998:FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 999:FreeRTOS/Source/queue.c **** 							{
1000:FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1001:FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1002:FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1003:FreeRTOS/Source/queue.c **** 								{
1004:FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 20


1005:FreeRTOS/Source/queue.c **** 								}
1006:FreeRTOS/Source/queue.c **** 								else
1007:FreeRTOS/Source/queue.c **** 								{
1008:FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1009:FreeRTOS/Source/queue.c **** 								}
1010:FreeRTOS/Source/queue.c **** 							}
1011:FreeRTOS/Source/queue.c **** 							else
1012:FreeRTOS/Source/queue.c **** 							{
1013:FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1014:FreeRTOS/Source/queue.c **** 							}
1015:FreeRTOS/Source/queue.c **** 						}
1016:FreeRTOS/Source/queue.c **** 						else
1017:FreeRTOS/Source/queue.c **** 						{
1018:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1019:FreeRTOS/Source/queue.c **** 						}
1020:FreeRTOS/Source/queue.c **** 					}
1021:FreeRTOS/Source/queue.c **** 				}
1022:FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1023:FreeRTOS/Source/queue.c **** 				{
1024:FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1025:FreeRTOS/Source/queue.c **** 					{
1026:FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1027:FreeRTOS/Source/queue.c **** 						{
1028:FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1029:FreeRTOS/Source/queue.c **** 							context	switch is required. */
1030:FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1031:FreeRTOS/Source/queue.c **** 							{
1032:FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1033:FreeRTOS/Source/queue.c **** 							}
1034:FreeRTOS/Source/queue.c **** 							else
1035:FreeRTOS/Source/queue.c **** 							{
1036:FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1037:FreeRTOS/Source/queue.c **** 							}
1038:FreeRTOS/Source/queue.c **** 						}
1039:FreeRTOS/Source/queue.c **** 						else
1040:FreeRTOS/Source/queue.c **** 						{
1041:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1042:FreeRTOS/Source/queue.c **** 						}
1043:FreeRTOS/Source/queue.c **** 					}
1044:FreeRTOS/Source/queue.c **** 					else
1045:FreeRTOS/Source/queue.c **** 					{
1046:FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1047:FreeRTOS/Source/queue.c **** 					}
1048:FreeRTOS/Source/queue.c **** 				}
1049:FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1050:FreeRTOS/Source/queue.c **** 			}
1051:FreeRTOS/Source/queue.c **** 			else
1052:FreeRTOS/Source/queue.c **** 			{
1053:FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1054:FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1055:FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1056:FreeRTOS/Source/queue.c **** 			}
1057:FreeRTOS/Source/queue.c **** 
1058:FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1059:FreeRTOS/Source/queue.c **** 		}
1060:FreeRTOS/Source/queue.c **** 		else
1061:FreeRTOS/Source/queue.c **** 		{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 21


1062:FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1063:FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1064:FreeRTOS/Source/queue.c **** 		}
1065:FreeRTOS/Source/queue.c **** 	}
1066:FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1067:FreeRTOS/Source/queue.c **** 
1068:FreeRTOS/Source/queue.c **** 	return xReturn;
1069:FreeRTOS/Source/queue.c **** }
1070:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1071:FreeRTOS/Source/queue.c **** 
1072:FreeRTOS/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1073:FreeRTOS/Source/queue.c **** {
1074:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1075:FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1076:FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1077:FreeRTOS/Source/queue.c **** 
1078:FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1079:FreeRTOS/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1080:FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1081:FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1082:FreeRTOS/Source/queue.c **** 	post). */
1083:FreeRTOS/Source/queue.c **** 
1084:FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1085:FreeRTOS/Source/queue.c **** 
1086:FreeRTOS/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1087:FreeRTOS/Source/queue.c **** 	if the item size is not 0. */
1088:FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1089:FreeRTOS/Source/queue.c **** 
1090:FreeRTOS/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1091:FreeRTOS/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1092:FreeRTOS/Source/queue.c **** 	interrupts, only tasks. */
1093:FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1094:FreeRTOS/Source/queue.c **** 
1095:FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1096:FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1097:FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1098:FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1099:FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1100:FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1101:FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1102:FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1103:FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1104:FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1105:FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1106:FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1107:FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1108:FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1109:FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1110:FreeRTOS/Source/queue.c **** 
1111:FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1112:FreeRTOS/Source/queue.c **** 	{
1113:FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1114:FreeRTOS/Source/queue.c **** 
1115:FreeRTOS/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1116:FreeRTOS/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1117:FreeRTOS/Source/queue.c **** 		space'. */
1118:FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 22


1119:FreeRTOS/Source/queue.c **** 		{
1120:FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1121:FreeRTOS/Source/queue.c **** 
1122:FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1123:FreeRTOS/Source/queue.c **** 
1124:FreeRTOS/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1125:FreeRTOS/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1126:FreeRTOS/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1127:FreeRTOS/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1128:FreeRTOS/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1129:FreeRTOS/Source/queue.c **** 			messages (semaphores) available. */
1130:FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1131:FreeRTOS/Source/queue.c **** 
1132:FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1133:FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1134:FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1135:FreeRTOS/Source/queue.c **** 			{
1136:FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1137:FreeRTOS/Source/queue.c **** 				{
1138:FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1139:FreeRTOS/Source/queue.c **** 					{
1140:FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1141:FreeRTOS/Source/queue.c **** 						{
1142:FreeRTOS/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1143:FreeRTOS/Source/queue.c **** 							posting	to the queue set caused a higher priority
1144:FreeRTOS/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1145:FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1146:FreeRTOS/Source/queue.c **** 							{
1147:FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1148:FreeRTOS/Source/queue.c **** 							}
1149:FreeRTOS/Source/queue.c **** 							else
1150:FreeRTOS/Source/queue.c **** 							{
1151:FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1152:FreeRTOS/Source/queue.c **** 							}
1153:FreeRTOS/Source/queue.c **** 						}
1154:FreeRTOS/Source/queue.c **** 						else
1155:FreeRTOS/Source/queue.c **** 						{
1156:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1157:FreeRTOS/Source/queue.c **** 						}
1158:FreeRTOS/Source/queue.c **** 					}
1159:FreeRTOS/Source/queue.c **** 					else
1160:FreeRTOS/Source/queue.c **** 					{
1161:FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:FreeRTOS/Source/queue.c **** 						{
1163:FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1164:FreeRTOS/Source/queue.c **** 							{
1165:FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1166:FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1167:FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1168:FreeRTOS/Source/queue.c **** 								{
1169:FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1170:FreeRTOS/Source/queue.c **** 								}
1171:FreeRTOS/Source/queue.c **** 								else
1172:FreeRTOS/Source/queue.c **** 								{
1173:FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1174:FreeRTOS/Source/queue.c **** 								}
1175:FreeRTOS/Source/queue.c **** 							}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 23


1176:FreeRTOS/Source/queue.c **** 							else
1177:FreeRTOS/Source/queue.c **** 							{
1178:FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1179:FreeRTOS/Source/queue.c **** 							}
1180:FreeRTOS/Source/queue.c **** 						}
1181:FreeRTOS/Source/queue.c **** 						else
1182:FreeRTOS/Source/queue.c **** 						{
1183:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1184:FreeRTOS/Source/queue.c **** 						}
1185:FreeRTOS/Source/queue.c **** 					}
1186:FreeRTOS/Source/queue.c **** 				}
1187:FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1188:FreeRTOS/Source/queue.c **** 				{
1189:FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1190:FreeRTOS/Source/queue.c **** 					{
1191:FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1192:FreeRTOS/Source/queue.c **** 						{
1193:FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1194:FreeRTOS/Source/queue.c **** 							context	switch is required. */
1195:FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1196:FreeRTOS/Source/queue.c **** 							{
1197:FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1198:FreeRTOS/Source/queue.c **** 							}
1199:FreeRTOS/Source/queue.c **** 							else
1200:FreeRTOS/Source/queue.c **** 							{
1201:FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1202:FreeRTOS/Source/queue.c **** 							}
1203:FreeRTOS/Source/queue.c **** 						}
1204:FreeRTOS/Source/queue.c **** 						else
1205:FreeRTOS/Source/queue.c **** 						{
1206:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1207:FreeRTOS/Source/queue.c **** 						}
1208:FreeRTOS/Source/queue.c **** 					}
1209:FreeRTOS/Source/queue.c **** 					else
1210:FreeRTOS/Source/queue.c **** 					{
1211:FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1212:FreeRTOS/Source/queue.c **** 					}
1213:FreeRTOS/Source/queue.c **** 				}
1214:FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1215:FreeRTOS/Source/queue.c **** 			}
1216:FreeRTOS/Source/queue.c **** 			else
1217:FreeRTOS/Source/queue.c **** 			{
1218:FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1219:FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1220:FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1221:FreeRTOS/Source/queue.c **** 			}
1222:FreeRTOS/Source/queue.c **** 
1223:FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1224:FreeRTOS/Source/queue.c **** 		}
1225:FreeRTOS/Source/queue.c **** 		else
1226:FreeRTOS/Source/queue.c **** 		{
1227:FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1228:FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1229:FreeRTOS/Source/queue.c **** 		}
1230:FreeRTOS/Source/queue.c **** 	}
1231:FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1232:FreeRTOS/Source/queue.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 24


1233:FreeRTOS/Source/queue.c **** 	return xReturn;
1234:FreeRTOS/Source/queue.c **** }
1235:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1236:FreeRTOS/Source/queue.c **** 
1237:FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1238:FreeRTOS/Source/queue.c **** {
1239:FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1240:FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1241:FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1242:FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1243:FreeRTOS/Source/queue.c **** 
1244:FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1245:FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1246:FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1247:FreeRTOS/Source/queue.c **** 	{
1248:FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1249:FreeRTOS/Source/queue.c **** 	}
1250:FreeRTOS/Source/queue.c **** 	#endif
1251:FreeRTOS/Source/queue.c **** 
1252:FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1253:FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1254:FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1255:FreeRTOS/Source/queue.c **** 
1256:FreeRTOS/Source/queue.c **** 	for( ;; )
1257:FreeRTOS/Source/queue.c **** 	{
1258:FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1259:FreeRTOS/Source/queue.c **** 		{
1260:FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1261:FreeRTOS/Source/queue.c **** 
1262:FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1263:FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1264:FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1265:FreeRTOS/Source/queue.c **** 			{
1266:FreeRTOS/Source/queue.c **** 				/* Remember the read position in case the queue is only being
1267:FreeRTOS/Source/queue.c **** 				peeked. */
1268:FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1269:FreeRTOS/Source/queue.c **** 
1270:FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1271:FreeRTOS/Source/queue.c **** 
1272:FreeRTOS/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
1273:FreeRTOS/Source/queue.c **** 				{
1274:FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1275:FreeRTOS/Source/queue.c **** 
1276:FreeRTOS/Source/queue.c **** 					/* Actually removing data, not just peeking. */
1277:FreeRTOS/Source/queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1278:FreeRTOS/Source/queue.c **** 
1279:FreeRTOS/Source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1280:FreeRTOS/Source/queue.c **** 					{
1281:FreeRTOS/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1282:FreeRTOS/Source/queue.c **** 						{
1283:FreeRTOS/Source/queue.c **** 							/* Record the information required to implement
1284:FreeRTOS/Source/queue.c **** 							priority inheritance should it become necessary. */
1285:FreeRTOS/Source/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
1286:FreeRTOS/Source/queue.c **** 						}
1287:FreeRTOS/Source/queue.c **** 						else
1288:FreeRTOS/Source/queue.c **** 						{
1289:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 25


1290:FreeRTOS/Source/queue.c **** 						}
1291:FreeRTOS/Source/queue.c **** 					}
1292:FreeRTOS/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1293:FreeRTOS/Source/queue.c **** 
1294:FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1295:FreeRTOS/Source/queue.c **** 					{
1296:FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1297:FreeRTOS/Source/queue.c **** 						{
1298:FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1299:FreeRTOS/Source/queue.c **** 						}
1300:FreeRTOS/Source/queue.c **** 						else
1301:FreeRTOS/Source/queue.c **** 						{
1302:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1303:FreeRTOS/Source/queue.c **** 						}
1304:FreeRTOS/Source/queue.c **** 					}
1305:FreeRTOS/Source/queue.c **** 					else
1306:FreeRTOS/Source/queue.c **** 					{
1307:FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1308:FreeRTOS/Source/queue.c **** 					}
1309:FreeRTOS/Source/queue.c **** 				}
1310:FreeRTOS/Source/queue.c **** 				else
1311:FreeRTOS/Source/queue.c **** 				{
1312:FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1313:FreeRTOS/Source/queue.c **** 
1314:FreeRTOS/Source/queue.c **** 					/* The data is not being removed, so reset the read
1315:FreeRTOS/Source/queue.c **** 					pointer. */
1316:FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1317:FreeRTOS/Source/queue.c **** 
1318:FreeRTOS/Source/queue.c **** 					/* The data is being left in the queue, so see if there are
1319:FreeRTOS/Source/queue.c **** 					any other tasks waiting for the data. */
1320:FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1321:FreeRTOS/Source/queue.c **** 					{
1322:FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1323:FreeRTOS/Source/queue.c **** 						{
1324:FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1325:FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1326:FreeRTOS/Source/queue.c **** 						}
1327:FreeRTOS/Source/queue.c **** 						else
1328:FreeRTOS/Source/queue.c **** 						{
1329:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1330:FreeRTOS/Source/queue.c **** 						}
1331:FreeRTOS/Source/queue.c **** 					}
1332:FreeRTOS/Source/queue.c **** 					else
1333:FreeRTOS/Source/queue.c **** 					{
1334:FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1335:FreeRTOS/Source/queue.c **** 					}
1336:FreeRTOS/Source/queue.c **** 				}
1337:FreeRTOS/Source/queue.c **** 
1338:FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1339:FreeRTOS/Source/queue.c **** 				return pdPASS;
1340:FreeRTOS/Source/queue.c **** 			}
1341:FreeRTOS/Source/queue.c **** 			else
1342:FreeRTOS/Source/queue.c **** 			{
1343:FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1344:FreeRTOS/Source/queue.c **** 				{
1345:FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1346:FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 26


1347:FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1348:FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1349:FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1350:FreeRTOS/Source/queue.c **** 				}
1351:FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1352:FreeRTOS/Source/queue.c **** 				{
1353:FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1354:FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1355:FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1356:FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1357:FreeRTOS/Source/queue.c **** 				}
1358:FreeRTOS/Source/queue.c **** 				else
1359:FreeRTOS/Source/queue.c **** 				{
1360:FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1361:FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1362:FreeRTOS/Source/queue.c **** 				}
1363:FreeRTOS/Source/queue.c **** 			}
1364:FreeRTOS/Source/queue.c **** 		}
1365:FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1366:FreeRTOS/Source/queue.c **** 
1367:FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1368:FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1369:FreeRTOS/Source/queue.c **** 
1370:FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1371:FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1372:FreeRTOS/Source/queue.c **** 
1373:FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1374:FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1375:FreeRTOS/Source/queue.c **** 		{
1376:FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1377:FreeRTOS/Source/queue.c **** 			{
1378:FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1379:FreeRTOS/Source/queue.c **** 
1380:FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1381:FreeRTOS/Source/queue.c **** 				{
1382:FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1383:FreeRTOS/Source/queue.c **** 					{
1384:FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1385:FreeRTOS/Source/queue.c **** 						{
1386:FreeRTOS/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1387:FreeRTOS/Source/queue.c **** 						}
1388:FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1389:FreeRTOS/Source/queue.c **** 					}
1390:FreeRTOS/Source/queue.c **** 					else
1391:FreeRTOS/Source/queue.c **** 					{
1392:FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1393:FreeRTOS/Source/queue.c **** 					}
1394:FreeRTOS/Source/queue.c **** 				}
1395:FreeRTOS/Source/queue.c **** 				#endif
1396:FreeRTOS/Source/queue.c **** 
1397:FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1398:FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1399:FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1400:FreeRTOS/Source/queue.c **** 				{
1401:FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1402:FreeRTOS/Source/queue.c **** 				}
1403:FreeRTOS/Source/queue.c **** 				else
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 27


1404:FreeRTOS/Source/queue.c **** 				{
1405:FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1406:FreeRTOS/Source/queue.c **** 				}
1407:FreeRTOS/Source/queue.c **** 			}
1408:FreeRTOS/Source/queue.c **** 			else
1409:FreeRTOS/Source/queue.c **** 			{
1410:FreeRTOS/Source/queue.c **** 				/* Try again. */
1411:FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1412:FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1413:FreeRTOS/Source/queue.c **** 			}
1414:FreeRTOS/Source/queue.c **** 		}
1415:FreeRTOS/Source/queue.c **** 		else
1416:FreeRTOS/Source/queue.c **** 		{
1417:FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1418:FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1419:FreeRTOS/Source/queue.c **** 
1420:FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1421:FreeRTOS/Source/queue.c **** 			{
1422:FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1423:FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1424:FreeRTOS/Source/queue.c **** 			}
1425:FreeRTOS/Source/queue.c **** 			else
1426:FreeRTOS/Source/queue.c **** 			{
1427:FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1428:FreeRTOS/Source/queue.c **** 			}
1429:FreeRTOS/Source/queue.c **** 		}
1430:FreeRTOS/Source/queue.c **** 	}
1431:FreeRTOS/Source/queue.c **** }
1432:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1433:FreeRTOS/Source/queue.c **** 
1434:FreeRTOS/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1435:FreeRTOS/Source/queue.c **** {
1436:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1437:FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1438:FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1439:FreeRTOS/Source/queue.c **** 
1440:FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1441:FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1442:FreeRTOS/Source/queue.c **** 
1443:FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1444:FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1445:FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1446:FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1447:FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1448:FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1449:FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1450:FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1451:FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1452:FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1453:FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1454:FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1455:FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1456:FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1457:FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1458:FreeRTOS/Source/queue.c **** 
1459:FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1460:FreeRTOS/Source/queue.c **** 	{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 28


1461:FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1462:FreeRTOS/Source/queue.c **** 
1463:FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1464:FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1465:FreeRTOS/Source/queue.c **** 		{
1466:FreeRTOS/Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1467:FreeRTOS/Source/queue.c **** 
1468:FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1469:FreeRTOS/Source/queue.c **** 
1470:FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1471:FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1472:FreeRTOS/Source/queue.c **** 
1473:FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1474:FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1475:FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1476:FreeRTOS/Source/queue.c **** 			locked. */
1477:FreeRTOS/Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1478:FreeRTOS/Source/queue.c **** 			{
1479:FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1480:FreeRTOS/Source/queue.c **** 				{
1481:FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1482:FreeRTOS/Source/queue.c **** 					{
1483:FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1484:FreeRTOS/Source/queue.c **** 						force a context switch. */
1485:FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1486:FreeRTOS/Source/queue.c **** 						{
1487:FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1488:FreeRTOS/Source/queue.c **** 						}
1489:FreeRTOS/Source/queue.c **** 						else
1490:FreeRTOS/Source/queue.c **** 						{
1491:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1492:FreeRTOS/Source/queue.c **** 						}
1493:FreeRTOS/Source/queue.c **** 					}
1494:FreeRTOS/Source/queue.c **** 					else
1495:FreeRTOS/Source/queue.c **** 					{
1496:FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1497:FreeRTOS/Source/queue.c **** 					}
1498:FreeRTOS/Source/queue.c **** 				}
1499:FreeRTOS/Source/queue.c **** 				else
1500:FreeRTOS/Source/queue.c **** 				{
1501:FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1502:FreeRTOS/Source/queue.c **** 				}
1503:FreeRTOS/Source/queue.c **** 			}
1504:FreeRTOS/Source/queue.c **** 			else
1505:FreeRTOS/Source/queue.c **** 			{
1506:FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1507:FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1508:FreeRTOS/Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1509:FreeRTOS/Source/queue.c **** 			}
1510:FreeRTOS/Source/queue.c **** 
1511:FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1512:FreeRTOS/Source/queue.c **** 		}
1513:FreeRTOS/Source/queue.c **** 		else
1514:FreeRTOS/Source/queue.c **** 		{
1515:FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1516:FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1517:FreeRTOS/Source/queue.c **** 		}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 29


1518:FreeRTOS/Source/queue.c **** 	}
1519:FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1520:FreeRTOS/Source/queue.c **** 
1521:FreeRTOS/Source/queue.c **** 	return xReturn;
1522:FreeRTOS/Source/queue.c **** }
1523:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1524:FreeRTOS/Source/queue.c **** 
1525:FreeRTOS/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1526:FreeRTOS/Source/queue.c **** {
1527:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1528:FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1529:FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1530:FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1531:FreeRTOS/Source/queue.c **** 
1532:FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1533:FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1534:FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1535:FreeRTOS/Source/queue.c **** 
1536:FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1537:FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1538:FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1539:FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1540:FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1541:FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1542:FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1543:FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1544:FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1545:FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1546:FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1547:FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1548:FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1549:FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1550:FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1551:FreeRTOS/Source/queue.c **** 
1552:FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1553:FreeRTOS/Source/queue.c **** 	{
1554:FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1555:FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1556:FreeRTOS/Source/queue.c **** 		{
1557:FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1558:FreeRTOS/Source/queue.c **** 
1559:FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1560:FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1561:FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1562:FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1563:FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1564:FreeRTOS/Source/queue.c **** 
1565:FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1566:FreeRTOS/Source/queue.c **** 		}
1567:FreeRTOS/Source/queue.c **** 		else
1568:FreeRTOS/Source/queue.c **** 		{
1569:FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1570:FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1571:FreeRTOS/Source/queue.c **** 		}
1572:FreeRTOS/Source/queue.c **** 	}
1573:FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1574:FreeRTOS/Source/queue.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 30


1575:FreeRTOS/Source/queue.c **** 	return xReturn;
1576:FreeRTOS/Source/queue.c **** }
1577:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1578:FreeRTOS/Source/queue.c **** 
1579:FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1580:FreeRTOS/Source/queue.c **** {
1581:FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1582:FreeRTOS/Source/queue.c **** 
1583:FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1584:FreeRTOS/Source/queue.c **** 
1585:FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1586:FreeRTOS/Source/queue.c **** 	{
1587:FreeRTOS/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1588:FreeRTOS/Source/queue.c **** 	}
1589:FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1590:FreeRTOS/Source/queue.c **** 
1591:FreeRTOS/Source/queue.c **** 	return uxReturn;
1592:FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1593:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1594:FreeRTOS/Source/queue.c **** 
1595:FreeRTOS/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1596:FreeRTOS/Source/queue.c **** {
1597:FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1598:FreeRTOS/Source/queue.c **** Queue_t *pxQueue;
1599:FreeRTOS/Source/queue.c **** 
1600:FreeRTOS/Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1601:FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1602:FreeRTOS/Source/queue.c **** 
1603:FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1604:FreeRTOS/Source/queue.c **** 	{
1605:FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1606:FreeRTOS/Source/queue.c **** 	}
1607:FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1608:FreeRTOS/Source/queue.c **** 
1609:FreeRTOS/Source/queue.c **** 	return uxReturn;
1610:FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1611:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1612:FreeRTOS/Source/queue.c **** 
1613:FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1614:FreeRTOS/Source/queue.c **** {
1615:FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1616:FreeRTOS/Source/queue.c **** 
1617:FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1618:FreeRTOS/Source/queue.c **** 
1619:FreeRTOS/Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1620:FreeRTOS/Source/queue.c **** 
1621:FreeRTOS/Source/queue.c **** 	return uxReturn;
1622:FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1623:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1624:FreeRTOS/Source/queue.c **** 
1625:FreeRTOS/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1626:FreeRTOS/Source/queue.c **** {
1627:FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1628:FreeRTOS/Source/queue.c **** 
1629:FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1630:FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1631:FreeRTOS/Source/queue.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 31


1632:FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1633:FreeRTOS/Source/queue.c **** 	{
1634:FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1635:FreeRTOS/Source/queue.c **** 	}
1636:FreeRTOS/Source/queue.c **** 	#endif
1637:FreeRTOS/Source/queue.c **** 
1638:FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1639:FreeRTOS/Source/queue.c **** 	{
1640:FreeRTOS/Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1641:FreeRTOS/Source/queue.c **** 		again. */
1642:FreeRTOS/Source/queue.c **** 		vPortFree( pxQueue );
1643:FreeRTOS/Source/queue.c **** 	}
1644:FreeRTOS/Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1645:FreeRTOS/Source/queue.c **** 	{
1646:FreeRTOS/Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1647:FreeRTOS/Source/queue.c **** 		check before attempting to free the memory. */
1648:FreeRTOS/Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1649:FreeRTOS/Source/queue.c **** 		{
1650:FreeRTOS/Source/queue.c **** 			vPortFree( pxQueue );
1651:FreeRTOS/Source/queue.c **** 		}
1652:FreeRTOS/Source/queue.c **** 		else
1653:FreeRTOS/Source/queue.c **** 		{
1654:FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1655:FreeRTOS/Source/queue.c **** 		}
1656:FreeRTOS/Source/queue.c **** 	}
1657:FreeRTOS/Source/queue.c **** 	#else
1658:FreeRTOS/Source/queue.c **** 	{
1659:FreeRTOS/Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1660:FreeRTOS/Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1661:FreeRTOS/Source/queue.c **** 		( void ) pxQueue;
1662:FreeRTOS/Source/queue.c **** 	}
1663:FreeRTOS/Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1664:FreeRTOS/Source/queue.c **** }
1665:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1666:FreeRTOS/Source/queue.c **** 
1667:FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1668:FreeRTOS/Source/queue.c **** 
1669:FreeRTOS/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1670:FreeRTOS/Source/queue.c **** 	{
1671:FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1672:FreeRTOS/Source/queue.c **** 	}
1673:FreeRTOS/Source/queue.c **** 
1674:FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1675:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1676:FreeRTOS/Source/queue.c **** 
1677:FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1678:FreeRTOS/Source/queue.c **** 
1679:FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1680:FreeRTOS/Source/queue.c **** 	{
1681:FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1682:FreeRTOS/Source/queue.c **** 	}
1683:FreeRTOS/Source/queue.c **** 
1684:FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1685:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1686:FreeRTOS/Source/queue.c **** 
1687:FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1688:FreeRTOS/Source/queue.c **** 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 32


1689:FreeRTOS/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1690:FreeRTOS/Source/queue.c **** 	{
1691:FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1692:FreeRTOS/Source/queue.c **** 	}
1693:FreeRTOS/Source/queue.c **** 
1694:FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1695:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1696:FreeRTOS/Source/queue.c **** 
1697:FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1698:FreeRTOS/Source/queue.c **** {
  80              		.loc 1 1698 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              	.LVL0:
  85 0000 70B5     		push	{r4, r5, r6, lr}	@
  86              	.LCFI0:
  87              		.cfi_def_cfa_offset 16
  88              		.cfi_offset 4, -16
  89              		.cfi_offset 5, -12
  90              		.cfi_offset 6, -8
  91              		.cfi_offset 14, -4
  92              		.loc 1 1698 0
  93 0002 1546     		mov	r5, r2	@ xPosition, xPosition
1699:FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
1700:FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
1701:FreeRTOS/Source/queue.c **** 
1702:FreeRTOS/Source/queue.c **** 	/* This function is called from a critical section. */
1703:FreeRTOS/Source/queue.c **** 
1704:FreeRTOS/Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1705:FreeRTOS/Source/queue.c **** 
1706:FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  94              		.loc 1 1706 0
  95 0004 026C     		ldr	r2, [r0, #64]	@ D.5929, pxQueue_6(D)->uxItemSize
  96              	.LVL1:
1698:FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
  97              		.loc 1 1698 0
  98 0006 0446     		mov	r4, r0	@ pxQueue, pxQueue
1704:FreeRTOS/Source/queue.c **** 
  99              		.loc 1 1704 0
 100 0008 866B     		ldr	r6, [r0, #56]	@ uxMessagesWaiting, pxQueue_6(D)->uxMessagesWaiting
 101              	.LVL2:
 102              		.loc 1 1706 0
 103 000a 32B9     		cbnz	r2, .L2	@ D.5929,
1707:FreeRTOS/Source/queue.c **** 	{
1708:FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1709:FreeRTOS/Source/queue.c **** 		{
1710:FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 104              		.loc 1 1710 0
 105 000c 0568     		ldr	r5, [r0]	@ pxQueue_6(D)->pcHead, pxQueue_6(D)->pcHead
 106              	.LVL3:
 107 000e 2DBB     		cbnz	r5, .L6	@ pxQueue_6(D)->pcHead,
1711:FreeRTOS/Source/queue.c **** 			{
1712:FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
1713:FreeRTOS/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 108              		.loc 1 1713 0
 109 0010 4068     		ldr	r0, [r0, #4]	@, pxQueue_6(D)->pcTail
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 33


 110              	.LVL4:
 111 0012 FFF7FEFF 		bl	xTaskPriorityDisinherit	@
 112              	.LVL5:
1714:FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 113              		.loc 1 1714 0
 114 0016 6560     		str	r5, [r4, #4]	@ pxQueue_6(D)->pcHead, pxQueue_6(D)->pcTail
 115 0018 27E0     		b	.L3	@
 116              	.LVL6:
 117              	.L2:
1715:FreeRTOS/Source/queue.c **** 			}
1716:FreeRTOS/Source/queue.c **** 			else
1717:FreeRTOS/Source/queue.c **** 			{
1718:FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1719:FreeRTOS/Source/queue.c **** 			}
1720:FreeRTOS/Source/queue.c **** 		}
1721:FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
1722:FreeRTOS/Source/queue.c **** 	}
1723:FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 118              		.loc 1 1723 0
 119 001a 65B9     		cbnz	r5, .L4	@ xPosition,
1724:FreeRTOS/Source/queue.c **** 	{
1725:FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
 120              		.loc 1 1725 0
 121 001c 8068     		ldr	r0, [r0, #8]	@, pxQueue_6(D)->pcWriteTo
 122              	.LVL7:
 123 001e FFF7FEFF 		bl	memcpy	@
 124              	.LVL8:
1726:FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 125              		.loc 1 1726 0
 126 0022 A268     		ldr	r2, [r4, #8]	@ pxQueue_6(D)->pcWriteTo, pxQueue_6(D)->pcWriteTo
 127 0024 236C     		ldr	r3, [r4, #64]	@ pxQueue_6(D)->uxItemSize, pxQueue_6(D)->uxItemSize
 128 0026 1344     		add	r3, r3, r2	@ D.5930, pxQueue_6(D)->pcWriteTo
1727:FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 129              		.loc 1 1727 0
 130 0028 6268     		ldr	r2, [r4, #4]	@ pxQueue_6(D)->pcTail, pxQueue_6(D)->pcTail
1726:FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 131              		.loc 1 1726 0
 132 002a A360     		str	r3, [r4, #8]	@ D.5930, pxQueue_6(D)->pcWriteTo
 133              		.loc 1 1727 0
 134 002c 9342     		cmp	r3, r2	@ D.5930, pxQueue_6(D)->pcTail
 135 002e 17D3     		bcc	.L7	@,
1728:FreeRTOS/Source/queue.c **** 		{
1729:FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 136              		.loc 1 1729 0
 137 0030 2368     		ldr	r3, [r4]	@ pxQueue_6(D)->pcHead, pxQueue_6(D)->pcHead
 138 0032 A360     		str	r3, [r4, #8]	@ pxQueue_6(D)->pcHead, pxQueue_6(D)->pcWriteTo
 139 0034 14E0     		b	.L7	@
 140              	.LVL9:
 141              	.L4:
1730:FreeRTOS/Source/queue.c **** 		}
1731:FreeRTOS/Source/queue.c **** 		else
1732:FreeRTOS/Source/queue.c **** 		{
1733:FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1734:FreeRTOS/Source/queue.c **** 		}
1735:FreeRTOS/Source/queue.c **** 	}
1736:FreeRTOS/Source/queue.c **** 	else
1737:FreeRTOS/Source/queue.c **** 	{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 34


1738:FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
 142              		.loc 1 1738 0
 143 0036 C068     		ldr	r0, [r0, #12]	@, pxQueue_6(D)->u.pcReadFrom
 144              	.LVL10:
 145 0038 FFF7FEFF 		bl	memcpy	@
 146              	.LVL11:
1739:FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 147              		.loc 1 1739 0
 148 003c 236C     		ldr	r3, [r4, #64]	@ pxQueue_6(D)->uxItemSize, pxQueue_6(D)->uxItemSize
 149 003e E268     		ldr	r2, [r4, #12]	@ pxQueue_6(D)->u.pcReadFrom, pxQueue_6(D)->u.pcReadFrom
 150 0040 5B42     		negs	r3, r3	@ D.5931, pxQueue_6(D)->uxItemSize
1740:FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 151              		.loc 1 1740 0
 152 0042 2168     		ldr	r1, [r4]	@ pxQueue_6(D)->pcHead, pxQueue_6(D)->pcHead
1739:FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 153              		.loc 1 1739 0
 154 0044 1A44     		add	r2, r2, r3	@ D.5930, D.5931
 155              		.loc 1 1740 0
 156 0046 8A42     		cmp	r2, r1	@ D.5930, pxQueue_6(D)->pcHead
1739:FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 157              		.loc 1 1739 0
 158 0048 E260     		str	r2, [r4, #12]	@ D.5930, pxQueue_6(D)->u.pcReadFrom
1741:FreeRTOS/Source/queue.c **** 		{
1742:FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 159              		.loc 1 1742 0
 160 004a 3EBF     		ittt	cc
 161 004c 6268     		ldrcc	r2, [r4, #4]	@ pxQueue_6(D)->pcTail, pxQueue_6(D)->pcTail
 162 004e 9B18     		addcc	r3, r3, r2	@ D.5930, pxQueue_6(D)->pcTail
 163 0050 E360     		strcc	r3, [r4, #12]	@ D.5930, pxQueue_6(D)->u.pcReadFrom
1743:FreeRTOS/Source/queue.c **** 		}
1744:FreeRTOS/Source/queue.c **** 		else
1745:FreeRTOS/Source/queue.c **** 		{
1746:FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1747:FreeRTOS/Source/queue.c **** 		}
1748:FreeRTOS/Source/queue.c **** 
1749:FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
 164              		.loc 1 1749 0
 165 0052 022D     		cmp	r5, #2	@ xPosition,
 166 0054 06D1     		bne	.L8	@,
1750:FreeRTOS/Source/queue.c **** 		{
1751:FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 167              		.loc 1 1751 0
 168 0056 3EB1     		cbz	r6, .L9	@ uxMessagesWaiting,
1752:FreeRTOS/Source/queue.c **** 			{
1753:FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
1754:FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
1755:FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
1756:FreeRTOS/Source/queue.c **** 				correct. */
1757:FreeRTOS/Source/queue.c **** 				--uxMessagesWaiting;
 169              		.loc 1 1757 0
 170 0058 013E     		subs	r6, r6, #1	@ uxMessagesWaiting, uxMessagesWaiting,
 171              	.LVL12:
 172 005a 03E0     		b	.L8	@
 173              	.LVL13:
 174              	.L6:
1699:FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 175              		.loc 1 1699 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 35


 176 005c 1046     		mov	r0, r2	@ xReturn, D.5929
 177              	.LVL14:
 178 005e 04E0     		b	.L3	@
 179              	.LVL15:
 180              	.L7:
 181 0060 2846     		mov	r0, r5	@ xReturn, xPosition
 182 0062 02E0     		b	.L3	@
 183              	.L8:
 184 0064 0020     		movs	r0, #0	@ xReturn,
 185 0066 00E0     		b	.L3	@
 186              	.L9:
 187 0068 3046     		mov	r0, r6	@ xReturn, uxMessagesWaiting
 188              	.LVL16:
 189              	.L3:
1758:FreeRTOS/Source/queue.c **** 			}
1759:FreeRTOS/Source/queue.c **** 			else
1760:FreeRTOS/Source/queue.c **** 			{
1761:FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1762:FreeRTOS/Source/queue.c **** 			}
1763:FreeRTOS/Source/queue.c **** 		}
1764:FreeRTOS/Source/queue.c **** 		else
1765:FreeRTOS/Source/queue.c **** 		{
1766:FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1767:FreeRTOS/Source/queue.c **** 		}
1768:FreeRTOS/Source/queue.c **** 	}
1769:FreeRTOS/Source/queue.c **** 
1770:FreeRTOS/Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 190              		.loc 1 1770 0
 191 006a 0136     		adds	r6, r6, #1	@ D.5929, uxMessagesWaiting,
 192              	.LVL17:
 193 006c A663     		str	r6, [r4, #56]	@ D.5929, pxQueue_6(D)->uxMessagesWaiting
1771:FreeRTOS/Source/queue.c **** 
1772:FreeRTOS/Source/queue.c **** 	return xReturn;
1773:FreeRTOS/Source/queue.c **** }
 194              		.loc 1 1773 0
 195 006e 70BD     		pop	{r4, r5, r6, pc}	@
 196              		.cfi_endproc
 197              	.LFE23:
 198              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
 199              		.align	1
 200              		.thumb
 201              		.thumb_func
 202              		.type	prvCopyDataFromQueue, %function
 203              	prvCopyDataFromQueue:
 204              	.LFB24:
1774:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1775:FreeRTOS/Source/queue.c **** 
1776:FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1777:FreeRTOS/Source/queue.c **** {
 205              		.loc 1 1777 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              	.LVL18:
1778:FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 210              		.loc 1 1778 0
 211 0070 026C     		ldr	r2, [r0, #64]	@ D.5941, pxQueue_4(D)->uxItemSize
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 36


1777:FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 212              		.loc 1 1777 0
 213 0072 10B5     		push	{r4, lr}	@
 214              	.LCFI1:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 4, -8
 217              		.cfi_offset 14, -4
1777:FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 218              		.loc 1 1777 0
 219 0074 0346     		mov	r3, r0	@ pxQueue, pxQueue
 220              		.loc 1 1778 0
 221 0076 72B1     		cbz	r2, .L11	@ D.5941,
1779:FreeRTOS/Source/queue.c **** 	{
1780:FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 222              		.loc 1 1780 0
 223 0078 C468     		ldr	r4, [r0, #12]	@ pxQueue_4(D)->u.pcReadFrom, pxQueue_4(D)->u.pcReadFrom
 224 007a 1444     		add	r4, r4, r2	@ D.5942, D.5941
 225 007c C460     		str	r4, [r0, #12]	@ D.5942, pxQueue_4(D)->u.pcReadFrom
1781:FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 226              		.loc 1 1781 0
 227 007e 4068     		ldr	r0, [r0, #4]	@ pxQueue_4(D)->pcTail, pxQueue_4(D)->pcTail
 228              	.LVL19:
 229 0080 8442     		cmp	r4, r0	@ D.5942, pxQueue_4(D)->pcTail
1782:FreeRTOS/Source/queue.c **** 		{
1783:FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 230              		.loc 1 1783 0
 231 0082 28BF     		it	cs
 232 0084 1868     		ldrcs	r0, [r3]	@ pxQueue_4(D)->pcHead, pxQueue_4(D)->pcHead
1784:FreeRTOS/Source/queue.c **** 		}
1785:FreeRTOS/Source/queue.c **** 		else
1786:FreeRTOS/Source/queue.c **** 		{
1787:FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1788:FreeRTOS/Source/queue.c **** 		}
1789:FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1790:FreeRTOS/Source/queue.c **** 	}
1791:FreeRTOS/Source/queue.c **** }
 233              		.loc 1 1791 0
 234 0086 BDE81040 		pop	{r4, lr}	@
 235              	.LCFI2:
 236              		.cfi_remember_state
 237              		.cfi_restore 14
 238              		.cfi_restore 4
 239              		.cfi_def_cfa_offset 0
1783:FreeRTOS/Source/queue.c **** 		}
 240              		.loc 1 1783 0
 241 008a 28BF     		it	cs
 242 008c D860     		strcs	r0, [r3, #12]	@ pxQueue_4(D)->pcHead, pxQueue_4(D)->u.pcReadFrom
1789:FreeRTOS/Source/queue.c **** 	}
 243              		.loc 1 1789 0
 244 008e 0846     		mov	r0, r1	@, pvBuffer
 245 0090 D968     		ldr	r1, [r3, #12]	@, pxQueue_4(D)->u.pcReadFrom
 246              	.LVL20:
 247 0092 FFF7FEBF 		b	memcpy	@
 248              	.LVL21:
 249              	.L11:
 250              	.LCFI3:
 251              		.cfi_restore_state
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 37


 252 0096 10BD     		pop	{r4, pc}	@
 253              		.cfi_endproc
 254              	.LFE24:
 255              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 256              		.align	1
 257              		.thumb
 258              		.thumb_func
 259              		.type	prvUnlockQueue, %function
 260              	prvUnlockQueue:
 261              	.LFB25:
1792:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1793:FreeRTOS/Source/queue.c **** 
1794:FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1795:FreeRTOS/Source/queue.c **** {
 262              		.loc 1 1795 0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266              	.LVL22:
 267 0098 38B5     		push	{r3, r4, r5, lr}	@
 268              	.LCFI4:
 269              		.cfi_def_cfa_offset 16
 270              		.cfi_offset 3, -16
 271              		.cfi_offset 4, -12
 272              		.cfi_offset 5, -8
 273              		.cfi_offset 14, -4
 274              		.loc 1 1795 0
 275 009a 0446     		mov	r4, r0	@ pxQueue, pxQueue
1796:FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1797:FreeRTOS/Source/queue.c **** 
1798:FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1799:FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1800:FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1801:FreeRTOS/Source/queue.c **** 	updated. */
1802:FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 276              		.loc 1 1802 0
 277 009c FFF7FEFF 		bl	vPortEnterCritical	@
 278              	.LVL23:
 279              	.LBB23:
1803:FreeRTOS/Source/queue.c **** 	{
1804:FreeRTOS/Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
 280              		.loc 1 1804 0
 281 00a0 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2	@ pxQueue_9(D)->cTxLock, pxQueue_9(D)->cTxLock
 282              	.L35:
 283 00a4 EDB2     		uxtb	r5, r5	@ cTxLock, tmp133
 284              	.LVL24:
1805:FreeRTOS/Source/queue.c **** 
1806:FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1807:FreeRTOS/Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
 285              		.loc 1 1807 0
 286 00a6 6BB2     		sxtb	r3, r5	@ cTxLock, cTxLock
 287 00a8 002B     		cmp	r3, #0	@ cTxLock,
 288 00aa 0ADD     		ble	.L16	@,
1808:FreeRTOS/Source/queue.c **** 		{
1809:FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1810:FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
1811:FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 38


1812:FreeRTOS/Source/queue.c **** 			{
1813:FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1814:FreeRTOS/Source/queue.c **** 				{
1815:FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1816:FreeRTOS/Source/queue.c **** 					{
1817:FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
1818:FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
1819:FreeRTOS/Source/queue.c **** 						A context switch is required. */
1820:FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
1821:FreeRTOS/Source/queue.c **** 					}
1822:FreeRTOS/Source/queue.c **** 					else
1823:FreeRTOS/Source/queue.c **** 					{
1824:FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1825:FreeRTOS/Source/queue.c **** 					}
1826:FreeRTOS/Source/queue.c **** 				}
1827:FreeRTOS/Source/queue.c **** 				else
1828:FreeRTOS/Source/queue.c **** 				{
1829:FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get
1830:FreeRTOS/Source/queue.c **** 					added to the pending ready list as the scheduler is still
1831:FreeRTOS/Source/queue.c **** 					suspended. */
1832:FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1833:FreeRTOS/Source/queue.c **** 					{
1834:FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1835:FreeRTOS/Source/queue.c **** 						{
1836:FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1837:FreeRTOS/Source/queue.c **** 							context	switch is required. */
1838:FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
1839:FreeRTOS/Source/queue.c **** 						}
1840:FreeRTOS/Source/queue.c **** 						else
1841:FreeRTOS/Source/queue.c **** 						{
1842:FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:FreeRTOS/Source/queue.c **** 						}
1844:FreeRTOS/Source/queue.c **** 					}
1845:FreeRTOS/Source/queue.c **** 					else
1846:FreeRTOS/Source/queue.c **** 					{
1847:FreeRTOS/Source/queue.c **** 						break;
1848:FreeRTOS/Source/queue.c **** 					}
1849:FreeRTOS/Source/queue.c **** 				}
1850:FreeRTOS/Source/queue.c **** 			}
1851:FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1852:FreeRTOS/Source/queue.c **** 			{
1853:FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
1854:FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1855:FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 289              		.loc 1 1855 0
 290 00ac 636A     		ldr	r3, [r4, #36]	@ pxQueue_9(D)->xTasksWaitingToReceive.uxNumberOfItems, pxQueue_9(D)->xTasksWait
 291 00ae 43B1     		cbz	r3, .L16	@ pxQueue_9(D)->xTasksWaitingToReceive.uxNumberOfItems,
1856:FreeRTOS/Source/queue.c **** 				{
1857:FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 292              		.loc 1 1857 0
 293 00b0 04F12400 		add	r0, r4, #36	@, pxQueue,
 294 00b4 FFF7FEFF 		bl	xTaskRemoveFromEventList	@
 295              	.LVL25:
 296 00b8 08B1     		cbz	r0, .L17	@,
1858:FreeRTOS/Source/queue.c **** 					{
1859:FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that
1860:FreeRTOS/Source/queue.c **** 						a context switch is required. */
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 39


1861:FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
 297              		.loc 1 1861 0
 298 00ba FFF7FEFF 		bl	vTaskMissedYield	@
 299              	.LVL26:
 300              	.L17:
 301 00be 013D     		subs	r5, r5, #1	@ tmp133, cTxLock,
 302              	.LVL27:
 303 00c0 F0E7     		b	.L35	@
 304              	.LVL28:
 305              	.L16:
1862:FreeRTOS/Source/queue.c **** 					}
1863:FreeRTOS/Source/queue.c **** 					else
1864:FreeRTOS/Source/queue.c **** 					{
1865:FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1866:FreeRTOS/Source/queue.c **** 					}
1867:FreeRTOS/Source/queue.c **** 				}
1868:FreeRTOS/Source/queue.c **** 				else
1869:FreeRTOS/Source/queue.c **** 				{
1870:FreeRTOS/Source/queue.c **** 					break;
1871:FreeRTOS/Source/queue.c **** 				}
1872:FreeRTOS/Source/queue.c **** 			}
1873:FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1874:FreeRTOS/Source/queue.c **** 
1875:FreeRTOS/Source/queue.c **** 			--cTxLock;
1876:FreeRTOS/Source/queue.c **** 		}
1877:FreeRTOS/Source/queue.c **** 
1878:FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 306              		.loc 1 1878 0
 307 00c2 FF23     		movs	r3, #255	@ tmp135,
 308 00c4 84F84530 		strb	r3, [r4, #69]	@ tmp135, pxQueue_9(D)->cTxLock
 309              	.LBE23:
1879:FreeRTOS/Source/queue.c **** 	}
1880:FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 310              		.loc 1 1880 0
 311 00c8 FFF7FEFF 		bl	vPortExitCritical	@
 312              	.LVL29:
1881:FreeRTOS/Source/queue.c **** 
1882:FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
1883:FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 313              		.loc 1 1883 0
 314 00cc FFF7FEFF 		bl	vPortEnterCritical	@
 315              	.LVL30:
 316              	.LBB24:
1884:FreeRTOS/Source/queue.c **** 	{
1885:FreeRTOS/Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
 317              		.loc 1 1885 0
 318 00d0 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2	@ pxQueue_9(D)->cRxLock, pxQueue_9(D)->cRxLock
 319              	.LVL31:
 320              	.L36:
 321 00d4 EDB2     		uxtb	r5, r5	@ cRxLock, tmp143
 322              	.LVL32:
1886:FreeRTOS/Source/queue.c **** 
1887:FreeRTOS/Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
 323              		.loc 1 1887 0
 324 00d6 6BB2     		sxtb	r3, r5	@ cRxLock, cRxLock
 325 00d8 002B     		cmp	r3, #0	@ cRxLock,
 326 00da 0ADD     		ble	.L20	@,
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 40


1888:FreeRTOS/Source/queue.c **** 		{
1889:FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 327              		.loc 1 1889 0
 328 00dc 2369     		ldr	r3, [r4, #16]	@ pxQueue_9(D)->xTasksWaitingToSend.uxNumberOfItems, pxQueue_9(D)->xTasksWaiting
 329 00de 43B1     		cbz	r3, .L20	@ pxQueue_9(D)->xTasksWaitingToSend.uxNumberOfItems,
1890:FreeRTOS/Source/queue.c **** 			{
1891:FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 330              		.loc 1 1891 0
 331 00e0 04F11000 		add	r0, r4, #16	@, pxQueue,
 332 00e4 FFF7FEFF 		bl	xTaskRemoveFromEventList	@
 333              	.LVL33:
 334 00e8 08B1     		cbz	r0, .L21	@,
1892:FreeRTOS/Source/queue.c **** 				{
1893:FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
 335              		.loc 1 1893 0
 336 00ea FFF7FEFF 		bl	vTaskMissedYield	@
 337              	.LVL34:
 338              	.L21:
 339 00ee 013D     		subs	r5, r5, #1	@ tmp143, cRxLock,
 340              	.LVL35:
 341 00f0 F0E7     		b	.L36	@
 342              	.LVL36:
 343              	.L20:
1894:FreeRTOS/Source/queue.c **** 				}
1895:FreeRTOS/Source/queue.c **** 				else
1896:FreeRTOS/Source/queue.c **** 				{
1897:FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1898:FreeRTOS/Source/queue.c **** 				}
1899:FreeRTOS/Source/queue.c **** 
1900:FreeRTOS/Source/queue.c **** 				--cRxLock;
1901:FreeRTOS/Source/queue.c **** 			}
1902:FreeRTOS/Source/queue.c **** 			else
1903:FreeRTOS/Source/queue.c **** 			{
1904:FreeRTOS/Source/queue.c **** 				break;
1905:FreeRTOS/Source/queue.c **** 			}
1906:FreeRTOS/Source/queue.c **** 		}
1907:FreeRTOS/Source/queue.c **** 
1908:FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 344              		.loc 1 1908 0
 345 00f2 FF23     		movs	r3, #255	@ tmp145,
 346 00f4 84F84430 		strb	r3, [r4, #68]	@ tmp145, pxQueue_9(D)->cRxLock
 347              	.LBE24:
1909:FreeRTOS/Source/queue.c **** 	}
1910:FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1911:FreeRTOS/Source/queue.c **** }
 348              		.loc 1 1911 0
 349 00f8 BDE83840 		pop	{r3, r4, r5, lr}	@
 350              	.LCFI5:
 351              		.cfi_restore 14
 352              		.cfi_restore 5
 353              		.cfi_restore 4
 354              		.cfi_restore 3
 355              		.cfi_def_cfa_offset 0
 356              	.LVL37:
1910:FreeRTOS/Source/queue.c **** }
 357              		.loc 1 1910 0
 358 00fc FFF7FEBF 		b	vPortExitCritical	@
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 41


 359              	.LVL38:
 360              		.cfi_endproc
 361              	.LFE25:
 362              		.size	prvUnlockQueue, .-prvUnlockQueue
 363              		.align	1
 364              		.global	xQueueGenericReset
 365              		.thumb
 366              		.thumb_func
 367              		.type	xQueueGenericReset, %function
 368              	xQueueGenericReset:
 369              	.LFB5:
 280:FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 370              		.loc 1 280 0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374              	.LVL39:
 375 0100 38B5     		push	{r3, r4, r5, lr}	@
 376              	.LCFI6:
 377              		.cfi_def_cfa_offset 16
 378              		.cfi_offset 3, -16
 379              		.cfi_offset 4, -12
 380              		.cfi_offset 5, -8
 381              		.cfi_offset 14, -4
 280:FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 382              		.loc 1 280 0
 383 0102 0446     		mov	r4, r0	@ xQueue, xQueue
 384              	.LVL40:
 385 0104 0D46     		mov	r5, r1	@ xNewQueue, xNewQueue
 285:FreeRTOS/Source/queue.c **** 	{
 386              		.loc 1 285 0
 387 0106 FFF7FEFF 		bl	vPortEnterCritical	@
 388              	.LVL41:
 287:FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 389              		.loc 1 287 0
 390 010a 206C     		ldr	r0, [r4, #64]	@ D.5964, MEM[(struct Queue_t *)xQueue_2(D)].uxItemSize
 391 010c E36B     		ldr	r3, [r4, #60]	@ MEM[(struct Queue_t *)xQueue_2(D)].uxLength, MEM[(struct Queue_t *)xQueue_2(D)
 392 010e 2268     		ldr	r2, [r4]	@ D.5963, MEM[(struct Queue_t *)xQueue_2(D)].pcHead
 393 0110 4343     		muls	r3, r0, r3	@ D.5964, D.5964
 394 0112 D118     		adds	r1, r2, r3	@ D.5963, D.5963, D.5964
 290:FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 395              		.loc 1 290 0
 396 0114 1B1A     		subs	r3, r3, r0	@ D.5964, D.5964, D.5964
 397 0116 1344     		add	r3, r3, r2	@ D.5963, D.5963
 287:FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 398              		.loc 1 287 0
 399 0118 6160     		str	r1, [r4, #4]	@ D.5963, MEM[(struct Queue_t *)xQueue_2(D)].pcTail
 290:FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 400              		.loc 1 290 0
 401 011a E360     		str	r3, [r4, #12]	@ D.5963, MEM[(struct Queue_t *)xQueue_2(D)].u.pcReadFrom
 288:FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 402              		.loc 1 288 0
 403 011c 0021     		movs	r1, #0	@ tmp128,
 291:FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 404              		.loc 1 291 0
 405 011e FF23     		movs	r3, #255	@ tmp132,
 288:FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 42


 406              		.loc 1 288 0
 407 0120 A163     		str	r1, [r4, #56]	@ tmp128, MEM[(struct Queue_t *)xQueue_2(D)].uxMessagesWaiting
 289:FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 408              		.loc 1 289 0
 409 0122 A260     		str	r2, [r4, #8]	@ D.5963, MEM[(struct Queue_t *)xQueue_2(D)].pcWriteTo
 291:FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 410              		.loc 1 291 0
 411 0124 84F84430 		strb	r3, [r4, #68]	@ tmp132, MEM[(struct Queue_t *)xQueue_2(D)].cRxLock
 292:FreeRTOS/Source/queue.c **** 
 412              		.loc 1 292 0
 413 0128 84F84530 		strb	r3, [r4, #69]	@ tmp132, MEM[(struct Queue_t *)xQueue_2(D)].cTxLock
 294:FreeRTOS/Source/queue.c **** 		{
 414              		.loc 1 294 0
 415 012c 7DB9     		cbnz	r5, .L38	@ xNewQueue,
 301:FreeRTOS/Source/queue.c **** 			{
 416              		.loc 1 301 0
 417 012e 2369     		ldr	r3, [r4, #16]	@ MEM[(struct Queue_t *)xQueue_2(D)].xTasksWaitingToSend.uxNumberOfItems, MEM[(s
 418 0130 ABB1     		cbz	r3, .L40	@ MEM[(struct Queue_t *)xQueue_2(D)].xTasksWaitingToSend.uxNumberOfItems,
 303:FreeRTOS/Source/queue.c **** 				{
 419              		.loc 1 303 0
 420 0132 04F11000 		add	r0, r4, #16	@, xQueue,
 421 0136 FFF7FEFF 		bl	xTaskRemoveFromEventList	@
 422              	.LVL42:
 423 013a 80B1     		cbz	r0, .L40	@,
 305:FreeRTOS/Source/queue.c **** 				}
 424              		.loc 1 305 0
 425 013c 0A4B     		ldr	r3, .L45	@ tmp138,
 426 013e 4FF08052 		mov	r2, #268435456	@ tmp139,
 427 0142 1A60     		str	r2, [r3]	@ tmp139, MEM[(volatile uint32_t *)3758157060B]
 428              	@ 305 "FreeRTOS/Source/queue.c" 1
 429 0144 BFF34F8F 		dsb
 430              	@ 0 "" 2
 431              	@ 305 "FreeRTOS/Source/queue.c" 1
 432 0148 BFF36F8F 		isb
 433              	@ 0 "" 2
 434              		.thumb
 435 014c 07E0     		b	.L40	@
 436              	.L38:
 320:FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 437              		.loc 1 320 0
 438 014e 04F11000 		add	r0, r4, #16	@, xQueue,
 439 0152 FFF7FEFF 		bl	vListInitialise	@
 440              	.LVL43:
 321:FreeRTOS/Source/queue.c **** 		}
 441              		.loc 1 321 0
 442 0156 04F12400 		add	r0, r4, #36	@, xQueue,
 443 015a FFF7FEFF 		bl	vListInitialise	@
 444              	.LVL44:
 445              	.L40:
 324:FreeRTOS/Source/queue.c **** 
 446              		.loc 1 324 0
 447 015e FFF7FEFF 		bl	vPortExitCritical	@
 448              	.LVL45:
 329:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 449              		.loc 1 329 0
 450 0162 0120     		movs	r0, #1	@,
 451 0164 38BD     		pop	{r3, r4, r5, pc}	@
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 43


 452              	.LVL46:
 453              	.L46:
 454 0166 00BF     		.align	2
 455              	.L45:
 456 0168 04ED00E0 		.word	-536810236
 457              		.cfi_endproc
 458              	.LFE5:
 459              		.size	xQueueGenericReset, .-xQueueGenericReset
 460              		.align	1
 461              		.global	xQueueGenericCreate
 462              		.thumb
 463              		.thumb_func
 464              		.type	xQueueGenericCreate, %function
 465              	xQueueGenericCreate:
 466              	.LFB6:
 387:FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 467              		.loc 1 387 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471              	.LVL47:
 472 016c 70B5     		push	{r4, r5, r6, lr}	@
 473              	.LCFI7:
 474              		.cfi_def_cfa_offset 16
 475              		.cfi_offset 4, -16
 476              		.cfi_offset 5, -12
 477              		.cfi_offset 6, -8
 478              		.cfi_offset 14, -4
 387:FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 479              		.loc 1 387 0
 480 016e 0646     		mov	r6, r0	@ uxQueueLength, uxQueueLength
 394:FreeRTOS/Source/queue.c **** 		{
 481              		.loc 1 394 0
 482 0170 0D46     		mov	r5, r1	@ uxItemSize, uxItemSize
 483 0172 09B1     		cbz	r1, .L52	@ uxItemSize,
 403:FreeRTOS/Source/queue.c **** 		}
 484              		.loc 1 403 0
 485 0174 4843     		muls	r0, r1, r0	@ xQueueSizeInBytes, uxItemSize
 486              	.LVL48:
 487 0176 00E0     		b	.L48	@
 488              	.LVL49:
 489              	.L52:
 397:FreeRTOS/Source/queue.c **** 		}
 490              		.loc 1 397 0
 491 0178 0846     		mov	r0, r1	@ xQueueSizeInBytes, uxItemSize
 492              	.LVL50:
 493              	.L48:
 406:FreeRTOS/Source/queue.c **** 
 494              		.loc 1 406 0
 495 017a 4830     		adds	r0, r0, #72	@, xQueueSizeInBytes,
 496              	.LVL51:
 497 017c FFF7FEFF 		bl	pvPortMalloc	@
 498              	.LVL52:
 408:FreeRTOS/Source/queue.c **** 		{
 499              		.loc 1 408 0
 500 0180 0446     		mov	r4, r0	@ pxNewQueue,
 501 0182 58B1     		cbz	r0, .L49	@ pxNewQueue,
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 44


 502              	.LVL53:
 503              	.LBB27:
 504              	.LBB28:
 438:FreeRTOS/Source/queue.c **** 	{
 505              		.loc 1 438 0
 506 0184 0DB9     		cbnz	r5, .L50	@ uxItemSize,
 507              	.LVL54:
 444:FreeRTOS/Source/queue.c **** 	}
 508              		.loc 1 444 0
 509 0186 2060     		str	r0, [r4]	@ pxNewQueue, pxNewQueue_9->pcHead
 510 0188 02E0     		b	.L51	@
 511              	.LVL55:
 512              	.L50:
 513              	.LBE28:
 514              	.LBE27:
 412:FreeRTOS/Source/queue.c **** 
 515              		.loc 1 412 0
 516 018a 00F14803 		add	r3, r0, #72	@ pucQueueStorage, pxNewQueue,
 517              	.LVL56:
 518              	.LBB30:
 519              	.LBB29:
 449:FreeRTOS/Source/queue.c **** 	}
 520              		.loc 1 449 0
 521 018e 0360     		str	r3, [r0]	@ pucQueueStorage, pxNewQueue_9->pcHead
 522              	.LVL57:
 523              	.L51:
 454:FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 524              		.loc 1 454 0
 525 0190 E663     		str	r6, [r4, #60]	@ uxQueueLength, pxNewQueue_9->uxLength
 455:FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 526              		.loc 1 455 0
 527 0192 2564     		str	r5, [r4, #64]	@ uxItemSize, pxNewQueue_9->uxItemSize
 456:FreeRTOS/Source/queue.c **** 
 528              		.loc 1 456 0
 529 0194 2046     		mov	r0, r4	@, pxNewQueue
 530              	.LVL58:
 531 0196 0121     		movs	r1, #1	@,
 532 0198 FFF7FEFF 		bl	xQueueGenericReset	@
 533              	.LVL59:
 534              	.L49:
 535              	.LBE29:
 536              	.LBE30:
 427:FreeRTOS/Source/queue.c **** 
 537              		.loc 1 427 0
 538 019c 2046     		mov	r0, r4	@, pxNewQueue
 539 019e 70BD     		pop	{r4, r5, r6, pc}	@
 540              		.cfi_endproc
 541              	.LFE6:
 542              		.size	xQueueGenericCreate, .-xQueueGenericCreate
 543              		.align	1
 544              		.global	xQueueCreateCountingSemaphore
 545              		.thumb
 546              		.thumb_func
 547              		.type	xQueueCreateCountingSemaphore, %function
 548              	xQueueCreateCountingSemaphore:
 549              	.LFB12:
 698:FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 45


 550              		.loc 1 698 0
 551              		.cfi_startproc
 552              		@ args = 0, pretend = 0, frame = 0
 553              		@ frame_needed = 0, uses_anonymous_args = 0
 554              	.LVL60:
 555 01a0 10B5     		push	{r4, lr}	@
 556              	.LCFI8:
 557              		.cfi_def_cfa_offset 8
 558              		.cfi_offset 4, -8
 559              		.cfi_offset 14, -4
 704:FreeRTOS/Source/queue.c **** 
 560              		.loc 1 704 0
 561 01a2 0222     		movs	r2, #2	@,
 698:FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 562              		.loc 1 698 0
 563 01a4 0C46     		mov	r4, r1	@ uxInitialCount, uxInitialCount
 704:FreeRTOS/Source/queue.c **** 
 564              		.loc 1 704 0
 565 01a6 0021     		movs	r1, #0	@,
 566              	.LVL61:
 567 01a8 FFF7FEFF 		bl	xQueueGenericCreate	@
 568              	.LVL62:
 706:FreeRTOS/Source/queue.c **** 		{
 569              		.loc 1 706 0
 570 01ac 00B1     		cbz	r0, .L57	@ xHandle,
 708:FreeRTOS/Source/queue.c **** 
 571              		.loc 1 708 0
 572 01ae 8463     		str	r4, [r0, #56]	@ uxInitialCount, MEM[(struct Queue_t *)xHandle_5].uxMessagesWaiting
 573              	.L57:
 718:FreeRTOS/Source/queue.c **** 
 574              		.loc 1 718 0
 575 01b0 10BD     		pop	{r4, pc}	@
 576              		.cfi_endproc
 577              	.LFE12:
 578              		.size	xQueueCreateCountingSemaphore, .-xQueueCreateCountingSemaphore
 579              		.align	1
 580              		.global	xQueueGenericSend
 581              		.thumb
 582              		.thumb_func
 583              		.type	xQueueGenericSend, %function
 584              	xQueueGenericSend:
 585              	.LFB13:
 724:FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 586              		.loc 1 724 0
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 16
 589              		@ frame_needed = 0, uses_anonymous_args = 0
 590              	.LVL63:
 591 01b2 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}	@
 592              	.LCFI9:
 593              		.cfi_def_cfa_offset 40
 594              		.cfi_offset 4, -24
 595              		.cfi_offset 5, -20
 596              		.cfi_offset 6, -16
 597              		.cfi_offset 7, -12
 598              		.cfi_offset 8, -8
 599              		.cfi_offset 14, -4
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 46


 724:FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 600              		.loc 1 724 0
 601 01b6 0446     		mov	r4, r0	@ xQueue, xQueue
 602              	.LVL64:
 603 01b8 8846     		mov	r8, r1	@ pvItemToQueue, pvItemToQueue
 604 01ba 1E46     		mov	r6, r3	@ xCopyPosition, xCopyPosition
 605 01bc 0192     		str	r2, [sp, #4]	@ xTicksToWait, xTicksToWait
 725:FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 606              		.loc 1 725 0
 607 01be 0027     		movs	r7, #0	@ xEntryTimeSet,
 608              	.LVL65:
 609              	.L62:
 744:FreeRTOS/Source/queue.c **** 		{
 610              		.loc 1 744 0
 611 01c0 FFF7FEFF 		bl	vPortEnterCritical	@
 612              	.LVL66:
 750:FreeRTOS/Source/queue.c **** 			{
 613              		.loc 1 750 0
 614 01c4 A26B     		ldr	r2, [r4, #56]	@ D.5983, MEM[(struct Queue_t *)xQueue_10(D)].uxMessagesWaiting
 615 01c6 E36B     		ldr	r3, [r4, #60]	@ MEM[(struct Queue_t *)xQueue_10(D)].uxLength, MEM[(struct Queue_t *)xQueue_10(
 616 01c8 9A42     		cmp	r2, r3	@ D.5983, MEM[(struct Queue_t *)xQueue_10(D)].uxLength
 617 01ca 01D3     		bcc	.L63	@,
 750:FreeRTOS/Source/queue.c **** 			{
 618              		.loc 1 750 0 is_stmt 0 discriminator 1
 619 01cc 022E     		cmp	r6, #2	@ xCopyPosition,
 620 01ce 17D1     		bne	.L64	@,
 621              	.L63:
 753:FreeRTOS/Source/queue.c **** 
 622              		.loc 1 753 0 is_stmt 1
 623 01d0 2046     		mov	r0, r4	@, xQueue
 624 01d2 4146     		mov	r1, r8	@, pvItemToQueue
 625 01d4 3246     		mov	r2, r6	@, xCopyPosition
 626 01d6 FFF713FF 		bl	prvCopyDataToQueue	@
 627              	.LVL67:
 808:FreeRTOS/Source/queue.c **** 					{
 628              		.loc 1 808 0
 629 01da 636A     		ldr	r3, [r4, #36]	@ MEM[(struct Queue_t *)xQueue_10(D)].xTasksWaitingToReceive.uxNumberOfItems, ME
 630 01dc 1BB1     		cbz	r3, .L65	@ MEM[(struct Queue_t *)xQueue_10(D)].xTasksWaitingToReceive.uxNumberOfItems,
 810:FreeRTOS/Source/queue.c **** 						{
 631              		.loc 1 810 0
 632 01de 04F12400 		add	r0, r4, #36	@, xQueue,
 633              	.LVL68:
 634 01e2 FFF7FEFF 		bl	xTaskRemoveFromEventList	@
 635              	.LVL69:
 636              	.L65:
 823:FreeRTOS/Source/queue.c **** 					{
 637              		.loc 1 823 0
 638 01e6 38B1     		cbz	r0, .L67	@ xYieldRequired,
 829:FreeRTOS/Source/queue.c **** 					}
 639              		.loc 1 829 0
 640 01e8 2E4B     		ldr	r3, .L84	@ tmp136,
 641 01ea 4FF08052 		mov	r2, #268435456	@ tmp137,
 642 01ee 1A60     		str	r2, [r3]	@ tmp137,
 643              	@ 829 "FreeRTOS/Source/queue.c" 1
 644 01f0 BFF34F8F 		dsb
 645              	@ 0 "" 2
 646              	@ 829 "FreeRTOS/Source/queue.c" 1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 47


 647 01f4 BFF36F8F 		isb
 648              	@ 0 "" 2
 649              		.thumb
 650              	.L67:
 838:FreeRTOS/Source/queue.c **** 				return pdPASS;
 651              		.loc 1 838 0
 652 01f8 FFF7FEFF 		bl	vPortExitCritical	@
 653              	.LVL70:
 839:FreeRTOS/Source/queue.c **** 			}
 654              		.loc 1 839 0
 655 01fc 0120     		movs	r0, #1	@ D.5982,
 656 01fe 4DE0     		b	.L69	@
 657              	.L64:
 843:FreeRTOS/Source/queue.c **** 				{
 658              		.loc 1 843 0
 659 0200 019D     		ldr	r5, [sp, #4]	@ xTicksToWait, xTicksToWait
 660 0202 15B9     		cbnz	r5, .L70	@ xTicksToWait,
 847:FreeRTOS/Source/queue.c **** 
 661              		.loc 1 847 0
 662 0204 FFF7FEFF 		bl	vPortExitCritical	@
 663              	.LVL71:
 664 0208 47E0     		b	.L81	@
 665              	.L70:
 854:FreeRTOS/Source/queue.c **** 				{
 666              		.loc 1 854 0
 667 020a 17B9     		cbnz	r7, .L71	@ xEntryTimeSet,
 858:FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 668              		.loc 1 858 0
 669 020c 02A8     		add	r0, sp, #8	@ tmp159,,
 670 020e FFF7FEFF 		bl	vTaskSetTimeOutState	@
 671              	.LVL72:
 672              	.L71:
 868:FreeRTOS/Source/queue.c **** 
 673              		.loc 1 868 0
 674 0212 FFF7FEFF 		bl	vPortExitCritical	@
 675              	.LVL73:
 873:FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 676              		.loc 1 873 0
 677 0216 FFF7FEFF 		bl	vTaskSuspendAll	@
 678              	.LVL74:
 874:FreeRTOS/Source/queue.c **** 
 679              		.loc 1 874 0
 680 021a FFF7FEFF 		bl	vPortEnterCritical	@
 681              	.LVL75:
 682 021e 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_10(D)].cRxLock, MEM[(struct Q
 683 0222 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_10(D)].cRxLock,
 684 0224 04BF     		itt	eq
 685 0226 0023     		moveq	r3, #0	@ tmp144,
 686 0228 84F84430 		strbeq	r3, [r4, #68]	@ tmp144, MEM[(struct Queue_t *)xQueue_10(D)].cRxLock
 687 022c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_10(D)].cTxLock, MEM[(struct Q
 688 0230 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_10(D)].cTxLock,
 689 0232 04BF     		itt	eq
 690 0234 0023     		moveq	r3, #0	@ tmp150,
 691 0236 84F84530 		strbeq	r3, [r4, #69]	@ tmp150, MEM[(struct Queue_t *)xQueue_10(D)].cTxLock
 692 023a FFF7FEFF 		bl	vPortExitCritical	@
 693              	.LVL76:
 877:FreeRTOS/Source/queue.c **** 		{
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 48


 694              		.loc 1 877 0
 695 023e 02A8     		add	r0, sp, #8	@ tmp160,,
 696 0240 01A9     		add	r1, sp, #4	@,,
 697              	.LVL77:
 698 0242 FFF7FEFF 		bl	xTaskCheckForTimeOut	@
 699              	.LVL78:
 700 0246 18BB     		cbnz	r0, .L74	@,
 701              	.LVL79:
 702              	.LBB33:
 703              	.LBB34:
1912:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1913:FreeRTOS/Source/queue.c **** 
1914:FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1915:FreeRTOS/Source/queue.c **** {
1916:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1917:FreeRTOS/Source/queue.c **** 
1918:FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1919:FreeRTOS/Source/queue.c **** 	{
1920:FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1921:FreeRTOS/Source/queue.c **** 		{
1922:FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
1923:FreeRTOS/Source/queue.c **** 		}
1924:FreeRTOS/Source/queue.c **** 		else
1925:FreeRTOS/Source/queue.c **** 		{
1926:FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
1927:FreeRTOS/Source/queue.c **** 		}
1928:FreeRTOS/Source/queue.c **** 	}
1929:FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1930:FreeRTOS/Source/queue.c **** 
1931:FreeRTOS/Source/queue.c **** 	return xReturn;
1932:FreeRTOS/Source/queue.c **** }
1933:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1934:FreeRTOS/Source/queue.c **** 
1935:FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1936:FreeRTOS/Source/queue.c **** {
1937:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1938:FreeRTOS/Source/queue.c **** 
1939:FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1940:FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
1941:FreeRTOS/Source/queue.c **** 	{
1942:FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
1943:FreeRTOS/Source/queue.c **** 	}
1944:FreeRTOS/Source/queue.c **** 	else
1945:FreeRTOS/Source/queue.c **** 	{
1946:FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
1947:FreeRTOS/Source/queue.c **** 	}
1948:FreeRTOS/Source/queue.c **** 
1949:FreeRTOS/Source/queue.c **** 	return xReturn;
1950:FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1951:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1952:FreeRTOS/Source/queue.c **** 
1953:FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1954:FreeRTOS/Source/queue.c **** {
1955:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1956:FreeRTOS/Source/queue.c **** 
1957:FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 704              		.loc 1 1957 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 49


 705 0248 FFF7FEFF 		bl	vPortEnterCritical	@
 706              	.LVL80:
1958:FreeRTOS/Source/queue.c **** 	{
1959:FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 707              		.loc 1 1959 0
 708 024c A76B     		ldr	r7, [r4, #56]	@ D.5983, MEM[(const struct Queue_t *)xQueue_10(D)].uxMessagesWaiting
 709 024e E56B     		ldr	r5, [r4, #60]	@ D.5983, MEM[(const struct Queue_t *)xQueue_10(D)].uxLength
 710              	.LVL81:
1960:FreeRTOS/Source/queue.c **** 		{
1961:FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
1962:FreeRTOS/Source/queue.c **** 		}
1963:FreeRTOS/Source/queue.c **** 		else
1964:FreeRTOS/Source/queue.c **** 		{
1965:FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
1966:FreeRTOS/Source/queue.c **** 		}
1967:FreeRTOS/Source/queue.c **** 	}
1968:FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 711              		.loc 1 1968 0
 712 0250 FFF7FEFF 		bl	vPortExitCritical	@
 713              	.LVL82:
 714              	.LBE34:
 715              	.LBE33:
 879:FreeRTOS/Source/queue.c **** 			{
 716              		.loc 1 879 0
 717 0254 AF42     		cmp	r7, r5	@ D.5983, D.5983
 718 0256 15D1     		bne	.L75	@,
 882:FreeRTOS/Source/queue.c **** 
 719              		.loc 1 882 0
 720 0258 04F11000 		add	r0, r4, #16	@, xQueue,
 721 025c 0199     		ldr	r1, [sp, #4]	@, xTicksToWait
 722 025e FFF7FEFF 		bl	vTaskPlaceOnEventList	@
 723              	.LVL83:
 889:FreeRTOS/Source/queue.c **** 
 724              		.loc 1 889 0
 725 0262 2046     		mov	r0, r4	@, xQueue
 726 0264 FFF718FF 		bl	prvUnlockQueue	@
 727              	.LVL84:
 896:FreeRTOS/Source/queue.c **** 				{
 728              		.loc 1 896 0
 729 0268 FFF7FEFF 		bl	xTaskResumeAll	@
 730              	.LVL85:
 731 026c 08B1     		cbz	r0, .L83	@,
 732              	.LVL86:
 733              	.L76:
 734 026e 0127     		movs	r7, #1	@ xEntryTimeSet,
 735 0270 A6E7     		b	.L62	@
 736              	.LVL87:
 737              	.L83:
 898:FreeRTOS/Source/queue.c **** 				}
 738              		.loc 1 898 0
 739 0272 0C4B     		ldr	r3, .L84	@ tmp155,
 740 0274 4FF08052 		mov	r2, #268435456	@ tmp156,
 741 0278 1A60     		str	r2, [r3]	@ tmp156, MEM[(volatile uint32_t *)3758157060B]
 742              	@ 898 "FreeRTOS/Source/queue.c" 1
 743 027a BFF34F8F 		dsb
 744              	@ 0 "" 2
 745              	@ 898 "FreeRTOS/Source/queue.c" 1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 50


 746 027e BFF36F8F 		isb
 747              	@ 0 "" 2
 748              		.thumb
 749 0282 F4E7     		b	.L76	@
 750              	.L75:
 751              	.LVL88:
 904:FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 752              		.loc 1 904 0
 753 0284 2046     		mov	r0, r4	@, xQueue
 754 0286 FFF707FF 		bl	prvUnlockQueue	@
 755              	.LVL89:
 905:FreeRTOS/Source/queue.c **** 			}
 756              		.loc 1 905 0
 757 028a FFF7FEFF 		bl	xTaskResumeAll	@
 758              	.LVL90:
 759 028e EEE7     		b	.L76	@
 760              	.LVL91:
 761              	.L74:
 911:FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 762              		.loc 1 911 0
 763 0290 2046     		mov	r0, r4	@, xQueue
 764 0292 FFF701FF 		bl	prvUnlockQueue	@
 765              	.LVL92:
 912:FreeRTOS/Source/queue.c **** 
 766              		.loc 1 912 0
 767 0296 FFF7FEFF 		bl	xTaskResumeAll	@
 768              	.LVL93:
 769              	.L81:
 915:FreeRTOS/Source/queue.c **** 		}
 770              		.loc 1 915 0
 771 029a 0020     		movs	r0, #0	@ D.5982,
 772              	.L69:
 918:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 773              		.loc 1 918 0
 774 029c 04B0     		add	sp, sp, #16	@,,
 775              	.LCFI10:
 776              		.cfi_def_cfa_offset 24
 777              		@ sp needed	@
 778 029e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 779              	.LVL94:
 780              	.L85:
 781 02a2 00BF     		.align	2
 782              	.L84:
 783 02a4 04ED00E0 		.word	-536810236
 784              		.cfi_endproc
 785              	.LFE13:
 786              		.size	xQueueGenericSend, .-xQueueGenericSend
 787              		.align	1
 788              		.global	xQueueCreateMutex
 789              		.thumb
 790              		.thumb_func
 791              		.type	xQueueCreateMutex, %function
 792              	xQueueCreateMutex:
 793              	.LFB9:
 507:FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 794              		.loc 1 507 0
 795              		.cfi_startproc
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 51


 796              		@ args = 0, pretend = 0, frame = 0
 797              		@ frame_needed = 0, uses_anonymous_args = 0
 798              	.LVL95:
 799 02a8 10B5     		push	{r4, lr}	@
 800              	.LCFI11:
 801              		.cfi_def_cfa_offset 8
 802              		.cfi_offset 4, -8
 803              		.cfi_offset 14, -4
 507:FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 804              		.loc 1 507 0
 805 02aa 0246     		mov	r2, r0	@ ucQueueType, ucQueueType
 511:FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 806              		.loc 1 511 0
 807 02ac 0021     		movs	r1, #0	@,
 808 02ae 0120     		movs	r0, #1	@,
 809              	.LVL96:
 810 02b0 FFF7FEFF 		bl	xQueueGenericCreate	@
 811              	.LVL97:
 812              	.LBB37:
 813              	.LBB38:
 478:FreeRTOS/Source/queue.c **** 		{
 814              		.loc 1 478 0
 815 02b4 0446     		mov	r4, r0	@ pxNewQueue,
 816 02b6 38B1     		cbz	r0, .L87	@,
 484:FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 817              		.loc 1 484 0
 818 02b8 0021     		movs	r1, #0	@ tmp113,
 819 02ba 4160     		str	r1, [r0, #4]	@ tmp113, pxNewQueue_4->pcTail
 485:FreeRTOS/Source/queue.c **** 
 820              		.loc 1 485 0
 821 02bc 0160     		str	r1, [r0]	@ tmp113, pxNewQueue_4->pcHead
 488:FreeRTOS/Source/queue.c **** 
 822              		.loc 1 488 0
 823 02be C160     		str	r1, [r0, #12]	@ tmp113, pxNewQueue_4->u.uxRecursiveCallCount
 493:FreeRTOS/Source/queue.c **** 		}
 824              		.loc 1 493 0
 825 02c0 0A46     		mov	r2, r1	@,
 826 02c2 0B46     		mov	r3, r1	@,
 827 02c4 FFF7FEFF 		bl	xQueueGenericSend	@
 828              	.LVL98:
 829              	.L87:
 830              	.LBE38:
 831              	.LBE37:
 515:FreeRTOS/Source/queue.c **** 
 832              		.loc 1 515 0
 833 02c8 2046     		mov	r0, r4	@, pxNewQueue
 834 02ca 10BD     		pop	{r4, pc}	@
 835              		.cfi_endproc
 836              	.LFE9:
 837              		.size	xQueueCreateMutex, .-xQueueCreateMutex
 838              		.align	1
 839              		.global	xQueueGiveMutexRecursive
 840              		.thumb
 841              		.thumb_func
 842              		.type	xQueueGiveMutexRecursive, %function
 843              	xQueueGiveMutexRecursive:
 844              	.LFB10:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 52


 573:FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 845              		.loc 1 573 0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 0, uses_anonymous_args = 0
 849              	.LVL99:
 850 02cc 38B5     		push	{r3, r4, r5, lr}	@
 851              	.LCFI12:
 852              		.cfi_def_cfa_offset 16
 853              		.cfi_offset 3, -16
 854              		.cfi_offset 4, -12
 855              		.cfi_offset 5, -8
 856              		.cfi_offset 14, -4
 585:FreeRTOS/Source/queue.c **** 		{
 857              		.loc 1 585 0
 858 02ce 4568     		ldr	r5, [r0, #4]	@ D.5992, MEM[(struct Queue_t *)xMutex_3(D)].pcTail
 573:FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 859              		.loc 1 573 0
 860 02d0 0446     		mov	r4, r0	@ xMutex, xMutex
 585:FreeRTOS/Source/queue.c **** 		{
 861              		.loc 1 585 0
 862 02d2 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle	@
 863              	.LVL100:
 864 02d6 8542     		cmp	r5, r0	@ D.5992,
 865 02d8 09D1     		bne	.L93	@,
 594:FreeRTOS/Source/queue.c **** 
 866              		.loc 1 594 0
 867 02da E168     		ldr	r1, [r4, #12]	@ MEM[(struct Queue_t *)xMutex_3(D)].u.uxRecursiveCallCount, MEM[(struct Queue_t
 868 02dc 0139     		subs	r1, r1, #1	@ D.5994, MEM[(struct Queue_t *)xMutex_3(D)].u.uxRecursiveCallCount,
 869 02de E160     		str	r1, [r4, #12]	@ D.5994, MEM[(struct Queue_t *)xMutex_3(D)].u.uxRecursiveCallCount
 597:FreeRTOS/Source/queue.c **** 			{
 870              		.loc 1 597 0
 871 02e0 39B9     		cbnz	r1, .L94	@ D.5994,
 601:FreeRTOS/Source/queue.c **** 			}
 872              		.loc 1 601 0
 873 02e2 2046     		mov	r0, r4	@, xMutex
 874 02e4 0A46     		mov	r2, r1	@,
 875 02e6 0B46     		mov	r3, r1	@,
 876 02e8 FFF7FEFF 		bl	xQueueGenericSend	@
 877              	.LVL101:
 878 02ec 01E0     		b	.L94	@
 879              	.L93:
 614:FreeRTOS/Source/queue.c **** 
 880              		.loc 1 614 0
 881 02ee 0020     		movs	r0, #0	@ xReturn,
 882 02f0 38BD     		pop	{r3, r4, r5, pc}	@
 883              	.LVL102:
 884              	.L94:
 608:FreeRTOS/Source/queue.c **** 		}
 885              		.loc 1 608 0
 886 02f2 0120     		movs	r0, #1	@ xReturn,
 887              	.LVL103:
 620:FreeRTOS/Source/queue.c **** 
 888              		.loc 1 620 0
 889 02f4 38BD     		pop	{r3, r4, r5, pc}	@
 890              		.cfi_endproc
 891              	.LFE10:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 53


 892              		.size	xQueueGiveMutexRecursive, .-xQueueGiveMutexRecursive
 893              		.align	1
 894              		.global	xQueueGenericSendFromISR
 895              		.thumb
 896              		.thumb_func
 897              		.type	xQueueGenericSendFromISR, %function
 898              	xQueueGenericSendFromISR:
 899              	.LFB14:
 922:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 900              		.loc 1 922 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 0
 903              		@ frame_needed = 0, uses_anonymous_args = 0
 904              	.LVL104:
 905 02f6 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 906              	.LCFI13:
 907              		.cfi_def_cfa_offset 24
 908              		.cfi_offset 3, -24
 909              		.cfi_offset 4, -20
 910              		.cfi_offset 5, -16
 911              		.cfi_offset 6, -12
 912              		.cfi_offset 7, -8
 913              		.cfi_offset 14, -4
 922:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 914              		.loc 1 922 0
 915 02f8 0546     		mov	r5, r0	@ xQueue, xQueue
 916 02fa 1746     		mov	r7, r2	@ pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken
 917              	.LBB39:
 918              	.LBB40:
 919              		.file 2 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h"
   1:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     All rights reserved
   4:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
   5:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
   7:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
   9:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  13:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  14:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  19:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  20:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  25:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  26:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  27:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 54


  28:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  32:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  37:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  38:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  39:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  43:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     participating in the support forum.
  46:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  47:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  52:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  56:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  63:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  66:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  67:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** */
  69:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  70:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  71:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  73:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  74:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  76:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  77:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  79:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  81:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  84:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 55


  85:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  87:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  88:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  89:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  90:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  91:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  92:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  93:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  94:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  96:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
  97:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 101:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #else
 105:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 112:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 114:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 120:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 121:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
 122:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
 123:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
 126:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
 130:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** }
 131:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 132:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 137:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 139:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 140:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 141:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 56


 142:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 148:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 149:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 150:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 153:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 157:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 158:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 162:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 163:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 164:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 165:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 171:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 172:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 174:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 175:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 176:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 178:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 179:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 180:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 181:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 184:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 185:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 193:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 196:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 197:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 198:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 57


 199:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 201:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 202:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 203:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 204:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 206:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 208:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 210:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {
 213:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 215:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 216:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 219:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 221:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 222:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 223:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 224:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 225:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 226:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 227:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 228:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 229:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** }
 230:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 231:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 232:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 233:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {
 235:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 236:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 237:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 238:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 239:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 242:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 243:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 245:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** }
 246:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 247:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 248:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 249:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {
 251:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 253:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 920              		.loc 2 253 0
 921              	@ 253 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 58


 922 02fc EFF31186 			mrs r6, basepri												@ uxSavedInterruptStatus
 923 0300 4FF0BF02 		mov r2, #191													@ ulNewBASEPRI,
 924 0304 82F31188 		msr basepri, r2												@ ulNewBASEPRI
 925 0308 BFF36F8F 		isb														
 926 030c BFF34F8F 		dsb														
 927              	
 928              	@ 0 "" 2
 929              	.LVL105:
 930              		.thumb
 931              	.LBE40:
 932              	.LBE39:
 954:FreeRTOS/Source/queue.c **** 		{
 933              		.loc 1 954 0
 934 0310 806B     		ldr	r0, [r0, #56]	@ D.5997, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
 935              	.LVL106:
 936 0312 EA6B     		ldr	r2, [r5, #60]	@ MEM[(struct Queue_t *)xQueue_3(D)].uxLength, MEM[(struct Queue_t *)xQueue_3(D)
 937 0314 9042     		cmp	r0, r2	@ D.5997, MEM[(struct Queue_t *)xQueue_3(D)].uxLength
 938 0316 01D3     		bcc	.L96	@,
 954:FreeRTOS/Source/queue.c **** 		{
 939              		.loc 1 954 0 is_stmt 0 discriminator 1
 940 0318 022B     		cmp	r3, #2	@ xCopyPosition,
 941 031a 19D1     		bne	.L101	@,
 942              	.L96:
 943              	.LBB41:
 956:FreeRTOS/Source/queue.c **** 
 944              		.loc 1 956 0 is_stmt 1
 945 031c 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_3(D)].cTxLock, MEM[(struct Qu
 965:FreeRTOS/Source/queue.c **** 
 946              		.loc 1 965 0
 947 0320 2846     		mov	r0, r5	@, xQueue
 956:FreeRTOS/Source/queue.c **** 
 948              		.loc 1 956 0
 949 0322 E4B2     		uxtb	r4, r4	@ cTxLock, MEM[(struct Queue_t *)xQueue_3(D)].cTxLock
 950              	.LVL107:
 965:FreeRTOS/Source/queue.c **** 
 951              		.loc 1 965 0
 952 0324 1A46     		mov	r2, r3	@, xCopyPosition
 953 0326 FFF76BFE 		bl	prvCopyDataToQueue	@
 954              	.LVL108:
 969:FreeRTOS/Source/queue.c **** 			{
 955              		.loc 1 969 0
 956 032a FF2C     		cmp	r4, #255	@ cTxLock,
 957 032c 0AD1     		bne	.L98	@,
1024:FreeRTOS/Source/queue.c **** 					{
 958              		.loc 1 1024 0
 959 032e 6B6A     		ldr	r3, [r5, #36]	@ MEM[(struct Queue_t *)xQueue_3(D)].xTasksWaitingToReceive.uxNumberOfItems, MEM
 960 0330 63B1     		cbz	r3, .L108	@ MEM[(struct Queue_t *)xQueue_3(D)].xTasksWaitingToReceive.uxNumberOfItems,
1026:FreeRTOS/Source/queue.c **** 						{
 961              		.loc 1 1026 0
 962 0332 05F12400 		add	r0, r5, #36	@, xQueue,
 963 0336 FFF7FEFF 		bl	xTaskRemoveFromEventList	@
 964              	.LVL109:
 965 033a 38B1     		cbz	r0, .L108	@,
1030:FreeRTOS/Source/queue.c **** 							{
 966              		.loc 1 1030 0
 967 033c 37B1     		cbz	r7, .L108	@ pxHigherPriorityTaskWoken,
1032:FreeRTOS/Source/queue.c **** 							}
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 59


 968              		.loc 1 1032 0
 969 033e 0120     		movs	r0, #1	@ tmp136,
 970 0340 3860     		str	r0, [r7]	@ tmp136, *pxHigherPriorityTaskWoken_15(D)
 971 0342 06E0     		b	.L97	@
 972              	.L98:
1055:FreeRTOS/Source/queue.c **** 			}
 973              		.loc 1 1055 0
 974 0344 0134     		adds	r4, r4, #1	@ tmp138, cTxLock,
 975              	.LVL110:
 976 0346 E4B2     		uxtb	r4, r4	@ D.6001, tmp138
 977              	.LVL111:
 978 0348 85F84540 		strb	r4, [r5, #69]	@ D.6001, MEM[(struct Queue_t *)xQueue_3(D)].cTxLock
 979              	.L108:
1058:FreeRTOS/Source/queue.c **** 		}
 980              		.loc 1 1058 0
 981 034c 0120     		movs	r0, #1	@ xReturn,
 982 034e 00E0     		b	.L97	@
 983              	.LVL112:
 984              	.L101:
 985              	.LBE41:
1063:FreeRTOS/Source/queue.c **** 		}
 986              		.loc 1 1063 0
 987 0350 0020     		movs	r0, #0	@ xReturn,
 988              	.LVL113:
 989              	.L97:
 990              	.LBB42:
 991              	.LBB43:
 254:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 255:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 259:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 260:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 262:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 263:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 265:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 266:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** }
 267:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 268:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 
 269:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** {
 271:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 992              		.loc 2 271 0
 993              	@ 271 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 994 0352 86F31188 			msr basepri, r6		@ uxSavedInterruptStatus
 995              	@ 0 "" 2
 996              		.thumb
 997              	.LBE43:
 998              	.LBE42:
1069:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 999              		.loc 1 1069 0
 1000 0356 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 1001              		.cfi_endproc
 1002              	.LFE14:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 60


 1003              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 1004              		.align	1
 1005              		.global	xQueueGiveFromISR
 1006              		.thumb
 1007              		.thumb_func
 1008              		.type	xQueueGiveFromISR, %function
 1009              	xQueueGiveFromISR:
 1010              	.LFB15:
1073:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1011              		.loc 1 1073 0
 1012              		.cfi_startproc
 1013              		@ args = 0, pretend = 0, frame = 0
 1014              		@ frame_needed = 0, uses_anonymous_args = 0
 1015              	.LVL114:
 1016 0358 38B5     		push	{r3, r4, r5, lr}	@
 1017              	.LCFI14:
 1018              		.cfi_def_cfa_offset 16
 1019              		.cfi_offset 3, -16
 1020              		.cfi_offset 4, -12
 1021              		.cfi_offset 5, -8
 1022              		.cfi_offset 14, -4
1073:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1023              		.loc 1 1073 0
 1024 035a 0C46     		mov	r4, r1	@ pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken
 1025              	.LBB44:
 1026              	.LBB45:
 253:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1027              		.loc 2 253 0
 1028              	@ 253 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1029 035c EFF31185 			mrs r5, basepri												@ uxSavedInterruptStatus
 1030 0360 4FF0BF03 		mov r3, #191													@ ulNewBASEPRI,
 1031 0364 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 1032 0368 BFF36F8F 		isb														
 1033 036c BFF34F8F 		dsb														
 1034              	
 1035              	@ 0 "" 2
 1036              	.LVL115:
 1037              		.thumb
 1038              	.LBE45:
 1039              	.LBE44:
 1040              	.LBB46:
1113:FreeRTOS/Source/queue.c **** 
 1041              		.loc 1 1113 0
 1042 0370 826B     		ldr	r2, [r0, #56]	@ uxMessagesWaiting, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
 1043              	.LVL116:
1118:FreeRTOS/Source/queue.c **** 		{
 1044              		.loc 1 1118 0
 1045 0372 C36B     		ldr	r3, [r0, #60]	@ MEM[(struct Queue_t *)xQueue_3(D)].uxLength, MEM[(struct Queue_t *)xQueue_3(D)
 1046 0374 9A42     		cmp	r2, r3	@ uxMessagesWaiting, MEM[(struct Queue_t *)xQueue_3(D)].uxLength
 1047 0376 16D2     		bcs	.L114	@,
 1048              	.LBB47:
1120:FreeRTOS/Source/queue.c **** 
 1049              		.loc 1 1120 0
 1050 0378 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_3(D)].cTxLock, MEM[(struct Qu
1130:FreeRTOS/Source/queue.c **** 
 1051              		.loc 1 1130 0
 1052 037c 0132     		adds	r2, r2, #1	@ D.6006, uxMessagesWaiting,
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 61


 1053              	.LVL117:
1120:FreeRTOS/Source/queue.c **** 
 1054              		.loc 1 1120 0
 1055 037e DBB2     		uxtb	r3, r3	@ cTxLock, MEM[(struct Queue_t *)xQueue_3(D)].cTxLock
 1056              	.LVL118:
1134:FreeRTOS/Source/queue.c **** 			{
 1057              		.loc 1 1134 0
 1058 0380 FF2B     		cmp	r3, #255	@ cTxLock,
1130:FreeRTOS/Source/queue.c **** 
 1059              		.loc 1 1130 0
 1060 0382 8263     		str	r2, [r0, #56]	@ D.6006, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
1134:FreeRTOS/Source/queue.c **** 			{
 1061              		.loc 1 1134 0
 1062 0384 09D1     		bne	.L111	@,
1189:FreeRTOS/Source/queue.c **** 					{
 1063              		.loc 1 1189 0
 1064 0386 436A     		ldr	r3, [r0, #36]	@ MEM[(struct Queue_t *)xQueue_3(D)].xTasksWaitingToReceive.uxNumberOfItems, MEM
 1065              	.LVL119:
 1066 0388 5BB1     		cbz	r3, .L121	@ MEM[(struct Queue_t *)xQueue_3(D)].xTasksWaitingToReceive.uxNumberOfItems,
1191:FreeRTOS/Source/queue.c **** 						{
 1067              		.loc 1 1191 0
 1068 038a 2430     		adds	r0, r0, #36	@, xQueue,
 1069              	.LVL120:
 1070 038c FFF7FEFF 		bl	xTaskRemoveFromEventList	@
 1071              	.LVL121:
 1072 0390 38B1     		cbz	r0, .L121	@,
1195:FreeRTOS/Source/queue.c **** 							{
 1073              		.loc 1 1195 0
 1074 0392 34B1     		cbz	r4, .L121	@ pxHigherPriorityTaskWoken,
1197:FreeRTOS/Source/queue.c **** 							}
 1075              		.loc 1 1197 0
 1076 0394 0120     		movs	r0, #1	@ tmp135,
 1077 0396 2060     		str	r0, [r4]	@ tmp135, *pxHigherPriorityTaskWoken_14(D)
 1078 0398 06E0     		b	.L110	@
 1079              	.LVL122:
 1080              	.L111:
1220:FreeRTOS/Source/queue.c **** 			}
 1081              		.loc 1 1220 0
 1082 039a 0133     		adds	r3, r3, #1	@ tmp137, cTxLock,
 1083              	.LVL123:
 1084 039c DBB2     		uxtb	r3, r3	@ D.6010, tmp137
 1085              	.LVL124:
 1086 039e 80F84530 		strb	r3, [r0, #69]	@ D.6010, MEM[(struct Queue_t *)xQueue_3(D)].cTxLock
 1087              	.LVL125:
 1088              	.L121:
1223:FreeRTOS/Source/queue.c **** 		}
 1089              		.loc 1 1223 0
 1090 03a2 0120     		movs	r0, #1	@ xReturn,
 1091 03a4 00E0     		b	.L110	@
 1092              	.LVL126:
 1093              	.L114:
 1094              	.LBE47:
1228:FreeRTOS/Source/queue.c **** 		}
 1095              		.loc 1 1228 0
 1096 03a6 0020     		movs	r0, #0	@ xReturn,
 1097              	.LVL127:
 1098              	.L110:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 62


 1099              	.LBE46:
 1100              	.LBB48:
 1101              	.LBB49:
 1102              		.loc 2 271 0
 1103              	@ 271 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1104 03a8 85F31188 			msr basepri, r5		@ uxSavedInterruptStatus
 1105              	@ 0 "" 2
 1106              		.thumb
 1107              	.LBE49:
 1108              	.LBE48:
1234:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1109              		.loc 1 1234 0
 1110 03ac 38BD     		pop	{r3, r4, r5, pc}	@
 1111              		.cfi_endproc
 1112              	.LFE15:
 1113              		.size	xQueueGiveFromISR, .-xQueueGiveFromISR
 1114              		.align	1
 1115              		.global	xQueueGenericReceive
 1116              		.thumb
 1117              		.thumb_func
 1118              		.type	xQueueGenericReceive, %function
 1119              	xQueueGenericReceive:
 1120              	.LFB16:
1238:FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1121              		.loc 1 1238 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 16
 1124              		@ frame_needed = 0, uses_anonymous_args = 0
 1125              	.LVL128:
 1126 03ae 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}	@
 1127              	.LCFI15:
 1128              		.cfi_def_cfa_offset 40
 1129              		.cfi_offset 4, -24
 1130              		.cfi_offset 5, -20
 1131              		.cfi_offset 6, -16
 1132              		.cfi_offset 7, -12
 1133              		.cfi_offset 8, -8
 1134              		.cfi_offset 14, -4
1238:FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1135              		.loc 1 1238 0
 1136 03b2 0446     		mov	r4, r0	@ xQueue, xQueue
 1137              	.LVL129:
 1138 03b4 0F46     		mov	r7, r1	@ pvBuffer, pvBuffer
 1139 03b6 9846     		mov	r8, r3	@ xJustPeeking, xJustPeeking
 1140 03b8 0192     		str	r2, [sp, #4]	@ xTicksToWait, xTicksToWait
1239:FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 1141              		.loc 1 1239 0
 1142 03ba 0026     		movs	r6, #0	@ xEntryTimeSet,
 1143              	.LVL130:
 1144              	.L123:
1258:FreeRTOS/Source/queue.c **** 		{
 1145              		.loc 1 1258 0
 1146 03bc FFF7FEFF 		bl	vPortEnterCritical	@
 1147              	.LVL131:
 1148              	.LBB55:
1260:FreeRTOS/Source/queue.c **** 
 1149              		.loc 1 1260 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 63


 1150 03c0 A56B     		ldr	r5, [r4, #56]	@ uxMessagesWaiting, MEM[(struct Queue_t *)xQueue_12(D)].uxMessagesWaiting
 1151              	.LVL132:
1264:FreeRTOS/Source/queue.c **** 			{
 1152              		.loc 1 1264 0
 1153 03c2 3DB3     		cbz	r5, .L124	@ uxMessagesWaiting,
1270:FreeRTOS/Source/queue.c **** 
 1154              		.loc 1 1270 0
 1155 03c4 2046     		mov	r0, r4	@, xQueue
 1156 03c6 3946     		mov	r1, r7	@, pvBuffer
1268:FreeRTOS/Source/queue.c **** 
 1157              		.loc 1 1268 0
 1158 03c8 E668     		ldr	r6, [r4, #12]	@ pcOriginalReadPosition, MEM[(struct Queue_t *)xQueue_12(D)].u.pcReadFrom
 1159              	.LVL133:
1270:FreeRTOS/Source/queue.c **** 
 1160              		.loc 1 1270 0
 1161 03ca FFF751FE 		bl	prvCopyDataFromQueue	@
 1162              	.LVL134:
1272:FreeRTOS/Source/queue.c **** 				{
 1163              		.loc 1 1272 0
 1164 03ce B8F1000F 		cmp	r8, #0	@ xJustPeeking
 1165 03d2 0BD1     		bne	.L125	@
1281:FreeRTOS/Source/queue.c **** 						{
 1166              		.loc 1 1281 0
 1167 03d4 2368     		ldr	r3, [r4]	@ MEM[(struct Queue_t *)xQueue_12(D)].pcHead, MEM[(struct Queue_t *)xQueue_12(D)].pcH
1277:FreeRTOS/Source/queue.c **** 
 1168              		.loc 1 1277 0
 1169 03d6 013D     		subs	r5, r5, #1	@ D.6022, uxMessagesWaiting,
 1170              	.LVL135:
 1171 03d8 A563     		str	r5, [r4, #56]	@ D.6022, MEM[(struct Queue_t *)xQueue_12(D)].uxMessagesWaiting
1281:FreeRTOS/Source/queue.c **** 						{
 1172              		.loc 1 1281 0
 1173 03da 13B9     		cbnz	r3, .L126	@ MEM[(struct Queue_t *)xQueue_12(D)].pcHead,
1285:FreeRTOS/Source/queue.c **** 						}
 1174              		.loc 1 1285 0
 1175 03dc FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount	@
 1176              	.LVL136:
 1177 03e0 6060     		str	r0, [r4, #4]	@, MEM[(struct Queue_t *)xQueue_12(D)].pcTail
 1178              	.L126:
1294:FreeRTOS/Source/queue.c **** 					{
 1179              		.loc 1 1294 0
 1180 03e2 2369     		ldr	r3, [r4, #16]	@ MEM[(struct Queue_t *)xQueue_12(D)].xTasksWaitingToSend.uxNumberOfItems, MEM[(
 1181 03e4 93B1     		cbz	r3, .L128	@ MEM[(struct Queue_t *)xQueue_12(D)].xTasksWaitingToSend.uxNumberOfItems,
1296:FreeRTOS/Source/queue.c **** 						{
 1182              		.loc 1 1296 0
 1183 03e6 04F11000 		add	r0, r4, #16	@, xQueue,
 1184 03ea 04E0     		b	.L152	@
 1185              	.LVL137:
 1186              	.L125:
1320:FreeRTOS/Source/queue.c **** 					{
 1187              		.loc 1 1320 0
 1188 03ec 636A     		ldr	r3, [r4, #36]	@ MEM[(struct Queue_t *)xQueue_12(D)].xTasksWaitingToReceive.uxNumberOfItems, ME
1316:FreeRTOS/Source/queue.c **** 
 1189              		.loc 1 1316 0
 1190 03ee E660     		str	r6, [r4, #12]	@ pcOriginalReadPosition, MEM[(struct Queue_t *)xQueue_12(D)].u.pcReadFrom
1320:FreeRTOS/Source/queue.c **** 					{
 1191              		.loc 1 1320 0
 1192 03f0 63B1     		cbz	r3, .L128	@ MEM[(struct Queue_t *)xQueue_12(D)].xTasksWaitingToReceive.uxNumberOfItems,
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 64


1322:FreeRTOS/Source/queue.c **** 						{
 1193              		.loc 1 1322 0
 1194 03f2 04F12400 		add	r0, r4, #36	@, xQueue,
 1195              	.LVL138:
 1196              	.L152:
 1197 03f6 FFF7FEFF 		bl	xTaskRemoveFromEventList	@
 1198              	.LVL139:
 1199 03fa 38B1     		cbz	r0, .L128	@,
1325:FreeRTOS/Source/queue.c **** 						}
 1200              		.loc 1 1325 0
 1201 03fc 354B     		ldr	r3, .L154	@ tmp145,
 1202 03fe 4FF08052 		mov	r2, #268435456	@ tmp146,
 1203 0402 1A60     		str	r2, [r3]	@ tmp146,
 1204              	@ 1325 "FreeRTOS/Source/queue.c" 1
 1205 0404 BFF34F8F 		dsb
 1206              	@ 0 "" 2
 1207              	@ 1325 "FreeRTOS/Source/queue.c" 1
 1208 0408 BFF36F8F 		isb
 1209              	@ 0 "" 2
 1210              		.thumb
 1211              	.L128:
1338:FreeRTOS/Source/queue.c **** 				return pdPASS;
 1212              		.loc 1 1338 0
 1213 040c FFF7FEFF 		bl	vPortExitCritical	@
 1214              	.LVL140:
1339:FreeRTOS/Source/queue.c **** 			}
 1215              		.loc 1 1339 0
 1216 0410 0120     		movs	r0, #1	@ D.6021,
 1217 0412 5BE0     		b	.L130	@
 1218              	.LVL141:
 1219              	.L124:
1343:FreeRTOS/Source/queue.c **** 				{
 1220              		.loc 1 1343 0
 1221 0414 019D     		ldr	r5, [sp, #4]	@ xTicksToWait, xTicksToWait
 1222              	.LVL142:
 1223 0416 15B9     		cbnz	r5, .L131	@ xTicksToWait,
1347:FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1224              		.loc 1 1347 0
 1225 0418 FFF7FEFF 		bl	vPortExitCritical	@
 1226              	.LVL143:
 1227 041c 55E0     		b	.L150	@
 1228              	.L131:
1351:FreeRTOS/Source/queue.c **** 				{
 1229              		.loc 1 1351 0
 1230 041e 16B9     		cbnz	r6, .L132	@ xEntryTimeSet,
1355:FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1231              		.loc 1 1355 0
 1232 0420 02A8     		add	r0, sp, #8	@ tmp169,,
 1233 0422 FFF7FEFF 		bl	vTaskSetTimeOutState	@
 1234              	.LVL144:
 1235              	.L132:
 1236              	.LBE55:
1365:FreeRTOS/Source/queue.c **** 
 1237              		.loc 1 1365 0
 1238 0426 FFF7FEFF 		bl	vPortExitCritical	@
 1239              	.LVL145:
1370:FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 65


 1240              		.loc 1 1370 0
 1241 042a FFF7FEFF 		bl	vTaskSuspendAll	@
 1242              	.LVL146:
1371:FreeRTOS/Source/queue.c **** 
 1243              		.loc 1 1371 0
 1244 042e FFF7FEFF 		bl	vPortEnterCritical	@
 1245              	.LVL147:
 1246 0432 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_12(D)].cRxLock, MEM[(struct Q
 1247 0436 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_12(D)].cRxLock,
 1248 0438 04BF     		itt	eq
 1249 043a 0023     		moveq	r3, #0	@ tmp153,
 1250 043c 84F84430 		strbeq	r3, [r4, #68]	@ tmp153, MEM[(struct Queue_t *)xQueue_12(D)].cRxLock
 1251 0440 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_12(D)].cTxLock, MEM[(struct Q
 1252 0444 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_12(D)].cTxLock,
 1253 0446 04BF     		itt	eq
 1254 0448 0023     		moveq	r3, #0	@ tmp159,
 1255 044a 84F84530 		strbeq	r3, [r4, #69]	@ tmp159, MEM[(struct Queue_t *)xQueue_12(D)].cTxLock
 1256 044e FFF7FEFF 		bl	vPortExitCritical	@
 1257              	.LVL148:
1374:FreeRTOS/Source/queue.c **** 		{
 1258              		.loc 1 1374 0
 1259 0452 02A8     		add	r0, sp, #8	@ tmp170,,
 1260 0454 01A9     		add	r1, sp, #4	@,,
 1261              	.LVL149:
 1262 0456 FFF7FEFF 		bl	xTaskCheckForTimeOut	@
 1263              	.LVL150:
 1264 045a 50BB     		cbnz	r0, .L135	@,
 1265              	.LVL151:
 1266              	.LBB56:
 1267              	.LBB57:
1918:FreeRTOS/Source/queue.c **** 	{
 1268              		.loc 1 1918 0
 1269 045c FFF7FEFF 		bl	vPortEnterCritical	@
 1270              	.LVL152:
1920:FreeRTOS/Source/queue.c **** 		{
 1271              		.loc 1 1920 0
 1272 0460 A56B     		ldr	r5, [r4, #56]	@ D.6022, MEM[(const struct Queue_t *)xQueue_12(D)].uxMessagesWaiting
 1273              	.LVL153:
1929:FreeRTOS/Source/queue.c **** 
 1274              		.loc 1 1929 0
 1275 0462 FFF7FEFF 		bl	vPortExitCritical	@
 1276              	.LVL154:
 1277              	.LBE57:
 1278              	.LBE56:
1376:FreeRTOS/Source/queue.c **** 			{
 1279              		.loc 1 1376 0
 1280 0466 F5B9     		cbnz	r5, .L136	@ D.6022,
1382:FreeRTOS/Source/queue.c **** 					{
 1281              		.loc 1 1382 0
 1282 0468 2368     		ldr	r3, [r4]	@ MEM[(struct Queue_t *)xQueue_12(D)].pcHead, MEM[(struct Queue_t *)xQueue_12(D)].pcH
 1283 046a 33B9     		cbnz	r3, .L137	@ MEM[(struct Queue_t *)xQueue_12(D)].pcHead,
1384:FreeRTOS/Source/queue.c **** 						{
 1284              		.loc 1 1384 0
 1285 046c FFF7FEFF 		bl	vPortEnterCritical	@
 1286              	.LVL155:
1386:FreeRTOS/Source/queue.c **** 						}
 1287              		.loc 1 1386 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 66


 1288 0470 6068     		ldr	r0, [r4, #4]	@, MEM[(struct Queue_t *)xQueue_12(D)].pcTail
 1289 0472 FFF7FEFF 		bl	vTaskPriorityInherit	@
 1290              	.LVL156:
1388:FreeRTOS/Source/queue.c **** 					}
 1291              		.loc 1 1388 0
 1292 0476 FFF7FEFF 		bl	vPortExitCritical	@
 1293              	.LVL157:
 1294              	.L137:
1397:FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1295              		.loc 1 1397 0
 1296 047a 04F12400 		add	r0, r4, #36	@, xQueue,
 1297 047e 0199     		ldr	r1, [sp, #4]	@, xTicksToWait
 1298 0480 FFF7FEFF 		bl	vTaskPlaceOnEventList	@
 1299              	.LVL158:
1398:FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1300              		.loc 1 1398 0
 1301 0484 2046     		mov	r0, r4	@, xQueue
 1302 0486 FFF707FE 		bl	prvUnlockQueue	@
 1303              	.LVL159:
1399:FreeRTOS/Source/queue.c **** 				{
 1304              		.loc 1 1399 0
 1305 048a FFF7FEFF 		bl	xTaskResumeAll	@
 1306              	.LVL160:
 1307 048e 08B1     		cbz	r0, .L153	@,
 1308              	.LVL161:
 1309              	.L139:
 1310 0490 0126     		movs	r6, #1	@ xEntryTimeSet,
 1311 0492 93E7     		b	.L123	@
 1312              	.LVL162:
 1313              	.L153:
1401:FreeRTOS/Source/queue.c **** 				}
 1314              		.loc 1 1401 0
 1315 0494 0F4B     		ldr	r3, .L154	@ tmp165,
 1316 0496 4FF08052 		mov	r2, #268435456	@ tmp166,
 1317 049a 1A60     		str	r2, [r3]	@ tmp166, MEM[(volatile uint32_t *)3758157060B]
 1318              	@ 1401 "FreeRTOS/Source/queue.c" 1
 1319 049c BFF34F8F 		dsb
 1320              	@ 0 "" 2
 1321              	@ 1401 "FreeRTOS/Source/queue.c" 1
 1322 04a0 BFF36F8F 		isb
 1323              	@ 0 "" 2
 1324              		.thumb
 1325 04a4 F4E7     		b	.L139	@
 1326              	.L136:
 1327              	.LVL163:
1411:FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1328              		.loc 1 1411 0
 1329 04a6 2046     		mov	r0, r4	@, xQueue
 1330 04a8 FFF7F6FD 		bl	prvUnlockQueue	@
 1331              	.LVL164:
1412:FreeRTOS/Source/queue.c **** 			}
 1332              		.loc 1 1412 0
 1333 04ac FFF7FEFF 		bl	xTaskResumeAll	@
 1334              	.LVL165:
 1335 04b0 EEE7     		b	.L139	@
 1336              	.LVL166:
 1337              	.L135:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 67


1417:FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1338              		.loc 1 1417 0
 1339 04b2 2046     		mov	r0, r4	@, xQueue
 1340 04b4 FFF7F0FD 		bl	prvUnlockQueue	@
 1341              	.LVL167:
1418:FreeRTOS/Source/queue.c **** 
 1342              		.loc 1 1418 0
 1343 04b8 FFF7FEFF 		bl	xTaskResumeAll	@
 1344              	.LVL168:
 1345              	.LBB58:
 1346              	.LBB59:
1918:FreeRTOS/Source/queue.c **** 	{
 1347              		.loc 1 1918 0
 1348 04bc FFF7FEFF 		bl	vPortEnterCritical	@
 1349              	.LVL169:
1920:FreeRTOS/Source/queue.c **** 		{
 1350              		.loc 1 1920 0
 1351 04c0 A56B     		ldr	r5, [r4, #56]	@ D.6022, MEM[(const struct Queue_t *)xQueue_12(D)].uxMessagesWaiting
 1352              	.LVL170:
1929:FreeRTOS/Source/queue.c **** 
 1353              		.loc 1 1929 0
 1354 04c2 FFF7FEFF 		bl	vPortExitCritical	@
 1355              	.LVL171:
 1356              	.LBE59:
 1357              	.LBE58:
1420:FreeRTOS/Source/queue.c **** 			{
 1358              		.loc 1 1420 0
 1359 04c6 002D     		cmp	r5, #0	@ D.6022
 1360 04c8 E2D1     		bne	.L139	@
 1361              	.LVL172:
 1362              	.L150:
1423:FreeRTOS/Source/queue.c **** 			}
 1363              		.loc 1 1423 0
 1364 04ca 2846     		mov	r0, r5	@ D.6021, D.6022
 1365              	.L130:
1431:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1366              		.loc 1 1431 0
 1367 04cc 04B0     		add	sp, sp, #16	@,,
 1368              	.LCFI16:
 1369              		.cfi_def_cfa_offset 24
 1370              		@ sp needed	@
 1371 04ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1372              	.LVL173:
 1373              	.L155:
 1374 04d2 00BF     		.align	2
 1375              	.L154:
 1376 04d4 04ED00E0 		.word	-536810236
 1377              		.cfi_endproc
 1378              	.LFE16:
 1379              		.size	xQueueGenericReceive, .-xQueueGenericReceive
 1380              		.align	1
 1381              		.global	xQueueTakeMutexRecursive
 1382              		.thumb
 1383              		.thumb_func
 1384              		.type	xQueueTakeMutexRecursive, %function
 1385              	xQueueTakeMutexRecursive:
 1386              	.LFB11:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 68


 628:FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 1387              		.loc 1 628 0
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 0
 1390              		@ frame_needed = 0, uses_anonymous_args = 0
 1391              	.LVL174:
 1392 04d8 70B5     		push	{r4, r5, r6, lr}	@
 1393              	.LCFI17:
 1394              		.cfi_def_cfa_offset 16
 1395              		.cfi_offset 4, -16
 1396              		.cfi_offset 5, -12
 1397              		.cfi_offset 6, -8
 1398              		.cfi_offset 14, -4
 639:FreeRTOS/Source/queue.c **** 		{
 1399              		.loc 1 639 0
 1400 04da 4668     		ldr	r6, [r0, #4]	@ D.6030, MEM[(struct Queue_t *)xMutex_3(D)].pcTail
 628:FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 1401              		.loc 1 628 0
 1402 04dc 0446     		mov	r4, r0	@ xMutex, xMutex
 1403 04de 0D46     		mov	r5, r1	@ xTicksToWait, xTicksToWait
 639:FreeRTOS/Source/queue.c **** 		{
 1404              		.loc 1 639 0
 1405 04e0 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle	@
 1406              	.LVL175:
 1407 04e4 8642     		cmp	r6, r0	@ D.6030,
 1408 04e6 04D1     		bne	.L157	@,
 641:FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1409              		.loc 1 641 0
 1410 04e8 E368     		ldr	r3, [r4, #12]	@ MEM[(struct Queue_t *)xMutex_3(D)].u.uxRecursiveCallCount, MEM[(struct Queue_t
 642:FreeRTOS/Source/queue.c **** 		}
 1411              		.loc 1 642 0
 1412 04ea 0120     		movs	r0, #1	@ xReturn,
 641:FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1413              		.loc 1 641 0
 1414 04ec 0133     		adds	r3, r3, #1	@ D.6032, MEM[(struct Queue_t *)xMutex_3(D)].u.uxRecursiveCallCount,
 1415 04ee E360     		str	r3, [r4, #12]	@ D.6032, MEM[(struct Queue_t *)xMutex_3(D)].u.uxRecursiveCallCount
 1416              	.LVL176:
 1417 04f0 70BD     		pop	{r4, r5, r6, pc}	@
 1418              	.LVL177:
 1419              	.L157:
 646:FreeRTOS/Source/queue.c **** 
 1420              		.loc 1 646 0
 1421 04f2 0021     		movs	r1, #0	@,
 1422 04f4 2046     		mov	r0, r4	@, xMutex
 1423 04f6 2A46     		mov	r2, r5	@, xTicksToWait
 1424 04f8 0B46     		mov	r3, r1	@,
 1425 04fa FFF7FEFF 		bl	xQueueGenericReceive	@
 1426              	.LVL178:
 651:FreeRTOS/Source/queue.c **** 			{
 1427              		.loc 1 651 0
 1428 04fe 10B1     		cbz	r0, .L158	@ xReturn,
 653:FreeRTOS/Source/queue.c **** 			}
 1429              		.loc 1 653 0
 1430 0500 E368     		ldr	r3, [r4, #12]	@ MEM[(struct Queue_t *)xMutex_3(D)].u.uxRecursiveCallCount, MEM[(struct Queue_t
 1431 0502 0133     		adds	r3, r3, #1	@ D.6032, MEM[(struct Queue_t *)xMutex_3(D)].u.uxRecursiveCallCount,
 1432 0504 E360     		str	r3, [r4, #12]	@ D.6032, MEM[(struct Queue_t *)xMutex_3(D)].u.uxRecursiveCallCount
 1433              	.L158:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 69


 662:FreeRTOS/Source/queue.c **** 
 1434              		.loc 1 662 0
 1435 0506 70BD     		pop	{r4, r5, r6, pc}	@
 1436              		.cfi_endproc
 1437              	.LFE11:
 1438              		.size	xQueueTakeMutexRecursive, .-xQueueTakeMutexRecursive
 1439              		.align	1
 1440              		.global	xQueueReceiveFromISR
 1441              		.thumb
 1442              		.thumb_func
 1443              		.type	xQueueReceiveFromISR, %function
 1444              	xQueueReceiveFromISR:
 1445              	.LFB17:
1435:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1446              		.loc 1 1435 0
 1447              		.cfi_startproc
 1448              		@ args = 0, pretend = 0, frame = 0
 1449              		@ frame_needed = 0, uses_anonymous_args = 0
 1450              	.LVL179:
 1451 0508 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 1452              	.LCFI18:
 1453              		.cfi_def_cfa_offset 24
 1454              		.cfi_offset 4, -24
 1455              		.cfi_offset 5, -20
 1456              		.cfi_offset 6, -16
 1457              		.cfi_offset 7, -12
 1458              		.cfi_offset 8, -8
 1459              		.cfi_offset 14, -4
1435:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1460              		.loc 1 1435 0
 1461 050c 0746     		mov	r7, r0	@ xQueue, xQueue
 1462 050e 9046     		mov	r8, r2	@ pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken
 1463              	.LBB60:
 1464              	.LBB61:
 253:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1465              		.loc 2 253 0
 1466              	@ 253 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1467 0510 EFF31186 			mrs r6, basepri												@ uxSavedInterruptStatus
 1468 0514 4FF0BF03 		mov r3, #191													@ ulNewBASEPRI,
 1469 0518 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 1470 051c BFF36F8F 		isb														
 1471 0520 BFF34F8F 		dsb														
 1472              	
 1473              	@ 0 "" 2
 1474              	.LVL180:
 1475              		.thumb
 1476              	.LBE61:
 1477              	.LBE60:
 1478              	.LBB62:
1461:FreeRTOS/Source/queue.c **** 
 1479              		.loc 1 1461 0
 1480 0524 846B     		ldr	r4, [r0, #56]	@ uxMessagesWaiting, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
 1481              	.LVL181:
1464:FreeRTOS/Source/queue.c **** 		{
 1482              		.loc 1 1464 0
 1483 0526 E4B1     		cbz	r4, .L167	@ uxMessagesWaiting,
 1484              	.LBB63:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 70


1466:FreeRTOS/Source/queue.c **** 
 1485              		.loc 1 1466 0
 1486 0528 90F84450 		ldrb	r5, [r0, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_3(D)].cRxLock, MEM[(struct Qu
1470:FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 1487              		.loc 1 1470 0
 1488 052c FFF7A0FD 		bl	prvCopyDataFromQueue	@
 1489              	.LVL182:
1466:FreeRTOS/Source/queue.c **** 
 1490              		.loc 1 1466 0
 1491 0530 EDB2     		uxtb	r5, r5	@ cRxLock, MEM[(struct Queue_t *)xQueue_3(D)].cRxLock
 1492              	.LVL183:
1471:FreeRTOS/Source/queue.c **** 
 1493              		.loc 1 1471 0
 1494 0532 601E     		subs	r0, r4, #1	@ D.6035, uxMessagesWaiting,
1477:FreeRTOS/Source/queue.c **** 			{
 1495              		.loc 1 1477 0
 1496 0534 FF2D     		cmp	r5, #255	@ cRxLock,
1471:FreeRTOS/Source/queue.c **** 
 1497              		.loc 1 1471 0
 1498 0536 B863     		str	r0, [r7, #56]	@ D.6035, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
1477:FreeRTOS/Source/queue.c **** 			{
 1499              		.loc 1 1477 0
 1500 0538 0DD1     		bne	.L164	@,
1479:FreeRTOS/Source/queue.c **** 				{
 1501              		.loc 1 1479 0
 1502 053a 3B69     		ldr	r3, [r7, #16]	@ MEM[(struct Queue_t *)xQueue_3(D)].xTasksWaitingToSend.uxNumberOfItems, MEM[(s
 1503 053c 7BB1     		cbz	r3, .L174	@ MEM[(struct Queue_t *)xQueue_3(D)].xTasksWaitingToSend.uxNumberOfItems,
1481:FreeRTOS/Source/queue.c **** 					{
 1504              		.loc 1 1481 0
 1505 053e 07F11000 		add	r0, r7, #16	@, xQueue,
 1506 0542 FFF7FEFF 		bl	xTaskRemoveFromEventList	@
 1507              	.LVL184:
 1508 0546 50B1     		cbz	r0, .L174	@,
1485:FreeRTOS/Source/queue.c **** 						{
 1509              		.loc 1 1485 0
 1510 0548 B8F1000F 		cmp	r8, #0	@ pxHigherPriorityTaskWoken
 1511 054c 07D0     		beq	.L174	@
1487:FreeRTOS/Source/queue.c **** 						}
 1512              		.loc 1 1487 0
 1513 054e 0120     		movs	r0, #1	@ tmp134,
 1514 0550 C8F80000 		str	r0, [r8]	@ tmp134, *pxHigherPriorityTaskWoken_15(D)
 1515 0554 06E0     		b	.L163	@
 1516              	.L164:
1508:FreeRTOS/Source/queue.c **** 			}
 1517              		.loc 1 1508 0
 1518 0556 0135     		adds	r5, r5, #1	@ tmp136, cRxLock,
 1519              	.LVL185:
 1520 0558 EDB2     		uxtb	r5, r5	@ D.6039, tmp136
 1521              	.LVL186:
 1522 055a 87F84450 		strb	r5, [r7, #68]	@ D.6039, MEM[(struct Queue_t *)xQueue_3(D)].cRxLock
 1523              	.L174:
1511:FreeRTOS/Source/queue.c **** 		}
 1524              		.loc 1 1511 0
 1525 055e 0120     		movs	r0, #1	@ xReturn,
 1526 0560 00E0     		b	.L163	@
 1527              	.LVL187:
 1528              	.L167:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 71


 1529              	.LBE63:
1515:FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 1530              		.loc 1 1515 0
 1531 0562 2046     		mov	r0, r4	@ xReturn, uxMessagesWaiting
 1532              	.LVL188:
 1533              	.L163:
 1534              	.LBE62:
 1535              	.LBB64:
 1536              	.LBB65:
 1537              		.loc 2 271 0
 1538              	@ 271 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1539 0564 86F31188 			msr basepri, r6		@ uxSavedInterruptStatus
 1540              	@ 0 "" 2
 1541              		.thumb
 1542              	.LBE65:
 1543              	.LBE64:
1522:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1544              		.loc 1 1522 0
 1545 0568 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1546              		.cfi_endproc
 1547              	.LFE17:
 1548              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 1549              		.align	1
 1550              		.global	xQueuePeekFromISR
 1551              		.thumb
 1552              		.thumb_func
 1553              		.type	xQueuePeekFromISR, %function
 1554              	xQueuePeekFromISR:
 1555              	.LFB18:
1526:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1556              		.loc 1 1526 0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560              	.LVL189:
 1561 056c 70B5     		push	{r4, r5, r6, lr}	@
 1562              	.LCFI19:
 1563              		.cfi_def_cfa_offset 16
 1564              		.cfi_offset 4, -16
 1565              		.cfi_offset 5, -12
 1566              		.cfi_offset 6, -8
 1567              		.cfi_offset 14, -4
1526:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1568              		.loc 1 1526 0
 1569 056e 0446     		mov	r4, r0	@ xQueue, xQueue
 1570              	.LBB66:
 1571              	.LBB67:
 253:./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1572              		.loc 2 253 0
 1573              	@ 253 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1574 0570 EFF31185 			mrs r5, basepri												@ uxSavedInterruptStatus
 1575 0574 4FF0BF03 		mov r3, #191													@ ulNewBASEPRI,
 1576 0578 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 1577 057c BFF36F8F 		isb														
 1578 0580 BFF34F8F 		dsb														
 1579              	
 1580              	@ 0 "" 2
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 72


 1581              	.LVL190:
 1582              		.thumb
 1583              	.LBE67:
 1584              	.LBE66:
1555:FreeRTOS/Source/queue.c **** 		{
 1585              		.loc 1 1555 0
 1586 0584 836B     		ldr	r3, [r0, #56]	@ D.6044, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
 1587 0586 2BB1     		cbz	r3, .L177	@ D.6044,
1561:FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1588              		.loc 1 1561 0
 1589 0588 C668     		ldr	r6, [r0, #12]	@ pcOriginalReadPosition, MEM[(struct Queue_t *)xQueue_3(D)].u.pcReadFrom
 1590              	.LVL191:
1562:FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 1591              		.loc 1 1562 0
 1592 058a FFF771FD 		bl	prvCopyDataFromQueue	@
 1593              	.LVL192:
1563:FreeRTOS/Source/queue.c **** 
 1594              		.loc 1 1563 0
 1595 058e E660     		str	r6, [r4, #12]	@ pcOriginalReadPosition, MEM[(struct Queue_t *)xQueue_3(D)].u.pcReadFrom
 1596              	.LVL193:
1565:FreeRTOS/Source/queue.c **** 		}
 1597              		.loc 1 1565 0
 1598 0590 0120     		movs	r0, #1	@ xReturn,
 1599 0592 00E0     		b	.L176	@
 1600              	.LVL194:
 1601              	.L177:
1569:FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 1602              		.loc 1 1569 0
 1603 0594 1846     		mov	r0, r3	@ xReturn, D.6044
 1604              	.LVL195:
 1605              	.L176:
 1606              	.LBB68:
 1607              	.LBB69:
 1608              		.loc 2 271 0
 1609              	@ 271 "./FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1610 0596 85F31188 			msr basepri, r5		@ uxSavedInterruptStatus
 1611              	@ 0 "" 2
 1612              		.thumb
 1613              	.LBE69:
 1614              	.LBE68:
1576:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1615              		.loc 1 1576 0
 1616 059a 70BD     		pop	{r4, r5, r6, pc}	@
 1617              		.cfi_endproc
 1618              	.LFE18:
 1619              		.size	xQueuePeekFromISR, .-xQueuePeekFromISR
 1620              		.align	1
 1621              		.global	uxQueueMessagesWaiting
 1622              		.thumb
 1623              		.thumb_func
 1624              		.type	uxQueueMessagesWaiting, %function
 1625              	uxQueueMessagesWaiting:
 1626              	.LFB19:
1580:FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 1627              		.loc 1 1580 0
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 73


 1630              		@ frame_needed = 0, uses_anonymous_args = 0
 1631              	.LVL196:
 1632 059c 10B5     		push	{r4, lr}	@
 1633              	.LCFI20:
 1634              		.cfi_def_cfa_offset 8
 1635              		.cfi_offset 4, -8
 1636              		.cfi_offset 14, -4
1580:FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 1637              		.loc 1 1580 0
 1638 059e 0446     		mov	r4, r0	@ xQueue, xQueue
1585:FreeRTOS/Source/queue.c **** 	{
 1639              		.loc 1 1585 0
 1640 05a0 FFF7FEFF 		bl	vPortEnterCritical	@
 1641              	.LVL197:
1587:FreeRTOS/Source/queue.c **** 	}
 1642              		.loc 1 1587 0
 1643 05a4 A46B     		ldr	r4, [r4, #56]	@ uxReturn, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
 1644              	.LVL198:
1589:FreeRTOS/Source/queue.c **** 
 1645              		.loc 1 1589 0
 1646 05a6 FFF7FEFF 		bl	vPortExitCritical	@
 1647              	.LVL199:
1592:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1648              		.loc 1 1592 0
 1649 05aa 2046     		mov	r0, r4	@, uxReturn
 1650 05ac 10BD     		pop	{r4, pc}	@
 1651              		.cfi_endproc
 1652              	.LFE19:
 1653              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 1654              		.align	1
 1655              		.global	uxQueueSpacesAvailable
 1656              		.thumb
 1657              		.thumb_func
 1658              		.type	uxQueueSpacesAvailable, %function
 1659              	uxQueueSpacesAvailable:
 1660              	.LFB20:
1596:FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 1661              		.loc 1 1596 0
 1662              		.cfi_startproc
 1663              		@ args = 0, pretend = 0, frame = 0
 1664              		@ frame_needed = 0, uses_anonymous_args = 0
 1665              	.LVL200:
 1666 05ae 38B5     		push	{r3, r4, r5, lr}	@
 1667              	.LCFI21:
 1668              		.cfi_def_cfa_offset 16
 1669              		.cfi_offset 3, -16
 1670              		.cfi_offset 4, -12
 1671              		.cfi_offset 5, -8
 1672              		.cfi_offset 14, -4
1596:FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 1673              		.loc 1 1596 0
 1674 05b0 0546     		mov	r5, r0	@ xQueue, xQueue
 1675              	.LVL201:
1603:FreeRTOS/Source/queue.c **** 	{
 1676              		.loc 1 1603 0
 1677 05b2 FFF7FEFF 		bl	vPortEnterCritical	@
 1678              	.LVL202:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 74


1605:FreeRTOS/Source/queue.c **** 	}
 1679              		.loc 1 1605 0
 1680 05b6 AC6B     		ldr	r4, [r5, #56]	@ D.6051, MEM[(struct Queue_t *)xQueue_1(D)].uxMessagesWaiting
 1681 05b8 EB6B     		ldr	r3, [r5, #60]	@ MEM[(struct Queue_t *)xQueue_1(D)].uxLength, MEM[(struct Queue_t *)xQueue_1(D)
 1682 05ba 1C1B     		subs	r4, r3, r4	@ uxReturn, MEM[(struct Queue_t *)xQueue_1(D)].uxLength, D.6051
 1683              	.LVL203:
1607:FreeRTOS/Source/queue.c **** 
 1684              		.loc 1 1607 0
 1685 05bc FFF7FEFF 		bl	vPortExitCritical	@
 1686              	.LVL204:
1610:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1687              		.loc 1 1610 0
 1688 05c0 2046     		mov	r0, r4	@, uxReturn
 1689 05c2 38BD     		pop	{r3, r4, r5, pc}	@
 1690              		.cfi_endproc
 1691              	.LFE20:
 1692              		.size	uxQueueSpacesAvailable, .-uxQueueSpacesAvailable
 1693              		.align	1
 1694              		.global	uxQueueMessagesWaitingFromISR
 1695              		.thumb
 1696              		.thumb_func
 1697              		.type	uxQueueMessagesWaitingFromISR, %function
 1698              	uxQueueMessagesWaitingFromISR:
 1699              	.LFB21:
1614:FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 1700              		.loc 1 1614 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
 1704              		@ link register save eliminated.
 1705              	.LVL205:
1619:FreeRTOS/Source/queue.c **** 
 1706              		.loc 1 1619 0
 1707 05c4 806B     		ldr	r0, [r0, #56]	@ uxReturn, MEM[(struct Queue_t *)xQueue_2(D)].uxMessagesWaiting
 1708              	.LVL206:
1622:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1709              		.loc 1 1622 0
 1710 05c6 7047     		bx	lr	@
 1711              		.cfi_endproc
 1712              	.LFE21:
 1713              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 1714              		.align	1
 1715              		.global	vQueueDelete
 1716              		.thumb
 1717              		.thumb_func
 1718              		.type	vQueueDelete, %function
 1719              	vQueueDelete:
 1720              	.LFB22:
1626:FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1721              		.loc 1 1626 0
 1722              		.cfi_startproc
 1723              		@ args = 0, pretend = 0, frame = 0
 1724              		@ frame_needed = 0, uses_anonymous_args = 0
 1725              		@ link register save eliminated.
 1726              	.LVL207:
1642:FreeRTOS/Source/queue.c **** 	}
 1727              		.loc 1 1642 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 75


 1728 05c8 FFF7FEBF 		b	vPortFree	@
 1729              	.LVL208:
 1730              		.cfi_endproc
 1731              	.LFE22:
 1732              		.size	vQueueDelete, .-vQueueDelete
 1733              		.align	1
 1734              		.global	xQueueIsQueueEmptyFromISR
 1735              		.thumb
 1736              		.thumb_func
 1737              		.type	xQueueIsQueueEmptyFromISR, %function
 1738              	xQueueIsQueueEmptyFromISR:
 1739              	.LFB27:
1936:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1740              		.loc 1 1936 0
 1741              		.cfi_startproc
 1742              		@ args = 0, pretend = 0, frame = 0
 1743              		@ frame_needed = 0, uses_anonymous_args = 0
 1744              		@ link register save eliminated.
 1745              	.LVL209:
1940:FreeRTOS/Source/queue.c **** 	{
 1746              		.loc 1 1940 0
 1747 05cc 806B     		ldr	r0, [r0, #56]	@ D.6058, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
 1748              	.LVL210:
1950:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1749              		.loc 1 1950 0
 1750 05ce B0FA80F0 		clz	r0, r0	@, D.6058
 1751              	.LVL211:
 1752 05d2 4009     		lsrs	r0, r0, #5	@,,
 1753 05d4 7047     		bx	lr	@
 1754              		.cfi_endproc
 1755              	.LFE27:
 1756              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 1757              		.align	1
 1758              		.global	xQueueIsQueueFullFromISR
 1759              		.thumb
 1760              		.thumb_func
 1761              		.type	xQueueIsQueueFullFromISR, %function
 1762              	xQueueIsQueueFullFromISR:
 1763              	.LFB29:
1969:FreeRTOS/Source/queue.c **** 
1970:FreeRTOS/Source/queue.c **** 	return xReturn;
1971:FreeRTOS/Source/queue.c **** }
1972:FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1973:FreeRTOS/Source/queue.c **** 
1974:FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1975:FreeRTOS/Source/queue.c **** {
 1764              		.loc 1 1975 0
 1765              		.cfi_startproc
 1766              		@ args = 0, pretend = 0, frame = 0
 1767              		@ frame_needed = 0, uses_anonymous_args = 0
 1768              		@ link register save eliminated.
 1769              	.LVL212:
1976:FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1977:FreeRTOS/Source/queue.c **** 
1978:FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1979:FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 1770              		.loc 1 1979 0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 76


 1771 05d6 826B     		ldr	r2, [r0, #56]	@ D.6063, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
 1772              	.LVL213:
 1773 05d8 C06B     		ldr	r0, [r0, #60]	@ MEM[(struct Queue_t *)xQueue_3(D)].uxLength, MEM[(struct Queue_t *)xQueue_3(D)
 1774              	.LVL214:
1980:FreeRTOS/Source/queue.c **** 	{
1981:FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
1982:FreeRTOS/Source/queue.c **** 	}
1983:FreeRTOS/Source/queue.c **** 	else
1984:FreeRTOS/Source/queue.c **** 	{
1985:FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
1986:FreeRTOS/Source/queue.c **** 	}
1987:FreeRTOS/Source/queue.c **** 
1988:FreeRTOS/Source/queue.c **** 	return xReturn;
1989:FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 1775              		.loc 1 1989 0
 1776 05da 131A     		subs	r3, r2, r0	@, D.6063, MEM[(struct Queue_t *)xQueue_3(D)].uxLength
 1777 05dc 5842     		rsbs	r0, r3, #0	@,,
 1778              	.LVL215:
 1779 05de 5841     		adcs	r0, r0, r3	@,,
 1780 05e0 7047     		bx	lr	@
 1781              		.cfi_endproc
 1782              	.LFE29:
 1783              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 1784              	.Letext0:
 1785              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h
 1786              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/machine/_default_types
 1787              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20150921/arm-none-eabi/include/sys/_stdint.h"
 1788              		.file 6 "./FreeRTOS/Source/include/list.h"
 1789              		.file 7 "./FreeRTOS/Source/include/task.h"
 1790              		.file 8 "./FreeRTOS/Source/include/queue.h"
 1791              		.file 9 "./FreeRTOS/Source/include/portable.h"
 1792 05e2 00BF     		.section	.debug_info,"",%progbits
 1793              	.Ldebug_info0:
 1794 0000 05150000 		.4byte	0x1505
 1795 0004 0200     		.2byte	0x2
 1796 0006 00000000 		.4byte	.Ldebug_abbrev0
 1797 000a 04       		.byte	0x4
 1798 000b 01       		.uleb128 0x1
 1799 000c 30060000 		.4byte	.LASF129
 1800 0010 01       		.byte	0x1
 1801 0011 1D020000 		.4byte	.LASF130
 1802 0015 E8060000 		.4byte	.LASF131
 1803 0019 00000000 		.4byte	.Ltext0
 1804 001d E2050000 		.4byte	.Letext0
 1805 0021 00000000 		.4byte	.Ldebug_line0
 1806 0025 02       		.uleb128 0x2
 1807 0026 96020000 		.4byte	.LASF1
 1808 002a 03       		.byte	0x3
 1809 002b D4       		.byte	0xd4
 1810 002c 30000000 		.4byte	0x30
 1811 0030 03       		.uleb128 0x3
 1812 0031 04       		.byte	0x4
 1813 0032 07       		.byte	0x7
 1814 0033 70000000 		.4byte	.LASF0
 1815 0037 04       		.uleb128 0x4
 1816 0038 04       		.byte	0x4
 1817 0039 05       		.byte	0x5
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 77


 1818 003a 696E7400 		.ascii	"int\000"
 1819 003e 02       		.uleb128 0x2
 1820 003f 36050000 		.4byte	.LASF2
 1821 0043 04       		.byte	0x4
 1822 0044 1B       		.byte	0x1b
 1823 0045 49000000 		.4byte	0x49
 1824 0049 03       		.uleb128 0x3
 1825 004a 01       		.byte	0x1
 1826 004b 06       		.byte	0x6
 1827 004c F4070000 		.4byte	.LASF3
 1828 0050 02       		.uleb128 0x2
 1829 0051 1E060000 		.4byte	.LASF4
 1830 0055 04       		.byte	0x4
 1831 0056 1D       		.byte	0x1d
 1832 0057 5B000000 		.4byte	0x5b
 1833 005b 03       		.uleb128 0x3
 1834 005c 01       		.byte	0x1
 1835 005d 08       		.byte	0x8
 1836 005e 2B070000 		.4byte	.LASF5
 1837 0062 03       		.uleb128 0x3
 1838 0063 02       		.byte	0x2
 1839 0064 05       		.byte	0x5
 1840 0065 7B050000 		.4byte	.LASF6
 1841 0069 03       		.uleb128 0x3
 1842 006a 02       		.byte	0x2
 1843 006b 07       		.byte	0x7
 1844 006c 00080000 		.4byte	.LASF7
 1845 0070 03       		.uleb128 0x3
 1846 0071 04       		.byte	0x4
 1847 0072 05       		.byte	0x5
 1848 0073 90050000 		.4byte	.LASF8
 1849 0077 02       		.uleb128 0x2
 1850 0078 39070000 		.4byte	.LASF9
 1851 007c 04       		.byte	0x4
 1852 007d 41       		.byte	0x41
 1853 007e 82000000 		.4byte	0x82
 1854 0082 03       		.uleb128 0x3
 1855 0083 04       		.byte	0x4
 1856 0084 07       		.byte	0x7
 1857 0085 D6060000 		.4byte	.LASF10
 1858 0089 03       		.uleb128 0x3
 1859 008a 08       		.byte	0x8
 1860 008b 05       		.byte	0x5
 1861 008c 55040000 		.4byte	.LASF11
 1862 0090 03       		.uleb128 0x3
 1863 0091 08       		.byte	0x8
 1864 0092 07       		.byte	0x7
 1865 0093 06020000 		.4byte	.LASF12
 1866 0097 03       		.uleb128 0x3
 1867 0098 04       		.byte	0x4
 1868 0099 07       		.byte	0x7
 1869 009a BC060000 		.4byte	.LASF13
 1870 009e 05       		.uleb128 0x5
 1871 009f 04       		.byte	0x4
 1872 00a0 03       		.uleb128 0x3
 1873 00a1 01       		.byte	0x1
 1874 00a2 08       		.byte	0x8
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 78


 1875 00a3 86030000 		.4byte	.LASF14
 1876 00a7 06       		.uleb128 0x6
 1877 00a8 04       		.byte	0x4
 1878 00a9 AD000000 		.4byte	0xad
 1879 00ad 07       		.uleb128 0x7
 1880 00ae 02       		.uleb128 0x2
 1881 00af A6010000 		.4byte	.LASF15
 1882 00b3 05       		.byte	0x5
 1883 00b4 13       		.byte	0x13
 1884 00b5 3E000000 		.4byte	0x3e
 1885 00b9 02       		.uleb128 0x2
 1886 00ba 14040000 		.4byte	.LASF16
 1887 00be 05       		.byte	0x5
 1888 00bf 14       		.byte	0x14
 1889 00c0 50000000 		.4byte	0x50
 1890 00c4 02       		.uleb128 0x2
 1891 00c5 9D010000 		.4byte	.LASF17
 1892 00c9 05       		.byte	0x5
 1893 00ca 20       		.byte	0x20
 1894 00cb 77000000 		.4byte	0x77
 1895 00cf 02       		.uleb128 0x2
 1896 00d0 76040000 		.4byte	.LASF18
 1897 00d4 02       		.byte	0x2
 1898 00d5 62       		.byte	0x62
 1899 00d6 70000000 		.4byte	0x70
 1900 00da 02       		.uleb128 0x2
 1901 00db B2030000 		.4byte	.LASF19
 1902 00df 02       		.byte	0x2
 1903 00e0 63       		.byte	0x63
 1904 00e1 82000000 		.4byte	0x82
 1905 00e5 02       		.uleb128 0x2
 1906 00e6 2B050000 		.4byte	.LASF20
 1907 00ea 02       		.byte	0x2
 1908 00eb 69       		.byte	0x69
 1909 00ec C4000000 		.4byte	0xc4
 1910 00f0 06       		.uleb128 0x6
 1911 00f1 04       		.byte	0x4
 1912 00f2 B9000000 		.4byte	0xb9
 1913 00f6 08       		.uleb128 0x8
 1914 00f7 AF000000 		.4byte	.LASF27
 1915 00fb 14       		.byte	0x14
 1916 00fc 06       		.byte	0x6
 1917 00fd B5       		.byte	0xb5
 1918 00fe 49010000 		.4byte	0x149
 1919 0102 09       		.uleb128 0x9
 1920 0103 85050000 		.4byte	.LASF21
 1921 0107 06       		.byte	0x6
 1922 0108 B8       		.byte	0xb8
 1923 0109 E5000000 		.4byte	0xe5
 1924 010d 02       		.byte	0x2
 1925 010e 23       		.byte	0x23
 1926 010f 00       		.uleb128 0
 1927 0110 09       		.uleb128 0x9
 1928 0111 A8040000 		.4byte	.LASF22
 1929 0115 06       		.byte	0x6
 1930 0116 B9       		.byte	0xb9
 1931 0117 49010000 		.4byte	0x149
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 79


 1932 011b 02       		.byte	0x2
 1933 011c 23       		.byte	0x23
 1934 011d 04       		.uleb128 0x4
 1935 011e 09       		.uleb128 0x9
 1936 011f 4E020000 		.4byte	.LASF23
 1937 0123 06       		.byte	0x6
 1938 0124 BA       		.byte	0xba
 1939 0125 49010000 		.4byte	0x149
 1940 0129 02       		.byte	0x2
 1941 012a 23       		.byte	0x23
 1942 012b 08       		.uleb128 0x8
 1943 012c 09       		.uleb128 0x9
 1944 012d 76070000 		.4byte	.LASF24
 1945 0131 06       		.byte	0x6
 1946 0132 BB       		.byte	0xbb
 1947 0133 9E000000 		.4byte	0x9e
 1948 0137 02       		.byte	0x2
 1949 0138 23       		.byte	0x23
 1950 0139 0C       		.uleb128 0xc
 1951 013a 09       		.uleb128 0x9
 1952 013b 66050000 		.4byte	.LASF25
 1953 013f 06       		.byte	0x6
 1954 0140 BC       		.byte	0xbc
 1955 0141 9E000000 		.4byte	0x9e
 1956 0145 02       		.byte	0x2
 1957 0146 23       		.byte	0x23
 1958 0147 10       		.uleb128 0x10
 1959 0148 00       		.byte	0
 1960 0149 06       		.uleb128 0x6
 1961 014a 04       		.byte	0x4
 1962 014b F6000000 		.4byte	0xf6
 1963 014f 02       		.uleb128 0x2
 1964 0150 8B030000 		.4byte	.LASF26
 1965 0154 06       		.byte	0x6
 1966 0155 BF       		.byte	0xbf
 1967 0156 F6000000 		.4byte	0xf6
 1968 015a 08       		.uleb128 0x8
 1969 015b AE020000 		.4byte	.LASF28
 1970 015f 0C       		.byte	0xc
 1971 0160 06       		.byte	0x6
 1972 0161 C1       		.byte	0xc1
 1973 0162 91010000 		.4byte	0x191
 1974 0166 09       		.uleb128 0x9
 1975 0167 85050000 		.4byte	.LASF21
 1976 016b 06       		.byte	0x6
 1977 016c C4       		.byte	0xc4
 1978 016d E5000000 		.4byte	0xe5
 1979 0171 02       		.byte	0x2
 1980 0172 23       		.byte	0x23
 1981 0173 00       		.uleb128 0
 1982 0174 09       		.uleb128 0x9
 1983 0175 A8040000 		.4byte	.LASF22
 1984 0179 06       		.byte	0x6
 1985 017a C5       		.byte	0xc5
 1986 017b 49010000 		.4byte	0x149
 1987 017f 02       		.byte	0x2
 1988 0180 23       		.byte	0x23
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 80


 1989 0181 04       		.uleb128 0x4
 1990 0182 09       		.uleb128 0x9
 1991 0183 4E020000 		.4byte	.LASF23
 1992 0187 06       		.byte	0x6
 1993 0188 C6       		.byte	0xc6
 1994 0189 49010000 		.4byte	0x149
 1995 018d 02       		.byte	0x2
 1996 018e 23       		.byte	0x23
 1997 018f 08       		.uleb128 0x8
 1998 0190 00       		.byte	0
 1999 0191 02       		.uleb128 0x2
 2000 0192 05040000 		.4byte	.LASF29
 2001 0196 06       		.byte	0x6
 2002 0197 C8       		.byte	0xc8
 2003 0198 5A010000 		.4byte	0x15a
 2004 019c 08       		.uleb128 0x8
 2005 019d BE020000 		.4byte	.LASF30
 2006 01a1 14       		.byte	0x14
 2007 01a2 06       		.byte	0x6
 2008 01a3 CD       		.byte	0xcd
 2009 01a4 D3010000 		.4byte	0x1d3
 2010 01a8 09       		.uleb128 0x9
 2011 01a9 00000000 		.4byte	.LASF31
 2012 01ad 06       		.byte	0x6
 2013 01ae D0       		.byte	0xd0
 2014 01af DA000000 		.4byte	0xda
 2015 01b3 02       		.byte	0x2
 2016 01b4 23       		.byte	0x23
 2017 01b5 00       		.uleb128 0
 2018 01b6 09       		.uleb128 0x9
 2019 01b7 7D000000 		.4byte	.LASF32
 2020 01bb 06       		.byte	0x6
 2021 01bc D1       		.byte	0xd1
 2022 01bd D3010000 		.4byte	0x1d3
 2023 01c1 02       		.byte	0x2
 2024 01c2 23       		.byte	0x23
 2025 01c3 04       		.uleb128 0x4
 2026 01c4 09       		.uleb128 0x9
 2027 01c5 DE030000 		.4byte	.LASF33
 2028 01c9 06       		.byte	0x6
 2029 01ca D2       		.byte	0xd2
 2030 01cb 91010000 		.4byte	0x191
 2031 01cf 02       		.byte	0x2
 2032 01d0 23       		.byte	0x23
 2033 01d1 08       		.uleb128 0x8
 2034 01d2 00       		.byte	0
 2035 01d3 06       		.uleb128 0x6
 2036 01d4 04       		.byte	0x4
 2037 01d5 4F010000 		.4byte	0x14f
 2038 01d9 02       		.uleb128 0x2
 2039 01da 1A050000 		.4byte	.LASF34
 2040 01de 06       		.byte	0x6
 2041 01df D4       		.byte	0xd4
 2042 01e0 9C010000 		.4byte	0x19c
 2043 01e4 02       		.uleb128 0x2
 2044 01e5 E5040000 		.4byte	.LASF35
 2045 01e9 07       		.byte	0x7
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 81


 2046 01ea 67       		.byte	0x67
 2047 01eb 9E000000 		.4byte	0x9e
 2048 01ef 08       		.uleb128 0x8
 2049 01f0 9A000000 		.4byte	.LASF36
 2050 01f4 08       		.byte	0x8
 2051 01f5 07       		.byte	0x7
 2052 01f6 87       		.byte	0x87
 2053 01f7 18020000 		.4byte	0x218
 2054 01fb 09       		.uleb128 0x9
 2055 01fc 02010000 		.4byte	.LASF37
 2056 0200 07       		.byte	0x7
 2057 0201 89       		.byte	0x89
 2058 0202 CF000000 		.4byte	0xcf
 2059 0206 02       		.byte	0x2
 2060 0207 23       		.byte	0x23
 2061 0208 00       		.uleb128 0
 2062 0209 09       		.uleb128 0x9
 2063 020a 98040000 		.4byte	.LASF38
 2064 020e 07       		.byte	0x7
 2065 020f 8A       		.byte	0x8a
 2066 0210 E5000000 		.4byte	0xe5
 2067 0214 02       		.byte	0x2
 2068 0215 23       		.byte	0x23
 2069 0216 04       		.uleb128 0x4
 2070 0217 00       		.byte	0
 2071 0218 02       		.uleb128 0x2
 2072 0219 C4040000 		.4byte	.LASF39
 2073 021d 07       		.byte	0x7
 2074 021e 8B       		.byte	0x8b
 2075 021f EF010000 		.4byte	0x1ef
 2076 0223 02       		.uleb128 0x2
 2077 0224 D0030000 		.4byte	.LASF40
 2078 0228 08       		.byte	0x8
 2079 0229 58       		.byte	0x58
 2080 022a 9E000000 		.4byte	0x9e
 2081 022e 0A       		.uleb128 0xa
 2082 022f 04       		.byte	0x4
 2083 0230 01       		.byte	0x1
 2084 0231 88       		.byte	0x88
 2085 0232 4D020000 		.4byte	0x24d
 2086 0236 0B       		.uleb128 0xb
 2087 0237 65010000 		.4byte	.LASF41
 2088 023b 01       		.byte	0x1
 2089 023c 8A       		.byte	0x8a
 2090 023d 4D020000 		.4byte	0x24d
 2091 0241 0B       		.uleb128 0xb
 2092 0242 24010000 		.4byte	.LASF42
 2093 0246 01       		.byte	0x1
 2094 0247 8B       		.byte	0x8b
 2095 0248 DA000000 		.4byte	0xda
 2096 024c 00       		.byte	0
 2097 024d 06       		.uleb128 0x6
 2098 024e 04       		.byte	0x4
 2099 024f AE000000 		.4byte	0xae
 2100 0253 08       		.uleb128 0x8
 2101 0254 E1010000 		.4byte	.LASF43
 2102 0258 48       		.byte	0x48
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 82


 2103 0259 01       		.byte	0x1
 2104 025a 82       		.byte	0x82
 2105 025b F8020000 		.4byte	0x2f8
 2106 025f 09       		.uleb128 0x9
 2107 0260 98070000 		.4byte	.LASF44
 2108 0264 01       		.byte	0x1
 2109 0265 84       		.byte	0x84
 2110 0266 4D020000 		.4byte	0x24d
 2111 026a 02       		.byte	0x2
 2112 026b 23       		.byte	0x23
 2113 026c 00       		.uleb128 0
 2114 026d 09       		.uleb128 0x9
 2115 026e 17060000 		.4byte	.LASF45
 2116 0272 01       		.byte	0x1
 2117 0273 85       		.byte	0x85
 2118 0274 4D020000 		.4byte	0x24d
 2119 0278 02       		.byte	0x2
 2120 0279 23       		.byte	0x23
 2121 027a 04       		.uleb128 0x4
 2122 027b 09       		.uleb128 0x9
 2123 027c 21050000 		.4byte	.LASF46
 2124 0280 01       		.byte	0x1
 2125 0281 86       		.byte	0x86
 2126 0282 4D020000 		.4byte	0x24d
 2127 0286 02       		.byte	0x2
 2128 0287 23       		.byte	0x23
 2129 0288 08       		.uleb128 0x8
 2130 0289 0C       		.uleb128 0xc
 2131 028a 7500     		.ascii	"u\000"
 2132 028c 01       		.byte	0x1
 2133 028d 8C       		.byte	0x8c
 2134 028e 2E020000 		.4byte	0x22e
 2135 0292 02       		.byte	0x2
 2136 0293 23       		.byte	0x23
 2137 0294 0C       		.uleb128 0xc
 2138 0295 09       		.uleb128 0x9
 2139 0296 CF000000 		.4byte	.LASF47
 2140 029a 01       		.byte	0x1
 2141 029b 8E       		.byte	0x8e
 2142 029c D9010000 		.4byte	0x1d9
 2143 02a0 02       		.byte	0x2
 2144 02a1 23       		.byte	0x23
 2145 02a2 10       		.uleb128 0x10
 2146 02a3 09       		.uleb128 0x9
 2147 02a4 37000000 		.4byte	.LASF48
 2148 02a8 01       		.byte	0x1
 2149 02a9 8F       		.byte	0x8f
 2150 02aa D9010000 		.4byte	0x1d9
 2151 02ae 02       		.byte	0x2
 2152 02af 23       		.byte	0x23
 2153 02b0 24       		.uleb128 0x24
 2154 02b1 09       		.uleb128 0x9
 2155 02b2 59020000 		.4byte	.LASF49
 2156 02b6 01       		.byte	0x1
 2157 02b7 91       		.byte	0x91
 2158 02b8 F8020000 		.4byte	0x2f8
 2159 02bc 02       		.byte	0x2
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 83


 2160 02bd 23       		.byte	0x23
 2161 02be 38       		.uleb128 0x38
 2162 02bf 09       		.uleb128 0x9
 2163 02c0 72050000 		.4byte	.LASF50
 2164 02c4 01       		.byte	0x1
 2165 02c5 92       		.byte	0x92
 2166 02c6 DA000000 		.4byte	0xda
 2167 02ca 02       		.byte	0x2
 2168 02cb 23       		.byte	0x23
 2169 02cc 3C       		.uleb128 0x3c
 2170 02cd 09       		.uleb128 0x9
 2171 02ce 46030000 		.4byte	.LASF51
 2172 02d2 01       		.byte	0x1
 2173 02d3 93       		.byte	0x93
 2174 02d4 DA000000 		.4byte	0xda
 2175 02d8 02       		.byte	0x2
 2176 02d9 23       		.byte	0x23
 2177 02da 40       		.uleb128 0x40
 2178 02db 09       		.uleb128 0x9
 2179 02dc 2B080000 		.4byte	.LASF52
 2180 02e0 01       		.byte	0x1
 2181 02e1 95       		.byte	0x95
 2182 02e2 FD020000 		.4byte	0x2fd
 2183 02e6 02       		.byte	0x2
 2184 02e7 23       		.byte	0x23
 2185 02e8 44       		.uleb128 0x44
 2186 02e9 09       		.uleb128 0x9
 2187 02ea FA000000 		.4byte	.LASF53
 2188 02ee 01       		.byte	0x1
 2189 02ef 96       		.byte	0x96
 2190 02f0 FD020000 		.4byte	0x2fd
 2191 02f4 02       		.byte	0x2
 2192 02f5 23       		.byte	0x23
 2193 02f6 45       		.uleb128 0x45
 2194 02f7 00       		.byte	0
 2195 02f8 0D       		.uleb128 0xd
 2196 02f9 DA000000 		.4byte	0xda
 2197 02fd 0D       		.uleb128 0xd
 2198 02fe AE000000 		.4byte	0xae
 2199 0302 02       		.uleb128 0x2
 2200 0303 1A080000 		.4byte	.LASF54
 2201 0307 01       		.byte	0x1
 2202 0308 A5       		.byte	0xa5
 2203 0309 53020000 		.4byte	0x253
 2204 030d 02       		.uleb128 0x2
 2205 030e 39010000 		.4byte	.LASF55
 2206 0312 01       		.byte	0x1
 2207 0313 A9       		.byte	0xa9
 2208 0314 02030000 		.4byte	0x302
 2209 0318 0E       		.uleb128 0xe
 2210 0319 87010000 		.4byte	.LASF62
 2211 031d 01       		.byte	0x1
 2212 031e B001     		.2byte	0x1b0
 2213 0320 01       		.byte	0x1
 2214 0321 01       		.byte	0x1
 2215 0322 63030000 		.4byte	0x363
 2216 0326 0F       		.uleb128 0xf
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 84


 2217 0327 3F050000 		.4byte	.LASF56
 2218 032b 01       		.byte	0x1
 2219 032c B001     		.2byte	0x1b0
 2220 032e 63030000 		.4byte	0x363
 2221 0332 0F       		.uleb128 0xf
 2222 0333 46030000 		.4byte	.LASF51
 2223 0337 01       		.byte	0x1
 2224 0338 B001     		.2byte	0x1b0
 2225 033a 63030000 		.4byte	0x363
 2226 033e 0F       		.uleb128 0xf
 2227 033f 81040000 		.4byte	.LASF57
 2228 0343 01       		.byte	0x1
 2229 0344 B001     		.2byte	0x1b0
 2230 0346 F0000000 		.4byte	0xf0
 2231 034a 0F       		.uleb128 0xf
 2232 034b 01050000 		.4byte	.LASF58
 2233 034f 01       		.byte	0x1
 2234 0350 B001     		.2byte	0x1b0
 2235 0352 68030000 		.4byte	0x368
 2236 0356 0F       		.uleb128 0xf
 2237 0357 A4000000 		.4byte	.LASF59
 2238 035b 01       		.byte	0x1
 2239 035c B001     		.2byte	0x1b0
 2240 035e 6D030000 		.4byte	0x36d
 2241 0362 00       		.byte	0
 2242 0363 10       		.uleb128 0x10
 2243 0364 DA000000 		.4byte	0xda
 2244 0368 10       		.uleb128 0x10
 2245 0369 B9000000 		.4byte	0xb9
 2246 036d 06       		.uleb128 0x6
 2247 036e 04       		.byte	0x4
 2248 036f 0D030000 		.4byte	0x30d
 2249 0373 11       		.uleb128 0x11
 2250 0374 42040000 		.4byte	.LASF81
 2251 0378 02       		.byte	0x2
 2252 0379 F9       		.byte	0xf9
 2253 037a 01       		.byte	0x1
 2254 037b C4000000 		.4byte	0xc4
 2255 037f 03       		.byte	0x3
 2256 0380 9B030000 		.4byte	0x39b
 2257 0384 12       		.uleb128 0x12
 2258 0385 C8010000 		.4byte	.LASF60
 2259 0389 02       		.byte	0x2
 2260 038a FB       		.byte	0xfb
 2261 038b C4000000 		.4byte	0xc4
 2262 038f 12       		.uleb128 0x12
 2263 0390 A5030000 		.4byte	.LASF61
 2264 0394 02       		.byte	0x2
 2265 0395 FB       		.byte	0xfb
 2266 0396 C4000000 		.4byte	0xc4
 2267 039a 00       		.byte	0
 2268 039b 0E       		.uleb128 0xe
 2269 039c DD020000 		.4byte	.LASF63
 2270 03a0 02       		.byte	0x2
 2271 03a1 0D01     		.2byte	0x10d
 2272 03a3 01       		.byte	0x1
 2273 03a4 03       		.byte	0x3
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 85


 2274 03a5 B6030000 		.4byte	0x3b6
 2275 03a9 0F       		.uleb128 0xf
 2276 03aa F2040000 		.4byte	.LASF64
 2277 03ae 02       		.byte	0x2
 2278 03af 0D01     		.2byte	0x10d
 2279 03b1 C4000000 		.4byte	0xc4
 2280 03b5 00       		.byte	0
 2281 03b6 13       		.uleb128 0x13
 2282 03b7 ED020000 		.4byte	.LASF132
 2283 03bb 01       		.byte	0x1
 2284 03bc A106     		.2byte	0x6a1
 2285 03be 01       		.byte	0x1
 2286 03bf CF000000 		.4byte	0xcf
 2287 03c3 00000000 		.4byte	.LFB23
 2288 03c7 70000000 		.4byte	.LFE23
 2289 03cb 00000000 		.4byte	.LLST0
 2290 03cf 01       		.byte	0x1
 2291 03d0 40040000 		.4byte	0x440
 2292 03d4 14       		.uleb128 0x14
 2293 03d5 28060000 		.4byte	.LASF65
 2294 03d9 01       		.byte	0x1
 2295 03da A106     		.2byte	0x6a1
 2296 03dc 40040000 		.4byte	0x440
 2297 03e0 20000000 		.4byte	.LLST1
 2298 03e4 14       		.uleb128 0x14
 2299 03e5 BA050000 		.4byte	.LASF66
 2300 03e9 01       		.byte	0x1
 2301 03ea A106     		.2byte	0x6a1
 2302 03ec A7000000 		.4byte	0xa7
 2303 03f0 80000000 		.4byte	.LLST2
 2304 03f4 14       		.uleb128 0x14
 2305 03f5 21080000 		.4byte	.LASF67
 2306 03f9 01       		.byte	0x1
 2307 03fa A106     		.2byte	0x6a1
 2308 03fc 45040000 		.4byte	0x445
 2309 0400 EC000000 		.4byte	.LLST3
 2310 0404 15       		.uleb128 0x15
 2311 0405 B4060000 		.4byte	.LASF68
 2312 0409 01       		.byte	0x1
 2313 040a A306     		.2byte	0x6a3
 2314 040c CF000000 		.4byte	0xcf
 2315 0410 4A010000 		.4byte	.LLST4
 2316 0414 15       		.uleb128 0x15
 2317 0415 59020000 		.4byte	.LASF49
 2318 0419 01       		.byte	0x1
 2319 041a A406     		.2byte	0x6a4
 2320 041c DA000000 		.4byte	0xda
 2321 0420 80010000 		.4byte	.LLST5
 2322 0424 16       		.uleb128 0x16
 2323 0425 16000000 		.4byte	.LVL5
 2324 0429 84130000 		.4byte	0x1384
 2325 042d 16       		.uleb128 0x16
 2326 042e 22000000 		.4byte	.LVL8
 2327 0432 A2130000 		.4byte	0x13a2
 2328 0436 16       		.uleb128 0x16
 2329 0437 3C000000 		.4byte	.LVL11
 2330 043b A2130000 		.4byte	0x13a2
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 86


 2331 043f 00       		.byte	0
 2332 0440 10       		.uleb128 0x10
 2333 0441 6D030000 		.4byte	0x36d
 2334 0445 10       		.uleb128 0x10
 2335 0446 CF000000 		.4byte	0xcf
 2336 044a 17       		.uleb128 0x17
 2337 044b 54070000 		.4byte	.LASF70
 2338 044f 01       		.byte	0x1
 2339 0450 F006     		.2byte	0x6f0
 2340 0452 01       		.byte	0x1
 2341 0453 70000000 		.4byte	.LFB24
 2342 0457 98000000 		.4byte	.LFE24
 2343 045b A0010000 		.4byte	.LLST6
 2344 045f 01       		.byte	0x1
 2345 0460 97040000 		.4byte	0x497
 2346 0464 14       		.uleb128 0x14
 2347 0465 28060000 		.4byte	.LASF65
 2348 0469 01       		.byte	0x1
 2349 046a F006     		.2byte	0x6f0
 2350 046c 40040000 		.4byte	0x440
 2351 0470 D8010000 		.4byte	.LLST7
 2352 0474 14       		.uleb128 0x14
 2353 0475 45020000 		.4byte	.LASF69
 2354 0479 01       		.byte	0x1
 2355 047a F006     		.2byte	0x6f0
 2356 047c 97040000 		.4byte	0x497
 2357 0480 0F020000 		.4byte	.LLST8
 2358 0484 18       		.uleb128 0x18
 2359 0485 96000000 		.4byte	.LVL21
 2360 0489 01       		.byte	0x1
 2361 048a A2130000 		.4byte	0x13a2
 2362 048e 19       		.uleb128 0x19
 2363 048f 01       		.byte	0x1
 2364 0490 50       		.byte	0x50
 2365 0491 03       		.byte	0x3
 2366 0492 F3       		.byte	0xf3
 2367 0493 01       		.uleb128 0x1
 2368 0494 51       		.byte	0x51
 2369 0495 00       		.byte	0
 2370 0496 00       		.byte	0
 2371 0497 10       		.uleb128 0x10
 2372 0498 9E000000 		.4byte	0x9e
 2373 049c 17       		.uleb128 0x17
 2374 049d B8070000 		.4byte	.LASF71
 2375 04a1 01       		.byte	0x1
 2376 04a2 0207     		.2byte	0x702
 2377 04a4 01       		.byte	0x1
 2378 04a5 98000000 		.4byte	.LFB25
 2379 04a9 00010000 		.4byte	.LFE25
 2380 04ad 46020000 		.4byte	.LLST9
 2381 04b1 01       		.byte	0x1
 2382 04b2 62050000 		.4byte	0x562
 2383 04b6 14       		.uleb128 0x14
 2384 04b7 28060000 		.4byte	.LASF65
 2385 04bb 01       		.byte	0x1
 2386 04bc 0207     		.2byte	0x702
 2387 04be 40040000 		.4byte	0x440
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 87


 2388 04c2 72020000 		.4byte	.LLST10
 2389 04c6 1A       		.uleb128 0x1a
 2390 04c7 A0000000 		.4byte	.LBB23
 2391 04cb C8000000 		.4byte	.LBE23
 2392 04cf 01050000 		.4byte	0x501
 2393 04d3 15       		.uleb128 0x15
 2394 04d4 FA000000 		.4byte	.LASF53
 2395 04d8 01       		.byte	0x1
 2396 04d9 0C07     		.2byte	0x70c
 2397 04db AE000000 		.4byte	0xae
 2398 04df 9E020000 		.4byte	.LLST11
 2399 04e3 1B       		.uleb128 0x1b
 2400 04e4 B8000000 		.4byte	.LVL25
 2401 04e8 C3130000 		.4byte	0x13c3
 2402 04ec F7040000 		.4byte	0x4f7
 2403 04f0 19       		.uleb128 0x19
 2404 04f1 01       		.byte	0x1
 2405 04f2 50       		.byte	0x50
 2406 04f3 02       		.byte	0x2
 2407 04f4 74       		.byte	0x74
 2408 04f5 24       		.sleb128 36
 2409 04f6 00       		.byte	0
 2410 04f7 16       		.uleb128 0x16
 2411 04f8 BE000000 		.4byte	.LVL26
 2412 04fc EC130000 		.4byte	0x13ec
 2413 0500 00       		.byte	0
 2414 0501 1A       		.uleb128 0x1a
 2415 0502 D0000000 		.4byte	.LBB24
 2416 0506 F8000000 		.4byte	.LBE24
 2417 050a 3C050000 		.4byte	0x53c
 2418 050e 15       		.uleb128 0x15
 2419 050f 2B080000 		.4byte	.LASF52
 2420 0513 01       		.byte	0x1
 2421 0514 5D07     		.2byte	0x75d
 2422 0516 AE000000 		.4byte	0xae
 2423 051a C9020000 		.4byte	.LLST12
 2424 051e 1B       		.uleb128 0x1b
 2425 051f E8000000 		.4byte	.LVL33
 2426 0523 C3130000 		.4byte	0x13c3
 2427 0527 32050000 		.4byte	0x532
 2428 052b 19       		.uleb128 0x19
 2429 052c 01       		.byte	0x1
 2430 052d 50       		.byte	0x50
 2431 052e 02       		.byte	0x2
 2432 052f 74       		.byte	0x74
 2433 0530 10       		.sleb128 16
 2434 0531 00       		.byte	0
 2435 0532 16       		.uleb128 0x16
 2436 0533 EE000000 		.4byte	.LVL34
 2437 0537 EC130000 		.4byte	0x13ec
 2438 053b 00       		.byte	0
 2439 053c 16       		.uleb128 0x16
 2440 053d A0000000 		.4byte	.LVL23
 2441 0541 F7130000 		.4byte	0x13f7
 2442 0545 16       		.uleb128 0x16
 2443 0546 CC000000 		.4byte	.LVL29
 2444 054a 01140000 		.4byte	0x1401
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 88


 2445 054e 16       		.uleb128 0x16
 2446 054f D0000000 		.4byte	.LVL30
 2447 0553 F7130000 		.4byte	0x13f7
 2448 0557 1C       		.uleb128 0x1c
 2449 0558 00010000 		.4byte	.LVL38
 2450 055c 01       		.byte	0x1
 2451 055d 01140000 		.4byte	0x1401
 2452 0561 00       		.byte	0
 2453 0562 1D       		.uleb128 0x1d
 2454 0563 01       		.byte	0x1
 2455 0564 C7070000 		.4byte	.LASF74
 2456 0568 01       		.byte	0x1
 2457 0569 1701     		.2byte	0x117
 2458 056b 01       		.byte	0x1
 2459 056c CF000000 		.4byte	0xcf
 2460 0570 00010000 		.4byte	.LFB5
 2461 0574 6C010000 		.4byte	.LFE5
 2462 0578 F4020000 		.4byte	.LLST13
 2463 057c 01       		.byte	0x1
 2464 057d 00060000 		.4byte	0x600
 2465 0581 14       		.uleb128 0x14
 2466 0582 DA010000 		.4byte	.LASF72
 2467 0586 01       		.byte	0x1
 2468 0587 1701     		.2byte	0x117
 2469 0589 23020000 		.4byte	0x223
 2470 058d 14030000 		.4byte	.LLST14
 2471 0591 14       		.uleb128 0x14
 2472 0592 AF040000 		.4byte	.LASF73
 2473 0596 01       		.byte	0x1
 2474 0597 1701     		.2byte	0x117
 2475 0599 CF000000 		.4byte	0xcf
 2476 059d 40030000 		.4byte	.LLST15
 2477 05a1 15       		.uleb128 0x15
 2478 05a2 28060000 		.4byte	.LASF65
 2479 05a6 01       		.byte	0x1
 2480 05a7 1901     		.2byte	0x119
 2481 05a9 40040000 		.4byte	0x440
 2482 05ad 6C030000 		.4byte	.LLST16
 2483 05b1 16       		.uleb128 0x16
 2484 05b2 0A010000 		.4byte	.LVL41
 2485 05b6 F7130000 		.4byte	0x13f7
 2486 05ba 1B       		.uleb128 0x1b
 2487 05bb 3A010000 		.4byte	.LVL42
 2488 05bf C3130000 		.4byte	0x13c3
 2489 05c3 CE050000 		.4byte	0x5ce
 2490 05c7 19       		.uleb128 0x19
 2491 05c8 01       		.byte	0x1
 2492 05c9 50       		.byte	0x50
 2493 05ca 02       		.byte	0x2
 2494 05cb 74       		.byte	0x74
 2495 05cc 10       		.sleb128 16
 2496 05cd 00       		.byte	0
 2497 05ce 1B       		.uleb128 0x1b
 2498 05cf 56010000 		.4byte	.LVL43
 2499 05d3 0B140000 		.4byte	0x140b
 2500 05d7 E2050000 		.4byte	0x5e2
 2501 05db 19       		.uleb128 0x19
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 89


 2502 05dc 01       		.byte	0x1
 2503 05dd 50       		.byte	0x50
 2504 05de 02       		.byte	0x2
 2505 05df 74       		.byte	0x74
 2506 05e0 10       		.sleb128 16
 2507 05e1 00       		.byte	0
 2508 05e2 1B       		.uleb128 0x1b
 2509 05e3 5E010000 		.4byte	.LVL44
 2510 05e7 0B140000 		.4byte	0x140b
 2511 05eb F6050000 		.4byte	0x5f6
 2512 05ef 19       		.uleb128 0x19
 2513 05f0 01       		.byte	0x1
 2514 05f1 50       		.byte	0x50
 2515 05f2 02       		.byte	0x2
 2516 05f3 74       		.byte	0x74
 2517 05f4 24       		.sleb128 36
 2518 05f5 00       		.byte	0
 2519 05f6 16       		.uleb128 0x16
 2520 05f7 62010000 		.4byte	.LVL45
 2521 05fb 01140000 		.4byte	0x1401
 2522 05ff 00       		.byte	0
 2523 0600 1D       		.uleb128 0x1d
 2524 0601 01       		.byte	0x1
 2525 0602 1C040000 		.4byte	.LASF75
 2526 0606 01       		.byte	0x1
 2527 0607 8201     		.2byte	0x182
 2528 0609 01       		.byte	0x1
 2529 060a 23020000 		.4byte	0x223
 2530 060e 6C010000 		.4byte	.LFB6
 2531 0612 A0010000 		.4byte	.LFE6
 2532 0616 98030000 		.4byte	.LLST17
 2533 061a 01       		.byte	0x1
 2534 061b E0060000 		.4byte	0x6e0
 2535 061f 14       		.uleb128 0x14
 2536 0620 3F050000 		.4byte	.LASF56
 2537 0624 01       		.byte	0x1
 2538 0625 8201     		.2byte	0x182
 2539 0627 63030000 		.4byte	0x363
 2540 062b B8030000 		.4byte	.LLST18
 2541 062f 14       		.uleb128 0x14
 2542 0630 46030000 		.4byte	.LASF51
 2543 0634 01       		.byte	0x1
 2544 0635 8201     		.2byte	0x182
 2545 0637 63030000 		.4byte	0x363
 2546 063b EC030000 		.4byte	.LLST19
 2547 063f 14       		.uleb128 0x14
 2548 0640 01050000 		.4byte	.LASF58
 2549 0644 01       		.byte	0x1
 2550 0645 8201     		.2byte	0x182
 2551 0647 68030000 		.4byte	0x368
 2552 064b 0A040000 		.4byte	.LLST20
 2553 064f 15       		.uleb128 0x15
 2554 0650 A4000000 		.4byte	.LASF59
 2555 0654 01       		.byte	0x1
 2556 0655 8401     		.2byte	0x184
 2557 0657 6D030000 		.4byte	0x36d
 2558 065b 2B040000 		.4byte	.LLST21
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 90


 2559 065f 15       		.uleb128 0x15
 2560 0660 99050000 		.4byte	.LASF76
 2561 0664 01       		.byte	0x1
 2562 0665 8501     		.2byte	0x185
 2563 0667 25000000 		.4byte	0x25
 2564 066b 49040000 		.4byte	.LLST22
 2565 066f 15       		.uleb128 0x15
 2566 0670 81040000 		.4byte	.LASF57
 2567 0674 01       		.byte	0x1
 2568 0675 8601     		.2byte	0x186
 2569 0677 F0000000 		.4byte	0xf0
 2570 067b 75040000 		.4byte	.LLST23
 2571 067f 1E       		.uleb128 0x1e
 2572 0680 18030000 		.4byte	0x318
 2573 0684 84010000 		.4byte	.LBB27
 2574 0688 00000000 		.4byte	.Ldebug_ranges0+0
 2575 068c 01       		.byte	0x1
 2576 068d A701     		.2byte	0x1a7
 2577 068f D6060000 		.4byte	0x6d6
 2578 0693 1F       		.uleb128 0x1f
 2579 0694 4A030000 		.4byte	0x34a
 2580 0698 96040000 		.4byte	.LLST24
 2581 069c 1F       		.uleb128 0x1f
 2582 069d 56030000 		.4byte	0x356
 2583 06a1 AC040000 		.4byte	.LLST25
 2584 06a5 1F       		.uleb128 0x1f
 2585 06a6 3E030000 		.4byte	0x33e
 2586 06aa 75040000 		.4byte	.LLST23
 2587 06ae 1F       		.uleb128 0x1f
 2588 06af 32030000 		.4byte	0x332
 2589 06b3 CA040000 		.4byte	.LLST27
 2590 06b7 1F       		.uleb128 0x1f
 2591 06b8 26030000 		.4byte	0x326
 2592 06bc F4040000 		.4byte	.LLST28
 2593 06c0 20       		.uleb128 0x20
 2594 06c1 9C010000 		.4byte	.LVL59
 2595 06c5 62050000 		.4byte	0x562
 2596 06c9 19       		.uleb128 0x19
 2597 06ca 01       		.byte	0x1
 2598 06cb 51       		.byte	0x51
 2599 06cc 01       		.byte	0x1
 2600 06cd 31       		.byte	0x31
 2601 06ce 19       		.uleb128 0x19
 2602 06cf 01       		.byte	0x1
 2603 06d0 50       		.byte	0x50
 2604 06d1 02       		.byte	0x2
 2605 06d2 74       		.byte	0x74
 2606 06d3 00       		.sleb128 0
 2607 06d4 00       		.byte	0
 2608 06d5 00       		.byte	0
 2609 06d6 16       		.uleb128 0x16
 2610 06d7 80010000 		.4byte	.LVL52
 2611 06db 2B140000 		.4byte	0x142b
 2612 06df 00       		.byte	0
 2613 06e0 1D       		.uleb128 0x1d
 2614 06e1 01       		.byte	0x1
 2615 06e2 4C080000 		.4byte	.LASF77
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 91


 2616 06e6 01       		.byte	0x1
 2617 06e7 B902     		.2byte	0x2b9
 2618 06e9 01       		.byte	0x1
 2619 06ea 23020000 		.4byte	0x223
 2620 06ee A0010000 		.4byte	.LFB12
 2621 06f2 B2010000 		.4byte	.LFE12
 2622 06f6 07050000 		.4byte	.LLST29
 2623 06fa 01       		.byte	0x1
 2624 06fb 49070000 		.4byte	0x749
 2625 06ff 14       		.uleb128 0x14
 2626 0700 B9040000 		.4byte	.LASF78
 2627 0704 01       		.byte	0x1
 2628 0705 B902     		.2byte	0x2b9
 2629 0707 63030000 		.4byte	0x363
 2630 070b 27050000 		.4byte	.LLST30
 2631 070f 14       		.uleb128 0x14
 2632 0710 51030000 		.4byte	.LASF79
 2633 0714 01       		.byte	0x1
 2634 0715 B902     		.2byte	0x2b9
 2635 0717 63030000 		.4byte	0x363
 2636 071b 48050000 		.4byte	.LLST31
 2637 071f 21       		.uleb128 0x21
 2638 0720 A6020000 		.4byte	.LASF80
 2639 0724 01       		.byte	0x1
 2640 0725 BB02     		.2byte	0x2bb
 2641 0727 23020000 		.4byte	0x223
 2642 072b 01       		.byte	0x1
 2643 072c 50       		.byte	0x50
 2644 072d 20       		.uleb128 0x20
 2645 072e AC010000 		.4byte	.LVL62
 2646 0732 00060000 		.4byte	0x600
 2647 0736 19       		.uleb128 0x19
 2648 0737 01       		.byte	0x1
 2649 0738 52       		.byte	0x52
 2650 0739 01       		.byte	0x1
 2651 073a 32       		.byte	0x32
 2652 073b 19       		.uleb128 0x19
 2653 073c 01       		.byte	0x1
 2654 073d 51       		.byte	0x51
 2655 073e 01       		.byte	0x1
 2656 073f 30       		.byte	0x30
 2657 0740 19       		.uleb128 0x19
 2658 0741 01       		.byte	0x1
 2659 0742 50       		.byte	0x50
 2660 0743 03       		.byte	0x3
 2661 0744 F3       		.byte	0xf3
 2662 0745 01       		.uleb128 0x1
 2663 0746 50       		.byte	0x50
 2664 0747 00       		.byte	0
 2665 0748 00       		.byte	0
 2666 0749 22       		.uleb128 0x22
 2667 074a 96030000 		.4byte	.LASF82
 2668 074e 01       		.byte	0x1
 2669 074f A107     		.2byte	0x7a1
 2670 0751 01       		.byte	0x1
 2671 0752 CF000000 		.4byte	0xcf
 2672 0756 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 92


 2673 0757 74070000 		.4byte	0x774
 2674 075b 0F       		.uleb128 0xf
 2675 075c 28060000 		.4byte	.LASF65
 2676 0760 01       		.byte	0x1
 2677 0761 A107     		.2byte	0x7a1
 2678 0763 74070000 		.4byte	0x774
 2679 0767 23       		.uleb128 0x23
 2680 0768 B4060000 		.4byte	.LASF68
 2681 076c 01       		.byte	0x1
 2682 076d A307     		.2byte	0x7a3
 2683 076f CF000000 		.4byte	0xcf
 2684 0773 00       		.byte	0
 2685 0774 06       		.uleb128 0x6
 2686 0775 04       		.byte	0x4
 2687 0776 7A070000 		.4byte	0x77a
 2688 077a 10       		.uleb128 0x10
 2689 077b 0D030000 		.4byte	0x30d
 2690 077f 1D       		.uleb128 0x1d
 2691 0780 01       		.byte	0x1
 2692 0781 00030000 		.4byte	.LASF83
 2693 0785 01       		.byte	0x1
 2694 0786 D302     		.2byte	0x2d3
 2695 0788 01       		.byte	0x1
 2696 0789 CF000000 		.4byte	0xcf
 2697 078d B2010000 		.4byte	.LFB13
 2698 0791 A8020000 		.4byte	.LFE13
 2699 0795 66050000 		.4byte	.LLST32
 2700 0799 01       		.byte	0x1
 2701 079a 6D090000 		.4byte	0x96d
 2702 079e 14       		.uleb128 0x14
 2703 079f DA010000 		.4byte	.LASF72
 2704 07a3 01       		.byte	0x1
 2705 07a4 D302     		.2byte	0x2d3
 2706 07a6 23020000 		.4byte	0x223
 2707 07aa 92050000 		.4byte	.LLST33
 2708 07ae 14       		.uleb128 0x14
 2709 07af BA050000 		.4byte	.LASF66
 2710 07b3 01       		.byte	0x1
 2711 07b4 D302     		.2byte	0x2d3
 2712 07b6 6D090000 		.4byte	0x96d
 2713 07ba BE050000 		.4byte	.LLST34
 2714 07be 14       		.uleb128 0x14
 2715 07bf 69070000 		.4byte	.LASF84
 2716 07c3 01       		.byte	0x1
 2717 07c4 D302     		.2byte	0x2d3
 2718 07c6 E5000000 		.4byte	0xe5
 2719 07ca EA050000 		.4byte	.LLST35
 2720 07ce 14       		.uleb128 0x14
 2721 07cf 41010000 		.4byte	.LASF85
 2722 07d3 01       		.byte	0x1
 2723 07d4 D302     		.2byte	0x2d3
 2724 07d6 45040000 		.4byte	0x445
 2725 07da 2D060000 		.4byte	.LLST36
 2726 07de 15       		.uleb128 0x15
 2727 07df 88020000 		.4byte	.LASF86
 2728 07e3 01       		.byte	0x1
 2729 07e4 D502     		.2byte	0x2d5
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 93


 2730 07e6 CF000000 		.4byte	0xcf
 2731 07ea 59060000 		.4byte	.LLST37
 2732 07ee 15       		.uleb128 0x15
 2733 07ef B9010000 		.4byte	.LASF87
 2734 07f3 01       		.byte	0x1
 2735 07f4 D502     		.2byte	0x2d5
 2736 07f6 CF000000 		.4byte	0xcf
 2737 07fa 84060000 		.4byte	.LLST38
 2738 07fe 21       		.uleb128 0x21
 2739 07ff 9D020000 		.4byte	.LASF88
 2740 0803 01       		.byte	0x1
 2741 0804 D602     		.2byte	0x2d6
 2742 0806 18020000 		.4byte	0x218
 2743 080a 02       		.byte	0x2
 2744 080b 91       		.byte	0x91
 2745 080c 60       		.sleb128 -32
 2746 080d 15       		.uleb128 0x15
 2747 080e 28060000 		.4byte	.LASF65
 2748 0812 01       		.byte	0x1
 2749 0813 D702     		.2byte	0x2d7
 2750 0815 40040000 		.4byte	0x440
 2751 0819 97060000 		.4byte	.LLST39
 2752 081d 24       		.uleb128 0x24
 2753 081e 49070000 		.4byte	0x749
 2754 0822 48020000 		.4byte	.LBB33
 2755 0826 54020000 		.4byte	.LBE33
 2756 082a 01       		.byte	0x1
 2757 082b 6F03     		.2byte	0x36f
 2758 082d 60080000 		.4byte	0x860
 2759 0831 1F       		.uleb128 0x1f
 2760 0832 5B070000 		.4byte	0x75b
 2761 0836 C3060000 		.4byte	.LLST40
 2762 083a 25       		.uleb128 0x25
 2763 083b 48020000 		.4byte	.LBB34
 2764 083f 54020000 		.4byte	.LBE34
 2765 0843 26       		.uleb128 0x26
 2766 0844 67070000 		.4byte	0x767
 2767 0848 D6060000 		.4byte	.LLST41
 2768 084c 16       		.uleb128 0x16
 2769 084d 4C020000 		.4byte	.LVL80
 2770 0851 F7130000 		.4byte	0x13f7
 2771 0855 16       		.uleb128 0x16
 2772 0856 54020000 		.4byte	.LVL82
 2773 085a 01140000 		.4byte	0x1401
 2774 085e 00       		.byte	0
 2775 085f 00       		.byte	0
 2776 0860 16       		.uleb128 0x16
 2777 0861 C4010000 		.4byte	.LVL66
 2778 0865 F7130000 		.4byte	0x13f7
 2779 0869 1B       		.uleb128 0x1b
 2780 086a DA010000 		.4byte	.LVL67
 2781 086e B6030000 		.4byte	0x3b6
 2782 0872 89080000 		.4byte	0x889
 2783 0876 19       		.uleb128 0x19
 2784 0877 01       		.byte	0x1
 2785 0878 52       		.byte	0x52
 2786 0879 02       		.byte	0x2
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 94


 2787 087a 76       		.byte	0x76
 2788 087b 00       		.sleb128 0
 2789 087c 19       		.uleb128 0x19
 2790 087d 01       		.byte	0x1
 2791 087e 51       		.byte	0x51
 2792 087f 02       		.byte	0x2
 2793 0880 78       		.byte	0x78
 2794 0881 00       		.sleb128 0
 2795 0882 19       		.uleb128 0x19
 2796 0883 01       		.byte	0x1
 2797 0884 50       		.byte	0x50
 2798 0885 02       		.byte	0x2
 2799 0886 74       		.byte	0x74
 2800 0887 00       		.sleb128 0
 2801 0888 00       		.byte	0
 2802 0889 1B       		.uleb128 0x1b
 2803 088a E6010000 		.4byte	.LVL69
 2804 088e C3130000 		.4byte	0x13c3
 2805 0892 9D080000 		.4byte	0x89d
 2806 0896 19       		.uleb128 0x19
 2807 0897 01       		.byte	0x1
 2808 0898 50       		.byte	0x50
 2809 0899 02       		.byte	0x2
 2810 089a 74       		.byte	0x74
 2811 089b 24       		.sleb128 36
 2812 089c 00       		.byte	0
 2813 089d 16       		.uleb128 0x16
 2814 089e FC010000 		.4byte	.LVL70
 2815 08a2 01140000 		.4byte	0x1401
 2816 08a6 16       		.uleb128 0x16
 2817 08a7 08020000 		.4byte	.LVL71
 2818 08ab 01140000 		.4byte	0x1401
 2819 08af 1B       		.uleb128 0x1b
 2820 08b0 12020000 		.4byte	.LVL72
 2821 08b4 43140000 		.4byte	0x1443
 2822 08b8 C3080000 		.4byte	0x8c3
 2823 08bc 19       		.uleb128 0x19
 2824 08bd 01       		.byte	0x1
 2825 08be 50       		.byte	0x50
 2826 08bf 02       		.byte	0x2
 2827 08c0 91       		.byte	0x91
 2828 08c1 60       		.sleb128 -32
 2829 08c2 00       		.byte	0
 2830 08c3 16       		.uleb128 0x16
 2831 08c4 16020000 		.4byte	.LVL73
 2832 08c8 01140000 		.4byte	0x1401
 2833 08cc 16       		.uleb128 0x16
 2834 08cd 1A020000 		.4byte	.LVL74
 2835 08d1 63140000 		.4byte	0x1463
 2836 08d5 16       		.uleb128 0x16
 2837 08d6 1E020000 		.4byte	.LVL75
 2838 08da F7130000 		.4byte	0x13f7
 2839 08de 16       		.uleb128 0x16
 2840 08df 3E020000 		.4byte	.LVL76
 2841 08e3 01140000 		.4byte	0x1401
 2842 08e7 1B       		.uleb128 0x1b
 2843 08e8 46020000 		.4byte	.LVL78
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 95


 2844 08ec 6E140000 		.4byte	0x146e
 2845 08f0 01090000 		.4byte	0x901
 2846 08f4 19       		.uleb128 0x19
 2847 08f5 01       		.byte	0x1
 2848 08f6 51       		.byte	0x51
 2849 08f7 02       		.byte	0x2
 2850 08f8 91       		.byte	0x91
 2851 08f9 5C       		.sleb128 -36
 2852 08fa 19       		.uleb128 0x19
 2853 08fb 01       		.byte	0x1
 2854 08fc 50       		.byte	0x50
 2855 08fd 02       		.byte	0x2
 2856 08fe 91       		.byte	0x91
 2857 08ff 60       		.sleb128 -32
 2858 0900 00       		.byte	0
 2859 0901 1B       		.uleb128 0x1b
 2860 0902 62020000 		.4byte	.LVL83
 2861 0906 97140000 		.4byte	0x1497
 2862 090a 15090000 		.4byte	0x915
 2863 090e 19       		.uleb128 0x19
 2864 090f 01       		.byte	0x1
 2865 0910 50       		.byte	0x50
 2866 0911 02       		.byte	0x2
 2867 0912 74       		.byte	0x74
 2868 0913 10       		.sleb128 16
 2869 0914 00       		.byte	0
 2870 0915 1B       		.uleb128 0x1b
 2871 0916 68020000 		.4byte	.LVL84
 2872 091a 9C040000 		.4byte	0x49c
 2873 091e 29090000 		.4byte	0x929
 2874 0922 19       		.uleb128 0x19
 2875 0923 01       		.byte	0x1
 2876 0924 50       		.byte	0x50
 2877 0925 02       		.byte	0x2
 2878 0926 74       		.byte	0x74
 2879 0927 00       		.sleb128 0
 2880 0928 00       		.byte	0
 2881 0929 16       		.uleb128 0x16
 2882 092a 6C020000 		.4byte	.LVL85
 2883 092e B6140000 		.4byte	0x14b6
 2884 0932 1B       		.uleb128 0x1b
 2885 0933 8A020000 		.4byte	.LVL89
 2886 0937 9C040000 		.4byte	0x49c
 2887 093b 46090000 		.4byte	0x946
 2888 093f 19       		.uleb128 0x19
 2889 0940 01       		.byte	0x1
 2890 0941 50       		.byte	0x50
 2891 0942 02       		.byte	0x2
 2892 0943 74       		.byte	0x74
 2893 0944 00       		.sleb128 0
 2894 0945 00       		.byte	0
 2895 0946 16       		.uleb128 0x16
 2896 0947 8E020000 		.4byte	.LVL90
 2897 094b B6140000 		.4byte	0x14b6
 2898 094f 1B       		.uleb128 0x1b
 2899 0950 96020000 		.4byte	.LVL92
 2900 0954 9C040000 		.4byte	0x49c
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 96


 2901 0958 63090000 		.4byte	0x963
 2902 095c 19       		.uleb128 0x19
 2903 095d 01       		.byte	0x1
 2904 095e 50       		.byte	0x50
 2905 095f 02       		.byte	0x2
 2906 0960 74       		.byte	0x74
 2907 0961 00       		.sleb128 0
 2908 0962 00       		.byte	0
 2909 0963 16       		.uleb128 0x16
 2910 0964 9A020000 		.4byte	.LVL93
 2911 0968 B6140000 		.4byte	0x14b6
 2912 096c 00       		.byte	0
 2913 096d 10       		.uleb128 0x10
 2914 096e A7000000 		.4byte	0xa7
 2915 0972 0E       		.uleb128 0xe
 2916 0973 63040000 		.4byte	.LASF89
 2917 0977 01       		.byte	0x1
 2918 0978 DC01     		.2byte	0x1dc
 2919 097a 01       		.byte	0x1
 2920 097b 01       		.byte	0x1
 2921 097c 8D090000 		.4byte	0x98d
 2922 0980 0F       		.uleb128 0xf
 2923 0981 A4000000 		.4byte	.LASF59
 2924 0985 01       		.byte	0x1
 2925 0986 DC01     		.2byte	0x1dc
 2926 0988 6D030000 		.4byte	0x36d
 2927 098c 00       		.byte	0
 2928 098d 1D       		.uleb128 0x1d
 2929 098e 01       		.byte	0x1
 2930 098f 30040000 		.4byte	.LASF90
 2931 0993 01       		.byte	0x1
 2932 0994 FA01     		.2byte	0x1fa
 2933 0996 01       		.byte	0x1
 2934 0997 23020000 		.4byte	0x223
 2935 099b A8020000 		.4byte	.LFB9
 2936 099f CC020000 		.4byte	.LFE9
 2937 09a3 10070000 		.4byte	.LLST42
 2938 09a7 01       		.byte	0x1
 2939 09a8 380A0000 		.4byte	0xa38
 2940 09ac 14       		.uleb128 0x14
 2941 09ad 01050000 		.4byte	.LASF58
 2942 09b1 01       		.byte	0x1
 2943 09b2 FA01     		.2byte	0x1fa
 2944 09b4 68030000 		.4byte	0x368
 2945 09b8 30070000 		.4byte	.LLST43
 2946 09bc 15       		.uleb128 0x15
 2947 09bd A4000000 		.4byte	.LASF59
 2948 09c1 01       		.byte	0x1
 2949 09c2 FC01     		.2byte	0x1fc
 2950 09c4 6D030000 		.4byte	0x36d
 2951 09c8 51070000 		.4byte	.LLST44
 2952 09cc 27       		.uleb128 0x27
 2953 09cd 78030000 		.4byte	.LASF91
 2954 09d1 01       		.byte	0x1
 2955 09d2 FD01     		.2byte	0x1fd
 2956 09d4 63030000 		.4byte	0x363
 2957 09d8 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 97


 2958 09d9 27       		.uleb128 0x27
 2959 09da AD010000 		.4byte	.LASF92
 2960 09de 01       		.byte	0x1
 2961 09df FD01     		.2byte	0x1fd
 2962 09e1 63030000 		.4byte	0x363
 2963 09e5 00       		.byte	0
 2964 09e6 24       		.uleb128 0x24
 2965 09e7 72090000 		.4byte	0x972
 2966 09eb B4020000 		.4byte	.LBB37
 2967 09ef C8020000 		.4byte	.LBE37
 2968 09f3 01       		.byte	0x1
 2969 09f4 0002     		.2byte	0x200
 2970 09f6 230A0000 		.4byte	0xa23
 2971 09fa 1F       		.uleb128 0x1f
 2972 09fb 80090000 		.4byte	0x980
 2973 09ff 51070000 		.4byte	.LLST44
 2974 0a03 20       		.uleb128 0x20
 2975 0a04 C8020000 		.4byte	.LVL98
 2976 0a08 7F070000 		.4byte	0x77f
 2977 0a0c 19       		.uleb128 0x19
 2978 0a0d 01       		.byte	0x1
 2979 0a0e 53       		.byte	0x53
 2980 0a0f 01       		.byte	0x1
 2981 0a10 30       		.byte	0x30
 2982 0a11 19       		.uleb128 0x19
 2983 0a12 01       		.byte	0x1
 2984 0a13 52       		.byte	0x52
 2985 0a14 01       		.byte	0x1
 2986 0a15 30       		.byte	0x30
 2987 0a16 19       		.uleb128 0x19
 2988 0a17 01       		.byte	0x1
 2989 0a18 51       		.byte	0x51
 2990 0a19 01       		.byte	0x1
 2991 0a1a 30       		.byte	0x30
 2992 0a1b 19       		.uleb128 0x19
 2993 0a1c 01       		.byte	0x1
 2994 0a1d 50       		.byte	0x50
 2995 0a1e 02       		.byte	0x2
 2996 0a1f 74       		.byte	0x74
 2997 0a20 00       		.sleb128 0
 2998 0a21 00       		.byte	0
 2999 0a22 00       		.byte	0
 3000 0a23 20       		.uleb128 0x20
 3001 0a24 B4020000 		.4byte	.LVL97
 3002 0a28 00060000 		.4byte	0x600
 3003 0a2c 19       		.uleb128 0x19
 3004 0a2d 01       		.byte	0x1
 3005 0a2e 51       		.byte	0x51
 3006 0a2f 01       		.byte	0x1
 3007 0a30 30       		.byte	0x30
 3008 0a31 19       		.uleb128 0x19
 3009 0a32 01       		.byte	0x1
 3010 0a33 50       		.byte	0x50
 3011 0a34 01       		.byte	0x1
 3012 0a35 31       		.byte	0x31
 3013 0a36 00       		.byte	0
 3014 0a37 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 98


 3015 0a38 1D       		.uleb128 0x1d
 3016 0a39 01       		.byte	0x1
 3017 0a3a 9F070000 		.4byte	.LASF93
 3018 0a3e 01       		.byte	0x1
 3019 0a3f 3C02     		.2byte	0x23c
 3020 0a41 01       		.byte	0x1
 3021 0a42 CF000000 		.4byte	0xcf
 3022 0a46 CC020000 		.4byte	.LFB10
 3023 0a4a F6020000 		.4byte	.LFE10
 3024 0a4e 6F070000 		.4byte	.LLST46
 3025 0a52 01       		.byte	0x1
 3026 0a53 9F0A0000 		.4byte	0xa9f
 3027 0a57 14       		.uleb128 0x14
 3028 0a58 91040000 		.4byte	.LASF94
 3029 0a5c 01       		.byte	0x1
 3030 0a5d 3C02     		.2byte	0x23c
 3031 0a5f 23020000 		.4byte	0x223
 3032 0a63 8F070000 		.4byte	.LLST47
 3033 0a67 21       		.uleb128 0x21
 3034 0a68 B4060000 		.4byte	.LASF68
 3035 0a6c 01       		.byte	0x1
 3036 0a6d 3E02     		.2byte	0x23e
 3037 0a6f CF000000 		.4byte	0xcf
 3038 0a73 01       		.byte	0x1
 3039 0a74 50       		.byte	0x50
 3040 0a75 15       		.uleb128 0x15
 3041 0a76 68000000 		.4byte	.LASF95
 3042 0a7a 01       		.byte	0x1
 3043 0a7b 3F02     		.2byte	0x23f
 3044 0a7d 40040000 		.4byte	0x440
 3045 0a81 8F070000 		.4byte	.LLST47
 3046 0a85 16       		.uleb128 0x16
 3047 0a86 D6020000 		.4byte	.LVL100
 3048 0a8a C5140000 		.4byte	0x14c5
 3049 0a8e 20       		.uleb128 0x20
 3050 0a8f EC020000 		.4byte	.LVL101
 3051 0a93 7F070000 		.4byte	0x77f
 3052 0a97 19       		.uleb128 0x19
 3053 0a98 01       		.byte	0x1
 3054 0a99 50       		.byte	0x50
 3055 0a9a 02       		.byte	0x2
 3056 0a9b 74       		.byte	0x74
 3057 0a9c 00       		.sleb128 0
 3058 0a9d 00       		.byte	0
 3059 0a9e 00       		.byte	0
 3060 0a9f 1D       		.uleb128 0x1d
 3061 0aa0 01       		.byte	0x1
 3062 0aa1 C4020000 		.4byte	.LASF96
 3063 0aa5 01       		.byte	0x1
 3064 0aa6 9903     		.2byte	0x399
 3065 0aa8 01       		.byte	0x1
 3066 0aa9 CF000000 		.4byte	0xcf
 3067 0aad F6020000 		.4byte	.LFB14
 3068 0ab1 58030000 		.4byte	.LFE14
 3069 0ab5 AD070000 		.4byte	.LLST49
 3070 0ab9 01       		.byte	0x1
 3071 0aba B50B0000 		.4byte	0xbb5
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 99


 3072 0abe 14       		.uleb128 0x14
 3073 0abf DA010000 		.4byte	.LASF72
 3074 0ac3 01       		.byte	0x1
 3075 0ac4 9903     		.2byte	0x399
 3076 0ac6 23020000 		.4byte	0x223
 3077 0aca CD070000 		.4byte	.LLST50
 3078 0ace 14       		.uleb128 0x14
 3079 0acf BA050000 		.4byte	.LASF66
 3080 0ad3 01       		.byte	0x1
 3081 0ad4 9903     		.2byte	0x399
 3082 0ad6 6D090000 		.4byte	0x96d
 3083 0ada EB070000 		.4byte	.LLST51
 3084 0ade 14       		.uleb128 0x14
 3085 0adf 4E000000 		.4byte	.LASF97
 3086 0ae3 01       		.byte	0x1
 3087 0ae4 9903     		.2byte	0x399
 3088 0ae6 B50B0000 		.4byte	0xbb5
 3089 0aea 25080000 		.4byte	.LLST52
 3090 0aee 14       		.uleb128 0x14
 3091 0aef 41010000 		.4byte	.LASF85
 3092 0af3 01       		.byte	0x1
 3093 0af4 9903     		.2byte	0x399
 3094 0af6 45040000 		.4byte	0x445
 3095 0afa 43080000 		.4byte	.LLST53
 3096 0afe 21       		.uleb128 0x21
 3097 0aff B4060000 		.4byte	.LASF68
 3098 0b03 01       		.byte	0x1
 3099 0b04 9B03     		.2byte	0x39b
 3100 0b06 CF000000 		.4byte	0xcf
 3101 0b0a 01       		.byte	0x1
 3102 0b0b 50       		.byte	0x50
 3103 0b0c 23       		.uleb128 0x23
 3104 0b0d 70010000 		.4byte	.LASF98
 3105 0b11 01       		.byte	0x1
 3106 0b12 9C03     		.2byte	0x39c
 3107 0b14 DA000000 		.4byte	0xda
 3108 0b18 15       		.uleb128 0x15
 3109 0b19 28060000 		.4byte	.LASF65
 3110 0b1d 01       		.byte	0x1
 3111 0b1e 9D03     		.2byte	0x39d
 3112 0b20 40040000 		.4byte	0x440
 3113 0b24 CD070000 		.4byte	.LLST50
 3114 0b28 24       		.uleb128 0x24
 3115 0b29 73030000 		.4byte	0x373
 3116 0b2d FC020000 		.4byte	.LBB39
 3117 0b31 10030000 		.4byte	.LBE39
 3118 0b35 01       		.byte	0x1
 3119 0b36 B803     		.2byte	0x3b8
 3120 0b38 530B0000 		.4byte	0xb53
 3121 0b3c 25       		.uleb128 0x25
 3122 0b3d FC020000 		.4byte	.LBB40
 3123 0b41 10030000 		.4byte	.LBE40
 3124 0b45 28       		.uleb128 0x28
 3125 0b46 84030000 		.4byte	0x384
 3126 0b4a 01       		.byte	0x1
 3127 0b4b 56       		.byte	0x56
 3128 0b4c 29       		.uleb128 0x29
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 100


 3129 0b4d 8F030000 		.4byte	0x38f
 3130 0b51 00       		.byte	0
 3131 0b52 00       		.byte	0
 3132 0b53 1A       		.uleb128 0x1a
 3133 0b54 1C030000 		.4byte	.LBB41
 3134 0b58 50030000 		.4byte	.LBE41
 3135 0b5c 9C0B0000 		.4byte	0xb9c
 3136 0b60 15       		.uleb128 0x15
 3137 0b61 FA000000 		.4byte	.LASF53
 3138 0b65 01       		.byte	0x1
 3139 0b66 BC03     		.2byte	0x3bc
 3140 0b68 C00B0000 		.4byte	0xbc0
 3141 0b6c 7D080000 		.4byte	.LLST55
 3142 0b70 1B       		.uleb128 0x1b
 3143 0b71 2A030000 		.4byte	.LVL108
 3144 0b75 B6030000 		.4byte	0x3b6
 3145 0b79 8B0B0000 		.4byte	0xb8b
 3146 0b7d 19       		.uleb128 0x19
 3147 0b7e 01       		.byte	0x1
 3148 0b7f 52       		.byte	0x52
 3149 0b80 03       		.byte	0x3
 3150 0b81 F3       		.byte	0xf3
 3151 0b82 01       		.uleb128 0x1
 3152 0b83 53       		.byte	0x53
 3153 0b84 19       		.uleb128 0x19
 3154 0b85 01       		.byte	0x1
 3155 0b86 50       		.byte	0x50
 3156 0b87 02       		.byte	0x2
 3157 0b88 75       		.byte	0x75
 3158 0b89 00       		.sleb128 0
 3159 0b8a 00       		.byte	0
 3160 0b8b 20       		.uleb128 0x20
 3161 0b8c 3A030000 		.4byte	.LVL109
 3162 0b90 C3130000 		.4byte	0x13c3
 3163 0b94 19       		.uleb128 0x19
 3164 0b95 01       		.byte	0x1
 3165 0b96 50       		.byte	0x50
 3166 0b97 02       		.byte	0x2
 3167 0b98 75       		.byte	0x75
 3168 0b99 24       		.sleb128 36
 3169 0b9a 00       		.byte	0
 3170 0b9b 00       		.byte	0
 3171 0b9c 2A       		.uleb128 0x2a
 3172 0b9d 9B030000 		.4byte	0x39b
 3173 0ba1 52030000 		.4byte	.LBB42
 3174 0ba5 56030000 		.4byte	.LBE42
 3175 0ba9 01       		.byte	0x1
 3176 0baa 2A04     		.2byte	0x42a
 3177 0bac 2B       		.uleb128 0x2b
 3178 0bad A9030000 		.4byte	0x3a9
 3179 0bb1 01       		.byte	0x1
 3180 0bb2 56       		.byte	0x56
 3181 0bb3 00       		.byte	0
 3182 0bb4 00       		.byte	0
 3183 0bb5 10       		.uleb128 0x10
 3184 0bb6 BA0B0000 		.4byte	0xbba
 3185 0bba 06       		.uleb128 0x6
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 101


 3186 0bbb 04       		.byte	0x4
 3187 0bbc CF000000 		.4byte	0xcf
 3188 0bc0 10       		.uleb128 0x10
 3189 0bc1 AE000000 		.4byte	0xae
 3190 0bc5 1D       		.uleb128 0x1d
 3191 0bc6 01       		.byte	0x1
 3192 0bc7 BE030000 		.4byte	.LASF99
 3193 0bcb 01       		.byte	0x1
 3194 0bcc 3004     		.2byte	0x430
 3195 0bce 01       		.byte	0x1
 3196 0bcf CF000000 		.4byte	0xcf
 3197 0bd3 58030000 		.4byte	.LFB15
 3198 0bd7 AE030000 		.4byte	.LFE15
 3199 0bdb 9D080000 		.4byte	.LLST56
 3200 0bdf 01       		.byte	0x1
 3201 0be0 BD0C0000 		.4byte	0xcbd
 3202 0be4 14       		.uleb128 0x14
 3203 0be5 DA010000 		.4byte	.LASF72
 3204 0be9 01       		.byte	0x1
 3205 0bea 3004     		.2byte	0x430
 3206 0bec 23020000 		.4byte	0x223
 3207 0bf0 BD080000 		.4byte	.LLST57
 3208 0bf4 14       		.uleb128 0x14
 3209 0bf5 4E000000 		.4byte	.LASF97
 3210 0bf9 01       		.byte	0x1
 3211 0bfa 3004     		.2byte	0x430
 3212 0bfc B50B0000 		.4byte	0xbb5
 3213 0c00 1D090000 		.4byte	.LLST58
 3214 0c04 21       		.uleb128 0x21
 3215 0c05 B4060000 		.4byte	.LASF68
 3216 0c09 01       		.byte	0x1
 3217 0c0a 3204     		.2byte	0x432
 3218 0c0c CF000000 		.4byte	0xcf
 3219 0c10 01       		.byte	0x1
 3220 0c11 50       		.byte	0x50
 3221 0c12 23       		.uleb128 0x23
 3222 0c13 70010000 		.4byte	.LASF98
 3223 0c17 01       		.byte	0x1
 3224 0c18 3304     		.2byte	0x433
 3225 0c1a DA000000 		.4byte	0xda
 3226 0c1e 15       		.uleb128 0x15
 3227 0c1f 28060000 		.4byte	.LASF65
 3228 0c23 01       		.byte	0x1
 3229 0c24 3404     		.2byte	0x434
 3230 0c26 40040000 		.4byte	0x440
 3231 0c2a BD080000 		.4byte	.LLST57
 3232 0c2e 24       		.uleb128 0x24
 3233 0c2f 73030000 		.4byte	0x373
 3234 0c33 5C030000 		.4byte	.LBB44
 3235 0c37 70030000 		.4byte	.LBE44
 3236 0c3b 01       		.byte	0x1
 3237 0c3c 5704     		.2byte	0x457
 3238 0c3e 590C0000 		.4byte	0xc59
 3239 0c42 25       		.uleb128 0x25
 3240 0c43 5C030000 		.4byte	.LBB45
 3241 0c47 70030000 		.4byte	.LBE45
 3242 0c4b 28       		.uleb128 0x28
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 102


 3243 0c4c 84030000 		.4byte	0x384
 3244 0c50 01       		.byte	0x1
 3245 0c51 55       		.byte	0x55
 3246 0c52 29       		.uleb128 0x29
 3247 0c53 8F030000 		.4byte	0x38f
 3248 0c57 00       		.byte	0
 3249 0c58 00       		.byte	0
 3250 0c59 1A       		.uleb128 0x1a
 3251 0c5a 70030000 		.4byte	.LBB46
 3252 0c5e A8030000 		.4byte	.LBE46
 3253 0c62 A40C0000 		.4byte	0xca4
 3254 0c66 15       		.uleb128 0x15
 3255 0c67 59020000 		.4byte	.LASF49
 3256 0c6b 01       		.byte	0x1
 3257 0c6c 5904     		.2byte	0x459
 3258 0c6e 63030000 		.4byte	0x363
 3259 0c72 67090000 		.4byte	.LLST60
 3260 0c76 25       		.uleb128 0x25
 3261 0c77 78030000 		.4byte	.LBB47
 3262 0c7b A6030000 		.4byte	.LBE47
 3263 0c7f 15       		.uleb128 0x15
 3264 0c80 FA000000 		.4byte	.LASF53
 3265 0c84 01       		.byte	0x1
 3266 0c85 6004     		.2byte	0x460
 3267 0c87 C00B0000 		.4byte	0xbc0
 3268 0c8b 9F090000 		.4byte	.LLST61
 3269 0c8f 20       		.uleb128 0x20
 3270 0c90 90030000 		.4byte	.LVL121
 3271 0c94 C3130000 		.4byte	0x13c3
 3272 0c98 19       		.uleb128 0x19
 3273 0c99 01       		.byte	0x1
 3274 0c9a 50       		.byte	0x50
 3275 0c9b 05       		.byte	0x5
 3276 0c9c F3       		.byte	0xf3
 3277 0c9d 01       		.uleb128 0x1
 3278 0c9e 50       		.byte	0x50
 3279 0c9f 23       		.byte	0x23
 3280 0ca0 24       		.uleb128 0x24
 3281 0ca1 00       		.byte	0
 3282 0ca2 00       		.byte	0
 3283 0ca3 00       		.byte	0
 3284 0ca4 2A       		.uleb128 0x2a
 3285 0ca5 9B030000 		.4byte	0x39b
 3286 0ca9 A8030000 		.4byte	.LBB48
 3287 0cad AC030000 		.4byte	.LBE48
 3288 0cb1 01       		.byte	0x1
 3289 0cb2 CF04     		.2byte	0x4cf
 3290 0cb4 2B       		.uleb128 0x2b
 3291 0cb5 A9030000 		.4byte	0x3a9
 3292 0cb9 01       		.byte	0x1
 3293 0cba 55       		.byte	0x55
 3294 0cbb 00       		.byte	0
 3295 0cbc 00       		.byte	0
 3296 0cbd 22       		.uleb128 0x22
 3297 0cbe 35020000 		.4byte	.LASF100
 3298 0cc2 01       		.byte	0x1
 3299 0cc3 7A07     		.2byte	0x77a
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 103


 3300 0cc5 01       		.byte	0x1
 3301 0cc6 CF000000 		.4byte	0xcf
 3302 0cca 01       		.byte	0x1
 3303 0ccb E80C0000 		.4byte	0xce8
 3304 0ccf 0F       		.uleb128 0xf
 3305 0cd0 28060000 		.4byte	.LASF65
 3306 0cd4 01       		.byte	0x1
 3307 0cd5 7A07     		.2byte	0x77a
 3308 0cd7 74070000 		.4byte	0x774
 3309 0cdb 23       		.uleb128 0x23
 3310 0cdc B4060000 		.4byte	.LASF68
 3311 0ce0 01       		.byte	0x1
 3312 0ce1 7C07     		.2byte	0x77c
 3313 0ce3 CF000000 		.4byte	0xcf
 3314 0ce7 00       		.byte	0
 3315 0ce8 1D       		.uleb128 0x1d
 3316 0ce9 01       		.byte	0x1
 3317 0cea F1010000 		.4byte	.LASF101
 3318 0cee 01       		.byte	0x1
 3319 0cef D504     		.2byte	0x4d5
 3320 0cf1 01       		.byte	0x1
 3321 0cf2 CF000000 		.4byte	0xcf
 3322 0cf6 AE030000 		.4byte	.LFB16
 3323 0cfa D8040000 		.4byte	.LFE16
 3324 0cfe CA090000 		.4byte	.LLST62
 3325 0d02 01       		.byte	0x1
 3326 0d03 460F0000 		.4byte	0xf46
 3327 0d07 14       		.uleb128 0x14
 3328 0d08 DA010000 		.4byte	.LASF72
 3329 0d0c 01       		.byte	0x1
 3330 0d0d D504     		.2byte	0x4d5
 3331 0d0f 23020000 		.4byte	0x223
 3332 0d13 F6090000 		.4byte	.LLST63
 3333 0d17 14       		.uleb128 0x14
 3334 0d18 45020000 		.4byte	.LASF69
 3335 0d1c 01       		.byte	0x1
 3336 0d1d D504     		.2byte	0x4d5
 3337 0d1f 97040000 		.4byte	0x497
 3338 0d23 220A0000 		.4byte	.LLST64
 3339 0d27 14       		.uleb128 0x14
 3340 0d28 69070000 		.4byte	.LASF84
 3341 0d2c 01       		.byte	0x1
 3342 0d2d D504     		.2byte	0x4d5
 3343 0d2f E5000000 		.4byte	0xe5
 3344 0d33 4E0A0000 		.4byte	.LLST65
 3345 0d37 14       		.uleb128 0x14
 3346 0d38 0D050000 		.4byte	.LASF102
 3347 0d3c 01       		.byte	0x1
 3348 0d3d D504     		.2byte	0x4d5
 3349 0d3f 45040000 		.4byte	0x445
 3350 0d43 910A0000 		.4byte	.LLST66
 3351 0d47 15       		.uleb128 0x15
 3352 0d48 88020000 		.4byte	.LASF86
 3353 0d4c 01       		.byte	0x1
 3354 0d4d D704     		.2byte	0x4d7
 3355 0d4f CF000000 		.4byte	0xcf
 3356 0d53 BD0A0000 		.4byte	.LLST67
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 104


 3357 0d57 21       		.uleb128 0x21
 3358 0d58 9D020000 		.4byte	.LASF88
 3359 0d5c 01       		.byte	0x1
 3360 0d5d D804     		.2byte	0x4d8
 3361 0d5f 18020000 		.4byte	0x218
 3362 0d63 02       		.byte	0x2
 3363 0d64 91       		.byte	0x91
 3364 0d65 60       		.sleb128 -32
 3365 0d66 15       		.uleb128 0x15
 3366 0d67 CE040000 		.4byte	.LASF103
 3367 0d6b 01       		.byte	0x1
 3368 0d6c D904     		.2byte	0x4d9
 3369 0d6e 4D020000 		.4byte	0x24d
 3370 0d72 F30A0000 		.4byte	.LLST68
 3371 0d76 15       		.uleb128 0x15
 3372 0d77 28060000 		.4byte	.LASF65
 3373 0d7b 01       		.byte	0x1
 3374 0d7c DA04     		.2byte	0x4da
 3375 0d7e 40040000 		.4byte	0x440
 3376 0d82 060B0000 		.4byte	.LLST69
 3377 0d86 1A       		.uleb128 0x1a
 3378 0d87 C0030000 		.4byte	.LBB55
 3379 0d8b 26040000 		.4byte	.LBE55
 3380 0d8f F20D0000 		.4byte	0xdf2
 3381 0d93 15       		.uleb128 0x15
 3382 0d94 59020000 		.4byte	.LASF49
 3383 0d98 01       		.byte	0x1
 3384 0d99 EC04     		.2byte	0x4ec
 3385 0d9b 63030000 		.4byte	0x363
 3386 0d9f 320B0000 		.4byte	.LLST70
 3387 0da3 1B       		.uleb128 0x1b
 3388 0da4 CE030000 		.4byte	.LVL134
 3389 0da8 4A040000 		.4byte	0x44a
 3390 0dac BD0D0000 		.4byte	0xdbd
 3391 0db0 19       		.uleb128 0x19
 3392 0db1 01       		.byte	0x1
 3393 0db2 51       		.byte	0x51
 3394 0db3 02       		.byte	0x2
 3395 0db4 77       		.byte	0x77
 3396 0db5 00       		.sleb128 0
 3397 0db6 19       		.uleb128 0x19
 3398 0db7 01       		.byte	0x1
 3399 0db8 50       		.byte	0x50
 3400 0db9 02       		.byte	0x2
 3401 0dba 74       		.byte	0x74
 3402 0dbb 00       		.sleb128 0
 3403 0dbc 00       		.byte	0
 3404 0dbd 16       		.uleb128 0x16
 3405 0dbe E0030000 		.4byte	.LVL136
 3406 0dc2 D4140000 		.4byte	0x14d4
 3407 0dc6 16       		.uleb128 0x16
 3408 0dc7 FA030000 		.4byte	.LVL139
 3409 0dcb C3130000 		.4byte	0x13c3
 3410 0dcf 16       		.uleb128 0x16
 3411 0dd0 10040000 		.4byte	.LVL140
 3412 0dd4 01140000 		.4byte	0x1401
 3413 0dd8 16       		.uleb128 0x16
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 105


 3414 0dd9 1C040000 		.4byte	.LVL143
 3415 0ddd 01140000 		.4byte	0x1401
 3416 0de1 20       		.uleb128 0x20
 3417 0de2 26040000 		.4byte	.LVL144
 3418 0de6 43140000 		.4byte	0x1443
 3419 0dea 19       		.uleb128 0x19
 3420 0deb 01       		.byte	0x1
 3421 0dec 50       		.byte	0x50
 3422 0ded 02       		.byte	0x2
 3423 0dee 91       		.byte	0x91
 3424 0def 60       		.sleb128 -32
 3425 0df0 00       		.byte	0
 3426 0df1 00       		.byte	0
 3427 0df2 24       		.uleb128 0x24
 3428 0df3 BD0C0000 		.4byte	0xcbd
 3429 0df7 5C040000 		.4byte	.LBB56
 3430 0dfb 66040000 		.4byte	.LBE56
 3431 0dff 01       		.byte	0x1
 3432 0e00 6005     		.2byte	0x560
 3433 0e02 350E0000 		.4byte	0xe35
 3434 0e06 1F       		.uleb128 0x1f
 3435 0e07 CF0C0000 		.4byte	0xccf
 3436 0e0b 680B0000 		.4byte	.LLST71
 3437 0e0f 25       		.uleb128 0x25
 3438 0e10 5C040000 		.4byte	.LBB57
 3439 0e14 66040000 		.4byte	.LBE57
 3440 0e18 26       		.uleb128 0x26
 3441 0e19 DB0C0000 		.4byte	0xcdb
 3442 0e1d 860B0000 		.4byte	.LLST72
 3443 0e21 16       		.uleb128 0x16
 3444 0e22 60040000 		.4byte	.LVL152
 3445 0e26 F7130000 		.4byte	0x13f7
 3446 0e2a 16       		.uleb128 0x16
 3447 0e2b 66040000 		.4byte	.LVL154
 3448 0e2f 01140000 		.4byte	0x1401
 3449 0e33 00       		.byte	0
 3450 0e34 00       		.byte	0
 3451 0e35 24       		.uleb128 0x24
 3452 0e36 BD0C0000 		.4byte	0xcbd
 3453 0e3a BC040000 		.4byte	.LBB58
 3454 0e3e C6040000 		.4byte	.LBE58
 3455 0e42 01       		.byte	0x1
 3456 0e43 8C05     		.2byte	0x58c
 3457 0e45 780E0000 		.4byte	0xe78
 3458 0e49 1F       		.uleb128 0x1f
 3459 0e4a CF0C0000 		.4byte	0xccf
 3460 0e4e BE0B0000 		.4byte	.LLST73
 3461 0e52 25       		.uleb128 0x25
 3462 0e53 BC040000 		.4byte	.LBB59
 3463 0e57 C6040000 		.4byte	.LBE59
 3464 0e5b 26       		.uleb128 0x26
 3465 0e5c DB0C0000 		.4byte	0xcdb
 3466 0e60 D10B0000 		.4byte	.LLST74
 3467 0e64 16       		.uleb128 0x16
 3468 0e65 C0040000 		.4byte	.LVL169
 3469 0e69 F7130000 		.4byte	0x13f7
 3470 0e6d 16       		.uleb128 0x16
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 106


 3471 0e6e C6040000 		.4byte	.LVL171
 3472 0e72 01140000 		.4byte	0x1401
 3473 0e76 00       		.byte	0
 3474 0e77 00       		.byte	0
 3475 0e78 16       		.uleb128 0x16
 3476 0e79 C0030000 		.4byte	.LVL131
 3477 0e7d F7130000 		.4byte	0x13f7
 3478 0e81 16       		.uleb128 0x16
 3479 0e82 2A040000 		.4byte	.LVL145
 3480 0e86 01140000 		.4byte	0x1401
 3481 0e8a 16       		.uleb128 0x16
 3482 0e8b 2E040000 		.4byte	.LVL146
 3483 0e8f 63140000 		.4byte	0x1463
 3484 0e93 16       		.uleb128 0x16
 3485 0e94 32040000 		.4byte	.LVL147
 3486 0e98 F7130000 		.4byte	0x13f7
 3487 0e9c 16       		.uleb128 0x16
 3488 0e9d 52040000 		.4byte	.LVL148
 3489 0ea1 01140000 		.4byte	0x1401
 3490 0ea5 1B       		.uleb128 0x1b
 3491 0ea6 5A040000 		.4byte	.LVL150
 3492 0eaa 6E140000 		.4byte	0x146e
 3493 0eae BF0E0000 		.4byte	0xebf
 3494 0eb2 19       		.uleb128 0x19
 3495 0eb3 01       		.byte	0x1
 3496 0eb4 51       		.byte	0x51
 3497 0eb5 02       		.byte	0x2
 3498 0eb6 91       		.byte	0x91
 3499 0eb7 5C       		.sleb128 -36
 3500 0eb8 19       		.uleb128 0x19
 3501 0eb9 01       		.byte	0x1
 3502 0eba 50       		.byte	0x50
 3503 0ebb 02       		.byte	0x2
 3504 0ebc 91       		.byte	0x91
 3505 0ebd 60       		.sleb128 -32
 3506 0ebe 00       		.byte	0
 3507 0ebf 16       		.uleb128 0x16
 3508 0ec0 70040000 		.4byte	.LVL155
 3509 0ec4 F7130000 		.4byte	0x13f7
 3510 0ec8 16       		.uleb128 0x16
 3511 0ec9 76040000 		.4byte	.LVL156
 3512 0ecd E3140000 		.4byte	0x14e3
 3513 0ed1 16       		.uleb128 0x16
 3514 0ed2 7A040000 		.4byte	.LVL157
 3515 0ed6 01140000 		.4byte	0x1401
 3516 0eda 1B       		.uleb128 0x1b
 3517 0edb 84040000 		.4byte	.LVL158
 3518 0edf 97140000 		.4byte	0x1497
 3519 0ee3 EE0E0000 		.4byte	0xeee
 3520 0ee7 19       		.uleb128 0x19
 3521 0ee8 01       		.byte	0x1
 3522 0ee9 50       		.byte	0x50
 3523 0eea 02       		.byte	0x2
 3524 0eeb 74       		.byte	0x74
 3525 0eec 24       		.sleb128 36
 3526 0eed 00       		.byte	0
 3527 0eee 1B       		.uleb128 0x1b
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 107


 3528 0eef 8A040000 		.4byte	.LVL159
 3529 0ef3 9C040000 		.4byte	0x49c
 3530 0ef7 020F0000 		.4byte	0xf02
 3531 0efb 19       		.uleb128 0x19
 3532 0efc 01       		.byte	0x1
 3533 0efd 50       		.byte	0x50
 3534 0efe 02       		.byte	0x2
 3535 0eff 74       		.byte	0x74
 3536 0f00 00       		.sleb128 0
 3537 0f01 00       		.byte	0
 3538 0f02 16       		.uleb128 0x16
 3539 0f03 8E040000 		.4byte	.LVL160
 3540 0f07 B6140000 		.4byte	0x14b6
 3541 0f0b 1B       		.uleb128 0x1b
 3542 0f0c AC040000 		.4byte	.LVL164
 3543 0f10 9C040000 		.4byte	0x49c
 3544 0f14 1F0F0000 		.4byte	0xf1f
 3545 0f18 19       		.uleb128 0x19
 3546 0f19 01       		.byte	0x1
 3547 0f1a 50       		.byte	0x50
 3548 0f1b 02       		.byte	0x2
 3549 0f1c 74       		.byte	0x74
 3550 0f1d 00       		.sleb128 0
 3551 0f1e 00       		.byte	0
 3552 0f1f 16       		.uleb128 0x16
 3553 0f20 B0040000 		.4byte	.LVL165
 3554 0f24 B6140000 		.4byte	0x14b6
 3555 0f28 1B       		.uleb128 0x1b
 3556 0f29 B8040000 		.4byte	.LVL167
 3557 0f2d 9C040000 		.4byte	0x49c
 3558 0f31 3C0F0000 		.4byte	0xf3c
 3559 0f35 19       		.uleb128 0x19
 3560 0f36 01       		.byte	0x1
 3561 0f37 50       		.byte	0x50
 3562 0f38 02       		.byte	0x2
 3563 0f39 74       		.byte	0x74
 3564 0f3a 00       		.sleb128 0
 3565 0f3b 00       		.byte	0
 3566 0f3c 16       		.uleb128 0x16
 3567 0f3d BC040000 		.4byte	.LVL168
 3568 0f41 B6140000 		.4byte	0x14b6
 3569 0f45 00       		.byte	0
 3570 0f46 1D       		.uleb128 0x1d
 3571 0f47 01       		.byte	0x1
 3572 0f48 4D050000 		.4byte	.LASF104
 3573 0f4c 01       		.byte	0x1
 3574 0f4d 7302     		.2byte	0x273
 3575 0f4f 01       		.byte	0x1
 3576 0f50 CF000000 		.4byte	0xcf
 3577 0f54 D8040000 		.4byte	.LFB11
 3578 0f58 08050000 		.4byte	.LFE11
 3579 0f5c EB0B0000 		.4byte	.LLST75
 3580 0f60 01       		.byte	0x1
 3581 0f61 CF0F0000 		.4byte	0xfcf
 3582 0f65 14       		.uleb128 0x14
 3583 0f66 91040000 		.4byte	.LASF94
 3584 0f6a 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 108


 3585 0f6b 7302     		.2byte	0x273
 3586 0f6d 23020000 		.4byte	0x223
 3587 0f71 0B0C0000 		.4byte	.LLST76
 3588 0f75 14       		.uleb128 0x14
 3589 0f76 69070000 		.4byte	.LASF84
 3590 0f7a 01       		.byte	0x1
 3591 0f7b 7302     		.2byte	0x273
 3592 0f7d E5000000 		.4byte	0xe5
 3593 0f81 290C0000 		.4byte	.LLST77
 3594 0f85 15       		.uleb128 0x15
 3595 0f86 B4060000 		.4byte	.LASF68
 3596 0f8a 01       		.byte	0x1
 3597 0f8b 7502     		.2byte	0x275
 3598 0f8d CF000000 		.4byte	0xcf
 3599 0f91 470C0000 		.4byte	.LLST78
 3600 0f95 15       		.uleb128 0x15
 3601 0f96 68000000 		.4byte	.LASF95
 3602 0f9a 01       		.byte	0x1
 3603 0f9b 7602     		.2byte	0x276
 3604 0f9d 40040000 		.4byte	0x440
 3605 0fa1 0B0C0000 		.4byte	.LLST76
 3606 0fa5 16       		.uleb128 0x16
 3607 0fa6 E4040000 		.4byte	.LVL175
 3608 0faa C5140000 		.4byte	0x14c5
 3609 0fae 20       		.uleb128 0x20
 3610 0faf FE040000 		.4byte	.LVL178
 3611 0fb3 E80C0000 		.4byte	0xce8
 3612 0fb7 19       		.uleb128 0x19
 3613 0fb8 01       		.byte	0x1
 3614 0fb9 53       		.byte	0x53
 3615 0fba 01       		.byte	0x1
 3616 0fbb 30       		.byte	0x30
 3617 0fbc 19       		.uleb128 0x19
 3618 0fbd 01       		.byte	0x1
 3619 0fbe 52       		.byte	0x52
 3620 0fbf 02       		.byte	0x2
 3621 0fc0 75       		.byte	0x75
 3622 0fc1 00       		.sleb128 0
 3623 0fc2 19       		.uleb128 0x19
 3624 0fc3 01       		.byte	0x1
 3625 0fc4 51       		.byte	0x51
 3626 0fc5 01       		.byte	0x1
 3627 0fc6 30       		.byte	0x30
 3628 0fc7 19       		.uleb128 0x19
 3629 0fc8 01       		.byte	0x1
 3630 0fc9 50       		.byte	0x50
 3631 0fca 02       		.byte	0x2
 3632 0fcb 74       		.byte	0x74
 3633 0fcc 00       		.sleb128 0
 3634 0fcd 00       		.byte	0
 3635 0fce 00       		.byte	0
 3636 0fcf 1D       		.uleb128 0x1d
 3637 0fd0 01       		.byte	0x1
 3638 0fd1 22000000 		.4byte	.LASF105
 3639 0fd5 01       		.byte	0x1
 3640 0fd6 9A05     		.2byte	0x59a
 3641 0fd8 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 109


 3642 0fd9 CF000000 		.4byte	0xcf
 3643 0fdd 08050000 		.4byte	.LFB17
 3644 0fe1 6C050000 		.4byte	.LFE17
 3645 0fe5 660C0000 		.4byte	.LLST80
 3646 0fe9 01       		.byte	0x1
 3647 0fea ED100000 		.4byte	0x10ed
 3648 0fee 14       		.uleb128 0x14
 3649 0fef DA010000 		.4byte	.LASF72
 3650 0ff3 01       		.byte	0x1
 3651 0ff4 9A05     		.2byte	0x59a
 3652 0ff6 23020000 		.4byte	0x223
 3653 0ffa 860C0000 		.4byte	.LLST81
 3654 0ffe 14       		.uleb128 0x14
 3655 0fff 45020000 		.4byte	.LASF69
 3656 1003 01       		.byte	0x1
 3657 1004 9A05     		.2byte	0x59a
 3658 1006 97040000 		.4byte	0x497
 3659 100a BA0C0000 		.4byte	.LLST82
 3660 100e 14       		.uleb128 0x14
 3661 100f 4E000000 		.4byte	.LASF97
 3662 1013 01       		.byte	0x1
 3663 1014 9A05     		.2byte	0x59a
 3664 1016 B50B0000 		.4byte	0xbb5
 3665 101a F40C0000 		.4byte	.LLST83
 3666 101e 21       		.uleb128 0x21
 3667 101f B4060000 		.4byte	.LASF68
 3668 1023 01       		.byte	0x1
 3669 1024 9C05     		.2byte	0x59c
 3670 1026 CF000000 		.4byte	0xcf
 3671 102a 01       		.byte	0x1
 3672 102b 50       		.byte	0x50
 3673 102c 23       		.uleb128 0x23
 3674 102d 70010000 		.4byte	.LASF98
 3675 1031 01       		.byte	0x1
 3676 1032 9D05     		.2byte	0x59d
 3677 1034 DA000000 		.4byte	0xda
 3678 1038 15       		.uleb128 0x15
 3679 1039 28060000 		.4byte	.LASF65
 3680 103d 01       		.byte	0x1
 3681 103e 9E05     		.2byte	0x59e
 3682 1040 40040000 		.4byte	0x440
 3683 1044 860C0000 		.4byte	.LLST81
 3684 1048 24       		.uleb128 0x24
 3685 1049 73030000 		.4byte	0x373
 3686 104d 10050000 		.4byte	.LBB60
 3687 1051 24050000 		.4byte	.LBE60
 3688 1055 01       		.byte	0x1
 3689 1056 B305     		.2byte	0x5b3
 3690 1058 73100000 		.4byte	0x1073
 3691 105c 25       		.uleb128 0x25
 3692 105d 10050000 		.4byte	.LBB61
 3693 1061 24050000 		.4byte	.LBE61
 3694 1065 28       		.uleb128 0x28
 3695 1066 84030000 		.4byte	0x384
 3696 106a 01       		.byte	0x1
 3697 106b 56       		.byte	0x56
 3698 106c 29       		.uleb128 0x29
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 110


 3699 106d 8F030000 		.4byte	0x38f
 3700 1071 00       		.byte	0
 3701 1072 00       		.byte	0
 3702 1073 1A       		.uleb128 0x1a
 3703 1074 24050000 		.4byte	.LBB62
 3704 1078 64050000 		.4byte	.LBE62
 3705 107c D4100000 		.4byte	0x10d4
 3706 1080 21       		.uleb128 0x21
 3707 1081 59020000 		.4byte	.LASF49
 3708 1085 01       		.byte	0x1
 3709 1086 B505     		.2byte	0x5b5
 3710 1088 63030000 		.4byte	0x363
 3711 108c 01       		.byte	0x1
 3712 108d 54       		.byte	0x54
 3713 108e 25       		.uleb128 0x25
 3714 108f 28050000 		.4byte	.LBB63
 3715 1093 62050000 		.4byte	.LBE63
 3716 1097 15       		.uleb128 0x15
 3717 1098 2B080000 		.4byte	.LASF52
 3718 109c 01       		.byte	0x1
 3719 109d BA05     		.2byte	0x5ba
 3720 109f C00B0000 		.4byte	0xbc0
 3721 10a3 280D0000 		.4byte	.LLST85
 3722 10a7 1B       		.uleb128 0x1b
 3723 10a8 30050000 		.4byte	.LVL182
 3724 10ac 4A040000 		.4byte	0x44a
 3725 10b0 C2100000 		.4byte	0x10c2
 3726 10b4 19       		.uleb128 0x19
 3727 10b5 01       		.byte	0x1
 3728 10b6 51       		.byte	0x51
 3729 10b7 03       		.byte	0x3
 3730 10b8 F3       		.byte	0xf3
 3731 10b9 01       		.uleb128 0x1
 3732 10ba 51       		.byte	0x51
 3733 10bb 19       		.uleb128 0x19
 3734 10bc 01       		.byte	0x1
 3735 10bd 50       		.byte	0x50
 3736 10be 02       		.byte	0x2
 3737 10bf 77       		.byte	0x77
 3738 10c0 00       		.sleb128 0
 3739 10c1 00       		.byte	0
 3740 10c2 20       		.uleb128 0x20
 3741 10c3 46050000 		.4byte	.LVL184
 3742 10c7 C3130000 		.4byte	0x13c3
 3743 10cb 19       		.uleb128 0x19
 3744 10cc 01       		.byte	0x1
 3745 10cd 50       		.byte	0x50
 3746 10ce 02       		.byte	0x2
 3747 10cf 77       		.byte	0x77
 3748 10d0 10       		.sleb128 16
 3749 10d1 00       		.byte	0
 3750 10d2 00       		.byte	0
 3751 10d3 00       		.byte	0
 3752 10d4 2A       		.uleb128 0x2a
 3753 10d5 9B030000 		.4byte	0x39b
 3754 10d9 64050000 		.4byte	.LBB64
 3755 10dd 68050000 		.4byte	.LBE64
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 111


 3756 10e1 01       		.byte	0x1
 3757 10e2 EF05     		.2byte	0x5ef
 3758 10e4 2B       		.uleb128 0x2b
 3759 10e5 A9030000 		.4byte	0x3a9
 3760 10e9 01       		.byte	0x1
 3761 10ea 56       		.byte	0x56
 3762 10eb 00       		.byte	0
 3763 10ec 00       		.byte	0
 3764 10ed 1D       		.uleb128 0x1d
 3765 10ee 01       		.byte	0x1
 3766 10ef 19070000 		.4byte	.LASF106
 3767 10f3 01       		.byte	0x1
 3768 10f4 F505     		.2byte	0x5f5
 3769 10f6 01       		.byte	0x1
 3770 10f7 CF000000 		.4byte	0xcf
 3771 10fb 6C050000 		.4byte	.LFB18
 3772 10ff 9C050000 		.4byte	.LFE18
 3773 1103 480D0000 		.4byte	.LLST86
 3774 1107 01       		.byte	0x1
 3775 1108 C7110000 		.4byte	0x11c7
 3776 110c 14       		.uleb128 0x14
 3777 110d DA010000 		.4byte	.LASF72
 3778 1111 01       		.byte	0x1
 3779 1112 F505     		.2byte	0x5f5
 3780 1114 23020000 		.4byte	0x223
 3781 1118 680D0000 		.4byte	.LLST87
 3782 111c 14       		.uleb128 0x14
 3783 111d 45020000 		.4byte	.LASF69
 3784 1121 01       		.byte	0x1
 3785 1122 F505     		.2byte	0x5f5
 3786 1124 97040000 		.4byte	0x497
 3787 1128 9C0D0000 		.4byte	.LLST88
 3788 112c 15       		.uleb128 0x15
 3789 112d B4060000 		.4byte	.LASF68
 3790 1131 01       		.byte	0x1
 3791 1132 F705     		.2byte	0x5f7
 3792 1134 CF000000 		.4byte	0xcf
 3793 1138 D60D0000 		.4byte	.LLST89
 3794 113c 23       		.uleb128 0x23
 3795 113d 70010000 		.4byte	.LASF98
 3796 1141 01       		.byte	0x1
 3797 1142 F805     		.2byte	0x5f8
 3798 1144 DA000000 		.4byte	0xda
 3799 1148 15       		.uleb128 0x15
 3800 1149 CE040000 		.4byte	.LASF103
 3801 114d 01       		.byte	0x1
 3802 114e F905     		.2byte	0x5f9
 3803 1150 4D020000 		.4byte	0x24d
 3804 1154 F50D0000 		.4byte	.LLST90
 3805 1158 15       		.uleb128 0x15
 3806 1159 28060000 		.4byte	.LASF65
 3807 115d 01       		.byte	0x1
 3808 115e FA05     		.2byte	0x5fa
 3809 1160 40040000 		.4byte	0x440
 3810 1164 680D0000 		.4byte	.LLST87
 3811 1168 24       		.uleb128 0x24
 3812 1169 73030000 		.4byte	0x373
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 112


 3813 116d 70050000 		.4byte	.LBB66
 3814 1171 84050000 		.4byte	.LBE66
 3815 1175 01       		.byte	0x1
 3816 1176 1006     		.2byte	0x610
 3817 1178 93110000 		.4byte	0x1193
 3818 117c 25       		.uleb128 0x25
 3819 117d 70050000 		.4byte	.LBB67
 3820 1181 84050000 		.4byte	.LBE67
 3821 1185 28       		.uleb128 0x28
 3822 1186 84030000 		.4byte	0x384
 3823 118a 01       		.byte	0x1
 3824 118b 55       		.byte	0x55
 3825 118c 29       		.uleb128 0x29
 3826 118d 8F030000 		.4byte	0x38f
 3827 1191 00       		.byte	0
 3828 1192 00       		.byte	0
 3829 1193 24       		.uleb128 0x24
 3830 1194 9B030000 		.4byte	0x39b
 3831 1198 96050000 		.4byte	.LBB68
 3832 119c 9A050000 		.4byte	.LBE68
 3833 11a0 01       		.byte	0x1
 3834 11a1 2506     		.2byte	0x625
 3835 11a3 AF110000 		.4byte	0x11af
 3836 11a7 2B       		.uleb128 0x2b
 3837 11a8 A9030000 		.4byte	0x3a9
 3838 11ac 01       		.byte	0x1
 3839 11ad 55       		.byte	0x55
 3840 11ae 00       		.byte	0
 3841 11af 20       		.uleb128 0x20
 3842 11b0 8E050000 		.4byte	.LVL192
 3843 11b4 4A040000 		.4byte	0x44a
 3844 11b8 19       		.uleb128 0x19
 3845 11b9 01       		.byte	0x1
 3846 11ba 51       		.byte	0x51
 3847 11bb 03       		.byte	0x3
 3848 11bc F3       		.byte	0xf3
 3849 11bd 01       		.uleb128 0x1
 3850 11be 51       		.byte	0x51
 3851 11bf 19       		.uleb128 0x19
 3852 11c0 01       		.byte	0x1
 3853 11c1 50       		.byte	0x50
 3854 11c2 02       		.byte	0x2
 3855 11c3 74       		.byte	0x74
 3856 11c4 00       		.sleb128 0
 3857 11c5 00       		.byte	0
 3858 11c6 00       		.byte	0
 3859 11c7 1D       		.uleb128 0x1d
 3860 11c8 01       		.byte	0x1
 3861 11c9 00060000 		.4byte	.LASF107
 3862 11cd 01       		.byte	0x1
 3863 11ce 2B06     		.2byte	0x62b
 3864 11d0 01       		.byte	0x1
 3865 11d1 DA000000 		.4byte	0xda
 3866 11d5 9C050000 		.4byte	.LFB19
 3867 11d9 AE050000 		.4byte	.LFE19
 3868 11dd 080E0000 		.4byte	.LLST92
 3869 11e1 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 113


 3870 11e2 17120000 		.4byte	0x1217
 3871 11e6 14       		.uleb128 0x14
 3872 11e7 DA010000 		.4byte	.LASF72
 3873 11eb 01       		.byte	0x1
 3874 11ec 2B06     		.2byte	0x62b
 3875 11ee 17120000 		.4byte	0x1217
 3876 11f2 280E0000 		.4byte	.LLST93
 3877 11f6 21       		.uleb128 0x21
 3878 11f7 4F010000 		.4byte	.LASF108
 3879 11fb 01       		.byte	0x1
 3880 11fc 2D06     		.2byte	0x62d
 3881 11fe DA000000 		.4byte	0xda
 3882 1202 01       		.byte	0x1
 3883 1203 54       		.byte	0x54
 3884 1204 16       		.uleb128 0x16
 3885 1205 A4050000 		.4byte	.LVL197
 3886 1209 F7130000 		.4byte	0x13f7
 3887 120d 16       		.uleb128 0x16
 3888 120e AA050000 		.4byte	.LVL199
 3889 1212 01140000 		.4byte	0x1401
 3890 1216 00       		.byte	0
 3891 1217 10       		.uleb128 0x10
 3892 1218 23020000 		.4byte	0x223
 3893 121c 1D       		.uleb128 0x1d
 3894 121d 01       		.byte	0x1
 3895 121e E3000000 		.4byte	.LASF109
 3896 1222 01       		.byte	0x1
 3897 1223 3B06     		.2byte	0x63b
 3898 1225 01       		.byte	0x1
 3899 1226 DA000000 		.4byte	0xda
 3900 122a AE050000 		.4byte	.LFB20
 3901 122e C4050000 		.4byte	.LFE20
 3902 1232 540E0000 		.4byte	.LLST94
 3903 1236 01       		.byte	0x1
 3904 1237 7C120000 		.4byte	0x127c
 3905 123b 14       		.uleb128 0x14
 3906 123c DA010000 		.4byte	.LASF72
 3907 1240 01       		.byte	0x1
 3908 1241 3B06     		.2byte	0x63b
 3909 1243 17120000 		.4byte	0x1217
 3910 1247 740E0000 		.4byte	.LLST95
 3911 124b 21       		.uleb128 0x21
 3912 124c 4F010000 		.4byte	.LASF108
 3913 1250 01       		.byte	0x1
 3914 1251 3D06     		.2byte	0x63d
 3915 1253 DA000000 		.4byte	0xda
 3916 1257 01       		.byte	0x1
 3917 1258 54       		.byte	0x54
 3918 1259 15       		.uleb128 0x15
 3919 125a 28060000 		.4byte	.LASF65
 3920 125e 01       		.byte	0x1
 3921 125f 3E06     		.2byte	0x63e
 3922 1261 6D030000 		.4byte	0x36d
 3923 1265 920E0000 		.4byte	.LLST96
 3924 1269 16       		.uleb128 0x16
 3925 126a B6050000 		.4byte	.LVL202
 3926 126e F7130000 		.4byte	0x13f7
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 114


 3927 1272 16       		.uleb128 0x16
 3928 1273 C0050000 		.4byte	.LVL204
 3929 1277 01140000 		.4byte	0x1401
 3930 127b 00       		.byte	0
 3931 127c 2C       		.uleb128 0x2c
 3932 127d 01       		.byte	0x1
 3933 127e E7030000 		.4byte	.LASF110
 3934 1282 01       		.byte	0x1
 3935 1283 4D06     		.2byte	0x64d
 3936 1285 01       		.byte	0x1
 3937 1286 DA000000 		.4byte	0xda
 3938 128a C4050000 		.4byte	.LFB21
 3939 128e C8050000 		.4byte	.LFE21
 3940 1292 02       		.byte	0x2
 3941 1293 7D       		.byte	0x7d
 3942 1294 00       		.sleb128 0
 3943 1295 01       		.byte	0x1
 3944 1296 B9120000 		.4byte	0x12b9
 3945 129a 14       		.uleb128 0x14
 3946 129b DA010000 		.4byte	.LASF72
 3947 129f 01       		.byte	0x1
 3948 12a0 4D06     		.2byte	0x64d
 3949 12a2 17120000 		.4byte	0x1217
 3950 12a6 B00E0000 		.4byte	.LLST97
 3951 12aa 21       		.uleb128 0x21
 3952 12ab 4F010000 		.4byte	.LASF108
 3953 12af 01       		.byte	0x1
 3954 12b0 4F06     		.2byte	0x64f
 3955 12b2 DA000000 		.4byte	0xda
 3956 12b6 01       		.byte	0x1
 3957 12b7 50       		.byte	0x50
 3958 12b8 00       		.byte	0
 3959 12b9 2D       		.uleb128 0x2d
 3960 12ba 01       		.byte	0x1
 3961 12bb 58010000 		.4byte	.LASF133
 3962 12bf 01       		.byte	0x1
 3963 12c0 5906     		.2byte	0x659
 3964 12c2 01       		.byte	0x1
 3965 12c3 C8050000 		.4byte	.LFB22
 3966 12c7 CC050000 		.4byte	.LFE22
 3967 12cb 02       		.byte	0x2
 3968 12cc 7D       		.byte	0x7d
 3969 12cd 00       		.sleb128 0
 3970 12ce 01       		.byte	0x1
 3971 12cf 06130000 		.4byte	0x1306
 3972 12d3 14       		.uleb128 0x14
 3973 12d4 DA010000 		.4byte	.LASF72
 3974 12d8 01       		.byte	0x1
 3975 12d9 5906     		.2byte	0x659
 3976 12db 23020000 		.4byte	0x223
 3977 12df D10E0000 		.4byte	.LLST98
 3978 12e3 15       		.uleb128 0x15
 3979 12e4 28060000 		.4byte	.LASF65
 3980 12e8 01       		.byte	0x1
 3981 12e9 5B06     		.2byte	0x65b
 3982 12eb 40040000 		.4byte	0x440
 3983 12ef D10E0000 		.4byte	.LLST98
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 115


 3984 12f3 18       		.uleb128 0x18
 3985 12f4 CC050000 		.4byte	.LVL208
 3986 12f8 01       		.byte	0x1
 3987 12f9 F8140000 		.4byte	0x14f8
 3988 12fd 19       		.uleb128 0x19
 3989 12fe 01       		.byte	0x1
 3990 12ff 50       		.byte	0x50
 3991 1300 03       		.byte	0x3
 3992 1301 F3       		.byte	0xf3
 3993 1302 01       		.uleb128 0x1
 3994 1303 50       		.byte	0x50
 3995 1304 00       		.byte	0
 3996 1305 00       		.byte	0
 3997 1306 2C       		.uleb128 0x2c
 3998 1307 01       		.byte	0x1
 3999 1308 DA070000 		.4byte	.LASF111
 4000 130c 01       		.byte	0x1
 4001 130d 8F07     		.2byte	0x78f
 4002 130f 01       		.byte	0x1
 4003 1310 CF000000 		.4byte	0xcf
 4004 1314 CC050000 		.4byte	.LFB27
 4005 1318 D6050000 		.4byte	.LFE27
 4006 131c 02       		.byte	0x2
 4007 131d 7D       		.byte	0x7d
 4008 131e 00       		.sleb128 0
 4009 131f 01       		.byte	0x1
 4010 1320 45130000 		.4byte	0x1345
 4011 1324 14       		.uleb128 0x14
 4012 1325 DA010000 		.4byte	.LASF72
 4013 1329 01       		.byte	0x1
 4014 132a 8F07     		.2byte	0x78f
 4015 132c 17120000 		.4byte	0x1217
 4016 1330 F20E0000 		.4byte	.LLST100
 4017 1334 15       		.uleb128 0x15
 4018 1335 B4060000 		.4byte	.LASF68
 4019 1339 01       		.byte	0x1
 4020 133a 9107     		.2byte	0x791
 4021 133c CF000000 		.4byte	0xcf
 4022 1340 130F0000 		.4byte	.LLST101
 4023 1344 00       		.byte	0
 4024 1345 2C       		.uleb128 0x2c
 4025 1346 01       		.byte	0x1
 4026 1347 E7050000 		.4byte	.LASF112
 4027 134b 01       		.byte	0x1
 4028 134c B607     		.2byte	0x7b6
 4029 134e 01       		.byte	0x1
 4030 134f CF000000 		.4byte	0xcf
 4031 1353 D6050000 		.4byte	.LFB29
 4032 1357 E2050000 		.4byte	.LFE29
 4033 135b 02       		.byte	0x2
 4034 135c 7D       		.byte	0x7d
 4035 135d 00       		.sleb128 0
 4036 135e 01       		.byte	0x1
 4037 135f 84130000 		.4byte	0x1384
 4038 1363 14       		.uleb128 0x14
 4039 1364 DA010000 		.4byte	.LASF72
 4040 1368 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 116


 4041 1369 B607     		.2byte	0x7b6
 4042 136b 17120000 		.4byte	0x1217
 4043 136f 2D0F0000 		.4byte	.LLST102
 4044 1373 15       		.uleb128 0x15
 4045 1374 B4060000 		.4byte	.LASF68
 4046 1378 01       		.byte	0x1
 4047 1379 B807     		.2byte	0x7b8
 4048 137b CF000000 		.4byte	0xcf
 4049 137f 4E0F0000 		.4byte	.LLST103
 4050 1383 00       		.byte	0
 4051 1384 2E       		.uleb128 0x2e
 4052 1385 01       		.byte	0x1
 4053 1386 60030000 		.4byte	.LASF113
 4054 138a 07       		.byte	0x7
 4055 138b A808     		.2byte	0x8a8
 4056 138d 01       		.byte	0x1
 4057 138e CF000000 		.4byte	0xcf
 4058 1392 01       		.byte	0x1
 4059 1393 9D130000 		.4byte	0x139d
 4060 1397 2F       		.uleb128 0x2f
 4061 1398 9D130000 		.4byte	0x139d
 4062 139c 00       		.byte	0
 4063 139d 10       		.uleb128 0x10
 4064 139e E4010000 		.4byte	0x1e4
 4065 13a2 30       		.uleb128 0x30
 4066 13a3 01       		.byte	0x1
 4067 13a4 13080000 		.4byte	.LASF118
 4068 13a8 01       		.byte	0x1
 4069 13a9 9E000000 		.4byte	0x9e
 4070 13ad 01       		.byte	0x1
 4071 13ae 01       		.byte	0x1
 4072 13af C3130000 		.4byte	0x13c3
 4073 13b3 2F       		.uleb128 0x2f
 4074 13b4 9E000000 		.4byte	0x9e
 4075 13b8 2F       		.uleb128 0x2f
 4076 13b9 A7000000 		.4byte	0xa7
 4077 13bd 2F       		.uleb128 0x2f
 4078 13be 97000000 		.4byte	0x97
 4079 13c2 00       		.byte	0
 4080 13c3 2E       		.uleb128 0x2e
 4081 13c4 01       		.byte	0x1
 4082 13c5 33080000 		.4byte	.LASF114
 4083 13c9 07       		.byte	0x7
 4084 13ca 6F08     		.2byte	0x86f
 4085 13cc 01       		.byte	0x1
 4086 13cd CF000000 		.4byte	0xcf
 4087 13d1 01       		.byte	0x1
 4088 13d2 DC130000 		.4byte	0x13dc
 4089 13d6 2F       		.uleb128 0x2f
 4090 13d7 DC130000 		.4byte	0x13dc
 4091 13db 00       		.byte	0
 4092 13dc 10       		.uleb128 0x10
 4093 13dd E1130000 		.4byte	0x13e1
 4094 13e1 06       		.uleb128 0x6
 4095 13e2 04       		.byte	0x4
 4096 13e3 E7130000 		.4byte	0x13e7
 4097 13e7 10       		.uleb128 0x10
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 117


 4098 13e8 D9010000 		.4byte	0x1d9
 4099 13ec 31       		.uleb128 0x31
 4100 13ed 01       		.byte	0x1
 4101 13ee C5060000 		.4byte	.LASF115
 4102 13f2 07       		.byte	0x7
 4103 13f3 9608     		.2byte	0x896
 4104 13f5 01       		.byte	0x1
 4105 13f6 01       		.byte	0x1
 4106 13f7 32       		.uleb128 0x32
 4107 13f8 01       		.byte	0x1
 4108 13f9 11010000 		.4byte	.LASF116
 4109 13fd 02       		.byte	0x2
 4110 13fe 8B       		.byte	0x8b
 4111 13ff 01       		.byte	0x1
 4112 1400 01       		.byte	0x1
 4113 1401 32       		.uleb128 0x32
 4114 1402 01       		.byte	0x1
 4115 1403 10000000 		.4byte	.LASF117
 4116 1407 02       		.byte	0x2
 4117 1408 8C       		.byte	0x8c
 4118 1409 01       		.byte	0x1
 4119 140a 01       		.byte	0x1
 4120 140b 33       		.uleb128 0x33
 4121 140c 01       		.byte	0x1
 4122 140d 44070000 		.4byte	.LASF119
 4123 1411 06       		.byte	0x6
 4124 1412 8201     		.2byte	0x182
 4125 1414 01       		.byte	0x1
 4126 1415 01       		.byte	0x1
 4127 1416 20140000 		.4byte	0x1420
 4128 141a 2F       		.uleb128 0x2f
 4129 141b 20140000 		.4byte	0x1420
 4130 141f 00       		.byte	0
 4131 1420 10       		.uleb128 0x10
 4132 1421 25140000 		.4byte	0x1425
 4133 1425 06       		.uleb128 0x6
 4134 1426 04       		.byte	0x4
 4135 1427 D9010000 		.4byte	0x1d9
 4136 142b 34       		.uleb128 0x34
 4137 142c 01       		.byte	0x1
 4138 142d 6B020000 		.4byte	.LASF120
 4139 1431 09       		.byte	0x9
 4140 1432 AB       		.byte	0xab
 4141 1433 01       		.byte	0x1
 4142 1434 9E000000 		.4byte	0x9e
 4143 1438 01       		.byte	0x1
 4144 1439 43140000 		.4byte	0x1443
 4145 143d 2F       		.uleb128 0x2f
 4146 143e 25000000 		.4byte	0x25
 4147 1442 00       		.byte	0
 4148 1443 33       		.uleb128 0x33
 4149 1444 01       		.byte	0x1
 4150 1445 BA000000 		.4byte	.LASF121
 4151 1449 07       		.byte	0x7
 4152 144a 8A08     		.2byte	0x88a
 4153 144c 01       		.byte	0x1
 4154 144d 01       		.byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 118


 4155 144e 58140000 		.4byte	0x1458
 4156 1452 2F       		.uleb128 0x2f
 4157 1453 58140000 		.4byte	0x1458
 4158 1457 00       		.byte	0
 4159 1458 10       		.uleb128 0x10
 4160 1459 5D140000 		.4byte	0x145d
 4161 145d 06       		.uleb128 0x6
 4162 145e 04       		.byte	0x4
 4163 145f 18020000 		.4byte	0x218
 4164 1463 31       		.uleb128 0x31
 4165 1464 01       		.byte	0x1
 4166 1465 78020000 		.4byte	.LASF122
 4167 1469 07       		.byte	0x7
 4168 146a C304     		.2byte	0x4c3
 4169 146c 01       		.byte	0x1
 4170 146d 01       		.byte	0x1
 4171 146e 2E       		.uleb128 0x2e
 4172 146f 01       		.byte	0x1
 4173 1470 C8050000 		.4byte	.LASF123
 4174 1474 07       		.byte	0x7
 4175 1475 9008     		.2byte	0x890
 4176 1477 01       		.byte	0x1
 4177 1478 CF000000 		.4byte	0xcf
 4178 147c 01       		.byte	0x1
 4179 147d 8C140000 		.4byte	0x148c
 4180 1481 2F       		.uleb128 0x2f
 4181 1482 58140000 		.4byte	0x1458
 4182 1486 2F       		.uleb128 0x2f
 4183 1487 8C140000 		.4byte	0x148c
 4184 148b 00       		.byte	0
 4185 148c 10       		.uleb128 0x10
 4186 148d 91140000 		.4byte	0x1491
 4187 1491 06       		.uleb128 0x6
 4188 1492 04       		.byte	0x4
 4189 1493 E5000000 		.4byte	0xe5
 4190 1497 33       		.uleb128 0x33
 4191 1498 01       		.byte	0x1
 4192 1499 12030000 		.4byte	.LASF124
 4193 149d 07       		.byte	0x7
 4194 149e 4708     		.2byte	0x847
 4195 14a0 01       		.byte	0x1
 4196 14a1 01       		.byte	0x1
 4197 14a2 B1140000 		.4byte	0x14b1
 4198 14a6 2F       		.uleb128 0x2f
 4199 14a7 20140000 		.4byte	0x1420
 4200 14ab 2F       		.uleb128 0x2f
 4201 14ac B1140000 		.4byte	0x14b1
 4202 14b0 00       		.byte	0
 4203 14b1 10       		.uleb128 0x10
 4204 14b2 E5000000 		.4byte	0xe5
 4205 14b6 35       		.uleb128 0x35
 4206 14b7 01       		.byte	0x1
 4207 14b8 AB050000 		.4byte	.LASF125
 4208 14bc 07       		.byte	0x7
 4209 14bd F904     		.2byte	0x4f9
 4210 14bf 01       		.byte	0x1
 4211 14c0 CF000000 		.4byte	0xcf
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 119


 4212 14c4 01       		.byte	0x1
 4213 14c5 35       		.uleb128 0x35
 4214 14c6 01       		.byte	0x1
 4215 14c7 7E070000 		.4byte	.LASF126
 4216 14cb 07       		.byte	0x7
 4217 14cc 8508     		.2byte	0x885
 4218 14ce 01       		.byte	0x1
 4219 14cf E4010000 		.4byte	0x1e4
 4220 14d3 01       		.byte	0x1
 4221 14d4 35       		.uleb128 0x35
 4222 14d5 01       		.byte	0x1
 4223 14d6 28030000 		.4byte	.LASF127
 4224 14da 07       		.byte	0x7
 4225 14db D308     		.2byte	0x8d3
 4226 14dd 01       		.byte	0x1
 4227 14de 9E000000 		.4byte	0x9e
 4228 14e2 01       		.byte	0x1
 4229 14e3 33       		.uleb128 0x33
 4230 14e4 01       		.byte	0x1
 4231 14e5 85000000 		.4byte	.LASF128
 4232 14e9 07       		.byte	0x7
 4233 14ea A208     		.2byte	0x8a2
 4234 14ec 01       		.byte	0x1
 4235 14ed 01       		.byte	0x1
 4236 14ee F8140000 		.4byte	0x14f8
 4237 14f2 2F       		.uleb128 0x2f
 4238 14f3 9D130000 		.4byte	0x139d
 4239 14f7 00       		.byte	0
 4240 14f8 36       		.uleb128 0x36
 4241 14f9 01       		.byte	0x1
 4242 14fa DD050000 		.4byte	.LASF134
 4243 14fe 09       		.byte	0x9
 4244 14ff AC       		.byte	0xac
 4245 1500 01       		.byte	0x1
 4246 1501 01       		.byte	0x1
 4247 1502 2F       		.uleb128 0x2f
 4248 1503 9E000000 		.4byte	0x9e
 4249 1507 00       		.byte	0
 4250 1508 00       		.byte	0
 4251              		.section	.debug_abbrev,"",%progbits
 4252              	.Ldebug_abbrev0:
 4253 0000 01       		.uleb128 0x1
 4254 0001 11       		.uleb128 0x11
 4255 0002 01       		.byte	0x1
 4256 0003 25       		.uleb128 0x25
 4257 0004 0E       		.uleb128 0xe
 4258 0005 13       		.uleb128 0x13
 4259 0006 0B       		.uleb128 0xb
 4260 0007 03       		.uleb128 0x3
 4261 0008 0E       		.uleb128 0xe
 4262 0009 1B       		.uleb128 0x1b
 4263 000a 0E       		.uleb128 0xe
 4264 000b 11       		.uleb128 0x11
 4265 000c 01       		.uleb128 0x1
 4266 000d 12       		.uleb128 0x12
 4267 000e 01       		.uleb128 0x1
 4268 000f 10       		.uleb128 0x10
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 120


 4269 0010 06       		.uleb128 0x6
 4270 0011 00       		.byte	0
 4271 0012 00       		.byte	0
 4272 0013 02       		.uleb128 0x2
 4273 0014 16       		.uleb128 0x16
 4274 0015 00       		.byte	0
 4275 0016 03       		.uleb128 0x3
 4276 0017 0E       		.uleb128 0xe
 4277 0018 3A       		.uleb128 0x3a
 4278 0019 0B       		.uleb128 0xb
 4279 001a 3B       		.uleb128 0x3b
 4280 001b 0B       		.uleb128 0xb
 4281 001c 49       		.uleb128 0x49
 4282 001d 13       		.uleb128 0x13
 4283 001e 00       		.byte	0
 4284 001f 00       		.byte	0
 4285 0020 03       		.uleb128 0x3
 4286 0021 24       		.uleb128 0x24
 4287 0022 00       		.byte	0
 4288 0023 0B       		.uleb128 0xb
 4289 0024 0B       		.uleb128 0xb
 4290 0025 3E       		.uleb128 0x3e
 4291 0026 0B       		.uleb128 0xb
 4292 0027 03       		.uleb128 0x3
 4293 0028 0E       		.uleb128 0xe
 4294 0029 00       		.byte	0
 4295 002a 00       		.byte	0
 4296 002b 04       		.uleb128 0x4
 4297 002c 24       		.uleb128 0x24
 4298 002d 00       		.byte	0
 4299 002e 0B       		.uleb128 0xb
 4300 002f 0B       		.uleb128 0xb
 4301 0030 3E       		.uleb128 0x3e
 4302 0031 0B       		.uleb128 0xb
 4303 0032 03       		.uleb128 0x3
 4304 0033 08       		.uleb128 0x8
 4305 0034 00       		.byte	0
 4306 0035 00       		.byte	0
 4307 0036 05       		.uleb128 0x5
 4308 0037 0F       		.uleb128 0xf
 4309 0038 00       		.byte	0
 4310 0039 0B       		.uleb128 0xb
 4311 003a 0B       		.uleb128 0xb
 4312 003b 00       		.byte	0
 4313 003c 00       		.byte	0
 4314 003d 06       		.uleb128 0x6
 4315 003e 0F       		.uleb128 0xf
 4316 003f 00       		.byte	0
 4317 0040 0B       		.uleb128 0xb
 4318 0041 0B       		.uleb128 0xb
 4319 0042 49       		.uleb128 0x49
 4320 0043 13       		.uleb128 0x13
 4321 0044 00       		.byte	0
 4322 0045 00       		.byte	0
 4323 0046 07       		.uleb128 0x7
 4324 0047 26       		.uleb128 0x26
 4325 0048 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 121


 4326 0049 00       		.byte	0
 4327 004a 00       		.byte	0
 4328 004b 08       		.uleb128 0x8
 4329 004c 13       		.uleb128 0x13
 4330 004d 01       		.byte	0x1
 4331 004e 03       		.uleb128 0x3
 4332 004f 0E       		.uleb128 0xe
 4333 0050 0B       		.uleb128 0xb
 4334 0051 0B       		.uleb128 0xb
 4335 0052 3A       		.uleb128 0x3a
 4336 0053 0B       		.uleb128 0xb
 4337 0054 3B       		.uleb128 0x3b
 4338 0055 0B       		.uleb128 0xb
 4339 0056 01       		.uleb128 0x1
 4340 0057 13       		.uleb128 0x13
 4341 0058 00       		.byte	0
 4342 0059 00       		.byte	0
 4343 005a 09       		.uleb128 0x9
 4344 005b 0D       		.uleb128 0xd
 4345 005c 00       		.byte	0
 4346 005d 03       		.uleb128 0x3
 4347 005e 0E       		.uleb128 0xe
 4348 005f 3A       		.uleb128 0x3a
 4349 0060 0B       		.uleb128 0xb
 4350 0061 3B       		.uleb128 0x3b
 4351 0062 0B       		.uleb128 0xb
 4352 0063 49       		.uleb128 0x49
 4353 0064 13       		.uleb128 0x13
 4354 0065 38       		.uleb128 0x38
 4355 0066 0A       		.uleb128 0xa
 4356 0067 00       		.byte	0
 4357 0068 00       		.byte	0
 4358 0069 0A       		.uleb128 0xa
 4359 006a 17       		.uleb128 0x17
 4360 006b 01       		.byte	0x1
 4361 006c 0B       		.uleb128 0xb
 4362 006d 0B       		.uleb128 0xb
 4363 006e 3A       		.uleb128 0x3a
 4364 006f 0B       		.uleb128 0xb
 4365 0070 3B       		.uleb128 0x3b
 4366 0071 0B       		.uleb128 0xb
 4367 0072 01       		.uleb128 0x1
 4368 0073 13       		.uleb128 0x13
 4369 0074 00       		.byte	0
 4370 0075 00       		.byte	0
 4371 0076 0B       		.uleb128 0xb
 4372 0077 0D       		.uleb128 0xd
 4373 0078 00       		.byte	0
 4374 0079 03       		.uleb128 0x3
 4375 007a 0E       		.uleb128 0xe
 4376 007b 3A       		.uleb128 0x3a
 4377 007c 0B       		.uleb128 0xb
 4378 007d 3B       		.uleb128 0x3b
 4379 007e 0B       		.uleb128 0xb
 4380 007f 49       		.uleb128 0x49
 4381 0080 13       		.uleb128 0x13
 4382 0081 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 122


 4383 0082 00       		.byte	0
 4384 0083 0C       		.uleb128 0xc
 4385 0084 0D       		.uleb128 0xd
 4386 0085 00       		.byte	0
 4387 0086 03       		.uleb128 0x3
 4388 0087 08       		.uleb128 0x8
 4389 0088 3A       		.uleb128 0x3a
 4390 0089 0B       		.uleb128 0xb
 4391 008a 3B       		.uleb128 0x3b
 4392 008b 0B       		.uleb128 0xb
 4393 008c 49       		.uleb128 0x49
 4394 008d 13       		.uleb128 0x13
 4395 008e 38       		.uleb128 0x38
 4396 008f 0A       		.uleb128 0xa
 4397 0090 00       		.byte	0
 4398 0091 00       		.byte	0
 4399 0092 0D       		.uleb128 0xd
 4400 0093 35       		.uleb128 0x35
 4401 0094 00       		.byte	0
 4402 0095 49       		.uleb128 0x49
 4403 0096 13       		.uleb128 0x13
 4404 0097 00       		.byte	0
 4405 0098 00       		.byte	0
 4406 0099 0E       		.uleb128 0xe
 4407 009a 2E       		.uleb128 0x2e
 4408 009b 01       		.byte	0x1
 4409 009c 03       		.uleb128 0x3
 4410 009d 0E       		.uleb128 0xe
 4411 009e 3A       		.uleb128 0x3a
 4412 009f 0B       		.uleb128 0xb
 4413 00a0 3B       		.uleb128 0x3b
 4414 00a1 05       		.uleb128 0x5
 4415 00a2 27       		.uleb128 0x27
 4416 00a3 0C       		.uleb128 0xc
 4417 00a4 20       		.uleb128 0x20
 4418 00a5 0B       		.uleb128 0xb
 4419 00a6 01       		.uleb128 0x1
 4420 00a7 13       		.uleb128 0x13
 4421 00a8 00       		.byte	0
 4422 00a9 00       		.byte	0
 4423 00aa 0F       		.uleb128 0xf
 4424 00ab 05       		.uleb128 0x5
 4425 00ac 00       		.byte	0
 4426 00ad 03       		.uleb128 0x3
 4427 00ae 0E       		.uleb128 0xe
 4428 00af 3A       		.uleb128 0x3a
 4429 00b0 0B       		.uleb128 0xb
 4430 00b1 3B       		.uleb128 0x3b
 4431 00b2 05       		.uleb128 0x5
 4432 00b3 49       		.uleb128 0x49
 4433 00b4 13       		.uleb128 0x13
 4434 00b5 00       		.byte	0
 4435 00b6 00       		.byte	0
 4436 00b7 10       		.uleb128 0x10
 4437 00b8 26       		.uleb128 0x26
 4438 00b9 00       		.byte	0
 4439 00ba 49       		.uleb128 0x49
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 123


 4440 00bb 13       		.uleb128 0x13
 4441 00bc 00       		.byte	0
 4442 00bd 00       		.byte	0
 4443 00be 11       		.uleb128 0x11
 4444 00bf 2E       		.uleb128 0x2e
 4445 00c0 01       		.byte	0x1
 4446 00c1 03       		.uleb128 0x3
 4447 00c2 0E       		.uleb128 0xe
 4448 00c3 3A       		.uleb128 0x3a
 4449 00c4 0B       		.uleb128 0xb
 4450 00c5 3B       		.uleb128 0x3b
 4451 00c6 0B       		.uleb128 0xb
 4452 00c7 27       		.uleb128 0x27
 4453 00c8 0C       		.uleb128 0xc
 4454 00c9 49       		.uleb128 0x49
 4455 00ca 13       		.uleb128 0x13
 4456 00cb 20       		.uleb128 0x20
 4457 00cc 0B       		.uleb128 0xb
 4458 00cd 01       		.uleb128 0x1
 4459 00ce 13       		.uleb128 0x13
 4460 00cf 00       		.byte	0
 4461 00d0 00       		.byte	0
 4462 00d1 12       		.uleb128 0x12
 4463 00d2 34       		.uleb128 0x34
 4464 00d3 00       		.byte	0
 4465 00d4 03       		.uleb128 0x3
 4466 00d5 0E       		.uleb128 0xe
 4467 00d6 3A       		.uleb128 0x3a
 4468 00d7 0B       		.uleb128 0xb
 4469 00d8 3B       		.uleb128 0x3b
 4470 00d9 0B       		.uleb128 0xb
 4471 00da 49       		.uleb128 0x49
 4472 00db 13       		.uleb128 0x13
 4473 00dc 00       		.byte	0
 4474 00dd 00       		.byte	0
 4475 00de 13       		.uleb128 0x13
 4476 00df 2E       		.uleb128 0x2e
 4477 00e0 01       		.byte	0x1
 4478 00e1 03       		.uleb128 0x3
 4479 00e2 0E       		.uleb128 0xe
 4480 00e3 3A       		.uleb128 0x3a
 4481 00e4 0B       		.uleb128 0xb
 4482 00e5 3B       		.uleb128 0x3b
 4483 00e6 05       		.uleb128 0x5
 4484 00e7 27       		.uleb128 0x27
 4485 00e8 0C       		.uleb128 0xc
 4486 00e9 49       		.uleb128 0x49
 4487 00ea 13       		.uleb128 0x13
 4488 00eb 11       		.uleb128 0x11
 4489 00ec 01       		.uleb128 0x1
 4490 00ed 12       		.uleb128 0x12
 4491 00ee 01       		.uleb128 0x1
 4492 00ef 40       		.uleb128 0x40
 4493 00f0 06       		.uleb128 0x6
 4494 00f1 9742     		.uleb128 0x2117
 4495 00f3 0C       		.uleb128 0xc
 4496 00f4 01       		.uleb128 0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 124


 4497 00f5 13       		.uleb128 0x13
 4498 00f6 00       		.byte	0
 4499 00f7 00       		.byte	0
 4500 00f8 14       		.uleb128 0x14
 4501 00f9 05       		.uleb128 0x5
 4502 00fa 00       		.byte	0
 4503 00fb 03       		.uleb128 0x3
 4504 00fc 0E       		.uleb128 0xe
 4505 00fd 3A       		.uleb128 0x3a
 4506 00fe 0B       		.uleb128 0xb
 4507 00ff 3B       		.uleb128 0x3b
 4508 0100 05       		.uleb128 0x5
 4509 0101 49       		.uleb128 0x49
 4510 0102 13       		.uleb128 0x13
 4511 0103 02       		.uleb128 0x2
 4512 0104 06       		.uleb128 0x6
 4513 0105 00       		.byte	0
 4514 0106 00       		.byte	0
 4515 0107 15       		.uleb128 0x15
 4516 0108 34       		.uleb128 0x34
 4517 0109 00       		.byte	0
 4518 010a 03       		.uleb128 0x3
 4519 010b 0E       		.uleb128 0xe
 4520 010c 3A       		.uleb128 0x3a
 4521 010d 0B       		.uleb128 0xb
 4522 010e 3B       		.uleb128 0x3b
 4523 010f 05       		.uleb128 0x5
 4524 0110 49       		.uleb128 0x49
 4525 0111 13       		.uleb128 0x13
 4526 0112 02       		.uleb128 0x2
 4527 0113 06       		.uleb128 0x6
 4528 0114 00       		.byte	0
 4529 0115 00       		.byte	0
 4530 0116 16       		.uleb128 0x16
 4531 0117 898201   		.uleb128 0x4109
 4532 011a 00       		.byte	0
 4533 011b 11       		.uleb128 0x11
 4534 011c 01       		.uleb128 0x1
 4535 011d 31       		.uleb128 0x31
 4536 011e 13       		.uleb128 0x13
 4537 011f 00       		.byte	0
 4538 0120 00       		.byte	0
 4539 0121 17       		.uleb128 0x17
 4540 0122 2E       		.uleb128 0x2e
 4541 0123 01       		.byte	0x1
 4542 0124 03       		.uleb128 0x3
 4543 0125 0E       		.uleb128 0xe
 4544 0126 3A       		.uleb128 0x3a
 4545 0127 0B       		.uleb128 0xb
 4546 0128 3B       		.uleb128 0x3b
 4547 0129 05       		.uleb128 0x5
 4548 012a 27       		.uleb128 0x27
 4549 012b 0C       		.uleb128 0xc
 4550 012c 11       		.uleb128 0x11
 4551 012d 01       		.uleb128 0x1
 4552 012e 12       		.uleb128 0x12
 4553 012f 01       		.uleb128 0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 125


 4554 0130 40       		.uleb128 0x40
 4555 0131 06       		.uleb128 0x6
 4556 0132 9742     		.uleb128 0x2117
 4557 0134 0C       		.uleb128 0xc
 4558 0135 01       		.uleb128 0x1
 4559 0136 13       		.uleb128 0x13
 4560 0137 00       		.byte	0
 4561 0138 00       		.byte	0
 4562 0139 18       		.uleb128 0x18
 4563 013a 898201   		.uleb128 0x4109
 4564 013d 01       		.byte	0x1
 4565 013e 11       		.uleb128 0x11
 4566 013f 01       		.uleb128 0x1
 4567 0140 9542     		.uleb128 0x2115
 4568 0142 0C       		.uleb128 0xc
 4569 0143 31       		.uleb128 0x31
 4570 0144 13       		.uleb128 0x13
 4571 0145 00       		.byte	0
 4572 0146 00       		.byte	0
 4573 0147 19       		.uleb128 0x19
 4574 0148 8A8201   		.uleb128 0x410a
 4575 014b 00       		.byte	0
 4576 014c 02       		.uleb128 0x2
 4577 014d 0A       		.uleb128 0xa
 4578 014e 9142     		.uleb128 0x2111
 4579 0150 0A       		.uleb128 0xa
 4580 0151 00       		.byte	0
 4581 0152 00       		.byte	0
 4582 0153 1A       		.uleb128 0x1a
 4583 0154 0B       		.uleb128 0xb
 4584 0155 01       		.byte	0x1
 4585 0156 11       		.uleb128 0x11
 4586 0157 01       		.uleb128 0x1
 4587 0158 12       		.uleb128 0x12
 4588 0159 01       		.uleb128 0x1
 4589 015a 01       		.uleb128 0x1
 4590 015b 13       		.uleb128 0x13
 4591 015c 00       		.byte	0
 4592 015d 00       		.byte	0
 4593 015e 1B       		.uleb128 0x1b
 4594 015f 898201   		.uleb128 0x4109
 4595 0162 01       		.byte	0x1
 4596 0163 11       		.uleb128 0x11
 4597 0164 01       		.uleb128 0x1
 4598 0165 31       		.uleb128 0x31
 4599 0166 13       		.uleb128 0x13
 4600 0167 01       		.uleb128 0x1
 4601 0168 13       		.uleb128 0x13
 4602 0169 00       		.byte	0
 4603 016a 00       		.byte	0
 4604 016b 1C       		.uleb128 0x1c
 4605 016c 898201   		.uleb128 0x4109
 4606 016f 00       		.byte	0
 4607 0170 11       		.uleb128 0x11
 4608 0171 01       		.uleb128 0x1
 4609 0172 9542     		.uleb128 0x2115
 4610 0174 0C       		.uleb128 0xc
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 126


 4611 0175 31       		.uleb128 0x31
 4612 0176 13       		.uleb128 0x13
 4613 0177 00       		.byte	0
 4614 0178 00       		.byte	0
 4615 0179 1D       		.uleb128 0x1d
 4616 017a 2E       		.uleb128 0x2e
 4617 017b 01       		.byte	0x1
 4618 017c 3F       		.uleb128 0x3f
 4619 017d 0C       		.uleb128 0xc
 4620 017e 03       		.uleb128 0x3
 4621 017f 0E       		.uleb128 0xe
 4622 0180 3A       		.uleb128 0x3a
 4623 0181 0B       		.uleb128 0xb
 4624 0182 3B       		.uleb128 0x3b
 4625 0183 05       		.uleb128 0x5
 4626 0184 27       		.uleb128 0x27
 4627 0185 0C       		.uleb128 0xc
 4628 0186 49       		.uleb128 0x49
 4629 0187 13       		.uleb128 0x13
 4630 0188 11       		.uleb128 0x11
 4631 0189 01       		.uleb128 0x1
 4632 018a 12       		.uleb128 0x12
 4633 018b 01       		.uleb128 0x1
 4634 018c 40       		.uleb128 0x40
 4635 018d 06       		.uleb128 0x6
 4636 018e 9742     		.uleb128 0x2117
 4637 0190 0C       		.uleb128 0xc
 4638 0191 01       		.uleb128 0x1
 4639 0192 13       		.uleb128 0x13
 4640 0193 00       		.byte	0
 4641 0194 00       		.byte	0
 4642 0195 1E       		.uleb128 0x1e
 4643 0196 1D       		.uleb128 0x1d
 4644 0197 01       		.byte	0x1
 4645 0198 31       		.uleb128 0x31
 4646 0199 13       		.uleb128 0x13
 4647 019a 52       		.uleb128 0x52
 4648 019b 01       		.uleb128 0x1
 4649 019c 55       		.uleb128 0x55
 4650 019d 06       		.uleb128 0x6
 4651 019e 58       		.uleb128 0x58
 4652 019f 0B       		.uleb128 0xb
 4653 01a0 59       		.uleb128 0x59
 4654 01a1 05       		.uleb128 0x5
 4655 01a2 01       		.uleb128 0x1
 4656 01a3 13       		.uleb128 0x13
 4657 01a4 00       		.byte	0
 4658 01a5 00       		.byte	0
 4659 01a6 1F       		.uleb128 0x1f
 4660 01a7 05       		.uleb128 0x5
 4661 01a8 00       		.byte	0
 4662 01a9 31       		.uleb128 0x31
 4663 01aa 13       		.uleb128 0x13
 4664 01ab 02       		.uleb128 0x2
 4665 01ac 06       		.uleb128 0x6
 4666 01ad 00       		.byte	0
 4667 01ae 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 127


 4668 01af 20       		.uleb128 0x20
 4669 01b0 898201   		.uleb128 0x4109
 4670 01b3 01       		.byte	0x1
 4671 01b4 11       		.uleb128 0x11
 4672 01b5 01       		.uleb128 0x1
 4673 01b6 31       		.uleb128 0x31
 4674 01b7 13       		.uleb128 0x13
 4675 01b8 00       		.byte	0
 4676 01b9 00       		.byte	0
 4677 01ba 21       		.uleb128 0x21
 4678 01bb 34       		.uleb128 0x34
 4679 01bc 00       		.byte	0
 4680 01bd 03       		.uleb128 0x3
 4681 01be 0E       		.uleb128 0xe
 4682 01bf 3A       		.uleb128 0x3a
 4683 01c0 0B       		.uleb128 0xb
 4684 01c1 3B       		.uleb128 0x3b
 4685 01c2 05       		.uleb128 0x5
 4686 01c3 49       		.uleb128 0x49
 4687 01c4 13       		.uleb128 0x13
 4688 01c5 02       		.uleb128 0x2
 4689 01c6 0A       		.uleb128 0xa
 4690 01c7 00       		.byte	0
 4691 01c8 00       		.byte	0
 4692 01c9 22       		.uleb128 0x22
 4693 01ca 2E       		.uleb128 0x2e
 4694 01cb 01       		.byte	0x1
 4695 01cc 03       		.uleb128 0x3
 4696 01cd 0E       		.uleb128 0xe
 4697 01ce 3A       		.uleb128 0x3a
 4698 01cf 0B       		.uleb128 0xb
 4699 01d0 3B       		.uleb128 0x3b
 4700 01d1 05       		.uleb128 0x5
 4701 01d2 27       		.uleb128 0x27
 4702 01d3 0C       		.uleb128 0xc
 4703 01d4 49       		.uleb128 0x49
 4704 01d5 13       		.uleb128 0x13
 4705 01d6 20       		.uleb128 0x20
 4706 01d7 0B       		.uleb128 0xb
 4707 01d8 01       		.uleb128 0x1
 4708 01d9 13       		.uleb128 0x13
 4709 01da 00       		.byte	0
 4710 01db 00       		.byte	0
 4711 01dc 23       		.uleb128 0x23
 4712 01dd 34       		.uleb128 0x34
 4713 01de 00       		.byte	0
 4714 01df 03       		.uleb128 0x3
 4715 01e0 0E       		.uleb128 0xe
 4716 01e1 3A       		.uleb128 0x3a
 4717 01e2 0B       		.uleb128 0xb
 4718 01e3 3B       		.uleb128 0x3b
 4719 01e4 05       		.uleb128 0x5
 4720 01e5 49       		.uleb128 0x49
 4721 01e6 13       		.uleb128 0x13
 4722 01e7 00       		.byte	0
 4723 01e8 00       		.byte	0
 4724 01e9 24       		.uleb128 0x24
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 128


 4725 01ea 1D       		.uleb128 0x1d
 4726 01eb 01       		.byte	0x1
 4727 01ec 31       		.uleb128 0x31
 4728 01ed 13       		.uleb128 0x13
 4729 01ee 11       		.uleb128 0x11
 4730 01ef 01       		.uleb128 0x1
 4731 01f0 12       		.uleb128 0x12
 4732 01f1 01       		.uleb128 0x1
 4733 01f2 58       		.uleb128 0x58
 4734 01f3 0B       		.uleb128 0xb
 4735 01f4 59       		.uleb128 0x59
 4736 01f5 05       		.uleb128 0x5
 4737 01f6 01       		.uleb128 0x1
 4738 01f7 13       		.uleb128 0x13
 4739 01f8 00       		.byte	0
 4740 01f9 00       		.byte	0
 4741 01fa 25       		.uleb128 0x25
 4742 01fb 0B       		.uleb128 0xb
 4743 01fc 01       		.byte	0x1
 4744 01fd 11       		.uleb128 0x11
 4745 01fe 01       		.uleb128 0x1
 4746 01ff 12       		.uleb128 0x12
 4747 0200 01       		.uleb128 0x1
 4748 0201 00       		.byte	0
 4749 0202 00       		.byte	0
 4750 0203 26       		.uleb128 0x26
 4751 0204 34       		.uleb128 0x34
 4752 0205 00       		.byte	0
 4753 0206 31       		.uleb128 0x31
 4754 0207 13       		.uleb128 0x13
 4755 0208 02       		.uleb128 0x2
 4756 0209 06       		.uleb128 0x6
 4757 020a 00       		.byte	0
 4758 020b 00       		.byte	0
 4759 020c 27       		.uleb128 0x27
 4760 020d 34       		.uleb128 0x34
 4761 020e 00       		.byte	0
 4762 020f 03       		.uleb128 0x3
 4763 0210 0E       		.uleb128 0xe
 4764 0211 3A       		.uleb128 0x3a
 4765 0212 0B       		.uleb128 0xb
 4766 0213 3B       		.uleb128 0x3b
 4767 0214 05       		.uleb128 0x5
 4768 0215 49       		.uleb128 0x49
 4769 0216 13       		.uleb128 0x13
 4770 0217 1C       		.uleb128 0x1c
 4771 0218 0B       		.uleb128 0xb
 4772 0219 00       		.byte	0
 4773 021a 00       		.byte	0
 4774 021b 28       		.uleb128 0x28
 4775 021c 34       		.uleb128 0x34
 4776 021d 00       		.byte	0
 4777 021e 31       		.uleb128 0x31
 4778 021f 13       		.uleb128 0x13
 4779 0220 02       		.uleb128 0x2
 4780 0221 0A       		.uleb128 0xa
 4781 0222 00       		.byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 129


 4782 0223 00       		.byte	0
 4783 0224 29       		.uleb128 0x29
 4784 0225 34       		.uleb128 0x34
 4785 0226 00       		.byte	0
 4786 0227 31       		.uleb128 0x31
 4787 0228 13       		.uleb128 0x13
 4788 0229 00       		.byte	0
 4789 022a 00       		.byte	0
 4790 022b 2A       		.uleb128 0x2a
 4791 022c 1D       		.uleb128 0x1d
 4792 022d 01       		.byte	0x1
 4793 022e 31       		.uleb128 0x31
 4794 022f 13       		.uleb128 0x13
 4795 0230 11       		.uleb128 0x11
 4796 0231 01       		.uleb128 0x1
 4797 0232 12       		.uleb128 0x12
 4798 0233 01       		.uleb128 0x1
 4799 0234 58       		.uleb128 0x58
 4800 0235 0B       		.uleb128 0xb
 4801 0236 59       		.uleb128 0x59
 4802 0237 05       		.uleb128 0x5
 4803 0238 00       		.byte	0
 4804 0239 00       		.byte	0
 4805 023a 2B       		.uleb128 0x2b
 4806 023b 05       		.uleb128 0x5
 4807 023c 00       		.byte	0
 4808 023d 31       		.uleb128 0x31
 4809 023e 13       		.uleb128 0x13
 4810 023f 02       		.uleb128 0x2
 4811 0240 0A       		.uleb128 0xa
 4812 0241 00       		.byte	0
 4813 0242 00       		.byte	0
 4814 0243 2C       		.uleb128 0x2c
 4815 0244 2E       		.uleb128 0x2e
 4816 0245 01       		.byte	0x1
 4817 0246 3F       		.uleb128 0x3f
 4818 0247 0C       		.uleb128 0xc
 4819 0248 03       		.uleb128 0x3
 4820 0249 0E       		.uleb128 0xe
 4821 024a 3A       		.uleb128 0x3a
 4822 024b 0B       		.uleb128 0xb
 4823 024c 3B       		.uleb128 0x3b
 4824 024d 05       		.uleb128 0x5
 4825 024e 27       		.uleb128 0x27
 4826 024f 0C       		.uleb128 0xc
 4827 0250 49       		.uleb128 0x49
 4828 0251 13       		.uleb128 0x13
 4829 0252 11       		.uleb128 0x11
 4830 0253 01       		.uleb128 0x1
 4831 0254 12       		.uleb128 0x12
 4832 0255 01       		.uleb128 0x1
 4833 0256 40       		.uleb128 0x40
 4834 0257 0A       		.uleb128 0xa
 4835 0258 9742     		.uleb128 0x2117
 4836 025a 0C       		.uleb128 0xc
 4837 025b 01       		.uleb128 0x1
 4838 025c 13       		.uleb128 0x13
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 130


 4839 025d 00       		.byte	0
 4840 025e 00       		.byte	0
 4841 025f 2D       		.uleb128 0x2d
 4842 0260 2E       		.uleb128 0x2e
 4843 0261 01       		.byte	0x1
 4844 0262 3F       		.uleb128 0x3f
 4845 0263 0C       		.uleb128 0xc
 4846 0264 03       		.uleb128 0x3
 4847 0265 0E       		.uleb128 0xe
 4848 0266 3A       		.uleb128 0x3a
 4849 0267 0B       		.uleb128 0xb
 4850 0268 3B       		.uleb128 0x3b
 4851 0269 05       		.uleb128 0x5
 4852 026a 27       		.uleb128 0x27
 4853 026b 0C       		.uleb128 0xc
 4854 026c 11       		.uleb128 0x11
 4855 026d 01       		.uleb128 0x1
 4856 026e 12       		.uleb128 0x12
 4857 026f 01       		.uleb128 0x1
 4858 0270 40       		.uleb128 0x40
 4859 0271 0A       		.uleb128 0xa
 4860 0272 9742     		.uleb128 0x2117
 4861 0274 0C       		.uleb128 0xc
 4862 0275 01       		.uleb128 0x1
 4863 0276 13       		.uleb128 0x13
 4864 0277 00       		.byte	0
 4865 0278 00       		.byte	0
 4866 0279 2E       		.uleb128 0x2e
 4867 027a 2E       		.uleb128 0x2e
 4868 027b 01       		.byte	0x1
 4869 027c 3F       		.uleb128 0x3f
 4870 027d 0C       		.uleb128 0xc
 4871 027e 03       		.uleb128 0x3
 4872 027f 0E       		.uleb128 0xe
 4873 0280 3A       		.uleb128 0x3a
 4874 0281 0B       		.uleb128 0xb
 4875 0282 3B       		.uleb128 0x3b
 4876 0283 05       		.uleb128 0x5
 4877 0284 27       		.uleb128 0x27
 4878 0285 0C       		.uleb128 0xc
 4879 0286 49       		.uleb128 0x49
 4880 0287 13       		.uleb128 0x13
 4881 0288 3C       		.uleb128 0x3c
 4882 0289 0C       		.uleb128 0xc
 4883 028a 01       		.uleb128 0x1
 4884 028b 13       		.uleb128 0x13
 4885 028c 00       		.byte	0
 4886 028d 00       		.byte	0
 4887 028e 2F       		.uleb128 0x2f
 4888 028f 05       		.uleb128 0x5
 4889 0290 00       		.byte	0
 4890 0291 49       		.uleb128 0x49
 4891 0292 13       		.uleb128 0x13
 4892 0293 00       		.byte	0
 4893 0294 00       		.byte	0
 4894 0295 30       		.uleb128 0x30
 4895 0296 2E       		.uleb128 0x2e
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 131


 4896 0297 01       		.byte	0x1
 4897 0298 3F       		.uleb128 0x3f
 4898 0299 0C       		.uleb128 0xc
 4899 029a 03       		.uleb128 0x3
 4900 029b 0E       		.uleb128 0xe
 4901 029c 27       		.uleb128 0x27
 4902 029d 0C       		.uleb128 0xc
 4903 029e 49       		.uleb128 0x49
 4904 029f 13       		.uleb128 0x13
 4905 02a0 34       		.uleb128 0x34
 4906 02a1 0C       		.uleb128 0xc
 4907 02a2 3C       		.uleb128 0x3c
 4908 02a3 0C       		.uleb128 0xc
 4909 02a4 01       		.uleb128 0x1
 4910 02a5 13       		.uleb128 0x13
 4911 02a6 00       		.byte	0
 4912 02a7 00       		.byte	0
 4913 02a8 31       		.uleb128 0x31
 4914 02a9 2E       		.uleb128 0x2e
 4915 02aa 00       		.byte	0
 4916 02ab 3F       		.uleb128 0x3f
 4917 02ac 0C       		.uleb128 0xc
 4918 02ad 03       		.uleb128 0x3
 4919 02ae 0E       		.uleb128 0xe
 4920 02af 3A       		.uleb128 0x3a
 4921 02b0 0B       		.uleb128 0xb
 4922 02b1 3B       		.uleb128 0x3b
 4923 02b2 05       		.uleb128 0x5
 4924 02b3 27       		.uleb128 0x27
 4925 02b4 0C       		.uleb128 0xc
 4926 02b5 3C       		.uleb128 0x3c
 4927 02b6 0C       		.uleb128 0xc
 4928 02b7 00       		.byte	0
 4929 02b8 00       		.byte	0
 4930 02b9 32       		.uleb128 0x32
 4931 02ba 2E       		.uleb128 0x2e
 4932 02bb 00       		.byte	0
 4933 02bc 3F       		.uleb128 0x3f
 4934 02bd 0C       		.uleb128 0xc
 4935 02be 03       		.uleb128 0x3
 4936 02bf 0E       		.uleb128 0xe
 4937 02c0 3A       		.uleb128 0x3a
 4938 02c1 0B       		.uleb128 0xb
 4939 02c2 3B       		.uleb128 0x3b
 4940 02c3 0B       		.uleb128 0xb
 4941 02c4 27       		.uleb128 0x27
 4942 02c5 0C       		.uleb128 0xc
 4943 02c6 3C       		.uleb128 0x3c
 4944 02c7 0C       		.uleb128 0xc
 4945 02c8 00       		.byte	0
 4946 02c9 00       		.byte	0
 4947 02ca 33       		.uleb128 0x33
 4948 02cb 2E       		.uleb128 0x2e
 4949 02cc 01       		.byte	0x1
 4950 02cd 3F       		.uleb128 0x3f
 4951 02ce 0C       		.uleb128 0xc
 4952 02cf 03       		.uleb128 0x3
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 132


 4953 02d0 0E       		.uleb128 0xe
 4954 02d1 3A       		.uleb128 0x3a
 4955 02d2 0B       		.uleb128 0xb
 4956 02d3 3B       		.uleb128 0x3b
 4957 02d4 05       		.uleb128 0x5
 4958 02d5 27       		.uleb128 0x27
 4959 02d6 0C       		.uleb128 0xc
 4960 02d7 3C       		.uleb128 0x3c
 4961 02d8 0C       		.uleb128 0xc
 4962 02d9 01       		.uleb128 0x1
 4963 02da 13       		.uleb128 0x13
 4964 02db 00       		.byte	0
 4965 02dc 00       		.byte	0
 4966 02dd 34       		.uleb128 0x34
 4967 02de 2E       		.uleb128 0x2e
 4968 02df 01       		.byte	0x1
 4969 02e0 3F       		.uleb128 0x3f
 4970 02e1 0C       		.uleb128 0xc
 4971 02e2 03       		.uleb128 0x3
 4972 02e3 0E       		.uleb128 0xe
 4973 02e4 3A       		.uleb128 0x3a
 4974 02e5 0B       		.uleb128 0xb
 4975 02e6 3B       		.uleb128 0x3b
 4976 02e7 0B       		.uleb128 0xb
 4977 02e8 27       		.uleb128 0x27
 4978 02e9 0C       		.uleb128 0xc
 4979 02ea 49       		.uleb128 0x49
 4980 02eb 13       		.uleb128 0x13
 4981 02ec 3C       		.uleb128 0x3c
 4982 02ed 0C       		.uleb128 0xc
 4983 02ee 01       		.uleb128 0x1
 4984 02ef 13       		.uleb128 0x13
 4985 02f0 00       		.byte	0
 4986 02f1 00       		.byte	0
 4987 02f2 35       		.uleb128 0x35
 4988 02f3 2E       		.uleb128 0x2e
 4989 02f4 00       		.byte	0
 4990 02f5 3F       		.uleb128 0x3f
 4991 02f6 0C       		.uleb128 0xc
 4992 02f7 03       		.uleb128 0x3
 4993 02f8 0E       		.uleb128 0xe
 4994 02f9 3A       		.uleb128 0x3a
 4995 02fa 0B       		.uleb128 0xb
 4996 02fb 3B       		.uleb128 0x3b
 4997 02fc 05       		.uleb128 0x5
 4998 02fd 27       		.uleb128 0x27
 4999 02fe 0C       		.uleb128 0xc
 5000 02ff 49       		.uleb128 0x49
 5001 0300 13       		.uleb128 0x13
 5002 0301 3C       		.uleb128 0x3c
 5003 0302 0C       		.uleb128 0xc
 5004 0303 00       		.byte	0
 5005 0304 00       		.byte	0
 5006 0305 36       		.uleb128 0x36
 5007 0306 2E       		.uleb128 0x2e
 5008 0307 01       		.byte	0x1
 5009 0308 3F       		.uleb128 0x3f
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 133


 5010 0309 0C       		.uleb128 0xc
 5011 030a 03       		.uleb128 0x3
 5012 030b 0E       		.uleb128 0xe
 5013 030c 3A       		.uleb128 0x3a
 5014 030d 0B       		.uleb128 0xb
 5015 030e 3B       		.uleb128 0x3b
 5016 030f 0B       		.uleb128 0xb
 5017 0310 27       		.uleb128 0x27
 5018 0311 0C       		.uleb128 0xc
 5019 0312 3C       		.uleb128 0x3c
 5020 0313 0C       		.uleb128 0xc
 5021 0314 00       		.byte	0
 5022 0315 00       		.byte	0
 5023 0316 00       		.byte	0
 5024              		.section	.debug_loc,"",%progbits
 5025              	.Ldebug_loc0:
 5026              	.LLST0:
 5027 0000 00000000 		.4byte	.LFB23-.Ltext0
 5028 0004 02000000 		.4byte	.LCFI0-.Ltext0
 5029 0008 0200     		.2byte	0x2
 5030 000a 7D       		.byte	0x7d
 5031 000b 00       		.sleb128 0
 5032 000c 02000000 		.4byte	.LCFI0-.Ltext0
 5033 0010 70000000 		.4byte	.LFE23-.Ltext0
 5034 0014 0200     		.2byte	0x2
 5035 0016 7D       		.byte	0x7d
 5036 0017 10       		.sleb128 16
 5037 0018 00000000 		.4byte	0
 5038 001c 00000000 		.4byte	0
 5039              	.LLST1:
 5040 0020 00000000 		.4byte	.LVL0-.Ltext0
 5041 0024 12000000 		.4byte	.LVL4-.Ltext0
 5042 0028 0100     		.2byte	0x1
 5043 002a 50       		.byte	0x50
 5044 002b 12000000 		.4byte	.LVL4-.Ltext0
 5045 002f 1A000000 		.4byte	.LVL6-.Ltext0
 5046 0033 0100     		.2byte	0x1
 5047 0035 54       		.byte	0x54
 5048 0036 1A000000 		.4byte	.LVL6-.Ltext0
 5049 003a 1E000000 		.4byte	.LVL7-.Ltext0
 5050 003e 0100     		.2byte	0x1
 5051 0040 50       		.byte	0x50
 5052 0041 1E000000 		.4byte	.LVL7-.Ltext0
 5053 0045 36000000 		.4byte	.LVL9-.Ltext0
 5054 0049 0100     		.2byte	0x1
 5055 004b 54       		.byte	0x54
 5056 004c 36000000 		.4byte	.LVL9-.Ltext0
 5057 0050 38000000 		.4byte	.LVL10-.Ltext0
 5058 0054 0100     		.2byte	0x1
 5059 0056 50       		.byte	0x50
 5060 0057 38000000 		.4byte	.LVL10-.Ltext0
 5061 005b 5C000000 		.4byte	.LVL13-.Ltext0
 5062 005f 0100     		.2byte	0x1
 5063 0061 54       		.byte	0x54
 5064 0062 5C000000 		.4byte	.LVL13-.Ltext0
 5065 0066 5E000000 		.4byte	.LVL14-.Ltext0
 5066 006a 0100     		.2byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 134


 5067 006c 50       		.byte	0x50
 5068 006d 5E000000 		.4byte	.LVL14-.Ltext0
 5069 0071 70000000 		.4byte	.LFE23-.Ltext0
 5070 0075 0100     		.2byte	0x1
 5071 0077 54       		.byte	0x54
 5072 0078 00000000 		.4byte	0
 5073 007c 00000000 		.4byte	0
 5074              	.LLST2:
 5075 0080 00000000 		.4byte	.LVL0-.Ltext0
 5076 0084 15000000 		.4byte	.LVL5-1-.Ltext0
 5077 0088 0100     		.2byte	0x1
 5078 008a 51       		.byte	0x51
 5079 008b 15000000 		.4byte	.LVL5-1-.Ltext0
 5080 008f 1A000000 		.4byte	.LVL6-.Ltext0
 5081 0093 0400     		.2byte	0x4
 5082 0095 F3       		.byte	0xf3
 5083 0096 01       		.uleb128 0x1
 5084 0097 51       		.byte	0x51
 5085 0098 9F       		.byte	0x9f
 5086 0099 1A000000 		.4byte	.LVL6-.Ltext0
 5087 009d 21000000 		.4byte	.LVL8-1-.Ltext0
 5088 00a1 0100     		.2byte	0x1
 5089 00a3 51       		.byte	0x51
 5090 00a4 21000000 		.4byte	.LVL8-1-.Ltext0
 5091 00a8 36000000 		.4byte	.LVL9-.Ltext0
 5092 00ac 0400     		.2byte	0x4
 5093 00ae F3       		.byte	0xf3
 5094 00af 01       		.uleb128 0x1
 5095 00b0 51       		.byte	0x51
 5096 00b1 9F       		.byte	0x9f
 5097 00b2 36000000 		.4byte	.LVL9-.Ltext0
 5098 00b6 3B000000 		.4byte	.LVL11-1-.Ltext0
 5099 00ba 0100     		.2byte	0x1
 5100 00bc 51       		.byte	0x51
 5101 00bd 3B000000 		.4byte	.LVL11-1-.Ltext0
 5102 00c1 5C000000 		.4byte	.LVL13-.Ltext0
 5103 00c5 0400     		.2byte	0x4
 5104 00c7 F3       		.byte	0xf3
 5105 00c8 01       		.uleb128 0x1
 5106 00c9 51       		.byte	0x51
 5107 00ca 9F       		.byte	0x9f
 5108 00cb 5C000000 		.4byte	.LVL13-.Ltext0
 5109 00cf 60000000 		.4byte	.LVL15-.Ltext0
 5110 00d3 0100     		.2byte	0x1
 5111 00d5 51       		.byte	0x51
 5112 00d6 60000000 		.4byte	.LVL15-.Ltext0
 5113 00da 70000000 		.4byte	.LFE23-.Ltext0
 5114 00de 0400     		.2byte	0x4
 5115 00e0 F3       		.byte	0xf3
 5116 00e1 01       		.uleb128 0x1
 5117 00e2 51       		.byte	0x51
 5118 00e3 9F       		.byte	0x9f
 5119 00e4 00000000 		.4byte	0
 5120 00e8 00000000 		.4byte	0
 5121              	.LLST3:
 5122 00ec 00000000 		.4byte	.LVL0-.Ltext0
 5123 00f0 06000000 		.4byte	.LVL1-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 135


 5124 00f4 0100     		.2byte	0x1
 5125 00f6 52       		.byte	0x52
 5126 00f7 06000000 		.4byte	.LVL1-.Ltext0
 5127 00fb 0E000000 		.4byte	.LVL3-.Ltext0
 5128 00ff 0100     		.2byte	0x1
 5129 0101 55       		.byte	0x55
 5130 0102 0E000000 		.4byte	.LVL3-.Ltext0
 5131 0106 1A000000 		.4byte	.LVL6-.Ltext0
 5132 010a 0400     		.2byte	0x4
 5133 010c F3       		.byte	0xf3
 5134 010d 01       		.uleb128 0x1
 5135 010e 52       		.byte	0x52
 5136 010f 9F       		.byte	0x9f
 5137 0110 1A000000 		.4byte	.LVL6-.Ltext0
 5138 0114 5C000000 		.4byte	.LVL13-.Ltext0
 5139 0118 0100     		.2byte	0x1
 5140 011a 55       		.byte	0x55
 5141 011b 5C000000 		.4byte	.LVL13-.Ltext0
 5142 011f 60000000 		.4byte	.LVL15-.Ltext0
 5143 0123 0400     		.2byte	0x4
 5144 0125 F3       		.byte	0xf3
 5145 0126 01       		.uleb128 0x1
 5146 0127 52       		.byte	0x52
 5147 0128 9F       		.byte	0x9f
 5148 0129 60000000 		.4byte	.LVL15-.Ltext0
 5149 012d 6A000000 		.4byte	.LVL16-.Ltext0
 5150 0131 0100     		.2byte	0x1
 5151 0133 55       		.byte	0x55
 5152 0134 6A000000 		.4byte	.LVL16-.Ltext0
 5153 0138 70000000 		.4byte	.LFE23-.Ltext0
 5154 013c 0400     		.2byte	0x4
 5155 013e F3       		.byte	0xf3
 5156 013f 01       		.uleb128 0x1
 5157 0140 52       		.byte	0x52
 5158 0141 9F       		.byte	0x9f
 5159 0142 00000000 		.4byte	0
 5160 0146 00000000 		.4byte	0
 5161              	.LLST4:
 5162 014a 00000000 		.4byte	.LVL0-.Ltext0
 5163 014e 16000000 		.4byte	.LVL5-.Ltext0
 5164 0152 0200     		.2byte	0x2
 5165 0154 30       		.byte	0x30
 5166 0155 9F       		.byte	0x9f
 5167 0156 16000000 		.4byte	.LVL5-.Ltext0
 5168 015a 1A000000 		.4byte	.LVL6-.Ltext0
 5169 015e 0100     		.2byte	0x1
 5170 0160 50       		.byte	0x50
 5171 0161 1A000000 		.4byte	.LVL6-.Ltext0
 5172 0165 6A000000 		.4byte	.LVL16-.Ltext0
 5173 0169 0200     		.2byte	0x2
 5174 016b 30       		.byte	0x30
 5175 016c 9F       		.byte	0x9f
 5176 016d 6A000000 		.4byte	.LVL16-.Ltext0
 5177 0171 70000000 		.4byte	.LFE23-.Ltext0
 5178 0175 0100     		.2byte	0x1
 5179 0177 50       		.byte	0x50
 5180 0178 00000000 		.4byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 136


 5181 017c 00000000 		.4byte	0
 5182              	.LLST5:
 5183 0180 0A000000 		.4byte	.LVL2-.Ltext0
 5184 0184 6C000000 		.4byte	.LVL17-.Ltext0
 5185 0188 0100     		.2byte	0x1
 5186 018a 56       		.byte	0x56
 5187 018b 6C000000 		.4byte	.LVL17-.Ltext0
 5188 018f 70000000 		.4byte	.LFE23-.Ltext0
 5189 0193 0300     		.2byte	0x3
 5190 0195 76       		.byte	0x76
 5191 0196 7F       		.sleb128 -1
 5192 0197 9F       		.byte	0x9f
 5193 0198 00000000 		.4byte	0
 5194 019c 00000000 		.4byte	0
 5195              	.LLST6:
 5196 01a0 70000000 		.4byte	.LFB24-.Ltext0
 5197 01a4 74000000 		.4byte	.LCFI1-.Ltext0
 5198 01a8 0200     		.2byte	0x2
 5199 01aa 7D       		.byte	0x7d
 5200 01ab 00       		.sleb128 0
 5201 01ac 74000000 		.4byte	.LCFI1-.Ltext0
 5202 01b0 8A000000 		.4byte	.LCFI2-.Ltext0
 5203 01b4 0200     		.2byte	0x2
 5204 01b6 7D       		.byte	0x7d
 5205 01b7 08       		.sleb128 8
 5206 01b8 8A000000 		.4byte	.LCFI2-.Ltext0
 5207 01bc 96000000 		.4byte	.LCFI3-.Ltext0
 5208 01c0 0200     		.2byte	0x2
 5209 01c2 7D       		.byte	0x7d
 5210 01c3 00       		.sleb128 0
 5211 01c4 96000000 		.4byte	.LCFI3-.Ltext0
 5212 01c8 98000000 		.4byte	.LFE24-.Ltext0
 5213 01cc 0200     		.2byte	0x2
 5214 01ce 7D       		.byte	0x7d
 5215 01cf 08       		.sleb128 8
 5216 01d0 00000000 		.4byte	0
 5217 01d4 00000000 		.4byte	0
 5218              	.LLST7:
 5219 01d8 70000000 		.4byte	.LVL18-.Ltext0
 5220 01dc 80000000 		.4byte	.LVL19-.Ltext0
 5221 01e0 0100     		.2byte	0x1
 5222 01e2 50       		.byte	0x50
 5223 01e3 80000000 		.4byte	.LVL19-.Ltext0
 5224 01e7 95000000 		.4byte	.LVL21-1-.Ltext0
 5225 01eb 0100     		.2byte	0x1
 5226 01ed 53       		.byte	0x53
 5227 01ee 95000000 		.4byte	.LVL21-1-.Ltext0
 5228 01f2 96000000 		.4byte	.LVL21-.Ltext0
 5229 01f6 0400     		.2byte	0x4
 5230 01f8 F3       		.byte	0xf3
 5231 01f9 01       		.uleb128 0x1
 5232 01fa 50       		.byte	0x50
 5233 01fb 9F       		.byte	0x9f
 5234 01fc 96000000 		.4byte	.LVL21-.Ltext0
 5235 0200 98000000 		.4byte	.LFE24-.Ltext0
 5236 0204 0100     		.2byte	0x1
 5237 0206 50       		.byte	0x50
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 137


 5238 0207 00000000 		.4byte	0
 5239 020b 00000000 		.4byte	0
 5240              	.LLST8:
 5241 020f 70000000 		.4byte	.LVL18-.Ltext0
 5242 0213 92000000 		.4byte	.LVL20-.Ltext0
 5243 0217 0100     		.2byte	0x1
 5244 0219 51       		.byte	0x51
 5245 021a 92000000 		.4byte	.LVL20-.Ltext0
 5246 021e 95000000 		.4byte	.LVL21-1-.Ltext0
 5247 0222 0100     		.2byte	0x1
 5248 0224 50       		.byte	0x50
 5249 0225 95000000 		.4byte	.LVL21-1-.Ltext0
 5250 0229 96000000 		.4byte	.LVL21-.Ltext0
 5251 022d 0400     		.2byte	0x4
 5252 022f F3       		.byte	0xf3
 5253 0230 01       		.uleb128 0x1
 5254 0231 51       		.byte	0x51
 5255 0232 9F       		.byte	0x9f
 5256 0233 96000000 		.4byte	.LVL21-.Ltext0
 5257 0237 98000000 		.4byte	.LFE24-.Ltext0
 5258 023b 0100     		.2byte	0x1
 5259 023d 51       		.byte	0x51
 5260 023e 00000000 		.4byte	0
 5261 0242 00000000 		.4byte	0
 5262              	.LLST9:
 5263 0246 98000000 		.4byte	.LFB25-.Ltext0
 5264 024a 9A000000 		.4byte	.LCFI4-.Ltext0
 5265 024e 0200     		.2byte	0x2
 5266 0250 7D       		.byte	0x7d
 5267 0251 00       		.sleb128 0
 5268 0252 9A000000 		.4byte	.LCFI4-.Ltext0
 5269 0256 FC000000 		.4byte	.LCFI5-.Ltext0
 5270 025a 0200     		.2byte	0x2
 5271 025c 7D       		.byte	0x7d
 5272 025d 10       		.sleb128 16
 5273 025e FC000000 		.4byte	.LCFI5-.Ltext0
 5274 0262 00010000 		.4byte	.LFE25-.Ltext0
 5275 0266 0200     		.2byte	0x2
 5276 0268 7D       		.byte	0x7d
 5277 0269 00       		.sleb128 0
 5278 026a 00000000 		.4byte	0
 5279 026e 00000000 		.4byte	0
 5280              	.LLST10:
 5281 0272 98000000 		.4byte	.LVL22-.Ltext0
 5282 0276 9F000000 		.4byte	.LVL23-1-.Ltext0
 5283 027a 0100     		.2byte	0x1
 5284 027c 50       		.byte	0x50
 5285 027d 9F000000 		.4byte	.LVL23-1-.Ltext0
 5286 0281 FC000000 		.4byte	.LVL37-.Ltext0
 5287 0285 0100     		.2byte	0x1
 5288 0287 54       		.byte	0x54
 5289 0288 FC000000 		.4byte	.LVL37-.Ltext0
 5290 028c 00010000 		.4byte	.LFE25-.Ltext0
 5291 0290 0400     		.2byte	0x4
 5292 0292 F3       		.byte	0xf3
 5293 0293 01       		.uleb128 0x1
 5294 0294 50       		.byte	0x50
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 138


 5295 0295 9F       		.byte	0x9f
 5296 0296 00000000 		.4byte	0
 5297 029a 00000000 		.4byte	0
 5298              	.LLST11:
 5299 029e A6000000 		.4byte	.LVL24-.Ltext0
 5300 02a2 C0000000 		.4byte	.LVL27-.Ltext0
 5301 02a6 0100     		.2byte	0x1
 5302 02a8 55       		.byte	0x55
 5303 02a9 C0000000 		.4byte	.LVL27-.Ltext0
 5304 02ad C2000000 		.4byte	.LVL28-.Ltext0
 5305 02b1 0300     		.2byte	0x3
 5306 02b3 75       		.byte	0x75
 5307 02b4 01       		.sleb128 1
 5308 02b5 9F       		.byte	0x9f
 5309 02b6 C2000000 		.4byte	.LVL28-.Ltext0
 5310 02ba D4000000 		.4byte	.LVL31-.Ltext0
 5311 02be 0100     		.2byte	0x1
 5312 02c0 55       		.byte	0x55
 5313 02c1 00000000 		.4byte	0
 5314 02c5 00000000 		.4byte	0
 5315              	.LLST12:
 5316 02c9 D6000000 		.4byte	.LVL32-.Ltext0
 5317 02cd F0000000 		.4byte	.LVL35-.Ltext0
 5318 02d1 0100     		.2byte	0x1
 5319 02d3 55       		.byte	0x55
 5320 02d4 F0000000 		.4byte	.LVL35-.Ltext0
 5321 02d8 F2000000 		.4byte	.LVL36-.Ltext0
 5322 02dc 0300     		.2byte	0x3
 5323 02de 75       		.byte	0x75
 5324 02df 01       		.sleb128 1
 5325 02e0 9F       		.byte	0x9f
 5326 02e1 F2000000 		.4byte	.LVL36-.Ltext0
 5327 02e5 FC000000 		.4byte	.LVL37-.Ltext0
 5328 02e9 0100     		.2byte	0x1
 5329 02eb 55       		.byte	0x55
 5330 02ec 00000000 		.4byte	0
 5331 02f0 00000000 		.4byte	0
 5332              	.LLST13:
 5333 02f4 00010000 		.4byte	.LFB5-.Ltext0
 5334 02f8 02010000 		.4byte	.LCFI6-.Ltext0
 5335 02fc 0200     		.2byte	0x2
 5336 02fe 7D       		.byte	0x7d
 5337 02ff 00       		.sleb128 0
 5338 0300 02010000 		.4byte	.LCFI6-.Ltext0
 5339 0304 6C010000 		.4byte	.LFE5-.Ltext0
 5340 0308 0200     		.2byte	0x2
 5341 030a 7D       		.byte	0x7d
 5342 030b 10       		.sleb128 16
 5343 030c 00000000 		.4byte	0
 5344 0310 00000000 		.4byte	0
 5345              	.LLST14:
 5346 0314 00010000 		.4byte	.LVL39-.Ltext0
 5347 0318 09010000 		.4byte	.LVL41-1-.Ltext0
 5348 031c 0100     		.2byte	0x1
 5349 031e 50       		.byte	0x50
 5350 031f 09010000 		.4byte	.LVL41-1-.Ltext0
 5351 0323 66010000 		.4byte	.LVL46-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 139


 5352 0327 0100     		.2byte	0x1
 5353 0329 54       		.byte	0x54
 5354 032a 66010000 		.4byte	.LVL46-.Ltext0
 5355 032e 6C010000 		.4byte	.LFE5-.Ltext0
 5356 0332 0400     		.2byte	0x4
 5357 0334 F3       		.byte	0xf3
 5358 0335 01       		.uleb128 0x1
 5359 0336 50       		.byte	0x50
 5360 0337 9F       		.byte	0x9f
 5361 0338 00000000 		.4byte	0
 5362 033c 00000000 		.4byte	0
 5363              	.LLST15:
 5364 0340 00010000 		.4byte	.LVL39-.Ltext0
 5365 0344 09010000 		.4byte	.LVL41-1-.Ltext0
 5366 0348 0100     		.2byte	0x1
 5367 034a 51       		.byte	0x51
 5368 034b 09010000 		.4byte	.LVL41-1-.Ltext0
 5369 034f 66010000 		.4byte	.LVL46-.Ltext0
 5370 0353 0100     		.2byte	0x1
 5371 0355 55       		.byte	0x55
 5372 0356 66010000 		.4byte	.LVL46-.Ltext0
 5373 035a 6C010000 		.4byte	.LFE5-.Ltext0
 5374 035e 0400     		.2byte	0x4
 5375 0360 F3       		.byte	0xf3
 5376 0361 01       		.uleb128 0x1
 5377 0362 51       		.byte	0x51
 5378 0363 9F       		.byte	0x9f
 5379 0364 00000000 		.4byte	0
 5380 0368 00000000 		.4byte	0
 5381              	.LLST16:
 5382 036c 04010000 		.4byte	.LVL40-.Ltext0
 5383 0370 09010000 		.4byte	.LVL41-1-.Ltext0
 5384 0374 0100     		.2byte	0x1
 5385 0376 50       		.byte	0x50
 5386 0377 09010000 		.4byte	.LVL41-1-.Ltext0
 5387 037b 66010000 		.4byte	.LVL46-.Ltext0
 5388 037f 0100     		.2byte	0x1
 5389 0381 54       		.byte	0x54
 5390 0382 66010000 		.4byte	.LVL46-.Ltext0
 5391 0386 6C010000 		.4byte	.LFE5-.Ltext0
 5392 038a 0400     		.2byte	0x4
 5393 038c F3       		.byte	0xf3
 5394 038d 01       		.uleb128 0x1
 5395 038e 50       		.byte	0x50
 5396 038f 9F       		.byte	0x9f
 5397 0390 00000000 		.4byte	0
 5398 0394 00000000 		.4byte	0
 5399              	.LLST17:
 5400 0398 6C010000 		.4byte	.LFB6-.Ltext0
 5401 039c 6E010000 		.4byte	.LCFI7-.Ltext0
 5402 03a0 0200     		.2byte	0x2
 5403 03a2 7D       		.byte	0x7d
 5404 03a3 00       		.sleb128 0
 5405 03a4 6E010000 		.4byte	.LCFI7-.Ltext0
 5406 03a8 A0010000 		.4byte	.LFE6-.Ltext0
 5407 03ac 0200     		.2byte	0x2
 5408 03ae 7D       		.byte	0x7d
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 140


 5409 03af 10       		.sleb128 16
 5410 03b0 00000000 		.4byte	0
 5411 03b4 00000000 		.4byte	0
 5412              	.LLST18:
 5413 03b8 6C010000 		.4byte	.LVL47-.Ltext0
 5414 03bc 76010000 		.4byte	.LVL48-.Ltext0
 5415 03c0 0100     		.2byte	0x1
 5416 03c2 50       		.byte	0x50
 5417 03c3 76010000 		.4byte	.LVL48-.Ltext0
 5418 03c7 78010000 		.4byte	.LVL49-.Ltext0
 5419 03cb 0100     		.2byte	0x1
 5420 03cd 56       		.byte	0x56
 5421 03ce 78010000 		.4byte	.LVL49-.Ltext0
 5422 03d2 7A010000 		.4byte	.LVL50-.Ltext0
 5423 03d6 0100     		.2byte	0x1
 5424 03d8 50       		.byte	0x50
 5425 03d9 7A010000 		.4byte	.LVL50-.Ltext0
 5426 03dd A0010000 		.4byte	.LFE6-.Ltext0
 5427 03e1 0100     		.2byte	0x1
 5428 03e3 56       		.byte	0x56
 5429 03e4 00000000 		.4byte	0
 5430 03e8 00000000 		.4byte	0
 5431              	.LLST19:
 5432 03ec 6C010000 		.4byte	.LVL47-.Ltext0
 5433 03f0 7F010000 		.4byte	.LVL52-1-.Ltext0
 5434 03f4 0100     		.2byte	0x1
 5435 03f6 51       		.byte	0x51
 5436 03f7 7F010000 		.4byte	.LVL52-1-.Ltext0
 5437 03fb A0010000 		.4byte	.LFE6-.Ltext0
 5438 03ff 0100     		.2byte	0x1
 5439 0401 55       		.byte	0x55
 5440 0402 00000000 		.4byte	0
 5441 0406 00000000 		.4byte	0
 5442              	.LLST20:
 5443 040a 6C010000 		.4byte	.LVL47-.Ltext0
 5444 040e 7F010000 		.4byte	.LVL52-1-.Ltext0
 5445 0412 0100     		.2byte	0x1
 5446 0414 52       		.byte	0x52
 5447 0415 7F010000 		.4byte	.LVL52-1-.Ltext0
 5448 0419 A0010000 		.4byte	.LFE6-.Ltext0
 5449 041d 0400     		.2byte	0x4
 5450 041f F3       		.byte	0xf3
 5451 0420 01       		.uleb128 0x1
 5452 0421 52       		.byte	0x52
 5453 0422 9F       		.byte	0x9f
 5454 0423 00000000 		.4byte	0
 5455 0427 00000000 		.4byte	0
 5456              	.LLST21:
 5457 042b 80010000 		.4byte	.LVL52-.Ltext0
 5458 042f 96010000 		.4byte	.LVL58-.Ltext0
 5459 0433 0100     		.2byte	0x1
 5460 0435 50       		.byte	0x50
 5461 0436 96010000 		.4byte	.LVL58-.Ltext0
 5462 043a A0010000 		.4byte	.LFE6-.Ltext0
 5463 043e 0100     		.2byte	0x1
 5464 0440 54       		.byte	0x54
 5465 0441 00000000 		.4byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 141


 5466 0445 00000000 		.4byte	0
 5467              	.LLST22:
 5468 0449 76010000 		.4byte	.LVL48-.Ltext0
 5469 044d 78010000 		.4byte	.LVL49-.Ltext0
 5470 0451 0100     		.2byte	0x1
 5471 0453 50       		.byte	0x50
 5472 0454 7A010000 		.4byte	.LVL50-.Ltext0
 5473 0458 7C010000 		.4byte	.LVL51-.Ltext0
 5474 045c 0100     		.2byte	0x1
 5475 045e 50       		.byte	0x50
 5476 045f 7C010000 		.4byte	.LVL51-.Ltext0
 5477 0463 7F010000 		.4byte	.LVL52-1-.Ltext0
 5478 0467 0400     		.2byte	0x4
 5479 0469 70       		.byte	0x70
 5480 046a B87F     		.sleb128 -72
 5481 046c 9F       		.byte	0x9f
 5482 046d 00000000 		.4byte	0
 5483 0471 00000000 		.4byte	0
 5484              	.LLST23:
 5485 0475 84010000 		.4byte	.LVL53-.Ltext0
 5486 0479 8E010000 		.4byte	.LVL56-.Ltext0
 5487 047d 0400     		.2byte	0x4
 5488 047f 70       		.byte	0x70
 5489 0480 C800     		.sleb128 72
 5490 0482 9F       		.byte	0x9f
 5491 0483 8E010000 		.4byte	.LVL56-.Ltext0
 5492 0487 90010000 		.4byte	.LVL57-.Ltext0
 5493 048b 0100     		.2byte	0x1
 5494 048d 53       		.byte	0x53
 5495 048e 00000000 		.4byte	0
 5496 0492 00000000 		.4byte	0
 5497              	.LLST24:
 5498 0496 84010000 		.4byte	.LVL53-.Ltext0
 5499 049a 9C010000 		.4byte	.LVL59-.Ltext0
 5500 049e 0400     		.2byte	0x4
 5501 04a0 F3       		.byte	0xf3
 5502 04a1 01       		.uleb128 0x1
 5503 04a2 52       		.byte	0x52
 5504 04a3 9F       		.byte	0x9f
 5505 04a4 00000000 		.4byte	0
 5506 04a8 00000000 		.4byte	0
 5507              	.LLST25:
 5508 04ac 84010000 		.4byte	.LVL53-.Ltext0
 5509 04b0 96010000 		.4byte	.LVL58-.Ltext0
 5510 04b4 0100     		.2byte	0x1
 5511 04b6 50       		.byte	0x50
 5512 04b7 96010000 		.4byte	.LVL58-.Ltext0
 5513 04bb 9C010000 		.4byte	.LVL59-.Ltext0
 5514 04bf 0100     		.2byte	0x1
 5515 04c1 54       		.byte	0x54
 5516 04c2 00000000 		.4byte	0
 5517 04c6 00000000 		.4byte	0
 5518              	.LLST27:
 5519 04ca 84010000 		.4byte	.LVL53-.Ltext0
 5520 04ce 86010000 		.4byte	.LVL54-.Ltext0
 5521 04d2 0100     		.2byte	0x1
 5522 04d4 55       		.byte	0x55
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 142


 5523 04d5 86010000 		.4byte	.LVL54-.Ltext0
 5524 04d9 8A010000 		.4byte	.LVL55-.Ltext0
 5525 04dd 0200     		.2byte	0x2
 5526 04df 30       		.byte	0x30
 5527 04e0 9F       		.byte	0x9f
 5528 04e1 8A010000 		.4byte	.LVL55-.Ltext0
 5529 04e5 90010000 		.4byte	.LVL57-.Ltext0
 5530 04e9 0100     		.2byte	0x1
 5531 04eb 55       		.byte	0x55
 5532 04ec 00000000 		.4byte	0
 5533 04f0 00000000 		.4byte	0
 5534              	.LLST28:
 5535 04f4 84010000 		.4byte	.LVL53-.Ltext0
 5536 04f8 9C010000 		.4byte	.LVL59-.Ltext0
 5537 04fc 0100     		.2byte	0x1
 5538 04fe 56       		.byte	0x56
 5539 04ff 00000000 		.4byte	0
 5540 0503 00000000 		.4byte	0
 5541              	.LLST29:
 5542 0507 A0010000 		.4byte	.LFB12-.Ltext0
 5543 050b A2010000 		.4byte	.LCFI8-.Ltext0
 5544 050f 0200     		.2byte	0x2
 5545 0511 7D       		.byte	0x7d
 5546 0512 00       		.sleb128 0
 5547 0513 A2010000 		.4byte	.LCFI8-.Ltext0
 5548 0517 B2010000 		.4byte	.LFE12-.Ltext0
 5549 051b 0200     		.2byte	0x2
 5550 051d 7D       		.byte	0x7d
 5551 051e 08       		.sleb128 8
 5552 051f 00000000 		.4byte	0
 5553 0523 00000000 		.4byte	0
 5554              	.LLST30:
 5555 0527 A0010000 		.4byte	.LVL60-.Ltext0
 5556 052b AB010000 		.4byte	.LVL62-1-.Ltext0
 5557 052f 0100     		.2byte	0x1
 5558 0531 50       		.byte	0x50
 5559 0532 AB010000 		.4byte	.LVL62-1-.Ltext0
 5560 0536 B2010000 		.4byte	.LFE12-.Ltext0
 5561 053a 0400     		.2byte	0x4
 5562 053c F3       		.byte	0xf3
 5563 053d 01       		.uleb128 0x1
 5564 053e 50       		.byte	0x50
 5565 053f 9F       		.byte	0x9f
 5566 0540 00000000 		.4byte	0
 5567 0544 00000000 		.4byte	0
 5568              	.LLST31:
 5569 0548 A0010000 		.4byte	.LVL60-.Ltext0
 5570 054c A8010000 		.4byte	.LVL61-.Ltext0
 5571 0550 0100     		.2byte	0x1
 5572 0552 51       		.byte	0x51
 5573 0553 A8010000 		.4byte	.LVL61-.Ltext0
 5574 0557 B2010000 		.4byte	.LFE12-.Ltext0
 5575 055b 0100     		.2byte	0x1
 5576 055d 54       		.byte	0x54
 5577 055e 00000000 		.4byte	0
 5578 0562 00000000 		.4byte	0
 5579              	.LLST32:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 143


 5580 0566 B2010000 		.4byte	.LFB13-.Ltext0
 5581 056a B6010000 		.4byte	.LCFI9-.Ltext0
 5582 056e 0200     		.2byte	0x2
 5583 0570 7D       		.byte	0x7d
 5584 0571 00       		.sleb128 0
 5585 0572 B6010000 		.4byte	.LCFI9-.Ltext0
 5586 0576 9E020000 		.4byte	.LCFI10-.Ltext0
 5587 057a 0200     		.2byte	0x2
 5588 057c 7D       		.byte	0x7d
 5589 057d 28       		.sleb128 40
 5590 057e 9E020000 		.4byte	.LCFI10-.Ltext0
 5591 0582 A8020000 		.4byte	.LFE13-.Ltext0
 5592 0586 0200     		.2byte	0x2
 5593 0588 7D       		.byte	0x7d
 5594 0589 18       		.sleb128 24
 5595 058a 00000000 		.4byte	0
 5596 058e 00000000 		.4byte	0
 5597              	.LLST33:
 5598 0592 B2010000 		.4byte	.LVL63-.Ltext0
 5599 0596 C0010000 		.4byte	.LVL65-.Ltext0
 5600 059a 0100     		.2byte	0x1
 5601 059c 50       		.byte	0x50
 5602 059d C0010000 		.4byte	.LVL65-.Ltext0
 5603 05a1 A2020000 		.4byte	.LVL94-.Ltext0
 5604 05a5 0100     		.2byte	0x1
 5605 05a7 54       		.byte	0x54
 5606 05a8 A2020000 		.4byte	.LVL94-.Ltext0
 5607 05ac A8020000 		.4byte	.LFE13-.Ltext0
 5608 05b0 0400     		.2byte	0x4
 5609 05b2 F3       		.byte	0xf3
 5610 05b3 01       		.uleb128 0x1
 5611 05b4 50       		.byte	0x50
 5612 05b5 9F       		.byte	0x9f
 5613 05b6 00000000 		.4byte	0
 5614 05ba 00000000 		.4byte	0
 5615              	.LLST34:
 5616 05be B2010000 		.4byte	.LVL63-.Ltext0
 5617 05c2 C0010000 		.4byte	.LVL65-.Ltext0
 5618 05c6 0100     		.2byte	0x1
 5619 05c8 51       		.byte	0x51
 5620 05c9 C0010000 		.4byte	.LVL65-.Ltext0
 5621 05cd A2020000 		.4byte	.LVL94-.Ltext0
 5622 05d1 0100     		.2byte	0x1
 5623 05d3 58       		.byte	0x58
 5624 05d4 A2020000 		.4byte	.LVL94-.Ltext0
 5625 05d8 A8020000 		.4byte	.LFE13-.Ltext0
 5626 05dc 0400     		.2byte	0x4
 5627 05de F3       		.byte	0xf3
 5628 05df 01       		.uleb128 0x1
 5629 05e0 51       		.byte	0x51
 5630 05e1 9F       		.byte	0x9f
 5631 05e2 00000000 		.4byte	0
 5632 05e6 00000000 		.4byte	0
 5633              	.LLST35:
 5634 05ea B2010000 		.4byte	.LVL63-.Ltext0
 5635 05ee C0010000 		.4byte	.LVL65-.Ltext0
 5636 05f2 0100     		.2byte	0x1
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 144


 5637 05f4 52       		.byte	0x52
 5638 05f5 C0010000 		.4byte	.LVL65-.Ltext0
 5639 05f9 42020000 		.4byte	.LVL77-.Ltext0
 5640 05fd 0200     		.2byte	0x2
 5641 05ff 91       		.byte	0x91
 5642 0600 5C       		.sleb128 -36
 5643 0601 42020000 		.4byte	.LVL77-.Ltext0
 5644 0605 45020000 		.4byte	.LVL78-1-.Ltext0
 5645 0609 0200     		.2byte	0x2
 5646 060b 71       		.byte	0x71
 5647 060c 00       		.sleb128 0
 5648 060d 45020000 		.4byte	.LVL78-1-.Ltext0
 5649 0611 A2020000 		.4byte	.LVL94-.Ltext0
 5650 0615 0200     		.2byte	0x2
 5651 0617 91       		.byte	0x91
 5652 0618 5C       		.sleb128 -36
 5653 0619 A2020000 		.4byte	.LVL94-.Ltext0
 5654 061d A8020000 		.4byte	.LFE13-.Ltext0
 5655 0621 0200     		.2byte	0x2
 5656 0623 7D       		.byte	0x7d
 5657 0624 5C       		.sleb128 -36
 5658 0625 00000000 		.4byte	0
 5659 0629 00000000 		.4byte	0
 5660              	.LLST36:
 5661 062d B2010000 		.4byte	.LVL63-.Ltext0
 5662 0631 C0010000 		.4byte	.LVL65-.Ltext0
 5663 0635 0100     		.2byte	0x1
 5664 0637 53       		.byte	0x53
 5665 0638 C0010000 		.4byte	.LVL65-.Ltext0
 5666 063c A2020000 		.4byte	.LVL94-.Ltext0
 5667 0640 0100     		.2byte	0x1
 5668 0642 56       		.byte	0x56
 5669 0643 A2020000 		.4byte	.LVL94-.Ltext0
 5670 0647 A8020000 		.4byte	.LFE13-.Ltext0
 5671 064b 0400     		.2byte	0x4
 5672 064d F3       		.byte	0xf3
 5673 064e 01       		.uleb128 0x1
 5674 064f 53       		.byte	0x53
 5675 0650 9F       		.byte	0x9f
 5676 0651 00000000 		.4byte	0
 5677 0655 00000000 		.4byte	0
 5678              	.LLST37:
 5679 0659 B2010000 		.4byte	.LVL63-.Ltext0
 5680 065d C0010000 		.4byte	.LVL65-.Ltext0
 5681 0661 0200     		.2byte	0x2
 5682 0663 30       		.byte	0x30
 5683 0664 9F       		.byte	0x9f
 5684 0665 C0010000 		.4byte	.LVL65-.Ltext0
 5685 0669 12020000 		.4byte	.LVL72-.Ltext0
 5686 066d 0100     		.2byte	0x1
 5687 066f 57       		.byte	0x57
 5688 0670 12020000 		.4byte	.LVL72-.Ltext0
 5689 0674 9A020000 		.4byte	.LVL93-.Ltext0
 5690 0678 0200     		.2byte	0x2
 5691 067a 31       		.byte	0x31
 5692 067b 9F       		.byte	0x9f
 5693 067c 00000000 		.4byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 145


 5694 0680 00000000 		.4byte	0
 5695              	.LLST38:
 5696 0684 DA010000 		.4byte	.LVL67-.Ltext0
 5697 0688 E2010000 		.4byte	.LVL68-.Ltext0
 5698 068c 0100     		.2byte	0x1
 5699 068e 50       		.byte	0x50
 5700 068f 00000000 		.4byte	0
 5701 0693 00000000 		.4byte	0
 5702              	.LLST39:
 5703 0697 B8010000 		.4byte	.LVL64-.Ltext0
 5704 069b C0010000 		.4byte	.LVL65-.Ltext0
 5705 069f 0100     		.2byte	0x1
 5706 06a1 50       		.byte	0x50
 5707 06a2 C0010000 		.4byte	.LVL65-.Ltext0
 5708 06a6 A2020000 		.4byte	.LVL94-.Ltext0
 5709 06aa 0100     		.2byte	0x1
 5710 06ac 54       		.byte	0x54
 5711 06ad A2020000 		.4byte	.LVL94-.Ltext0
 5712 06b1 A8020000 		.4byte	.LFE13-.Ltext0
 5713 06b5 0400     		.2byte	0x4
 5714 06b7 F3       		.byte	0xf3
 5715 06b8 01       		.uleb128 0x1
 5716 06b9 50       		.byte	0x50
 5717 06ba 9F       		.byte	0x9f
 5718 06bb 00000000 		.4byte	0
 5719 06bf 00000000 		.4byte	0
 5720              	.LLST40:
 5721 06c3 48020000 		.4byte	.LVL79-.Ltext0
 5722 06c7 90020000 		.4byte	.LVL91-.Ltext0
 5723 06cb 0100     		.2byte	0x1
 5724 06cd 54       		.byte	0x54
 5725 06ce 00000000 		.4byte	0
 5726 06d2 00000000 		.4byte	0
 5727              	.LLST41:
 5728 06d6 50020000 		.4byte	.LVL81-.Ltext0
 5729 06da 6E020000 		.4byte	.LVL86-.Ltext0
 5730 06de 0900     		.2byte	0x9
 5731 06e0 77       		.byte	0x77
 5732 06e1 00       		.sleb128 0
 5733 06e2 75       		.byte	0x75
 5734 06e3 00       		.sleb128 0
 5735 06e4 29       		.byte	0x29
 5736 06e5 08       		.byte	0x8
 5737 06e6 FF       		.byte	0xff
 5738 06e7 1A       		.byte	0x1a
 5739 06e8 9F       		.byte	0x9f
 5740 06e9 72020000 		.4byte	.LVL87-.Ltext0
 5741 06ed 84020000 		.4byte	.LVL88-.Ltext0
 5742 06f1 0900     		.2byte	0x9
 5743 06f3 77       		.byte	0x77
 5744 06f4 00       		.sleb128 0
 5745 06f5 75       		.byte	0x75
 5746 06f6 00       		.sleb128 0
 5747 06f7 29       		.byte	0x29
 5748 06f8 08       		.byte	0x8
 5749 06f9 FF       		.byte	0xff
 5750 06fa 1A       		.byte	0x1a
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 146


 5751 06fb 9F       		.byte	0x9f
 5752 06fc 84020000 		.4byte	.LVL88-.Ltext0
 5753 0700 90020000 		.4byte	.LVL91-.Ltext0
 5754 0704 0200     		.2byte	0x2
 5755 0706 30       		.byte	0x30
 5756 0707 9F       		.byte	0x9f
 5757 0708 00000000 		.4byte	0
 5758 070c 00000000 		.4byte	0
 5759              	.LLST42:
 5760 0710 A8020000 		.4byte	.LFB9-.Ltext0
 5761 0714 AA020000 		.4byte	.LCFI11-.Ltext0
 5762 0718 0200     		.2byte	0x2
 5763 071a 7D       		.byte	0x7d
 5764 071b 00       		.sleb128 0
 5765 071c AA020000 		.4byte	.LCFI11-.Ltext0
 5766 0720 CC020000 		.4byte	.LFE9-.Ltext0
 5767 0724 0200     		.2byte	0x2
 5768 0726 7D       		.byte	0x7d
 5769 0727 08       		.sleb128 8
 5770 0728 00000000 		.4byte	0
 5771 072c 00000000 		.4byte	0
 5772              	.LLST43:
 5773 0730 A8020000 		.4byte	.LVL95-.Ltext0
 5774 0734 B0020000 		.4byte	.LVL96-.Ltext0
 5775 0738 0100     		.2byte	0x1
 5776 073a 50       		.byte	0x50
 5777 073b B0020000 		.4byte	.LVL96-.Ltext0
 5778 073f CC020000 		.4byte	.LFE9-.Ltext0
 5779 0743 0400     		.2byte	0x4
 5780 0745 F3       		.byte	0xf3
 5781 0746 01       		.uleb128 0x1
 5782 0747 50       		.byte	0x50
 5783 0748 9F       		.byte	0x9f
 5784 0749 00000000 		.4byte	0
 5785 074d 00000000 		.4byte	0
 5786              	.LLST44:
 5787 0751 B4020000 		.4byte	.LVL97-.Ltext0
 5788 0755 C7020000 		.4byte	.LVL98-1-.Ltext0
 5789 0759 0100     		.2byte	0x1
 5790 075b 50       		.byte	0x50
 5791 075c C7020000 		.4byte	.LVL98-1-.Ltext0
 5792 0760 CC020000 		.4byte	.LFE9-.Ltext0
 5793 0764 0100     		.2byte	0x1
 5794 0766 54       		.byte	0x54
 5795 0767 00000000 		.4byte	0
 5796 076b 00000000 		.4byte	0
 5797              	.LLST46:
 5798 076f CC020000 		.4byte	.LFB10-.Ltext0
 5799 0773 CE020000 		.4byte	.LCFI12-.Ltext0
 5800 0777 0200     		.2byte	0x2
 5801 0779 7D       		.byte	0x7d
 5802 077a 00       		.sleb128 0
 5803 077b CE020000 		.4byte	.LCFI12-.Ltext0
 5804 077f F6020000 		.4byte	.LFE10-.Ltext0
 5805 0783 0200     		.2byte	0x2
 5806 0785 7D       		.byte	0x7d
 5807 0786 10       		.sleb128 16
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 147


 5808 0787 00000000 		.4byte	0
 5809 078b 00000000 		.4byte	0
 5810              	.LLST47:
 5811 078f CC020000 		.4byte	.LVL99-.Ltext0
 5812 0793 D5020000 		.4byte	.LVL100-1-.Ltext0
 5813 0797 0100     		.2byte	0x1
 5814 0799 50       		.byte	0x50
 5815 079a D5020000 		.4byte	.LVL100-1-.Ltext0
 5816 079e F6020000 		.4byte	.LFE10-.Ltext0
 5817 07a2 0100     		.2byte	0x1
 5818 07a4 54       		.byte	0x54
 5819 07a5 00000000 		.4byte	0
 5820 07a9 00000000 		.4byte	0
 5821              	.LLST49:
 5822 07ad F6020000 		.4byte	.LFB14-.Ltext0
 5823 07b1 F8020000 		.4byte	.LCFI13-.Ltext0
 5824 07b5 0200     		.2byte	0x2
 5825 07b7 7D       		.byte	0x7d
 5826 07b8 00       		.sleb128 0
 5827 07b9 F8020000 		.4byte	.LCFI13-.Ltext0
 5828 07bd 58030000 		.4byte	.LFE14-.Ltext0
 5829 07c1 0200     		.2byte	0x2
 5830 07c3 7D       		.byte	0x7d
 5831 07c4 18       		.sleb128 24
 5832 07c5 00000000 		.4byte	0
 5833 07c9 00000000 		.4byte	0
 5834              	.LLST50:
 5835 07cd F6020000 		.4byte	.LVL104-.Ltext0
 5836 07d1 12030000 		.4byte	.LVL106-.Ltext0
 5837 07d5 0100     		.2byte	0x1
 5838 07d7 50       		.byte	0x50
 5839 07d8 12030000 		.4byte	.LVL106-.Ltext0
 5840 07dc 58030000 		.4byte	.LFE14-.Ltext0
 5841 07e0 0100     		.2byte	0x1
 5842 07e2 55       		.byte	0x55
 5843 07e3 00000000 		.4byte	0
 5844 07e7 00000000 		.4byte	0
 5845              	.LLST51:
 5846 07eb F6020000 		.4byte	.LVL104-.Ltext0
 5847 07ef 29030000 		.4byte	.LVL108-1-.Ltext0
 5848 07f3 0100     		.2byte	0x1
 5849 07f5 51       		.byte	0x51
 5850 07f6 29030000 		.4byte	.LVL108-1-.Ltext0
 5851 07fa 50030000 		.4byte	.LVL112-.Ltext0
 5852 07fe 0400     		.2byte	0x4
 5853 0800 F3       		.byte	0xf3
 5854 0801 01       		.uleb128 0x1
 5855 0802 51       		.byte	0x51
 5856 0803 9F       		.byte	0x9f
 5857 0804 50030000 		.4byte	.LVL112-.Ltext0
 5858 0808 52030000 		.4byte	.LVL113-.Ltext0
 5859 080c 0100     		.2byte	0x1
 5860 080e 51       		.byte	0x51
 5861 080f 52030000 		.4byte	.LVL113-.Ltext0
 5862 0813 58030000 		.4byte	.LFE14-.Ltext0
 5863 0817 0400     		.2byte	0x4
 5864 0819 F3       		.byte	0xf3
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 148


 5865 081a 01       		.uleb128 0x1
 5866 081b 51       		.byte	0x51
 5867 081c 9F       		.byte	0x9f
 5868 081d 00000000 		.4byte	0
 5869 0821 00000000 		.4byte	0
 5870              	.LLST52:
 5871 0825 F6020000 		.4byte	.LVL104-.Ltext0
 5872 0829 10030000 		.4byte	.LVL105-.Ltext0
 5873 082d 0100     		.2byte	0x1
 5874 082f 52       		.byte	0x52
 5875 0830 10030000 		.4byte	.LVL105-.Ltext0
 5876 0834 58030000 		.4byte	.LFE14-.Ltext0
 5877 0838 0100     		.2byte	0x1
 5878 083a 57       		.byte	0x57
 5879 083b 00000000 		.4byte	0
 5880 083f 00000000 		.4byte	0
 5881              	.LLST53:
 5882 0843 F6020000 		.4byte	.LVL104-.Ltext0
 5883 0847 29030000 		.4byte	.LVL108-1-.Ltext0
 5884 084b 0100     		.2byte	0x1
 5885 084d 53       		.byte	0x53
 5886 084e 29030000 		.4byte	.LVL108-1-.Ltext0
 5887 0852 50030000 		.4byte	.LVL112-.Ltext0
 5888 0856 0400     		.2byte	0x4
 5889 0858 F3       		.byte	0xf3
 5890 0859 01       		.uleb128 0x1
 5891 085a 53       		.byte	0x53
 5892 085b 9F       		.byte	0x9f
 5893 085c 50030000 		.4byte	.LVL112-.Ltext0
 5894 0860 52030000 		.4byte	.LVL113-.Ltext0
 5895 0864 0100     		.2byte	0x1
 5896 0866 53       		.byte	0x53
 5897 0867 52030000 		.4byte	.LVL113-.Ltext0
 5898 086b 58030000 		.4byte	.LFE14-.Ltext0
 5899 086f 0400     		.2byte	0x4
 5900 0871 F3       		.byte	0xf3
 5901 0872 01       		.uleb128 0x1
 5902 0873 53       		.byte	0x53
 5903 0874 9F       		.byte	0x9f
 5904 0875 00000000 		.4byte	0
 5905 0879 00000000 		.4byte	0
 5906              	.LLST55:
 5907 087d 24030000 		.4byte	.LVL107-.Ltext0
 5908 0881 46030000 		.4byte	.LVL110-.Ltext0
 5909 0885 0100     		.2byte	0x1
 5910 0887 54       		.byte	0x54
 5911 0888 46030000 		.4byte	.LVL110-.Ltext0
 5912 088c 48030000 		.4byte	.LVL111-.Ltext0
 5913 0890 0300     		.2byte	0x3
 5914 0892 74       		.byte	0x74
 5915 0893 7F       		.sleb128 -1
 5916 0894 9F       		.byte	0x9f
 5917 0895 00000000 		.4byte	0
 5918 0899 00000000 		.4byte	0
 5919              	.LLST56:
 5920 089d 58030000 		.4byte	.LFB15-.Ltext0
 5921 08a1 5A030000 		.4byte	.LCFI14-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 149


 5922 08a5 0200     		.2byte	0x2
 5923 08a7 7D       		.byte	0x7d
 5924 08a8 00       		.sleb128 0
 5925 08a9 5A030000 		.4byte	.LCFI14-.Ltext0
 5926 08ad AE030000 		.4byte	.LFE15-.Ltext0
 5927 08b1 0200     		.2byte	0x2
 5928 08b3 7D       		.byte	0x7d
 5929 08b4 10       		.sleb128 16
 5930 08b5 00000000 		.4byte	0
 5931 08b9 00000000 		.4byte	0
 5932              	.LLST57:
 5933 08bd 58030000 		.4byte	.LVL114-.Ltext0
 5934 08c1 8C030000 		.4byte	.LVL120-.Ltext0
 5935 08c5 0100     		.2byte	0x1
 5936 08c7 50       		.byte	0x50
 5937 08c8 8C030000 		.4byte	.LVL120-.Ltext0
 5938 08cc 8F030000 		.4byte	.LVL121-1-.Ltext0
 5939 08d0 0300     		.2byte	0x3
 5940 08d2 70       		.byte	0x70
 5941 08d3 5C       		.sleb128 -36
 5942 08d4 9F       		.byte	0x9f
 5943 08d5 8F030000 		.4byte	.LVL121-1-.Ltext0
 5944 08d9 9A030000 		.4byte	.LVL122-.Ltext0
 5945 08dd 0400     		.2byte	0x4
 5946 08df F3       		.byte	0xf3
 5947 08e0 01       		.uleb128 0x1
 5948 08e1 50       		.byte	0x50
 5949 08e2 9F       		.byte	0x9f
 5950 08e3 9A030000 		.4byte	.LVL122-.Ltext0
 5951 08e7 A2030000 		.4byte	.LVL125-.Ltext0
 5952 08eb 0100     		.2byte	0x1
 5953 08ed 50       		.byte	0x50
 5954 08ee A2030000 		.4byte	.LVL125-.Ltext0
 5955 08f2 A6030000 		.4byte	.LVL126-.Ltext0
 5956 08f6 0400     		.2byte	0x4
 5957 08f8 F3       		.byte	0xf3
 5958 08f9 01       		.uleb128 0x1
 5959 08fa 50       		.byte	0x50
 5960 08fb 9F       		.byte	0x9f
 5961 08fc A6030000 		.4byte	.LVL126-.Ltext0
 5962 0900 A8030000 		.4byte	.LVL127-.Ltext0
 5963 0904 0100     		.2byte	0x1
 5964 0906 50       		.byte	0x50
 5965 0907 A8030000 		.4byte	.LVL127-.Ltext0
 5966 090b AE030000 		.4byte	.LFE15-.Ltext0
 5967 090f 0400     		.2byte	0x4
 5968 0911 F3       		.byte	0xf3
 5969 0912 01       		.uleb128 0x1
 5970 0913 50       		.byte	0x50
 5971 0914 9F       		.byte	0x9f
 5972 0915 00000000 		.4byte	0
 5973 0919 00000000 		.4byte	0
 5974              	.LLST58:
 5975 091d 58030000 		.4byte	.LVL114-.Ltext0
 5976 0921 8F030000 		.4byte	.LVL121-1-.Ltext0
 5977 0925 0100     		.2byte	0x1
 5978 0927 51       		.byte	0x51
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 150


 5979 0928 8F030000 		.4byte	.LVL121-1-.Ltext0
 5980 092c 9A030000 		.4byte	.LVL122-.Ltext0
 5981 0930 0100     		.2byte	0x1
 5982 0932 54       		.byte	0x54
 5983 0933 9A030000 		.4byte	.LVL122-.Ltext0
 5984 0937 A2030000 		.4byte	.LVL125-.Ltext0
 5985 093b 0100     		.2byte	0x1
 5986 093d 51       		.byte	0x51
 5987 093e A2030000 		.4byte	.LVL125-.Ltext0
 5988 0942 A6030000 		.4byte	.LVL126-.Ltext0
 5989 0946 0100     		.2byte	0x1
 5990 0948 54       		.byte	0x54
 5991 0949 A6030000 		.4byte	.LVL126-.Ltext0
 5992 094d A8030000 		.4byte	.LVL127-.Ltext0
 5993 0951 0100     		.2byte	0x1
 5994 0953 51       		.byte	0x51
 5995 0954 A8030000 		.4byte	.LVL127-.Ltext0
 5996 0958 AE030000 		.4byte	.LFE15-.Ltext0
 5997 095c 0100     		.2byte	0x1
 5998 095e 54       		.byte	0x54
 5999 095f 00000000 		.4byte	0
 6000 0963 00000000 		.4byte	0
 6001              	.LLST60:
 6002 0967 72030000 		.4byte	.LVL116-.Ltext0
 6003 096b 7E030000 		.4byte	.LVL117-.Ltext0
 6004 096f 0100     		.2byte	0x1
 6005 0971 52       		.byte	0x52
 6006 0972 7E030000 		.4byte	.LVL117-.Ltext0
 6007 0976 8F030000 		.4byte	.LVL121-1-.Ltext0
 6008 097a 0300     		.2byte	0x3
 6009 097c 72       		.byte	0x72
 6010 097d 7F       		.sleb128 -1
 6011 097e 9F       		.byte	0x9f
 6012 097f 9A030000 		.4byte	.LVL122-.Ltext0
 6013 0983 A2030000 		.4byte	.LVL125-.Ltext0
 6014 0987 0300     		.2byte	0x3
 6015 0989 72       		.byte	0x72
 6016 098a 7F       		.sleb128 -1
 6017 098b 9F       		.byte	0x9f
 6018 098c A6030000 		.4byte	.LVL126-.Ltext0
 6019 0990 A8030000 		.4byte	.LVL127-.Ltext0
 6020 0994 0100     		.2byte	0x1
 6021 0996 52       		.byte	0x52
 6022 0997 00000000 		.4byte	0
 6023 099b 00000000 		.4byte	0
 6024              	.LLST61:
 6025 099f 80030000 		.4byte	.LVL118-.Ltext0
 6026 09a3 88030000 		.4byte	.LVL119-.Ltext0
 6027 09a7 0100     		.2byte	0x1
 6028 09a9 53       		.byte	0x53
 6029 09aa 9A030000 		.4byte	.LVL122-.Ltext0
 6030 09ae 9C030000 		.4byte	.LVL123-.Ltext0
 6031 09b2 0100     		.2byte	0x1
 6032 09b4 53       		.byte	0x53
 6033 09b5 9C030000 		.4byte	.LVL123-.Ltext0
 6034 09b9 9E030000 		.4byte	.LVL124-.Ltext0
 6035 09bd 0300     		.2byte	0x3
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 151


 6036 09bf 73       		.byte	0x73
 6037 09c0 7F       		.sleb128 -1
 6038 09c1 9F       		.byte	0x9f
 6039 09c2 00000000 		.4byte	0
 6040 09c6 00000000 		.4byte	0
 6041              	.LLST62:
 6042 09ca AE030000 		.4byte	.LFB16-.Ltext0
 6043 09ce B2030000 		.4byte	.LCFI15-.Ltext0
 6044 09d2 0200     		.2byte	0x2
 6045 09d4 7D       		.byte	0x7d
 6046 09d5 00       		.sleb128 0
 6047 09d6 B2030000 		.4byte	.LCFI15-.Ltext0
 6048 09da CE040000 		.4byte	.LCFI16-.Ltext0
 6049 09de 0200     		.2byte	0x2
 6050 09e0 7D       		.byte	0x7d
 6051 09e1 28       		.sleb128 40
 6052 09e2 CE040000 		.4byte	.LCFI16-.Ltext0
 6053 09e6 D8040000 		.4byte	.LFE16-.Ltext0
 6054 09ea 0200     		.2byte	0x2
 6055 09ec 7D       		.byte	0x7d
 6056 09ed 18       		.sleb128 24
 6057 09ee 00000000 		.4byte	0
 6058 09f2 00000000 		.4byte	0
 6059              	.LLST63:
 6060 09f6 AE030000 		.4byte	.LVL128-.Ltext0
 6061 09fa BC030000 		.4byte	.LVL130-.Ltext0
 6062 09fe 0100     		.2byte	0x1
 6063 0a00 50       		.byte	0x50
 6064 0a01 BC030000 		.4byte	.LVL130-.Ltext0
 6065 0a05 D2040000 		.4byte	.LVL173-.Ltext0
 6066 0a09 0100     		.2byte	0x1
 6067 0a0b 54       		.byte	0x54
 6068 0a0c D2040000 		.4byte	.LVL173-.Ltext0
 6069 0a10 D8040000 		.4byte	.LFE16-.Ltext0
 6070 0a14 0400     		.2byte	0x4
 6071 0a16 F3       		.byte	0xf3
 6072 0a17 01       		.uleb128 0x1
 6073 0a18 50       		.byte	0x50
 6074 0a19 9F       		.byte	0x9f
 6075 0a1a 00000000 		.4byte	0
 6076 0a1e 00000000 		.4byte	0
 6077              	.LLST64:
 6078 0a22 AE030000 		.4byte	.LVL128-.Ltext0
 6079 0a26 BC030000 		.4byte	.LVL130-.Ltext0
 6080 0a2a 0100     		.2byte	0x1
 6081 0a2c 51       		.byte	0x51
 6082 0a2d BC030000 		.4byte	.LVL130-.Ltext0
 6083 0a31 D2040000 		.4byte	.LVL173-.Ltext0
 6084 0a35 0100     		.2byte	0x1
 6085 0a37 57       		.byte	0x57
 6086 0a38 D2040000 		.4byte	.LVL173-.Ltext0
 6087 0a3c D8040000 		.4byte	.LFE16-.Ltext0
 6088 0a40 0400     		.2byte	0x4
 6089 0a42 F3       		.byte	0xf3
 6090 0a43 01       		.uleb128 0x1
 6091 0a44 51       		.byte	0x51
 6092 0a45 9F       		.byte	0x9f
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 152


 6093 0a46 00000000 		.4byte	0
 6094 0a4a 00000000 		.4byte	0
 6095              	.LLST65:
 6096 0a4e AE030000 		.4byte	.LVL128-.Ltext0
 6097 0a52 BC030000 		.4byte	.LVL130-.Ltext0
 6098 0a56 0100     		.2byte	0x1
 6099 0a58 52       		.byte	0x52
 6100 0a59 BC030000 		.4byte	.LVL130-.Ltext0
 6101 0a5d 56040000 		.4byte	.LVL149-.Ltext0
 6102 0a61 0200     		.2byte	0x2
 6103 0a63 91       		.byte	0x91
 6104 0a64 5C       		.sleb128 -36
 6105 0a65 56040000 		.4byte	.LVL149-.Ltext0
 6106 0a69 59040000 		.4byte	.LVL150-1-.Ltext0
 6107 0a6d 0200     		.2byte	0x2
 6108 0a6f 71       		.byte	0x71
 6109 0a70 00       		.sleb128 0
 6110 0a71 59040000 		.4byte	.LVL150-1-.Ltext0
 6111 0a75 D2040000 		.4byte	.LVL173-.Ltext0
 6112 0a79 0200     		.2byte	0x2
 6113 0a7b 91       		.byte	0x91
 6114 0a7c 5C       		.sleb128 -36
 6115 0a7d D2040000 		.4byte	.LVL173-.Ltext0
 6116 0a81 D8040000 		.4byte	.LFE16-.Ltext0
 6117 0a85 0200     		.2byte	0x2
 6118 0a87 7D       		.byte	0x7d
 6119 0a88 5C       		.sleb128 -36
 6120 0a89 00000000 		.4byte	0
 6121 0a8d 00000000 		.4byte	0
 6122              	.LLST66:
 6123 0a91 AE030000 		.4byte	.LVL128-.Ltext0
 6124 0a95 BC030000 		.4byte	.LVL130-.Ltext0
 6125 0a99 0100     		.2byte	0x1
 6126 0a9b 53       		.byte	0x53
 6127 0a9c BC030000 		.4byte	.LVL130-.Ltext0
 6128 0aa0 D2040000 		.4byte	.LVL173-.Ltext0
 6129 0aa4 0100     		.2byte	0x1
 6130 0aa6 58       		.byte	0x58
 6131 0aa7 D2040000 		.4byte	.LVL173-.Ltext0
 6132 0aab D8040000 		.4byte	.LFE16-.Ltext0
 6133 0aaf 0400     		.2byte	0x4
 6134 0ab1 F3       		.byte	0xf3
 6135 0ab2 01       		.uleb128 0x1
 6136 0ab3 53       		.byte	0x53
 6137 0ab4 9F       		.byte	0x9f
 6138 0ab5 00000000 		.4byte	0
 6139 0ab9 00000000 		.4byte	0
 6140              	.LLST67:
 6141 0abd AE030000 		.4byte	.LVL128-.Ltext0
 6142 0ac1 BC030000 		.4byte	.LVL130-.Ltext0
 6143 0ac5 0200     		.2byte	0x2
 6144 0ac7 30       		.byte	0x30
 6145 0ac8 9F       		.byte	0x9f
 6146 0ac9 BC030000 		.4byte	.LVL130-.Ltext0
 6147 0acd CA030000 		.4byte	.LVL133-.Ltext0
 6148 0ad1 0100     		.2byte	0x1
 6149 0ad3 56       		.byte	0x56
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 153


 6150 0ad4 14040000 		.4byte	.LVL141-.Ltext0
 6151 0ad8 26040000 		.4byte	.LVL144-.Ltext0
 6152 0adc 0100     		.2byte	0x1
 6153 0ade 56       		.byte	0x56
 6154 0adf 26040000 		.4byte	.LVL144-.Ltext0
 6155 0ae3 CA040000 		.4byte	.LVL172-.Ltext0
 6156 0ae7 0200     		.2byte	0x2
 6157 0ae9 31       		.byte	0x31
 6158 0aea 9F       		.byte	0x9f
 6159 0aeb 00000000 		.4byte	0
 6160 0aef 00000000 		.4byte	0
 6161              	.LLST68:
 6162 0af3 CA030000 		.4byte	.LVL133-.Ltext0
 6163 0af7 14040000 		.4byte	.LVL141-.Ltext0
 6164 0afb 0100     		.2byte	0x1
 6165 0afd 56       		.byte	0x56
 6166 0afe 00000000 		.4byte	0
 6167 0b02 00000000 		.4byte	0
 6168              	.LLST69:
 6169 0b06 B4030000 		.4byte	.LVL129-.Ltext0
 6170 0b0a BC030000 		.4byte	.LVL130-.Ltext0
 6171 0b0e 0100     		.2byte	0x1
 6172 0b10 50       		.byte	0x50
 6173 0b11 BC030000 		.4byte	.LVL130-.Ltext0
 6174 0b15 D2040000 		.4byte	.LVL173-.Ltext0
 6175 0b19 0100     		.2byte	0x1
 6176 0b1b 54       		.byte	0x54
 6177 0b1c D2040000 		.4byte	.LVL173-.Ltext0
 6178 0b20 D8040000 		.4byte	.LFE16-.Ltext0
 6179 0b24 0400     		.2byte	0x4
 6180 0b26 F3       		.byte	0xf3
 6181 0b27 01       		.uleb128 0x1
 6182 0b28 50       		.byte	0x50
 6183 0b29 9F       		.byte	0x9f
 6184 0b2a 00000000 		.4byte	0
 6185 0b2e 00000000 		.4byte	0
 6186              	.LLST70:
 6187 0b32 C2030000 		.4byte	.LVL132-.Ltext0
 6188 0b36 D8030000 		.4byte	.LVL135-.Ltext0
 6189 0b3a 0100     		.2byte	0x1
 6190 0b3c 55       		.byte	0x55
 6191 0b3d D8030000 		.4byte	.LVL135-.Ltext0
 6192 0b41 EC030000 		.4byte	.LVL137-.Ltext0
 6193 0b45 0300     		.2byte	0x3
 6194 0b47 75       		.byte	0x75
 6195 0b48 01       		.sleb128 1
 6196 0b49 9F       		.byte	0x9f
 6197 0b4a EC030000 		.4byte	.LVL137-.Ltext0
 6198 0b4e F6030000 		.4byte	.LVL138-.Ltext0
 6199 0b52 0100     		.2byte	0x1
 6200 0b54 55       		.byte	0x55
 6201 0b55 14040000 		.4byte	.LVL141-.Ltext0
 6202 0b59 16040000 		.4byte	.LVL142-.Ltext0
 6203 0b5d 0100     		.2byte	0x1
 6204 0b5f 55       		.byte	0x55
 6205 0b60 00000000 		.4byte	0
 6206 0b64 00000000 		.4byte	0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 154


 6207              	.LLST71:
 6208 0b68 5C040000 		.4byte	.LVL151-.Ltext0
 6209 0b6c 90040000 		.4byte	.LVL161-.Ltext0
 6210 0b70 0100     		.2byte	0x1
 6211 0b72 54       		.byte	0x54
 6212 0b73 94040000 		.4byte	.LVL162-.Ltext0
 6213 0b77 B2040000 		.4byte	.LVL166-.Ltext0
 6214 0b7b 0100     		.2byte	0x1
 6215 0b7d 54       		.byte	0x54
 6216 0b7e 00000000 		.4byte	0
 6217 0b82 00000000 		.4byte	0
 6218              	.LLST72:
 6219 0b86 62040000 		.4byte	.LVL153-.Ltext0
 6220 0b8a 90040000 		.4byte	.LVL161-.Ltext0
 6221 0b8e 0800     		.2byte	0x8
 6222 0b90 75       		.byte	0x75
 6223 0b91 00       		.sleb128 0
 6224 0b92 30       		.byte	0x30
 6225 0b93 29       		.byte	0x29
 6226 0b94 08       		.byte	0x8
 6227 0b95 FF       		.byte	0xff
 6228 0b96 1A       		.byte	0x1a
 6229 0b97 9F       		.byte	0x9f
 6230 0b98 94040000 		.4byte	.LVL162-.Ltext0
 6231 0b9c A6040000 		.4byte	.LVL163-.Ltext0
 6232 0ba0 0800     		.2byte	0x8
 6233 0ba2 75       		.byte	0x75
 6234 0ba3 00       		.sleb128 0
 6235 0ba4 30       		.byte	0x30
 6236 0ba5 29       		.byte	0x29
 6237 0ba6 08       		.byte	0x8
 6238 0ba7 FF       		.byte	0xff
 6239 0ba8 1A       		.byte	0x1a
 6240 0ba9 9F       		.byte	0x9f
 6241 0baa A6040000 		.4byte	.LVL163-.Ltext0
 6242 0bae B2040000 		.4byte	.LVL166-.Ltext0
 6243 0bb2 0200     		.2byte	0x2
 6244 0bb4 30       		.byte	0x30
 6245 0bb5 9F       		.byte	0x9f
 6246 0bb6 00000000 		.4byte	0
 6247 0bba 00000000 		.4byte	0
 6248              	.LLST73:
 6249 0bbe BC040000 		.4byte	.LVL168-.Ltext0
 6250 0bc2 CA040000 		.4byte	.LVL172-.Ltext0
 6251 0bc6 0100     		.2byte	0x1
 6252 0bc8 54       		.byte	0x54
 6253 0bc9 00000000 		.4byte	0
 6254 0bcd 00000000 		.4byte	0
 6255              	.LLST74:
 6256 0bd1 C2040000 		.4byte	.LVL170-.Ltext0
 6257 0bd5 CA040000 		.4byte	.LVL172-.Ltext0
 6258 0bd9 0800     		.2byte	0x8
 6259 0bdb 75       		.byte	0x75
 6260 0bdc 00       		.sleb128 0
 6261 0bdd 30       		.byte	0x30
 6262 0bde 29       		.byte	0x29
 6263 0bdf 08       		.byte	0x8
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 155


 6264 0be0 FF       		.byte	0xff
 6265 0be1 1A       		.byte	0x1a
 6266 0be2 9F       		.byte	0x9f
 6267 0be3 00000000 		.4byte	0
 6268 0be7 00000000 		.4byte	0
 6269              	.LLST75:
 6270 0beb D8040000 		.4byte	.LFB11-.Ltext0
 6271 0bef DA040000 		.4byte	.LCFI17-.Ltext0
 6272 0bf3 0200     		.2byte	0x2
 6273 0bf5 7D       		.byte	0x7d
 6274 0bf6 00       		.sleb128 0
 6275 0bf7 DA040000 		.4byte	.LCFI17-.Ltext0
 6276 0bfb 08050000 		.4byte	.LFE11-.Ltext0
 6277 0bff 0200     		.2byte	0x2
 6278 0c01 7D       		.byte	0x7d
 6279 0c02 10       		.sleb128 16
 6280 0c03 00000000 		.4byte	0
 6281 0c07 00000000 		.4byte	0
 6282              	.LLST76:
 6283 0c0b D8040000 		.4byte	.LVL174-.Ltext0
 6284 0c0f E3040000 		.4byte	.LVL175-1-.Ltext0
 6285 0c13 0100     		.2byte	0x1
 6286 0c15 50       		.byte	0x50
 6287 0c16 E3040000 		.4byte	.LVL175-1-.Ltext0
 6288 0c1a 08050000 		.4byte	.LFE11-.Ltext0
 6289 0c1e 0100     		.2byte	0x1
 6290 0c20 54       		.byte	0x54
 6291 0c21 00000000 		.4byte	0
 6292 0c25 00000000 		.4byte	0
 6293              	.LLST77:
 6294 0c29 D8040000 		.4byte	.LVL174-.Ltext0
 6295 0c2d E3040000 		.4byte	.LVL175-1-.Ltext0
 6296 0c31 0100     		.2byte	0x1
 6297 0c33 51       		.byte	0x51
 6298 0c34 E3040000 		.4byte	.LVL175-1-.Ltext0
 6299 0c38 08050000 		.4byte	.LFE11-.Ltext0
 6300 0c3c 0100     		.2byte	0x1
 6301 0c3e 55       		.byte	0x55
 6302 0c3f 00000000 		.4byte	0
 6303 0c43 00000000 		.4byte	0
 6304              	.LLST78:
 6305 0c47 F0040000 		.4byte	.LVL176-.Ltext0
 6306 0c4b F2040000 		.4byte	.LVL177-.Ltext0
 6307 0c4f 0200     		.2byte	0x2
 6308 0c51 31       		.byte	0x31
 6309 0c52 9F       		.byte	0x9f
 6310 0c53 FE040000 		.4byte	.LVL178-.Ltext0
 6311 0c57 08050000 		.4byte	.LFE11-.Ltext0
 6312 0c5b 0100     		.2byte	0x1
 6313 0c5d 50       		.byte	0x50
 6314 0c5e 00000000 		.4byte	0
 6315 0c62 00000000 		.4byte	0
 6316              	.LLST80:
 6317 0c66 08050000 		.4byte	.LFB17-.Ltext0
 6318 0c6a 0C050000 		.4byte	.LCFI18-.Ltext0
 6319 0c6e 0200     		.2byte	0x2
 6320 0c70 7D       		.byte	0x7d
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 156


 6321 0c71 00       		.sleb128 0
 6322 0c72 0C050000 		.4byte	.LCFI18-.Ltext0
 6323 0c76 6C050000 		.4byte	.LFE17-.Ltext0
 6324 0c7a 0200     		.2byte	0x2
 6325 0c7c 7D       		.byte	0x7d
 6326 0c7d 18       		.sleb128 24
 6327 0c7e 00000000 		.4byte	0
 6328 0c82 00000000 		.4byte	0
 6329              	.LLST81:
 6330 0c86 08050000 		.4byte	.LVL179-.Ltext0
 6331 0c8a 2F050000 		.4byte	.LVL182-1-.Ltext0
 6332 0c8e 0100     		.2byte	0x1
 6333 0c90 50       		.byte	0x50
 6334 0c91 2F050000 		.4byte	.LVL182-1-.Ltext0
 6335 0c95 62050000 		.4byte	.LVL187-.Ltext0
 6336 0c99 0100     		.2byte	0x1
 6337 0c9b 57       		.byte	0x57
 6338 0c9c 62050000 		.4byte	.LVL187-.Ltext0
 6339 0ca0 64050000 		.4byte	.LVL188-.Ltext0
 6340 0ca4 0100     		.2byte	0x1
 6341 0ca6 50       		.byte	0x50
 6342 0ca7 64050000 		.4byte	.LVL188-.Ltext0
 6343 0cab 6C050000 		.4byte	.LFE17-.Ltext0
 6344 0caf 0100     		.2byte	0x1
 6345 0cb1 57       		.byte	0x57
 6346 0cb2 00000000 		.4byte	0
 6347 0cb6 00000000 		.4byte	0
 6348              	.LLST82:
 6349 0cba 08050000 		.4byte	.LVL179-.Ltext0
 6350 0cbe 2F050000 		.4byte	.LVL182-1-.Ltext0
 6351 0cc2 0100     		.2byte	0x1
 6352 0cc4 51       		.byte	0x51
 6353 0cc5 2F050000 		.4byte	.LVL182-1-.Ltext0
 6354 0cc9 62050000 		.4byte	.LVL187-.Ltext0
 6355 0ccd 0400     		.2byte	0x4
 6356 0ccf F3       		.byte	0xf3
 6357 0cd0 01       		.uleb128 0x1
 6358 0cd1 51       		.byte	0x51
 6359 0cd2 9F       		.byte	0x9f
 6360 0cd3 62050000 		.4byte	.LVL187-.Ltext0
 6361 0cd7 64050000 		.4byte	.LVL188-.Ltext0
 6362 0cdb 0100     		.2byte	0x1
 6363 0cdd 51       		.byte	0x51
 6364 0cde 64050000 		.4byte	.LVL188-.Ltext0
 6365 0ce2 6C050000 		.4byte	.LFE17-.Ltext0
 6366 0ce6 0400     		.2byte	0x4
 6367 0ce8 F3       		.byte	0xf3
 6368 0ce9 01       		.uleb128 0x1
 6369 0cea 51       		.byte	0x51
 6370 0ceb 9F       		.byte	0x9f
 6371 0cec 00000000 		.4byte	0
 6372 0cf0 00000000 		.4byte	0
 6373              	.LLST83:
 6374 0cf4 08050000 		.4byte	.LVL179-.Ltext0
 6375 0cf8 2F050000 		.4byte	.LVL182-1-.Ltext0
 6376 0cfc 0100     		.2byte	0x1
 6377 0cfe 52       		.byte	0x52
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 157


 6378 0cff 2F050000 		.4byte	.LVL182-1-.Ltext0
 6379 0d03 62050000 		.4byte	.LVL187-.Ltext0
 6380 0d07 0100     		.2byte	0x1
 6381 0d09 58       		.byte	0x58
 6382 0d0a 62050000 		.4byte	.LVL187-.Ltext0
 6383 0d0e 64050000 		.4byte	.LVL188-.Ltext0
 6384 0d12 0100     		.2byte	0x1
 6385 0d14 52       		.byte	0x52
 6386 0d15 64050000 		.4byte	.LVL188-.Ltext0
 6387 0d19 6C050000 		.4byte	.LFE17-.Ltext0
 6388 0d1d 0100     		.2byte	0x1
 6389 0d1f 58       		.byte	0x58
 6390 0d20 00000000 		.4byte	0
 6391 0d24 00000000 		.4byte	0
 6392              	.LLST85:
 6393 0d28 32050000 		.4byte	.LVL183-.Ltext0
 6394 0d2c 58050000 		.4byte	.LVL185-.Ltext0
 6395 0d30 0100     		.2byte	0x1
 6396 0d32 55       		.byte	0x55
 6397 0d33 58050000 		.4byte	.LVL185-.Ltext0
 6398 0d37 5A050000 		.4byte	.LVL186-.Ltext0
 6399 0d3b 0300     		.2byte	0x3
 6400 0d3d 75       		.byte	0x75
 6401 0d3e 7F       		.sleb128 -1
 6402 0d3f 9F       		.byte	0x9f
 6403 0d40 00000000 		.4byte	0
 6404 0d44 00000000 		.4byte	0
 6405              	.LLST86:
 6406 0d48 6C050000 		.4byte	.LFB18-.Ltext0
 6407 0d4c 6E050000 		.4byte	.LCFI19-.Ltext0
 6408 0d50 0200     		.2byte	0x2
 6409 0d52 7D       		.byte	0x7d
 6410 0d53 00       		.sleb128 0
 6411 0d54 6E050000 		.4byte	.LCFI19-.Ltext0
 6412 0d58 9C050000 		.4byte	.LFE18-.Ltext0
 6413 0d5c 0200     		.2byte	0x2
 6414 0d5e 7D       		.byte	0x7d
 6415 0d5f 10       		.sleb128 16
 6416 0d60 00000000 		.4byte	0
 6417 0d64 00000000 		.4byte	0
 6418              	.LLST87:
 6419 0d68 6C050000 		.4byte	.LVL189-.Ltext0
 6420 0d6c 8D050000 		.4byte	.LVL192-1-.Ltext0
 6421 0d70 0100     		.2byte	0x1
 6422 0d72 50       		.byte	0x50
 6423 0d73 8D050000 		.4byte	.LVL192-1-.Ltext0
 6424 0d77 94050000 		.4byte	.LVL194-.Ltext0
 6425 0d7b 0100     		.2byte	0x1
 6426 0d7d 54       		.byte	0x54
 6427 0d7e 94050000 		.4byte	.LVL194-.Ltext0
 6428 0d82 96050000 		.4byte	.LVL195-.Ltext0
 6429 0d86 0100     		.2byte	0x1
 6430 0d88 50       		.byte	0x50
 6431 0d89 96050000 		.4byte	.LVL195-.Ltext0
 6432 0d8d 9C050000 		.4byte	.LFE18-.Ltext0
 6433 0d91 0100     		.2byte	0x1
 6434 0d93 54       		.byte	0x54
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 158


 6435 0d94 00000000 		.4byte	0
 6436 0d98 00000000 		.4byte	0
 6437              	.LLST88:
 6438 0d9c 6C050000 		.4byte	.LVL189-.Ltext0
 6439 0da0 8D050000 		.4byte	.LVL192-1-.Ltext0
 6440 0da4 0100     		.2byte	0x1
 6441 0da6 51       		.byte	0x51
 6442 0da7 8D050000 		.4byte	.LVL192-1-.Ltext0
 6443 0dab 94050000 		.4byte	.LVL194-.Ltext0
 6444 0daf 0400     		.2byte	0x4
 6445 0db1 F3       		.byte	0xf3
 6446 0db2 01       		.uleb128 0x1
 6447 0db3 51       		.byte	0x51
 6448 0db4 9F       		.byte	0x9f
 6449 0db5 94050000 		.4byte	.LVL194-.Ltext0
 6450 0db9 96050000 		.4byte	.LVL195-.Ltext0
 6451 0dbd 0100     		.2byte	0x1
 6452 0dbf 51       		.byte	0x51
 6453 0dc0 96050000 		.4byte	.LVL195-.Ltext0
 6454 0dc4 9C050000 		.4byte	.LFE18-.Ltext0
 6455 0dc8 0400     		.2byte	0x4
 6456 0dca F3       		.byte	0xf3
 6457 0dcb 01       		.uleb128 0x1
 6458 0dcc 51       		.byte	0x51
 6459 0dcd 9F       		.byte	0x9f
 6460 0dce 00000000 		.4byte	0
 6461 0dd2 00000000 		.4byte	0
 6462              	.LLST89:
 6463 0dd6 90050000 		.4byte	.LVL193-.Ltext0
 6464 0dda 94050000 		.4byte	.LVL194-.Ltext0
 6465 0dde 0200     		.2byte	0x2
 6466 0de0 31       		.byte	0x31
 6467 0de1 9F       		.byte	0x9f
 6468 0de2 96050000 		.4byte	.LVL195-.Ltext0
 6469 0de6 9C050000 		.4byte	.LFE18-.Ltext0
 6470 0dea 0100     		.2byte	0x1
 6471 0dec 50       		.byte	0x50
 6472 0ded 00000000 		.4byte	0
 6473 0df1 00000000 		.4byte	0
 6474              	.LLST90:
 6475 0df5 8A050000 		.4byte	.LVL191-.Ltext0
 6476 0df9 94050000 		.4byte	.LVL194-.Ltext0
 6477 0dfd 0100     		.2byte	0x1
 6478 0dff 56       		.byte	0x56
 6479 0e00 00000000 		.4byte	0
 6480 0e04 00000000 		.4byte	0
 6481              	.LLST92:
 6482 0e08 9C050000 		.4byte	.LFB19-.Ltext0
 6483 0e0c 9E050000 		.4byte	.LCFI20-.Ltext0
 6484 0e10 0200     		.2byte	0x2
 6485 0e12 7D       		.byte	0x7d
 6486 0e13 00       		.sleb128 0
 6487 0e14 9E050000 		.4byte	.LCFI20-.Ltext0
 6488 0e18 AE050000 		.4byte	.LFE19-.Ltext0
 6489 0e1c 0200     		.2byte	0x2
 6490 0e1e 7D       		.byte	0x7d
 6491 0e1f 08       		.sleb128 8
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 159


 6492 0e20 00000000 		.4byte	0
 6493 0e24 00000000 		.4byte	0
 6494              	.LLST93:
 6495 0e28 9C050000 		.4byte	.LVL196-.Ltext0
 6496 0e2c A3050000 		.4byte	.LVL197-1-.Ltext0
 6497 0e30 0100     		.2byte	0x1
 6498 0e32 50       		.byte	0x50
 6499 0e33 A3050000 		.4byte	.LVL197-1-.Ltext0
 6500 0e37 A6050000 		.4byte	.LVL198-.Ltext0
 6501 0e3b 0100     		.2byte	0x1
 6502 0e3d 54       		.byte	0x54
 6503 0e3e A6050000 		.4byte	.LVL198-.Ltext0
 6504 0e42 AE050000 		.4byte	.LFE19-.Ltext0
 6505 0e46 0400     		.2byte	0x4
 6506 0e48 F3       		.byte	0xf3
 6507 0e49 01       		.uleb128 0x1
 6508 0e4a 50       		.byte	0x50
 6509 0e4b 9F       		.byte	0x9f
 6510 0e4c 00000000 		.4byte	0
 6511 0e50 00000000 		.4byte	0
 6512              	.LLST94:
 6513 0e54 AE050000 		.4byte	.LFB20-.Ltext0
 6514 0e58 B0050000 		.4byte	.LCFI21-.Ltext0
 6515 0e5c 0200     		.2byte	0x2
 6516 0e5e 7D       		.byte	0x7d
 6517 0e5f 00       		.sleb128 0
 6518 0e60 B0050000 		.4byte	.LCFI21-.Ltext0
 6519 0e64 C4050000 		.4byte	.LFE20-.Ltext0
 6520 0e68 0200     		.2byte	0x2
 6521 0e6a 7D       		.byte	0x7d
 6522 0e6b 10       		.sleb128 16
 6523 0e6c 00000000 		.4byte	0
 6524 0e70 00000000 		.4byte	0
 6525              	.LLST95:
 6526 0e74 AE050000 		.4byte	.LVL200-.Ltext0
 6527 0e78 B5050000 		.4byte	.LVL202-1-.Ltext0
 6528 0e7c 0100     		.2byte	0x1
 6529 0e7e 50       		.byte	0x50
 6530 0e7f B5050000 		.4byte	.LVL202-1-.Ltext0
 6531 0e83 C4050000 		.4byte	.LFE20-.Ltext0
 6532 0e87 0100     		.2byte	0x1
 6533 0e89 55       		.byte	0x55
 6534 0e8a 00000000 		.4byte	0
 6535 0e8e 00000000 		.4byte	0
 6536              	.LLST96:
 6537 0e92 B2050000 		.4byte	.LVL201-.Ltext0
 6538 0e96 B5050000 		.4byte	.LVL202-1-.Ltext0
 6539 0e9a 0100     		.2byte	0x1
 6540 0e9c 50       		.byte	0x50
 6541 0e9d B5050000 		.4byte	.LVL202-1-.Ltext0
 6542 0ea1 C4050000 		.4byte	.LFE20-.Ltext0
 6543 0ea5 0100     		.2byte	0x1
 6544 0ea7 55       		.byte	0x55
 6545 0ea8 00000000 		.4byte	0
 6546 0eac 00000000 		.4byte	0
 6547              	.LLST97:
 6548 0eb0 C4050000 		.4byte	.LVL205-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 160


 6549 0eb4 C6050000 		.4byte	.LVL206-.Ltext0
 6550 0eb8 0100     		.2byte	0x1
 6551 0eba 50       		.byte	0x50
 6552 0ebb C6050000 		.4byte	.LVL206-.Ltext0
 6553 0ebf C8050000 		.4byte	.LFE21-.Ltext0
 6554 0ec3 0400     		.2byte	0x4
 6555 0ec5 F3       		.byte	0xf3
 6556 0ec6 01       		.uleb128 0x1
 6557 0ec7 50       		.byte	0x50
 6558 0ec8 9F       		.byte	0x9f
 6559 0ec9 00000000 		.4byte	0
 6560 0ecd 00000000 		.4byte	0
 6561              	.LLST98:
 6562 0ed1 C8050000 		.4byte	.LVL207-.Ltext0
 6563 0ed5 CB050000 		.4byte	.LVL208-1-.Ltext0
 6564 0ed9 0100     		.2byte	0x1
 6565 0edb 50       		.byte	0x50
 6566 0edc CB050000 		.4byte	.LVL208-1-.Ltext0
 6567 0ee0 CC050000 		.4byte	.LFE22-.Ltext0
 6568 0ee4 0400     		.2byte	0x4
 6569 0ee6 F3       		.byte	0xf3
 6570 0ee7 01       		.uleb128 0x1
 6571 0ee8 50       		.byte	0x50
 6572 0ee9 9F       		.byte	0x9f
 6573 0eea 00000000 		.4byte	0
 6574 0eee 00000000 		.4byte	0
 6575              	.LLST100:
 6576 0ef2 CC050000 		.4byte	.LVL209-.Ltext0
 6577 0ef6 CE050000 		.4byte	.LVL210-.Ltext0
 6578 0efa 0100     		.2byte	0x1
 6579 0efc 50       		.byte	0x50
 6580 0efd CE050000 		.4byte	.LVL210-.Ltext0
 6581 0f01 D6050000 		.4byte	.LFE27-.Ltext0
 6582 0f05 0400     		.2byte	0x4
 6583 0f07 F3       		.byte	0xf3
 6584 0f08 01       		.uleb128 0x1
 6585 0f09 50       		.byte	0x50
 6586 0f0a 9F       		.byte	0x9f
 6587 0f0b 00000000 		.4byte	0
 6588 0f0f 00000000 		.4byte	0
 6589              	.LLST101:
 6590 0f13 CE050000 		.4byte	.LVL210-.Ltext0
 6591 0f17 D2050000 		.4byte	.LVL211-.Ltext0
 6592 0f1b 0800     		.2byte	0x8
 6593 0f1d 70       		.byte	0x70
 6594 0f1e 00       		.sleb128 0
 6595 0f1f 30       		.byte	0x30
 6596 0f20 29       		.byte	0x29
 6597 0f21 08       		.byte	0x8
 6598 0f22 FF       		.byte	0xff
 6599 0f23 1A       		.byte	0x1a
 6600 0f24 9F       		.byte	0x9f
 6601 0f25 00000000 		.4byte	0
 6602 0f29 00000000 		.4byte	0
 6603              	.LLST102:
 6604 0f2d D6050000 		.4byte	.LVL212-.Ltext0
 6605 0f31 DA050000 		.4byte	.LVL214-.Ltext0
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 161


 6606 0f35 0100     		.2byte	0x1
 6607 0f37 50       		.byte	0x50
 6608 0f38 DA050000 		.4byte	.LVL214-.Ltext0
 6609 0f3c E2050000 		.4byte	.LFE29-.Ltext0
 6610 0f40 0400     		.2byte	0x4
 6611 0f42 F3       		.byte	0xf3
 6612 0f43 01       		.uleb128 0x1
 6613 0f44 50       		.byte	0x50
 6614 0f45 9F       		.byte	0x9f
 6615 0f46 00000000 		.4byte	0
 6616 0f4a 00000000 		.4byte	0
 6617              	.LLST103:
 6618 0f4e D8050000 		.4byte	.LVL213-.Ltext0
 6619 0f52 DA050000 		.4byte	.LVL214-.Ltext0
 6620 0f56 0A00     		.2byte	0xa
 6621 0f58 72       		.byte	0x72
 6622 0f59 00       		.sleb128 0
 6623 0f5a 70       		.byte	0x70
 6624 0f5b 3C       		.sleb128 60
 6625 0f5c 06       		.byte	0x6
 6626 0f5d 29       		.byte	0x29
 6627 0f5e 08       		.byte	0x8
 6628 0f5f FF       		.byte	0xff
 6629 0f60 1A       		.byte	0x1a
 6630 0f61 9F       		.byte	0x9f
 6631 0f62 DA050000 		.4byte	.LVL214-.Ltext0
 6632 0f66 DE050000 		.4byte	.LVL215-.Ltext0
 6633 0f6a 0900     		.2byte	0x9
 6634 0f6c 72       		.byte	0x72
 6635 0f6d 00       		.sleb128 0
 6636 0f6e 70       		.byte	0x70
 6637 0f6f 00       		.sleb128 0
 6638 0f70 29       		.byte	0x29
 6639 0f71 08       		.byte	0x8
 6640 0f72 FF       		.byte	0xff
 6641 0f73 1A       		.byte	0x1a
 6642 0f74 9F       		.byte	0x9f
 6643 0f75 DE050000 		.4byte	.LVL215-.Ltext0
 6644 0f79 E2050000 		.4byte	.LFE29-.Ltext0
 6645 0f7d 0D00     		.2byte	0xd
 6646 0f7f 72       		.byte	0x72
 6647 0f80 00       		.sleb128 0
 6648 0f81 F3       		.byte	0xf3
 6649 0f82 01       		.uleb128 0x1
 6650 0f83 50       		.byte	0x50
 6651 0f84 23       		.byte	0x23
 6652 0f85 3C       		.uleb128 0x3c
 6653 0f86 06       		.byte	0x6
 6654 0f87 29       		.byte	0x29
 6655 0f88 08       		.byte	0x8
 6656 0f89 FF       		.byte	0xff
 6657 0f8a 1A       		.byte	0x1a
 6658 0f8b 9F       		.byte	0x9f
 6659 0f8c 00000000 		.4byte	0
 6660 0f90 00000000 		.4byte	0
 6661              		.section	.debug_aranges,"",%progbits
 6662 0000 1C000000 		.4byte	0x1c
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 162


 6663 0004 0200     		.2byte	0x2
 6664 0006 00000000 		.4byte	.Ldebug_info0
 6665 000a 04       		.byte	0x4
 6666 000b 00       		.byte	0
 6667 000c 0000     		.2byte	0
 6668 000e 0000     		.2byte	0
 6669 0010 00000000 		.4byte	.Ltext0
 6670 0014 E2050000 		.4byte	.Letext0-.Ltext0
 6671 0018 00000000 		.4byte	0
 6672 001c 00000000 		.4byte	0
 6673              		.section	.debug_ranges,"",%progbits
 6674              	.Ldebug_ranges0:
 6675 0000 84010000 		.4byte	.LBB27-.Ltext0
 6676 0004 8A010000 		.4byte	.LBE27-.Ltext0
 6677 0008 8E010000 		.4byte	.LBB30-.Ltext0
 6678 000c 9C010000 		.4byte	.LBE30-.Ltext0
 6679 0010 00000000 		.4byte	0
 6680 0014 00000000 		.4byte	0
 6681              		.section	.debug_line,"",%progbits
 6682              	.Ldebug_line0:
 6683 0000 29040000 		.section	.debug_str,"MS",%progbits,1
 6683      0200D001 
 6683      00000201 
 6683      FB0E0D00 
 6683      01010101 
 6684              	.LASF31:
 6685 0000 75784E75 		.ascii	"uxNumberOfItems\000"
 6685      6D626572 
 6685      4F664974 
 6685      656D7300 
 6686              	.LASF117:
 6687 0010 76506F72 		.ascii	"vPortExitCritical\000"
 6687      74457869 
 6687      74437269 
 6687      74696361 
 6687      6C00
 6688              	.LASF105:
 6689 0022 78517565 		.ascii	"xQueueReceiveFromISR\000"
 6689      75655265 
 6689      63656976 
 6689      6546726F 
 6689      6D495352 
 6690              	.LASF48:
 6691 0037 78546173 		.ascii	"xTasksWaitingToReceive\000"
 6691      6B735761 
 6691      6974696E 
 6691      67546F52 
 6691      65636569 
 6692              	.LASF97:
 6693 004e 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 6693      67686572 
 6693      5072696F 
 6693      72697479 
 6693      5461736B 
 6694              	.LASF95:
 6695 0068 70784D75 		.ascii	"pxMutex\000"
 6695      74657800 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 163


 6696              	.LASF0:
 6697 0070 756E7369 		.ascii	"unsigned int\000"
 6697      676E6564 
 6697      20696E74 
 6697      00
 6698              	.LASF32:
 6699 007d 7078496E 		.ascii	"pxIndex\000"
 6699      64657800 
 6700              	.LASF128:
 6701 0085 76546173 		.ascii	"vTaskPriorityInherit\000"
 6701      6B507269 
 6701      6F726974 
 6701      79496E68 
 6701      65726974 
 6702              	.LASF36:
 6703 009a 7854494D 		.ascii	"xTIME_OUT\000"
 6703      455F4F55 
 6703      5400
 6704              	.LASF59:
 6705 00a4 70784E65 		.ascii	"pxNewQueue\000"
 6705      77517565 
 6705      756500
 6706              	.LASF27:
 6707 00af 784C4953 		.ascii	"xLIST_ITEM\000"
 6707      545F4954 
 6707      454D00
 6708              	.LASF121:
 6709 00ba 76546173 		.ascii	"vTaskSetTimeOutState\000"
 6709      6B536574 
 6709      54696D65 
 6709      4F757453 
 6709      74617465 
 6710              	.LASF47:
 6711 00cf 78546173 		.ascii	"xTasksWaitingToSend\000"
 6711      6B735761 
 6711      6974696E 
 6711      67546F53 
 6711      656E6400 
 6712              	.LASF109:
 6713 00e3 75785175 		.ascii	"uxQueueSpacesAvailable\000"
 6713      65756553 
 6713      70616365 
 6713      73417661 
 6713      696C6162 
 6714              	.LASF53:
 6715 00fa 6354784C 		.ascii	"cTxLock\000"
 6715      6F636B00 
 6716              	.LASF37:
 6717 0102 784F7665 		.ascii	"xOverflowCount\000"
 6717      72666C6F 
 6717      77436F75 
 6717      6E7400
 6718              	.LASF116:
 6719 0111 76506F72 		.ascii	"vPortEnterCritical\000"
 6719      74456E74 
 6719      65724372 
 6719      69746963 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 164


 6719      616C00
 6720              	.LASF42:
 6721 0124 75785265 		.ascii	"uxRecursiveCallCount\000"
 6721      63757273 
 6721      69766543 
 6721      616C6C43 
 6721      6F756E74 
 6722              	.LASF55:
 6723 0139 51756575 		.ascii	"Queue_t\000"
 6723      655F7400 
 6724              	.LASF85:
 6725 0141 78436F70 		.ascii	"xCopyPosition\000"
 6725      79506F73 
 6725      6974696F 
 6725      6E00
 6726              	.LASF108:
 6727 014f 75785265 		.ascii	"uxReturn\000"
 6727      7475726E 
 6727      00
 6728              	.LASF133:
 6729 0158 76517565 		.ascii	"vQueueDelete\000"
 6729      75654465 
 6729      6C657465 
 6729      00
 6730              	.LASF41:
 6731 0165 70635265 		.ascii	"pcReadFrom\000"
 6731      61644672 
 6731      6F6D00
 6732              	.LASF98:
 6733 0170 75785361 		.ascii	"uxSavedInterruptStatus\000"
 6733      76656449 
 6733      6E746572 
 6733      72757074 
 6733      53746174 
 6734              	.LASF62:
 6735 0187 70727649 		.ascii	"prvInitialiseNewQueue\000"
 6735      6E697469 
 6735      616C6973 
 6735      654E6577 
 6735      51756575 
 6736              	.LASF17:
 6737 019d 75696E74 		.ascii	"uint32_t\000"
 6737      33325F74 
 6737      00
 6738              	.LASF15:
 6739 01a6 696E7438 		.ascii	"int8_t\000"
 6739      5F7400
 6740              	.LASF92:
 6741 01ad 75784D75 		.ascii	"uxMutexSize\000"
 6741      74657853 
 6741      697A6500 
 6742              	.LASF87:
 6743 01b9 78596965 		.ascii	"xYieldRequired\000"
 6743      6C645265 
 6743      71756972 
 6743      656400
 6744              	.LASF60:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 165


 6745 01c8 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 6745      6967696E 
 6745      616C4241 
 6745      53455052 
 6745      4900
 6746              	.LASF72:
 6747 01da 78517565 		.ascii	"xQueue\000"
 6747      756500
 6748              	.LASF43:
 6749 01e1 51756575 		.ascii	"QueueDefinition\000"
 6749      65446566 
 6749      696E6974 
 6749      696F6E00 
 6750              	.LASF101:
 6751 01f1 78517565 		.ascii	"xQueueGenericReceive\000"
 6751      75654765 
 6751      6E657269 
 6751      63526563 
 6751      65697665 
 6752              	.LASF12:
 6753 0206 6C6F6E67 		.ascii	"long long unsigned int\000"
 6753      206C6F6E 
 6753      6720756E 
 6753      7369676E 
 6753      65642069 
 6754              	.LASF130:
 6755 021d 46726565 		.ascii	"FreeRTOS/Source/queue.c\000"
 6755      52544F53 
 6755      2F536F75 
 6755      7263652F 
 6755      71756575 
 6756              	.LASF100:
 6757 0235 70727649 		.ascii	"prvIsQueueEmpty\000"
 6757      73517565 
 6757      7565456D 
 6757      70747900 
 6758              	.LASF69:
 6759 0245 70764275 		.ascii	"pvBuffer\000"
 6759      66666572 
 6759      00
 6760              	.LASF23:
 6761 024e 70785072 		.ascii	"pxPrevious\000"
 6761      6576696F 
 6761      757300
 6762              	.LASF49:
 6763 0259 75784D65 		.ascii	"uxMessagesWaiting\000"
 6763      73736167 
 6763      65735761 
 6763      6974696E 
 6763      6700
 6764              	.LASF120:
 6765 026b 7076506F 		.ascii	"pvPortMalloc\000"
 6765      72744D61 
 6765      6C6C6F63 
 6765      00
 6766              	.LASF122:
 6767 0278 76546173 		.ascii	"vTaskSuspendAll\000"
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 166


 6767      6B537573 
 6767      70656E64 
 6767      416C6C00 
 6768              	.LASF86:
 6769 0288 78456E74 		.ascii	"xEntryTimeSet\000"
 6769      72795469 
 6769      6D655365 
 6769      7400
 6770              	.LASF1:
 6771 0296 73697A65 		.ascii	"size_t\000"
 6771      5F7400
 6772              	.LASF88:
 6773 029d 7854696D 		.ascii	"xTimeOut\000"
 6773      654F7574 
 6773      00
 6774              	.LASF80:
 6775 02a6 7848616E 		.ascii	"xHandle\000"
 6775      646C6500 
 6776              	.LASF28:
 6777 02ae 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 6777      495F4C49 
 6777      53545F49 
 6777      54454D00 
 6778              	.LASF30:
 6779 02be 784C4953 		.ascii	"xLIST\000"
 6779      5400
 6780              	.LASF96:
 6781 02c4 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 6781      75654765 
 6781      6E657269 
 6781      6353656E 
 6781      6446726F 
 6782              	.LASF63:
 6783 02dd 76506F72 		.ascii	"vPortSetBASEPRI\000"
 6783      74536574 
 6783      42415345 
 6783      50524900 
 6784              	.LASF132:
 6785 02ed 70727643 		.ascii	"prvCopyDataToQueue\000"
 6785      6F707944 
 6785      61746154 
 6785      6F517565 
 6785      756500
 6786              	.LASF83:
 6787 0300 78517565 		.ascii	"xQueueGenericSend\000"
 6787      75654765 
 6787      6E657269 
 6787      6353656E 
 6787      6400
 6788              	.LASF124:
 6789 0312 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 6789      6B506C61 
 6789      63654F6E 
 6789      4576656E 
 6789      744C6973 
 6790              	.LASF127:
 6791 0328 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 167


 6791      736B496E 
 6791      6372656D 
 6791      656E744D 
 6791      75746578 
 6792              	.LASF51:
 6793 0346 75784974 		.ascii	"uxItemSize\000"
 6793      656D5369 
 6793      7A6500
 6794              	.LASF79:
 6795 0351 7578496E 		.ascii	"uxInitialCount\000"
 6795      69746961 
 6795      6C436F75 
 6795      6E7400
 6796              	.LASF113:
 6797 0360 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 6797      6B507269 
 6797      6F726974 
 6797      79446973 
 6797      696E6865 
 6798              	.LASF91:
 6799 0378 75784D75 		.ascii	"uxMutexLength\000"
 6799      7465784C 
 6799      656E6774 
 6799      6800
 6800              	.LASF14:
 6801 0386 63686172 		.ascii	"char\000"
 6801      00
 6802              	.LASF26:
 6803 038b 4C697374 		.ascii	"ListItem_t\000"
 6803      4974656D 
 6803      5F7400
 6804              	.LASF82:
 6805 0396 70727649 		.ascii	"prvIsQueueFull\000"
 6805      73517565 
 6805      75654675 
 6805      6C6C00
 6806              	.LASF61:
 6807 03a5 756C4E65 		.ascii	"ulNewBASEPRI\000"
 6807      77424153 
 6807      45505249 
 6807      00
 6808              	.LASF19:
 6809 03b2 55426173 		.ascii	"UBaseType_t\000"
 6809      65547970 
 6809      655F7400 
 6810              	.LASF99:
 6811 03be 78517565 		.ascii	"xQueueGiveFromISR\000"
 6811      75654769 
 6811      76654672 
 6811      6F6D4953 
 6811      5200
 6812              	.LASF40:
 6813 03d0 51756575 		.ascii	"QueueHandle_t\000"
 6813      6548616E 
 6813      646C655F 
 6813      7400
 6814              	.LASF33:
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 168


 6815 03de 784C6973 		.ascii	"xListEnd\000"
 6815      74456E64 
 6815      00
 6816              	.LASF110:
 6817 03e7 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 6817      6575654D 
 6817      65737361 
 6817      67657357 
 6817      61697469 
 6818              	.LASF29:
 6819 0405 4D696E69 		.ascii	"MiniListItem_t\000"
 6819      4C697374 
 6819      4974656D 
 6819      5F7400
 6820              	.LASF16:
 6821 0414 75696E74 		.ascii	"uint8_t\000"
 6821      385F7400 
 6822              	.LASF75:
 6823 041c 78517565 		.ascii	"xQueueGenericCreate\000"
 6823      75654765 
 6823      6E657269 
 6823      63437265 
 6823      61746500 
 6824              	.LASF90:
 6825 0430 78517565 		.ascii	"xQueueCreateMutex\000"
 6825      75654372 
 6825      65617465 
 6825      4D757465 
 6825      7800
 6826              	.LASF81:
 6827 0442 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 6827      72745261 
 6827      69736542 
 6827      41534550 
 6827      524900
 6828              	.LASF11:
 6829 0455 6C6F6E67 		.ascii	"long long int\000"
 6829      206C6F6E 
 6829      6720696E 
 6829      7400
 6830              	.LASF89:
 6831 0463 70727649 		.ascii	"prvInitialiseMutex\000"
 6831      6E697469 
 6831      616C6973 
 6831      654D7574 
 6831      657800
 6832              	.LASF18:
 6833 0476 42617365 		.ascii	"BaseType_t\000"
 6833      54797065 
 6833      5F7400
 6834              	.LASF57:
 6835 0481 70756351 		.ascii	"pucQueueStorage\000"
 6835      75657565 
 6835      53746F72 
 6835      61676500 
 6836              	.LASF94:
 6837 0491 784D7574 		.ascii	"xMutex\000"
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 169


 6837      657800
 6838              	.LASF38:
 6839 0498 7854696D 		.ascii	"xTimeOnEntering\000"
 6839      654F6E45 
 6839      6E746572 
 6839      696E6700 
 6840              	.LASF22:
 6841 04a8 70784E65 		.ascii	"pxNext\000"
 6841      787400
 6842              	.LASF73:
 6843 04af 784E6577 		.ascii	"xNewQueue\000"
 6843      51756575 
 6843      6500
 6844              	.LASF78:
 6845 04b9 75784D61 		.ascii	"uxMaxCount\000"
 6845      78436F75 
 6845      6E7400
 6846              	.LASF39:
 6847 04c4 54696D65 		.ascii	"TimeOut_t\000"
 6847      4F75745F 
 6847      7400
 6848              	.LASF103:
 6849 04ce 70634F72 		.ascii	"pcOriginalReadPosition\000"
 6849      6967696E 
 6849      616C5265 
 6849      6164506F 
 6849      73697469 
 6850              	.LASF35:
 6851 04e5 5461736B 		.ascii	"TaskHandle_t\000"
 6851      48616E64 
 6851      6C655F74 
 6851      00
 6852              	.LASF64:
 6853 04f2 756C4E65 		.ascii	"ulNewMaskValue\000"
 6853      774D6173 
 6853      6B56616C 
 6853      756500
 6854              	.LASF58:
 6855 0501 75635175 		.ascii	"ucQueueType\000"
 6855      65756554 
 6855      79706500 
 6856              	.LASF102:
 6857 050d 784A7573 		.ascii	"xJustPeeking\000"
 6857      74506565 
 6857      6B696E67 
 6857      00
 6858              	.LASF34:
 6859 051a 4C697374 		.ascii	"List_t\000"
 6859      5F7400
 6860              	.LASF46:
 6861 0521 70635772 		.ascii	"pcWriteTo\000"
 6861      69746554 
 6861      6F00
 6862              	.LASF20:
 6863 052b 5469636B 		.ascii	"TickType_t\000"
 6863      54797065 
 6863      5F7400
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 170


 6864              	.LASF2:
 6865 0536 5F5F696E 		.ascii	"__int8_t\000"
 6865      74385F74 
 6865      00
 6866              	.LASF56:
 6867 053f 75785175 		.ascii	"uxQueueLength\000"
 6867      6575654C 
 6867      656E6774 
 6867      6800
 6868              	.LASF104:
 6869 054d 78517565 		.ascii	"xQueueTakeMutexRecursive\000"
 6869      75655461 
 6869      6B654D75 
 6869      74657852 
 6869      65637572 
 6870              	.LASF25:
 6871 0566 7076436F 		.ascii	"pvContainer\000"
 6871      6E746169 
 6871      6E657200 
 6872              	.LASF50:
 6873 0572 75784C65 		.ascii	"uxLength\000"
 6873      6E677468 
 6873      00
 6874              	.LASF6:
 6875 057b 73686F72 		.ascii	"short int\000"
 6875      7420696E 
 6875      7400
 6876              	.LASF21:
 6877 0585 78497465 		.ascii	"xItemValue\000"
 6877      6D56616C 
 6877      756500
 6878              	.LASF8:
 6879 0590 6C6F6E67 		.ascii	"long int\000"
 6879      20696E74 
 6879      00
 6880              	.LASF76:
 6881 0599 78517565 		.ascii	"xQueueSizeInBytes\000"
 6881      75655369 
 6881      7A65496E 
 6881      42797465 
 6881      7300
 6882              	.LASF125:
 6883 05ab 78546173 		.ascii	"xTaskResumeAll\000"
 6883      6B526573 
 6883      756D6541 
 6883      6C6C00
 6884              	.LASF66:
 6885 05ba 70764974 		.ascii	"pvItemToQueue\000"
 6885      656D546F 
 6885      51756575 
 6885      6500
 6886              	.LASF123:
 6887 05c8 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 6887      6B436865 
 6887      636B466F 
 6887      7254696D 
 6887      654F7574 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 171


 6888              	.LASF134:
 6889 05dd 76506F72 		.ascii	"vPortFree\000"
 6889      74467265 
 6889      6500
 6890              	.LASF112:
 6891 05e7 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 6891      75654973 
 6891      51756575 
 6891      6546756C 
 6891      6C46726F 
 6892              	.LASF107:
 6893 0600 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 6893      6575654D 
 6893      65737361 
 6893      67657357 
 6893      61697469 
 6894              	.LASF45:
 6895 0617 70635461 		.ascii	"pcTail\000"
 6895      696C00
 6896              	.LASF4:
 6897 061e 5F5F7569 		.ascii	"__uint8_t\000"
 6897      6E74385F 
 6897      7400
 6898              	.LASF65:
 6899 0628 70785175 		.ascii	"pxQueue\000"
 6899      65756500 
 6900              	.LASF129:
 6901 0630 474E5520 		.ascii	"GNU C 4.9.3 20150529 (release) [ARM/embedded-4_9-br"
 6901      4320342E 
 6901      392E3320 
 6901      32303135 
 6901      30353239 
 6902 0663 616E6368 		.ascii	"anch revision 227977] -mcpu=cortex-m3 -mthumb -gdwa"
 6902      20726576 
 6902      6973696F 
 6902      6E203232 
 6902      37393737 
 6903 0696 72662D32 		.ascii	"rf-2 -Os -fomit-frame-pointer\000"
 6903      202D4F73 
 6903      202D666F 
 6903      6D69742D 
 6903      6672616D 
 6904              	.LASF68:
 6905 06b4 78526574 		.ascii	"xReturn\000"
 6905      75726E00 
 6906              	.LASF13:
 6907 06bc 73697A65 		.ascii	"sizetype\000"
 6907      74797065 
 6907      00
 6908              	.LASF115:
 6909 06c5 76546173 		.ascii	"vTaskMissedYield\000"
 6909      6B4D6973 
 6909      73656459 
 6909      69656C64 
 6909      00
 6910              	.LASF10:
 6911 06d6 6C6F6E67 		.ascii	"long unsigned int\000"
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 172


 6911      20756E73 
 6911      69676E65 
 6911      6420696E 
 6911      7400
 6912              	.LASF131:
 6913 06e8 2F557365 		.ascii	"/Users/ingamedeo/Downloads/STM32F103ZET6FreeRTOS\000"
 6913      72732F69 
 6913      6E67616D 
 6913      6564656F 
 6913      2F446F77 
 6914              	.LASF106:
 6915 0719 78517565 		.ascii	"xQueuePeekFromISR\000"
 6915      75655065 
 6915      656B4672 
 6915      6F6D4953 
 6915      5200
 6916              	.LASF5:
 6917 072b 756E7369 		.ascii	"unsigned char\000"
 6917      676E6564 
 6917      20636861 
 6917      7200
 6918              	.LASF9:
 6919 0739 5F5F7569 		.ascii	"__uint32_t\000"
 6919      6E743332 
 6919      5F7400
 6920              	.LASF119:
 6921 0744 764C6973 		.ascii	"vListInitialise\000"
 6921      74496E69 
 6921      7469616C 
 6921      69736500 
 6922              	.LASF70:
 6923 0754 70727643 		.ascii	"prvCopyDataFromQueue\000"
 6923      6F707944 
 6923      61746146 
 6923      726F6D51 
 6923      75657565 
 6924              	.LASF84:
 6925 0769 78546963 		.ascii	"xTicksToWait\000"
 6925      6B73546F 
 6925      57616974 
 6925      00
 6926              	.LASF24:
 6927 0776 70764F77 		.ascii	"pvOwner\000"
 6927      6E657200 
 6928              	.LASF126:
 6929 077e 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 6929      6B476574 
 6929      43757272 
 6929      656E7454 
 6929      61736B48 
 6930              	.LASF44:
 6931 0798 70634865 		.ascii	"pcHead\000"
 6931      616400
 6932              	.LASF93:
 6933 079f 78517565 		.ascii	"xQueueGiveMutexRecursive\000"
 6933      75654769 
 6933      76654D75 
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 173


 6933      74657852 
 6933      65637572 
 6934              	.LASF71:
 6935 07b8 70727655 		.ascii	"prvUnlockQueue\000"
 6935      6E6C6F63 
 6935      6B517565 
 6935      756500
 6936              	.LASF74:
 6937 07c7 78517565 		.ascii	"xQueueGenericReset\000"
 6937      75654765 
 6937      6E657269 
 6937      63526573 
 6937      657400
 6938              	.LASF111:
 6939 07da 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 6939      75654973 
 6939      51756575 
 6939      65456D70 
 6939      74794672 
 6940              	.LASF3:
 6941 07f4 7369676E 		.ascii	"signed char\000"
 6941      65642063 
 6941      68617200 
 6942              	.LASF7:
 6943 0800 73686F72 		.ascii	"short unsigned int\000"
 6943      7420756E 
 6943      7369676E 
 6943      65642069 
 6943      6E7400
 6944              	.LASF118:
 6945 0813 6D656D63 		.ascii	"memcpy\000"
 6945      707900
 6946              	.LASF54:
 6947 081a 78515545 		.ascii	"xQUEUE\000"
 6947      554500
 6948              	.LASF67:
 6949 0821 78506F73 		.ascii	"xPosition\000"
 6949      6974696F 
 6949      6E00
 6950              	.LASF52:
 6951 082b 6352784C 		.ascii	"cRxLock\000"
 6951      6F636B00 
 6952              	.LASF114:
 6953 0833 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 6953      6B52656D 
 6953      6F766546 
 6953      726F6D45 
 6953      76656E74 
 6954              	.LASF77:
 6955 084c 78517565 		.ascii	"xQueueCreateCountingSemaphore\000"
 6955      75654372 
 6955      65617465 
 6955      436F756E 
 6955      74696E67 
 6956              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150529 (release) [ARM/embedded-4_9-br
ARM GAS  /var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s 			page 174


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:73     .text:0000000000000000 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:77     .text:0000000000000000 prvCopyDataToQueue
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:203    .text:0000000000000070 prvCopyDataFromQueue
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:260    .text:0000000000000098 prvUnlockQueue
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:368    .text:0000000000000100 xQueueGenericReset
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:456    .text:0000000000000168 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:460    .text:000000000000016c $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:465    .text:000000000000016c xQueueGenericCreate
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:548    .text:00000000000001a0 xQueueCreateCountingSemaphore
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:584    .text:00000000000001b2 xQueueGenericSend
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:783    .text:00000000000002a4 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:787    .text:00000000000002a8 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:792    .text:00000000000002a8 xQueueCreateMutex
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:843    .text:00000000000002cc xQueueGiveMutexRecursive
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:898    .text:00000000000002f6 xQueueGenericSendFromISR
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:1009   .text:0000000000000358 xQueueGiveFromISR
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:1119   .text:00000000000003ae xQueueGenericReceive
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:1376   .text:00000000000004d4 $d
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:1380   .text:00000000000004d8 $t
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:1385   .text:00000000000004d8 xQueueTakeMutexRecursive
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:1444   .text:0000000000000508 xQueueReceiveFromISR
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:1554   .text:000000000000056c xQueuePeekFromISR
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:1625   .text:000000000000059c uxQueueMessagesWaiting
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:1659   .text:00000000000005ae uxQueueSpacesAvailable
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:1698   .text:00000000000005c4 uxQueueMessagesWaitingFromISR
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:1719   .text:00000000000005c8 vQueueDelete
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:1738   .text:00000000000005cc xQueueIsQueueEmptyFromISR
/var/folders/yt/6z6x8bjn5sjf5fbb45bk5m4c0000gn/T//ccJqLDBG.s:1762   .text:00000000000005d6 xQueueIsQueueFullFromISR
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
xTaskPriorityDisinherit
memcpy
vPortEnterCritical
xTaskRemoveFromEventList
vTaskMissedYield
vPortExitCritical
vListInitialise
pvPortMalloc
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
xTaskGetCurrentTaskHandle
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
vPortFree
